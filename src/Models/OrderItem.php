<?php
/**
 * OrderItem
 *
 * PHP version 5
 *
 * @category Class
 * @package  Flipdish\\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Flipdish Open API v1.0
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.19
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Flipdish\\Client\Models;

use \ArrayAccess;
use \Flipdish\\Client\ObjectSerializer;

/**
 * OrderItem Class Doc Comment
 *
 * @category Class
 * @description Order item
 * @package  Flipdish\\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class OrderItem implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'OrderItem';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'order_item_options' => '\Flipdish\\Client\Models\OrderItemOption[]',
        'metadata' => 'map[string,string]',
        'menu_item_public_id' => 'string',
        'menu_section_name' => 'string',
        'menu_section_display_order' => 'int',
        'name' => 'string',
        'description' => 'string',
        'price' => 'double',
        'price_including_option_set_items' => 'double',
        'menu_item_id' => 'int',
        'menu_item_display_order' => 'int',
        'is_available' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'order_item_options' => null,
        'metadata' => null,
        'menu_item_public_id' => 'uuid',
        'menu_section_name' => null,
        'menu_section_display_order' => 'int32',
        'name' => null,
        'description' => null,
        'price' => 'double',
        'price_including_option_set_items' => 'double',
        'menu_item_id' => 'int32',
        'menu_item_display_order' => 'int32',
        'is_available' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'order_item_options' => 'OrderItemOptions',
        'metadata' => 'Metadata',
        'menu_item_public_id' => 'MenuItemPublicId',
        'menu_section_name' => 'MenuSectionName',
        'menu_section_display_order' => 'MenuSectionDisplayOrder',
        'name' => 'Name',
        'description' => 'Description',
        'price' => 'Price',
        'price_including_option_set_items' => 'PriceIncludingOptionSetItems',
        'menu_item_id' => 'MenuItemId',
        'menu_item_display_order' => 'MenuItemDisplayOrder',
        'is_available' => 'IsAvailable'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'order_item_options' => 'setOrderItemOptions',
        'metadata' => 'setMetadata',
        'menu_item_public_id' => 'setMenuItemPublicId',
        'menu_section_name' => 'setMenuSectionName',
        'menu_section_display_order' => 'setMenuSectionDisplayOrder',
        'name' => 'setName',
        'description' => 'setDescription',
        'price' => 'setPrice',
        'price_including_option_set_items' => 'setPriceIncludingOptionSetItems',
        'menu_item_id' => 'setMenuItemId',
        'menu_item_display_order' => 'setMenuItemDisplayOrder',
        'is_available' => 'setIsAvailable'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'order_item_options' => 'getOrderItemOptions',
        'metadata' => 'getMetadata',
        'menu_item_public_id' => 'getMenuItemPublicId',
        'menu_section_name' => 'getMenuSectionName',
        'menu_section_display_order' => 'getMenuSectionDisplayOrder',
        'name' => 'getName',
        'description' => 'getDescription',
        'price' => 'getPrice',
        'price_including_option_set_items' => 'getPriceIncludingOptionSetItems',
        'menu_item_id' => 'getMenuItemId',
        'menu_item_display_order' => 'getMenuItemDisplayOrder',
        'is_available' => 'getIsAvailable'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['order_item_options'] = isset($data['order_item_options']) ? $data['order_item_options'] : null;
        $this->container['metadata'] = isset($data['metadata']) ? $data['metadata'] : null;
        $this->container['menu_item_public_id'] = isset($data['menu_item_public_id']) ? $data['menu_item_public_id'] : null;
        $this->container['menu_section_name'] = isset($data['menu_section_name']) ? $data['menu_section_name'] : null;
        $this->container['menu_section_display_order'] = isset($data['menu_section_display_order']) ? $data['menu_section_display_order'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['price'] = isset($data['price']) ? $data['price'] : null;
        $this->container['price_including_option_set_items'] = isset($data['price_including_option_set_items']) ? $data['price_including_option_set_items'] : null;
        $this->container['menu_item_id'] = isset($data['menu_item_id']) ? $data['menu_item_id'] : null;
        $this->container['menu_item_display_order'] = isset($data['menu_item_display_order']) ? $data['menu_item_display_order'] : null;
        $this->container['is_available'] = isset($data['is_available']) ? $data['is_available'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets order_item_options
     *
     * @return \Flipdish\\Client\Models\OrderItemOption[]
     */
    public function getOrderItemOptions()
    {
        return $this->container['order_item_options'];
    }

    /**
     * Sets order_item_options
     *
     * @param \Flipdish\\Client\Models\OrderItemOption[] $order_item_options Option list
     *
     * @return $this
     */
    public function setOrderItemOptions($order_item_options)
    {
        $this->container['order_item_options'] = $order_item_options;

        return $this;
    }

    /**
     * Gets metadata
     *
     * @return map[string,string]
     */
    public function getMetadata()
    {
        return $this->container['metadata'];
    }

    /**
     * Sets metadata
     *
     * @param map[string,string] $metadata Metadata
     *
     * @return $this
     */
    public function setMetadata($metadata)
    {
        $this->container['metadata'] = $metadata;

        return $this;
    }

    /**
     * Gets menu_item_public_id
     *
     * @return string
     */
    public function getMenuItemPublicId()
    {
        return $this->container['menu_item_public_id'];
    }

    /**
     * Sets menu_item_public_id
     *
     * @param string $menu_item_public_id Public id of the Menu Item
     *
     * @return $this
     */
    public function setMenuItemPublicId($menu_item_public_id)
    {
        $this->container['menu_item_public_id'] = $menu_item_public_id;

        return $this;
    }

    /**
     * Gets menu_section_name
     *
     * @return string
     */
    public function getMenuSectionName()
    {
        return $this->container['menu_section_name'];
    }

    /**
     * Sets menu_section_name
     *
     * @param string $menu_section_name Menu section name
     *
     * @return $this
     */
    public function setMenuSectionName($menu_section_name)
    {
        $this->container['menu_section_name'] = $menu_section_name;

        return $this;
    }

    /**
     * Gets menu_section_display_order
     *
     * @return int
     */
    public function getMenuSectionDisplayOrder()
    {
        return $this->container['menu_section_display_order'];
    }

    /**
     * Sets menu_section_display_order
     *
     * @param int $menu_section_display_order Menu section display order
     *
     * @return $this
     */
    public function setMenuSectionDisplayOrder($menu_section_display_order)
    {
        $this->container['menu_section_display_order'] = $menu_section_display_order;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name Name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description Description
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets price
     *
     * @return double
     */
    public function getPrice()
    {
        return $this->container['price'];
    }

    /**
     * Sets price
     *
     * @param double $price Price
     *
     * @return $this
     */
    public function setPrice($price)
    {
        $this->container['price'] = $price;

        return $this;
    }

    /**
     * Gets price_including_option_set_items
     *
     * @return double
     */
    public function getPriceIncludingOptionSetItems()
    {
        return $this->container['price_including_option_set_items'];
    }

    /**
     * Sets price_including_option_set_items
     *
     * @param double $price_including_option_set_items Price including option set items
     *
     * @return $this
     */
    public function setPriceIncludingOptionSetItems($price_including_option_set_items)
    {
        $this->container['price_including_option_set_items'] = $price_including_option_set_items;

        return $this;
    }

    /**
     * Gets menu_item_id
     *
     * @return int
     */
    public function getMenuItemId()
    {
        return $this->container['menu_item_id'];
    }

    /**
     * Sets menu_item_id
     *
     * @param int $menu_item_id Menu item identifier
     *
     * @return $this
     */
    public function setMenuItemId($menu_item_id)
    {
        $this->container['menu_item_id'] = $menu_item_id;

        return $this;
    }

    /**
     * Gets menu_item_display_order
     *
     * @return int
     */
    public function getMenuItemDisplayOrder()
    {
        return $this->container['menu_item_display_order'];
    }

    /**
     * Sets menu_item_display_order
     *
     * @param int $menu_item_display_order Menu item display order
     *
     * @return $this
     */
    public function setMenuItemDisplayOrder($menu_item_display_order)
    {
        $this->container['menu_item_display_order'] = $menu_item_display_order;

        return $this;
    }

    /**
     * Gets is_available
     *
     * @return bool
     */
    public function getIsAvailable()
    {
        return $this->container['is_available'];
    }

    /**
     * Sets is_available
     *
     * @param bool $is_available Is available
     *
     * @return $this
     */
    public function setIsAvailable($is_available)
    {
        $this->container['is_available'] = $is_available;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


