<?php
/**
 * GetReceiptByOrderIdQueryResponse
 *
 * PHP version 5
 *
 * @category Class
 * @package  Flipdish\\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Flipdish Open API v1.0
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.43
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Flipdish\\Client\Models;

use \ArrayAccess;
use \Flipdish\\Client\ObjectSerializer;

/**
 * GetReceiptByOrderIdQueryResponse Class Doc Comment
 *
 * @category Class
 * @package  Flipdish\\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class GetReceiptByOrderIdQueryResponse implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'GetReceiptByOrderIdQueryResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'previous_order' => '\Flipdish\\Client\Models\PreviousOrder',
        'deposit_return_fees_summary' => '\Flipdish\\Client\Models\DepositReturnFeesSummary[]',
        'ts_requested_for_local' => '\DateTime',
        'ts_order_placed_local' => '\DateTime',
        'logo_url' => 'string',
        'address' => 'string',
        'vat_number' => 'string',
        'payment_method_description' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'previous_order' => null,
        'deposit_return_fees_summary' => null,
        'ts_requested_for_local' => 'date-time',
        'ts_order_placed_local' => 'date-time',
        'logo_url' => null,
        'address' => null,
        'vat_number' => null,
        'payment_method_description' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'previous_order' => 'PreviousOrder',
        'deposit_return_fees_summary' => 'DepositReturnFeesSummary',
        'ts_requested_for_local' => 'TsRequestedForLocal',
        'ts_order_placed_local' => 'TsOrderPlacedLocal',
        'logo_url' => 'LogoUrl',
        'address' => 'Address',
        'vat_number' => 'VatNumber',
        'payment_method_description' => 'PaymentMethodDescription'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'previous_order' => 'setPreviousOrder',
        'deposit_return_fees_summary' => 'setDepositReturnFeesSummary',
        'ts_requested_for_local' => 'setTsRequestedForLocal',
        'ts_order_placed_local' => 'setTsOrderPlacedLocal',
        'logo_url' => 'setLogoUrl',
        'address' => 'setAddress',
        'vat_number' => 'setVatNumber',
        'payment_method_description' => 'setPaymentMethodDescription'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'previous_order' => 'getPreviousOrder',
        'deposit_return_fees_summary' => 'getDepositReturnFeesSummary',
        'ts_requested_for_local' => 'getTsRequestedForLocal',
        'ts_order_placed_local' => 'getTsOrderPlacedLocal',
        'logo_url' => 'getLogoUrl',
        'address' => 'getAddress',
        'vat_number' => 'getVatNumber',
        'payment_method_description' => 'getPaymentMethodDescription'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['previous_order'] = isset($data['previous_order']) ? $data['previous_order'] : null;
        $this->container['deposit_return_fees_summary'] = isset($data['deposit_return_fees_summary']) ? $data['deposit_return_fees_summary'] : null;
        $this->container['ts_requested_for_local'] = isset($data['ts_requested_for_local']) ? $data['ts_requested_for_local'] : null;
        $this->container['ts_order_placed_local'] = isset($data['ts_order_placed_local']) ? $data['ts_order_placed_local'] : null;
        $this->container['logo_url'] = isset($data['logo_url']) ? $data['logo_url'] : null;
        $this->container['address'] = isset($data['address']) ? $data['address'] : null;
        $this->container['vat_number'] = isset($data['vat_number']) ? $data['vat_number'] : null;
        $this->container['payment_method_description'] = isset($data['payment_method_description']) ? $data['payment_method_description'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets previous_order
     *
     * @return \Flipdish\\Client\Models\PreviousOrder
     */
    public function getPreviousOrder()
    {
        return $this->container['previous_order'];
    }

    /**
     * Sets previous_order
     *
     * @param \Flipdish\\Client\Models\PreviousOrder $previous_order previous_order
     *
     * @return $this
     */
    public function setPreviousOrder($previous_order)
    {
        $this->container['previous_order'] = $previous_order;

        return $this;
    }

    /**
     * Gets deposit_return_fees_summary
     *
     * @return \Flipdish\\Client\Models\DepositReturnFeesSummary[]
     */
    public function getDepositReturnFeesSummary()
    {
        return $this->container['deposit_return_fees_summary'];
    }

    /**
     * Sets deposit_return_fees_summary
     *
     * @param \Flipdish\\Client\Models\DepositReturnFeesSummary[] $deposit_return_fees_summary deposit_return_fees_summary
     *
     * @return $this
     */
    public function setDepositReturnFeesSummary($deposit_return_fees_summary)
    {
        $this->container['deposit_return_fees_summary'] = $deposit_return_fees_summary;

        return $this;
    }

    /**
     * Gets ts_requested_for_local
     *
     * @return \DateTime
     */
    public function getTsRequestedForLocal()
    {
        return $this->container['ts_requested_for_local'];
    }

    /**
     * Sets ts_requested_for_local
     *
     * @param \DateTime $ts_requested_for_local ts_requested_for_local
     *
     * @return $this
     */
    public function setTsRequestedForLocal($ts_requested_for_local)
    {
        $this->container['ts_requested_for_local'] = $ts_requested_for_local;

        return $this;
    }

    /**
     * Gets ts_order_placed_local
     *
     * @return \DateTime
     */
    public function getTsOrderPlacedLocal()
    {
        return $this->container['ts_order_placed_local'];
    }

    /**
     * Sets ts_order_placed_local
     *
     * @param \DateTime $ts_order_placed_local ts_order_placed_local
     *
     * @return $this
     */
    public function setTsOrderPlacedLocal($ts_order_placed_local)
    {
        $this->container['ts_order_placed_local'] = $ts_order_placed_local;

        return $this;
    }

    /**
     * Gets logo_url
     *
     * @return string
     */
    public function getLogoUrl()
    {
        return $this->container['logo_url'];
    }

    /**
     * Sets logo_url
     *
     * @param string $logo_url logo_url
     *
     * @return $this
     */
    public function setLogoUrl($logo_url)
    {
        $this->container['logo_url'] = $logo_url;

        return $this;
    }

    /**
     * Gets address
     *
     * @return string
     */
    public function getAddress()
    {
        return $this->container['address'];
    }

    /**
     * Sets address
     *
     * @param string $address address
     *
     * @return $this
     */
    public function setAddress($address)
    {
        $this->container['address'] = $address;

        return $this;
    }

    /**
     * Gets vat_number
     *
     * @return string
     */
    public function getVatNumber()
    {
        return $this->container['vat_number'];
    }

    /**
     * Sets vat_number
     *
     * @param string $vat_number vat_number
     *
     * @return $this
     */
    public function setVatNumber($vat_number)
    {
        $this->container['vat_number'] = $vat_number;

        return $this;
    }

    /**
     * Gets payment_method_description
     *
     * @return string
     */
    public function getPaymentMethodDescription()
    {
        return $this->container['payment_method_description'];
    }

    /**
     * Sets payment_method_description
     *
     * @param string $payment_method_description payment_method_description
     *
     * @return $this
     */
    public function setPaymentMethodDescription($payment_method_description)
    {
        $this->container['payment_method_description'] = $payment_method_description;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


