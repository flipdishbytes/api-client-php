<?php
/**
 * OAuthApp
 *
 * PHP version 5
 *
 * @category Class
 * @package  Flipdish\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Flipdish Open API v1.0
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.19
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Flipdish\Client\Models;

use \ArrayAccess;
use \Flipdish\Client\ObjectSerializer;

/**
 * OAuthApp Class Doc Comment
 *
 * @category Class
 * @description Oauth client (also knowns as &#39;app&#39;)
 * @package  Flipdish\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class OAuthApp implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'OAuthApp';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'oauth_app_id' => 'string',
        'oauth_app_name' => 'string',
        'owner_user_id' => 'int',
        'logo_uri' => 'string',
        'flow' => 'string',
        'refresh_token_usage' => 'string',
        'access_token_lifetime' => 'int',
        'absolute_refresh_token_lifetime' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'oauth_app_id' => null,
        'oauth_app_name' => null,
        'owner_user_id' => 'int32',
        'logo_uri' => null,
        'flow' => null,
        'refresh_token_usage' => null,
        'access_token_lifetime' => 'int32',
        'absolute_refresh_token_lifetime' => 'int32'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'oauth_app_id' => 'OauthAppId',
        'oauth_app_name' => 'OauthAppName',
        'owner_user_id' => 'OwnerUserId',
        'logo_uri' => 'LogoUri',
        'flow' => 'Flow',
        'refresh_token_usage' => 'RefreshTokenUsage',
        'access_token_lifetime' => 'AccessTokenLifetime',
        'absolute_refresh_token_lifetime' => 'AbsoluteRefreshTokenLifetime'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'oauth_app_id' => 'setOauthAppId',
        'oauth_app_name' => 'setOauthAppName',
        'owner_user_id' => 'setOwnerUserId',
        'logo_uri' => 'setLogoUri',
        'flow' => 'setFlow',
        'refresh_token_usage' => 'setRefreshTokenUsage',
        'access_token_lifetime' => 'setAccessTokenLifetime',
        'absolute_refresh_token_lifetime' => 'setAbsoluteRefreshTokenLifetime'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'oauth_app_id' => 'getOauthAppId',
        'oauth_app_name' => 'getOauthAppName',
        'owner_user_id' => 'getOwnerUserId',
        'logo_uri' => 'getLogoUri',
        'flow' => 'getFlow',
        'refresh_token_usage' => 'getRefreshTokenUsage',
        'access_token_lifetime' => 'getAccessTokenLifetime',
        'absolute_refresh_token_lifetime' => 'getAbsoluteRefreshTokenLifetime'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const FLOW_AUTHORIZATION_CODE = 'AuthorizationCode';
    const FLOW_IMPLICIT = 'Implicit';
    const FLOW_HYBRID = 'Hybrid';
    const FLOW_CLIENT_CREDENTIALS = 'ClientCredentials';
    const REFRESH_TOKEN_USAGE_RE_USE = 'ReUse';
    const REFRESH_TOKEN_USAGE_ONE_TIME_ONLY = 'OneTimeOnly';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getFlowAllowableValues()
    {
        return [
            self::FLOW_AUTHORIZATION_CODE,
            self::FLOW_IMPLICIT,
            self::FLOW_HYBRID,
            self::FLOW_CLIENT_CREDENTIALS,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getRefreshTokenUsageAllowableValues()
    {
        return [
            self::REFRESH_TOKEN_USAGE_RE_USE,
            self::REFRESH_TOKEN_USAGE_ONE_TIME_ONLY,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['oauth_app_id'] = isset($data['oauth_app_id']) ? $data['oauth_app_id'] : null;
        $this->container['oauth_app_name'] = isset($data['oauth_app_name']) ? $data['oauth_app_name'] : null;
        $this->container['owner_user_id'] = isset($data['owner_user_id']) ? $data['owner_user_id'] : null;
        $this->container['logo_uri'] = isset($data['logo_uri']) ? $data['logo_uri'] : null;
        $this->container['flow'] = isset($data['flow']) ? $data['flow'] : null;
        $this->container['refresh_token_usage'] = isset($data['refresh_token_usage']) ? $data['refresh_token_usage'] : null;
        $this->container['access_token_lifetime'] = isset($data['access_token_lifetime']) ? $data['access_token_lifetime'] : null;
        $this->container['absolute_refresh_token_lifetime'] = isset($data['absolute_refresh_token_lifetime']) ? $data['absolute_refresh_token_lifetime'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getFlowAllowableValues();
        if (!is_null($this->container['flow']) && !in_array($this->container['flow'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'flow', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getRefreshTokenUsageAllowableValues();
        if (!is_null($this->container['refresh_token_usage']) && !in_array($this->container['refresh_token_usage'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'refresh_token_usage', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets oauth_app_id
     *
     * @return string
     */
    public function getOauthAppId()
    {
        return $this->container['oauth_app_id'];
    }

    /**
     * Sets oauth_app_id
     *
     * @param string $oauth_app_id OAuth App Identifier
     *
     * @return $this
     */
    public function setOauthAppId($oauth_app_id)
    {
        $this->container['oauth_app_id'] = $oauth_app_id;

        return $this;
    }

    /**
     * Gets oauth_app_name
     *
     * @return string
     */
    public function getOauthAppName()
    {
        return $this->container['oauth_app_name'];
    }

    /**
     * Sets oauth_app_name
     *
     * @param string $oauth_app_name OAuth App Name
     *
     * @return $this
     */
    public function setOauthAppName($oauth_app_name)
    {
        $this->container['oauth_app_name'] = $oauth_app_name;

        return $this;
    }

    /**
     * Gets owner_user_id
     *
     * @return int
     */
    public function getOwnerUserId()
    {
        return $this->container['owner_user_id'];
    }

    /**
     * Sets owner_user_id
     *
     * @param int $owner_user_id OAuth App owner user identifier
     *
     * @return $this
     */
    public function setOwnerUserId($owner_user_id)
    {
        $this->container['owner_user_id'] = $owner_user_id;

        return $this;
    }

    /**
     * Gets logo_uri
     *
     * @return string
     */
    public function getLogoUri()
    {
        return $this->container['logo_uri'];
    }

    /**
     * Sets logo_uri
     *
     * @param string $logo_uri OAuth App logo uri
     *
     * @return $this
     */
    public function setLogoUri($logo_uri)
    {
        $this->container['logo_uri'] = $logo_uri;

        return $this;
    }

    /**
     * Gets flow
     *
     * @return string
     */
    public function getFlow()
    {
        return $this->container['flow'];
    }

    /**
     * Sets flow
     *
     * @param string $flow Supported OpenID Connect flows
     *
     * @return $this
     */
    public function setFlow($flow)
    {
        $allowedValues = $this->getFlowAllowableValues();
        if (!is_null($flow) && !in_array($flow, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'flow', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['flow'] = $flow;

        return $this;
    }

    /**
     * Gets refresh_token_usage
     *
     * @return string
     */
    public function getRefreshTokenUsage()
    {
        return $this->container['refresh_token_usage'];
    }

    /**
     * Sets refresh_token_usage
     *
     * @param string $refresh_token_usage ReUse: the refresh token handle will stay the same when refreshing tokens   OneTime: the refresh token handle will be updated when refreshing tokens
     *
     * @return $this
     */
    public function setRefreshTokenUsage($refresh_token_usage)
    {
        $allowedValues = $this->getRefreshTokenUsageAllowableValues();
        if (!is_null($refresh_token_usage) && !in_array($refresh_token_usage, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'refresh_token_usage', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['refresh_token_usage'] = $refresh_token_usage;

        return $this;
    }

    /**
     * Gets access_token_lifetime
     *
     * @return int
     */
    public function getAccessTokenLifetime()
    {
        return $this->container['access_token_lifetime'];
    }

    /**
     * Sets access_token_lifetime
     *
     * @param int $access_token_lifetime Timem it takes for the IdentityToken to expire in seconds
     *
     * @return $this
     */
    public function setAccessTokenLifetime($access_token_lifetime)
    {
        $this->container['access_token_lifetime'] = $access_token_lifetime;

        return $this;
    }

    /**
     * Gets absolute_refresh_token_lifetime
     *
     * @return int
     */
    public function getAbsoluteRefreshTokenLifetime()
    {
        return $this->container['absolute_refresh_token_lifetime'];
    }

    /**
     * Sets absolute_refresh_token_lifetime
     *
     * @param int $absolute_refresh_token_lifetime Maximum lifetime of a refresh token in seconds
     *
     * @return $this
     */
    public function setAbsoluteRefreshTokenLifetime($absolute_refresh_token_lifetime)
    {
        $this->container['absolute_refresh_token_lifetime'] = $absolute_refresh_token_lifetime;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


