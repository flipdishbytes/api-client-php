<?php
/**
 * Order
 *
 * PHP version 5
 *
 * @category Class
 * @package  Flipdish\\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Flipdish Open API v1.0
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.43
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Flipdish\\Client\Models;

use \ArrayAccess;
use \Flipdish\\Client\ObjectSerializer;

/**
 * Order Class Doc Comment
 *
 * @category Class
 * @description Order
 * @package  Flipdish\\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Order implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Order';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'store' => '\Flipdish\\Client\Models\StoreSummary',
        'customer' => '\Flipdish\\Client\Models\CustomerSummary',
        'voucher' => '\Flipdish\\Client\Models\OrderVoucherSummary',
        'fees' => '\Flipdish\\Client\Models\FeeSummary',
        'order_items' => '\Flipdish\\Client\Models\OrderItem[]',
        'delivery_location' => '\Flipdish\\Client\Models\DeliveryLocation',
        'customer_location' => '\Flipdish\\Client\Models\Coordinates',
        'masked_phone_number' => '\Flipdish\\Client\Models\MaskedPhoneNumber',
        'drop_off_location_id' => 'int',
        'drop_off_location' => 'string',
        'accepted_for' => '\DateTime',
        'in_fraud_zone' => 'bool',
        'unusual_high_value_order' => 'bool',
        'rejected_by_user_id' => 'int',
        'channel_order_id' => 'string',
        'channel_order_display_id' => 'string',
        'channel' => '\Flipdish\\Client\Models\Channel',
        'order_drop_off_location' => '\Flipdish\\Client\Models\OrderDropOffLocation',
        'fulfillment_status' => '\Flipdish\\Client\Models\OrderFulfillmentStatusBase',
        'order_batch_info' => '\Flipdish\\Client\Models\OrderBatchSummary',
        'created_campaign_voucher_id' => 'int',
        'order_id' => 'int',
        'local_order_id' => 'string',
        'delivery_type' => 'string',
        'pickup_location_type' => 'string',
        'table_service_catagory' => 'string',
        'tip_amount' => 'double',
        'delivery_amount' => 'double',
        'order_items_amount' => 'double',
        'service_charge_amount' => 'double',
        'service_charge_percentage' => 'double',
        'amount' => 'double',
        'processing_fee' => 'double',
        'payment_account_type' => 'string',
        'payment_account_description' => 'string',
        'order_state' => 'string',
        'is_pre_order' => 'bool',
        'placed_time' => '\DateTime',
        'requested_for_time' => '\DateTime',
        'chef_note' => 'string',
        'app_type' => 'string',
        'user_rating' => 'int',
        'payment_status' => 'string',
        'rejection_reason' => 'string',
        'refunded_amount' => 'double',
        'delivery_tracking_status' => 'string',
        'driver_id' => 'int',
        'total_tax' => 'double',
        'order_tracking_code' => 'string',
        'delivery_fee_area_id' => 'int',
        'receipt_code' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'store' => null,
        'customer' => null,
        'voucher' => null,
        'fees' => null,
        'order_items' => null,
        'delivery_location' => null,
        'customer_location' => null,
        'masked_phone_number' => null,
        'drop_off_location_id' => 'int32',
        'drop_off_location' => null,
        'accepted_for' => 'date-time',
        'in_fraud_zone' => null,
        'unusual_high_value_order' => null,
        'rejected_by_user_id' => 'int32',
        'channel_order_id' => null,
        'channel_order_display_id' => null,
        'channel' => null,
        'order_drop_off_location' => null,
        'fulfillment_status' => null,
        'order_batch_info' => null,
        'created_campaign_voucher_id' => 'int32',
        'order_id' => 'int32',
        'local_order_id' => null,
        'delivery_type' => null,
        'pickup_location_type' => null,
        'table_service_catagory' => null,
        'tip_amount' => 'double',
        'delivery_amount' => 'double',
        'order_items_amount' => 'double',
        'service_charge_amount' => 'double',
        'service_charge_percentage' => 'double',
        'amount' => 'double',
        'processing_fee' => 'double',
        'payment_account_type' => null,
        'payment_account_description' => null,
        'order_state' => null,
        'is_pre_order' => null,
        'placed_time' => 'date-time',
        'requested_for_time' => 'date-time',
        'chef_note' => null,
        'app_type' => null,
        'user_rating' => 'int32',
        'payment_status' => null,
        'rejection_reason' => null,
        'refunded_amount' => 'double',
        'delivery_tracking_status' => null,
        'driver_id' => 'int32',
        'total_tax' => 'double',
        'order_tracking_code' => null,
        'delivery_fee_area_id' => 'int32',
        'receipt_code' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'store' => 'Store',
        'customer' => 'Customer',
        'voucher' => 'Voucher',
        'fees' => 'Fees',
        'order_items' => 'OrderItems',
        'delivery_location' => 'DeliveryLocation',
        'customer_location' => 'CustomerLocation',
        'masked_phone_number' => 'MaskedPhoneNumber',
        'drop_off_location_id' => 'DropOffLocationId',
        'drop_off_location' => 'DropOffLocation',
        'accepted_for' => 'AcceptedFor',
        'in_fraud_zone' => 'InFraudZone',
        'unusual_high_value_order' => 'UnusualHighValueOrder',
        'rejected_by_user_id' => 'RejectedByUserId',
        'channel_order_id' => 'ChannelOrderId',
        'channel_order_display_id' => 'ChannelOrderDisplayId',
        'channel' => 'Channel',
        'order_drop_off_location' => 'OrderDropOffLocation',
        'fulfillment_status' => 'FulfillmentStatus',
        'order_batch_info' => 'OrderBatchInfo',
        'created_campaign_voucher_id' => 'CreatedCampaignVoucherId',
        'order_id' => 'OrderId',
        'local_order_id' => 'LocalOrderId',
        'delivery_type' => 'DeliveryType',
        'pickup_location_type' => 'PickupLocationType',
        'table_service_catagory' => 'TableServiceCatagory',
        'tip_amount' => 'TipAmount',
        'delivery_amount' => 'DeliveryAmount',
        'order_items_amount' => 'OrderItemsAmount',
        'service_charge_amount' => 'ServiceChargeAmount',
        'service_charge_percentage' => 'ServiceChargePercentage',
        'amount' => 'Amount',
        'processing_fee' => 'ProcessingFee',
        'payment_account_type' => 'PaymentAccountType',
        'payment_account_description' => 'PaymentAccountDescription',
        'order_state' => 'OrderState',
        'is_pre_order' => 'IsPreOrder',
        'placed_time' => 'PlacedTime',
        'requested_for_time' => 'RequestedForTime',
        'chef_note' => 'ChefNote',
        'app_type' => 'AppType',
        'user_rating' => 'UserRating',
        'payment_status' => 'PaymentStatus',
        'rejection_reason' => 'RejectionReason',
        'refunded_amount' => 'RefundedAmount',
        'delivery_tracking_status' => 'DeliveryTrackingStatus',
        'driver_id' => 'DriverId',
        'total_tax' => 'TotalTax',
        'order_tracking_code' => 'OrderTrackingCode',
        'delivery_fee_area_id' => 'DeliveryFeeAreaId',
        'receipt_code' => 'ReceiptCode'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'store' => 'setStore',
        'customer' => 'setCustomer',
        'voucher' => 'setVoucher',
        'fees' => 'setFees',
        'order_items' => 'setOrderItems',
        'delivery_location' => 'setDeliveryLocation',
        'customer_location' => 'setCustomerLocation',
        'masked_phone_number' => 'setMaskedPhoneNumber',
        'drop_off_location_id' => 'setDropOffLocationId',
        'drop_off_location' => 'setDropOffLocation',
        'accepted_for' => 'setAcceptedFor',
        'in_fraud_zone' => 'setInFraudZone',
        'unusual_high_value_order' => 'setUnusualHighValueOrder',
        'rejected_by_user_id' => 'setRejectedByUserId',
        'channel_order_id' => 'setChannelOrderId',
        'channel_order_display_id' => 'setChannelOrderDisplayId',
        'channel' => 'setChannel',
        'order_drop_off_location' => 'setOrderDropOffLocation',
        'fulfillment_status' => 'setFulfillmentStatus',
        'order_batch_info' => 'setOrderBatchInfo',
        'created_campaign_voucher_id' => 'setCreatedCampaignVoucherId',
        'order_id' => 'setOrderId',
        'local_order_id' => 'setLocalOrderId',
        'delivery_type' => 'setDeliveryType',
        'pickup_location_type' => 'setPickupLocationType',
        'table_service_catagory' => 'setTableServiceCatagory',
        'tip_amount' => 'setTipAmount',
        'delivery_amount' => 'setDeliveryAmount',
        'order_items_amount' => 'setOrderItemsAmount',
        'service_charge_amount' => 'setServiceChargeAmount',
        'service_charge_percentage' => 'setServiceChargePercentage',
        'amount' => 'setAmount',
        'processing_fee' => 'setProcessingFee',
        'payment_account_type' => 'setPaymentAccountType',
        'payment_account_description' => 'setPaymentAccountDescription',
        'order_state' => 'setOrderState',
        'is_pre_order' => 'setIsPreOrder',
        'placed_time' => 'setPlacedTime',
        'requested_for_time' => 'setRequestedForTime',
        'chef_note' => 'setChefNote',
        'app_type' => 'setAppType',
        'user_rating' => 'setUserRating',
        'payment_status' => 'setPaymentStatus',
        'rejection_reason' => 'setRejectionReason',
        'refunded_amount' => 'setRefundedAmount',
        'delivery_tracking_status' => 'setDeliveryTrackingStatus',
        'driver_id' => 'setDriverId',
        'total_tax' => 'setTotalTax',
        'order_tracking_code' => 'setOrderTrackingCode',
        'delivery_fee_area_id' => 'setDeliveryFeeAreaId',
        'receipt_code' => 'setReceiptCode'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'store' => 'getStore',
        'customer' => 'getCustomer',
        'voucher' => 'getVoucher',
        'fees' => 'getFees',
        'order_items' => 'getOrderItems',
        'delivery_location' => 'getDeliveryLocation',
        'customer_location' => 'getCustomerLocation',
        'masked_phone_number' => 'getMaskedPhoneNumber',
        'drop_off_location_id' => 'getDropOffLocationId',
        'drop_off_location' => 'getDropOffLocation',
        'accepted_for' => 'getAcceptedFor',
        'in_fraud_zone' => 'getInFraudZone',
        'unusual_high_value_order' => 'getUnusualHighValueOrder',
        'rejected_by_user_id' => 'getRejectedByUserId',
        'channel_order_id' => 'getChannelOrderId',
        'channel_order_display_id' => 'getChannelOrderDisplayId',
        'channel' => 'getChannel',
        'order_drop_off_location' => 'getOrderDropOffLocation',
        'fulfillment_status' => 'getFulfillmentStatus',
        'order_batch_info' => 'getOrderBatchInfo',
        'created_campaign_voucher_id' => 'getCreatedCampaignVoucherId',
        'order_id' => 'getOrderId',
        'local_order_id' => 'getLocalOrderId',
        'delivery_type' => 'getDeliveryType',
        'pickup_location_type' => 'getPickupLocationType',
        'table_service_catagory' => 'getTableServiceCatagory',
        'tip_amount' => 'getTipAmount',
        'delivery_amount' => 'getDeliveryAmount',
        'order_items_amount' => 'getOrderItemsAmount',
        'service_charge_amount' => 'getServiceChargeAmount',
        'service_charge_percentage' => 'getServiceChargePercentage',
        'amount' => 'getAmount',
        'processing_fee' => 'getProcessingFee',
        'payment_account_type' => 'getPaymentAccountType',
        'payment_account_description' => 'getPaymentAccountDescription',
        'order_state' => 'getOrderState',
        'is_pre_order' => 'getIsPreOrder',
        'placed_time' => 'getPlacedTime',
        'requested_for_time' => 'getRequestedForTime',
        'chef_note' => 'getChefNote',
        'app_type' => 'getAppType',
        'user_rating' => 'getUserRating',
        'payment_status' => 'getPaymentStatus',
        'rejection_reason' => 'getRejectionReason',
        'refunded_amount' => 'getRefundedAmount',
        'delivery_tracking_status' => 'getDeliveryTrackingStatus',
        'driver_id' => 'getDriverId',
        'total_tax' => 'getTotalTax',
        'order_tracking_code' => 'getOrderTrackingCode',
        'delivery_fee_area_id' => 'getDeliveryFeeAreaId',
        'receipt_code' => 'getReceiptCode'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const DELIVERY_TYPE_DELIVERY = 'Delivery';
    const DELIVERY_TYPE_PICKUP = 'Pickup';
    const PICKUP_LOCATION_TYPE_TAKE_OUT = 'TakeOut';
    const PICKUP_LOCATION_TYPE_TABLE_SERVICE = 'TableService';
    const PICKUP_LOCATION_TYPE_DINE_IN = 'DineIn';
    const TABLE_SERVICE_CATAGORY_GENERIC = 'Generic';
    const TABLE_SERVICE_CATAGORY_VILLA = 'Villa';
    const TABLE_SERVICE_CATAGORY_HOUSE = 'House';
    const TABLE_SERVICE_CATAGORY_ROOM = 'Room';
    const TABLE_SERVICE_CATAGORY_AREA = 'Area';
    const TABLE_SERVICE_CATAGORY_TABLE = 'Table';
    const TABLE_SERVICE_CATAGORY_PARKING_BAY = 'ParkingBay';
    const TABLE_SERVICE_CATAGORY_GATE = 'Gate';
    const TABLE_SERVICE_CATAGORY_DRIVE_THROUGH = 'DriveThrough';
    const TABLE_SERVICE_CATAGORY_TEAM = 'Team';
    const PAYMENT_ACCOUNT_TYPE_CARD = 'Card';
    const PAYMENT_ACCOUNT_TYPE_CASH = 'Cash';
    const PAYMENT_ACCOUNT_TYPE_IDEAL = 'Ideal';
    const PAYMENT_ACCOUNT_TYPE_BANCONTACT = 'Bancontact';
    const PAYMENT_ACCOUNT_TYPE_GIROPAY = 'Giropay';
    const PAYMENT_ACCOUNT_TYPE_EPS = 'Eps';
    const PAYMENT_ACCOUNT_TYPE_EMV = 'Emv';
    const PAYMENT_ACCOUNT_TYPE_PAY_PAL = 'PayPal';
    const PAYMENT_ACCOUNT_TYPE_PAY_GREEN = 'PayGreen';
    const PAYMENT_ACCOUNT_TYPE_GOOGLE_WALLET_TOKEN = 'GoogleWalletToken';
    const ORDER_STATE_CREATED = 'Created';
    const ORDER_STATE_PLACED_CAN_BE_CANCELLED = 'PlacedCanBeCancelled';
    const ORDER_STATE_READY_TO_PROCESS = 'ReadyToProcess';
    const ORDER_STATE_ACCEPTED_BY_RESTAURANT = 'AcceptedByRestaurant';
    const ORDER_STATE_DISPATCHED = 'Dispatched';
    const ORDER_STATE_DELIVERED = 'Delivered';
    const ORDER_STATE_CANCELLED = 'Cancelled';
    const ORDER_STATE_MANUAL_REVIEW = 'ManualReview';
    const ORDER_STATE_REJECTED_BY_STORE = 'RejectedByStore';
    const ORDER_STATE_REJECTED_BY_FLIPDISH = 'RejectedByFlipdish';
    const ORDER_STATE_REJECTED_AUTOMATICALLY = 'RejectedAutomatically';
    const ORDER_STATE_REJECTED_AFTER_BEING_ACCEPTED = 'RejectedAfterBeingAccepted';
    const ORDER_STATE_ACCEPTED_AND_REFUNDED = 'AcceptedAndRefunded';
    const APP_TYPE_UNKNOWN = 'Unknown';
    const APP_TYPE_IOS = 'Ios';
    const APP_TYPE_ANDROID = 'Android';
    const APP_TYPE_WEB = 'Web';
    const APP_TYPE_KIOSK = 'Kiosk';
    const APP_TYPE_POS = 'Pos';
    const APP_TYPE_TELEPHONE_CALL = 'TelephoneCall';
    const APP_TYPE_SMS = 'Sms';
    const APP_TYPE_PWA_ANDROID = 'PwaAndroid';
    const APP_TYPE_PWA_IOS = 'PwaIos';
    const APP_TYPE_GOOGLE = 'Google';
    const PAYMENT_STATUS_PAID = 'Paid';
    const PAYMENT_STATUS_UNPAID = 'Unpaid';
    const PAYMENT_STATUS_REFUNDED = 'Refunded';
    const PAYMENT_STATUS_PARTIALLY_REFUNDED = 'PartiallyRefunded';
    const PAYMENT_STATUS_DISPUTED = 'Disputed';
    const REJECTION_REASON_TOO_BUSY = 'TooBusy';
    const REJECTION_REASON_FOOD_UNAVAILABLE = 'FoodUnavailable';
    const REJECTION_REASON_UNABLE_TO_DELIVER = 'UnableToDeliver';
    const REJECTION_REASON_UNKNOWN_ADDRESS = 'UnknownAddress';
    const REJECTION_REASON_UNKNOWN_REASON = 'UnknownReason';
    const REJECTION_REASON_TOO_SOON = 'TooSoon';
    const REJECTION_REASON_TIME_UNAVAILABLE = 'TimeUnavailable';
    const REJECTION_REASON_DONT_DELIVER_TO_AREA = 'DontDeliverToArea';
    const REJECTION_REASON_STORE_UNCONTACTABLE = 'StoreUncontactable';
    const DELIVERY_TRACKING_STATUS_UNASSIGNED = 'Unassigned';
    const DELIVERY_TRACKING_STATUS_UNACCEPTED = 'Unaccepted';
    const DELIVERY_TRACKING_STATUS_ACCEPTED = 'Accepted';
    const DELIVERY_TRACKING_STATUS_CARRYING = 'Carrying';
    const DELIVERY_TRACKING_STATUS_ON_THE_WAY = 'OnTheWay';
    const DELIVERY_TRACKING_STATUS_ARRIVED_AT_LOCATION = 'ArrivedAtLocation';
    const DELIVERY_TRACKING_STATUS_DELIVERED = 'Delivered';
    const DELIVERY_TRACKING_STATUS_CANNOT_DELIVER = 'CannotDeliver';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDeliveryTypeAllowableValues()
    {
        return [
            self::DELIVERY_TYPE_DELIVERY,
            self::DELIVERY_TYPE_PICKUP,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPickupLocationTypeAllowableValues()
    {
        return [
            self::PICKUP_LOCATION_TYPE_TAKE_OUT,
            self::PICKUP_LOCATION_TYPE_TABLE_SERVICE,
            self::PICKUP_LOCATION_TYPE_DINE_IN,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTableServiceCatagoryAllowableValues()
    {
        return [
            self::TABLE_SERVICE_CATAGORY_GENERIC,
            self::TABLE_SERVICE_CATAGORY_VILLA,
            self::TABLE_SERVICE_CATAGORY_HOUSE,
            self::TABLE_SERVICE_CATAGORY_ROOM,
            self::TABLE_SERVICE_CATAGORY_AREA,
            self::TABLE_SERVICE_CATAGORY_TABLE,
            self::TABLE_SERVICE_CATAGORY_PARKING_BAY,
            self::TABLE_SERVICE_CATAGORY_GATE,
            self::TABLE_SERVICE_CATAGORY_DRIVE_THROUGH,
            self::TABLE_SERVICE_CATAGORY_TEAM,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPaymentAccountTypeAllowableValues()
    {
        return [
            self::PAYMENT_ACCOUNT_TYPE_CARD,
            self::PAYMENT_ACCOUNT_TYPE_CASH,
            self::PAYMENT_ACCOUNT_TYPE_IDEAL,
            self::PAYMENT_ACCOUNT_TYPE_BANCONTACT,
            self::PAYMENT_ACCOUNT_TYPE_GIROPAY,
            self::PAYMENT_ACCOUNT_TYPE_EPS,
            self::PAYMENT_ACCOUNT_TYPE_EMV,
            self::PAYMENT_ACCOUNT_TYPE_PAY_PAL,
            self::PAYMENT_ACCOUNT_TYPE_PAY_GREEN,
            self::PAYMENT_ACCOUNT_TYPE_GOOGLE_WALLET_TOKEN,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getOrderStateAllowableValues()
    {
        return [
            self::ORDER_STATE_CREATED,
            self::ORDER_STATE_PLACED_CAN_BE_CANCELLED,
            self::ORDER_STATE_READY_TO_PROCESS,
            self::ORDER_STATE_ACCEPTED_BY_RESTAURANT,
            self::ORDER_STATE_DISPATCHED,
            self::ORDER_STATE_DELIVERED,
            self::ORDER_STATE_CANCELLED,
            self::ORDER_STATE_MANUAL_REVIEW,
            self::ORDER_STATE_REJECTED_BY_STORE,
            self::ORDER_STATE_REJECTED_BY_FLIPDISH,
            self::ORDER_STATE_REJECTED_AUTOMATICALLY,
            self::ORDER_STATE_REJECTED_AFTER_BEING_ACCEPTED,
            self::ORDER_STATE_ACCEPTED_AND_REFUNDED,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAppTypeAllowableValues()
    {
        return [
            self::APP_TYPE_UNKNOWN,
            self::APP_TYPE_IOS,
            self::APP_TYPE_ANDROID,
            self::APP_TYPE_WEB,
            self::APP_TYPE_KIOSK,
            self::APP_TYPE_POS,
            self::APP_TYPE_TELEPHONE_CALL,
            self::APP_TYPE_SMS,
            self::APP_TYPE_PWA_ANDROID,
            self::APP_TYPE_PWA_IOS,
            self::APP_TYPE_GOOGLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPaymentStatusAllowableValues()
    {
        return [
            self::PAYMENT_STATUS_PAID,
            self::PAYMENT_STATUS_UNPAID,
            self::PAYMENT_STATUS_REFUNDED,
            self::PAYMENT_STATUS_PARTIALLY_REFUNDED,
            self::PAYMENT_STATUS_DISPUTED,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getRejectionReasonAllowableValues()
    {
        return [
            self::REJECTION_REASON_TOO_BUSY,
            self::REJECTION_REASON_FOOD_UNAVAILABLE,
            self::REJECTION_REASON_UNABLE_TO_DELIVER,
            self::REJECTION_REASON_UNKNOWN_ADDRESS,
            self::REJECTION_REASON_UNKNOWN_REASON,
            self::REJECTION_REASON_TOO_SOON,
            self::REJECTION_REASON_TIME_UNAVAILABLE,
            self::REJECTION_REASON_DONT_DELIVER_TO_AREA,
            self::REJECTION_REASON_STORE_UNCONTACTABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDeliveryTrackingStatusAllowableValues()
    {
        return [
            self::DELIVERY_TRACKING_STATUS_UNASSIGNED,
            self::DELIVERY_TRACKING_STATUS_UNACCEPTED,
            self::DELIVERY_TRACKING_STATUS_ACCEPTED,
            self::DELIVERY_TRACKING_STATUS_CARRYING,
            self::DELIVERY_TRACKING_STATUS_ON_THE_WAY,
            self::DELIVERY_TRACKING_STATUS_ARRIVED_AT_LOCATION,
            self::DELIVERY_TRACKING_STATUS_DELIVERED,
            self::DELIVERY_TRACKING_STATUS_CANNOT_DELIVER,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['store'] = isset($data['store']) ? $data['store'] : null;
        $this->container['customer'] = isset($data['customer']) ? $data['customer'] : null;
        $this->container['voucher'] = isset($data['voucher']) ? $data['voucher'] : null;
        $this->container['fees'] = isset($data['fees']) ? $data['fees'] : null;
        $this->container['order_items'] = isset($data['order_items']) ? $data['order_items'] : null;
        $this->container['delivery_location'] = isset($data['delivery_location']) ? $data['delivery_location'] : null;
        $this->container['customer_location'] = isset($data['customer_location']) ? $data['customer_location'] : null;
        $this->container['masked_phone_number'] = isset($data['masked_phone_number']) ? $data['masked_phone_number'] : null;
        $this->container['drop_off_location_id'] = isset($data['drop_off_location_id']) ? $data['drop_off_location_id'] : null;
        $this->container['drop_off_location'] = isset($data['drop_off_location']) ? $data['drop_off_location'] : null;
        $this->container['accepted_for'] = isset($data['accepted_for']) ? $data['accepted_for'] : null;
        $this->container['in_fraud_zone'] = isset($data['in_fraud_zone']) ? $data['in_fraud_zone'] : null;
        $this->container['unusual_high_value_order'] = isset($data['unusual_high_value_order']) ? $data['unusual_high_value_order'] : null;
        $this->container['rejected_by_user_id'] = isset($data['rejected_by_user_id']) ? $data['rejected_by_user_id'] : null;
        $this->container['channel_order_id'] = isset($data['channel_order_id']) ? $data['channel_order_id'] : null;
        $this->container['channel_order_display_id'] = isset($data['channel_order_display_id']) ? $data['channel_order_display_id'] : null;
        $this->container['channel'] = isset($data['channel']) ? $data['channel'] : null;
        $this->container['order_drop_off_location'] = isset($data['order_drop_off_location']) ? $data['order_drop_off_location'] : null;
        $this->container['fulfillment_status'] = isset($data['fulfillment_status']) ? $data['fulfillment_status'] : null;
        $this->container['order_batch_info'] = isset($data['order_batch_info']) ? $data['order_batch_info'] : null;
        $this->container['created_campaign_voucher_id'] = isset($data['created_campaign_voucher_id']) ? $data['created_campaign_voucher_id'] : null;
        $this->container['order_id'] = isset($data['order_id']) ? $data['order_id'] : null;
        $this->container['local_order_id'] = isset($data['local_order_id']) ? $data['local_order_id'] : null;
        $this->container['delivery_type'] = isset($data['delivery_type']) ? $data['delivery_type'] : null;
        $this->container['pickup_location_type'] = isset($data['pickup_location_type']) ? $data['pickup_location_type'] : null;
        $this->container['table_service_catagory'] = isset($data['table_service_catagory']) ? $data['table_service_catagory'] : null;
        $this->container['tip_amount'] = isset($data['tip_amount']) ? $data['tip_amount'] : null;
        $this->container['delivery_amount'] = isset($data['delivery_amount']) ? $data['delivery_amount'] : null;
        $this->container['order_items_amount'] = isset($data['order_items_amount']) ? $data['order_items_amount'] : null;
        $this->container['service_charge_amount'] = isset($data['service_charge_amount']) ? $data['service_charge_amount'] : null;
        $this->container['service_charge_percentage'] = isset($data['service_charge_percentage']) ? $data['service_charge_percentage'] : null;
        $this->container['amount'] = isset($data['amount']) ? $data['amount'] : null;
        $this->container['processing_fee'] = isset($data['processing_fee']) ? $data['processing_fee'] : null;
        $this->container['payment_account_type'] = isset($data['payment_account_type']) ? $data['payment_account_type'] : null;
        $this->container['payment_account_description'] = isset($data['payment_account_description']) ? $data['payment_account_description'] : null;
        $this->container['order_state'] = isset($data['order_state']) ? $data['order_state'] : null;
        $this->container['is_pre_order'] = isset($data['is_pre_order']) ? $data['is_pre_order'] : null;
        $this->container['placed_time'] = isset($data['placed_time']) ? $data['placed_time'] : null;
        $this->container['requested_for_time'] = isset($data['requested_for_time']) ? $data['requested_for_time'] : null;
        $this->container['chef_note'] = isset($data['chef_note']) ? $data['chef_note'] : null;
        $this->container['app_type'] = isset($data['app_type']) ? $data['app_type'] : null;
        $this->container['user_rating'] = isset($data['user_rating']) ? $data['user_rating'] : null;
        $this->container['payment_status'] = isset($data['payment_status']) ? $data['payment_status'] : null;
        $this->container['rejection_reason'] = isset($data['rejection_reason']) ? $data['rejection_reason'] : null;
        $this->container['refunded_amount'] = isset($data['refunded_amount']) ? $data['refunded_amount'] : null;
        $this->container['delivery_tracking_status'] = isset($data['delivery_tracking_status']) ? $data['delivery_tracking_status'] : null;
        $this->container['driver_id'] = isset($data['driver_id']) ? $data['driver_id'] : null;
        $this->container['total_tax'] = isset($data['total_tax']) ? $data['total_tax'] : null;
        $this->container['order_tracking_code'] = isset($data['order_tracking_code']) ? $data['order_tracking_code'] : null;
        $this->container['delivery_fee_area_id'] = isset($data['delivery_fee_area_id']) ? $data['delivery_fee_area_id'] : null;
        $this->container['receipt_code'] = isset($data['receipt_code']) ? $data['receipt_code'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getDeliveryTypeAllowableValues();
        if (!is_null($this->container['delivery_type']) && !in_array($this->container['delivery_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'delivery_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getPickupLocationTypeAllowableValues();
        if (!is_null($this->container['pickup_location_type']) && !in_array($this->container['pickup_location_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'pickup_location_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getTableServiceCatagoryAllowableValues();
        if (!is_null($this->container['table_service_catagory']) && !in_array($this->container['table_service_catagory'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'table_service_catagory', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getPaymentAccountTypeAllowableValues();
        if (!is_null($this->container['payment_account_type']) && !in_array($this->container['payment_account_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'payment_account_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getOrderStateAllowableValues();
        if (!is_null($this->container['order_state']) && !in_array($this->container['order_state'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'order_state', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getAppTypeAllowableValues();
        if (!is_null($this->container['app_type']) && !in_array($this->container['app_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'app_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getPaymentStatusAllowableValues();
        if (!is_null($this->container['payment_status']) && !in_array($this->container['payment_status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'payment_status', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getRejectionReasonAllowableValues();
        if (!is_null($this->container['rejection_reason']) && !in_array($this->container['rejection_reason'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'rejection_reason', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getDeliveryTrackingStatusAllowableValues();
        if (!is_null($this->container['delivery_tracking_status']) && !in_array($this->container['delivery_tracking_status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'delivery_tracking_status', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets store
     *
     * @return \Flipdish\\Client\Models\StoreSummary
     */
    public function getStore()
    {
        return $this->container['store'];
    }

    /**
     * Sets store
     *
     * @param \Flipdish\\Client\Models\StoreSummary $store Store summary
     *
     * @return $this
     */
    public function setStore($store)
    {
        $this->container['store'] = $store;

        return $this;
    }

    /**
     * Gets customer
     *
     * @return \Flipdish\\Client\Models\CustomerSummary
     */
    public function getCustomer()
    {
        return $this->container['customer'];
    }

    /**
     * Sets customer
     *
     * @param \Flipdish\\Client\Models\CustomerSummary $customer Customer summary
     *
     * @return $this
     */
    public function setCustomer($customer)
    {
        $this->container['customer'] = $customer;

        return $this;
    }

    /**
     * Gets voucher
     *
     * @return \Flipdish\\Client\Models\OrderVoucherSummary
     */
    public function getVoucher()
    {
        return $this->container['voucher'];
    }

    /**
     * Sets voucher
     *
     * @param \Flipdish\\Client\Models\OrderVoucherSummary $voucher Voucher summary
     *
     * @return $this
     */
    public function setVoucher($voucher)
    {
        $this->container['voucher'] = $voucher;

        return $this;
    }

    /**
     * Gets fees
     *
     * @return \Flipdish\\Client\Models\FeeSummary
     */
    public function getFees()
    {
        return $this->container['fees'];
    }

    /**
     * Sets fees
     *
     * @param \Flipdish\\Client\Models\FeeSummary $fees Fee summary
     *
     * @return $this
     */
    public function setFees($fees)
    {
        $this->container['fees'] = $fees;

        return $this;
    }

    /**
     * Gets order_items
     *
     * @return \Flipdish\\Client\Models\OrderItem[]
     */
    public function getOrderItems()
    {
        return $this->container['order_items'];
    }

    /**
     * Sets order_items
     *
     * @param \Flipdish\\Client\Models\OrderItem[] $order_items Ordered items
     *
     * @return $this
     */
    public function setOrderItems($order_items)
    {
        $this->container['order_items'] = $order_items;

        return $this;
    }

    /**
     * Gets delivery_location
     *
     * @return \Flipdish\\Client\Models\DeliveryLocation
     */
    public function getDeliveryLocation()
    {
        return $this->container['delivery_location'];
    }

    /**
     * Sets delivery_location
     *
     * @param \Flipdish\\Client\Models\DeliveryLocation $delivery_location Delivery location for delivery orders
     *
     * @return $this
     */
    public function setDeliveryLocation($delivery_location)
    {
        $this->container['delivery_location'] = $delivery_location;

        return $this;
    }

    /**
     * Gets customer_location
     *
     * @return \Flipdish\\Client\Models\Coordinates
     */
    public function getCustomerLocation()
    {
        return $this->container['customer_location'];
    }

    /**
     * Sets customer_location
     *
     * @param \Flipdish\\Client\Models\Coordinates $customer_location Customer location
     *
     * @return $this
     */
    public function setCustomerLocation($customer_location)
    {
        $this->container['customer_location'] = $customer_location;

        return $this;
    }

    /**
     * Gets masked_phone_number
     *
     * @return \Flipdish\\Client\Models\MaskedPhoneNumber
     */
    public function getMaskedPhoneNumber()
    {
        return $this->container['masked_phone_number'];
    }

    /**
     * Sets masked_phone_number
     *
     * @param \Flipdish\\Client\Models\MaskedPhoneNumber $masked_phone_number Represents customers masked phone number
     *
     * @return $this
     */
    public function setMaskedPhoneNumber($masked_phone_number)
    {
        $this->container['masked_phone_number'] = $masked_phone_number;

        return $this;
    }

    /**
     * Gets drop_off_location_id
     *
     * @return int
     */
    public function getDropOffLocationId()
    {
        return $this->container['drop_off_location_id'];
    }

    /**
     * Sets drop_off_location_id
     *
     * @param int $drop_off_location_id Represents table service drop off location
     *
     * @return $this
     */
    public function setDropOffLocationId($drop_off_location_id)
    {
        $this->container['drop_off_location_id'] = $drop_off_location_id;

        return $this;
    }

    /**
     * Gets drop_off_location
     *
     * @return string
     */
    public function getDropOffLocation()
    {
        return $this->container['drop_off_location'];
    }

    /**
     * Sets drop_off_location
     *
     * @param string $drop_off_location Represents table service drop off location
     *
     * @return $this
     */
    public function setDropOffLocation($drop_off_location)
    {
        $this->container['drop_off_location'] = $drop_off_location;

        return $this;
    }

    /**
     * Gets accepted_for
     *
     * @return \DateTime
     */
    public function getAcceptedFor()
    {
        return $this->container['accepted_for'];
    }

    /**
     * Sets accepted_for
     *
     * @param \DateTime $accepted_for Time store has accepted the order for
     *
     * @return $this
     */
    public function setAcceptedFor($accepted_for)
    {
        $this->container['accepted_for'] = $accepted_for;

        return $this;
    }

    /**
     * Gets in_fraud_zone
     *
     * @return bool
     */
    public function getInFraudZone()
    {
        return $this->container['in_fraud_zone'];
    }

    /**
     * Sets in_fraud_zone
     *
     * @param bool $in_fraud_zone Was order made within a fraud zone
     *
     * @return $this
     */
    public function setInFraudZone($in_fraud_zone)
    {
        $this->container['in_fraud_zone'] = $in_fraud_zone;

        return $this;
    }

    /**
     * Gets unusual_high_value_order
     *
     * @return bool
     */
    public function getUnusualHighValueOrder()
    {
        return $this->container['unusual_high_value_order'];
    }

    /**
     * Sets unusual_high_value_order
     *
     * @param bool $unusual_high_value_order Is order of unusually high value
     *
     * @return $this
     */
    public function setUnusualHighValueOrder($unusual_high_value_order)
    {
        $this->container['unusual_high_value_order'] = $unusual_high_value_order;

        return $this;
    }

    /**
     * Gets rejected_by_user_id
     *
     * @return int
     */
    public function getRejectedByUserId()
    {
        return $this->container['rejected_by_user_id'];
    }

    /**
     * Sets rejected_by_user_id
     *
     * @param int $rejected_by_user_id Id of user who rejected order, if available
     *
     * @return $this
     */
    public function setRejectedByUserId($rejected_by_user_id)
    {
        $this->container['rejected_by_user_id'] = $rejected_by_user_id;

        return $this;
    }

    /**
     * Gets channel_order_id
     *
     * @return string
     */
    public function getChannelOrderId()
    {
        return $this->container['channel_order_id'];
    }

    /**
     * Sets channel_order_id
     *
     * @param string $channel_order_id ChannelOrderId from external channel
     *
     * @return $this
     */
    public function setChannelOrderId($channel_order_id)
    {
        $this->container['channel_order_id'] = $channel_order_id;

        return $this;
    }

    /**
     * Gets channel_order_display_id
     *
     * @return string
     */
    public function getChannelOrderDisplayId()
    {
        return $this->container['channel_order_display_id'];
    }

    /**
     * Sets channel_order_display_id
     *
     * @param string $channel_order_display_id ChannelOrderDisplayId from external channel
     *
     * @return $this
     */
    public function setChannelOrderDisplayId($channel_order_display_id)
    {
        $this->container['channel_order_display_id'] = $channel_order_display_id;

        return $this;
    }

    /**
     * Gets channel
     *
     * @return \Flipdish\\Client\Models\Channel
     */
    public function getChannel()
    {
        return $this->container['channel'];
    }

    /**
     * Sets channel
     *
     * @param \Flipdish\\Client\Models\Channel $channel Channel where the Order comes from
     *
     * @return $this
     */
    public function setChannel($channel)
    {
        $this->container['channel'] = $channel;

        return $this;
    }

    /**
     * Gets order_drop_off_location
     *
     * @return \Flipdish\\Client\Models\OrderDropOffLocation
     */
    public function getOrderDropOffLocation()
    {
        return $this->container['order_drop_off_location'];
    }

    /**
     * Sets order_drop_off_location
     *
     * @param \Flipdish\\Client\Models\OrderDropOffLocation $order_drop_off_location DropOffLocation selected for this order
     *
     * @return $this
     */
    public function setOrderDropOffLocation($order_drop_off_location)
    {
        $this->container['order_drop_off_location'] = $order_drop_off_location;

        return $this;
    }

    /**
     * Gets fulfillment_status
     *
     * @return \Flipdish\\Client\Models\OrderFulfillmentStatusBase
     */
    public function getFulfillmentStatus()
    {
        return $this->container['fulfillment_status'];
    }

    /**
     * Sets fulfillment_status
     *
     * @param \Flipdish\\Client\Models\OrderFulfillmentStatusBase $fulfillment_status [BETA - this is a new field in development] Fulfillment status for this order
     *
     * @return $this
     */
    public function setFulfillmentStatus($fulfillment_status)
    {
        $this->container['fulfillment_status'] = $fulfillment_status;

        return $this;
    }

    /**
     * Gets order_batch_info
     *
     * @return \Flipdish\\Client\Models\OrderBatchSummary
     */
    public function getOrderBatchInfo()
    {
        return $this->container['order_batch_info'];
    }

    /**
     * Sets order_batch_info
     *
     * @param \Flipdish\\Client\Models\OrderBatchSummary $order_batch_info OrderBatch information
     *
     * @return $this
     */
    public function setOrderBatchInfo($order_batch_info)
    {
        $this->container['order_batch_info'] = $order_batch_info;

        return $this;
    }

    /**
     * Gets created_campaign_voucher_id
     *
     * @return int
     */
    public function getCreatedCampaignVoucherId()
    {
        return $this->container['created_campaign_voucher_id'];
    }

    /**
     * Sets created_campaign_voucher_id
     *
     * @param int $created_campaign_voucher_id The id of the campaign voucher that was created from this order
     *
     * @return $this
     */
    public function setCreatedCampaignVoucherId($created_campaign_voucher_id)
    {
        $this->container['created_campaign_voucher_id'] = $created_campaign_voucher_id;

        return $this;
    }

    /**
     * Gets order_id
     *
     * @return int
     */
    public function getOrderId()
    {
        return $this->container['order_id'];
    }

    /**
     * Sets order_id
     *
     * @param int $order_id Order identifier
     *
     * @return $this
     */
    public function setOrderId($order_id)
    {
        $this->container['order_id'] = $order_id;

        return $this;
    }

    /**
     * Gets local_order_id
     *
     * @return string
     */
    public function getLocalOrderId()
    {
        return $this->container['local_order_id'];
    }

    /**
     * Sets local_order_id
     *
     * @param string $local_order_id Local order Id. This is used for displaying a \"shorter\" order ID for customers (eg. Kiosk orders)
     *
     * @return $this
     */
    public function setLocalOrderId($local_order_id)
    {
        $this->container['local_order_id'] = $local_order_id;

        return $this;
    }

    /**
     * Gets delivery_type
     *
     * @return string
     */
    public function getDeliveryType()
    {
        return $this->container['delivery_type'];
    }

    /**
     * Sets delivery_type
     *
     * @param string $delivery_type Delivery type
     *
     * @return $this
     */
    public function setDeliveryType($delivery_type)
    {
        $allowedValues = $this->getDeliveryTypeAllowableValues();
        if (!is_null($delivery_type) && !in_array($delivery_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'delivery_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['delivery_type'] = $delivery_type;

        return $this;
    }

    /**
     * Gets pickup_location_type
     *
     * @return string
     */
    public function getPickupLocationType()
    {
        return $this->container['pickup_location_type'];
    }

    /**
     * Sets pickup_location_type
     *
     * @param string $pickup_location_type Pickup location type
     *
     * @return $this
     */
    public function setPickupLocationType($pickup_location_type)
    {
        $allowedValues = $this->getPickupLocationTypeAllowableValues();
        if (!is_null($pickup_location_type) && !in_array($pickup_location_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'pickup_location_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['pickup_location_type'] = $pickup_location_type;

        return $this;
    }

    /**
     * Gets table_service_catagory
     *
     * @return string
     */
    public function getTableServiceCatagory()
    {
        return $this->container['table_service_catagory'];
    }

    /**
     * Sets table_service_catagory
     *
     * @param string $table_service_catagory Pickup location type
     *
     * @return $this
     */
    public function setTableServiceCatagory($table_service_catagory)
    {
        $allowedValues = $this->getTableServiceCatagoryAllowableValues();
        if (!is_null($table_service_catagory) && !in_array($table_service_catagory, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'table_service_catagory', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['table_service_catagory'] = $table_service_catagory;

        return $this;
    }

    /**
     * Gets tip_amount
     *
     * @return double
     */
    public function getTipAmount()
    {
        return $this->container['tip_amount'];
    }

    /**
     * Sets tip_amount
     *
     * @param double $tip_amount Tip amount
     *
     * @return $this
     */
    public function setTipAmount($tip_amount)
    {
        $this->container['tip_amount'] = $tip_amount;

        return $this;
    }

    /**
     * Gets delivery_amount
     *
     * @return double
     */
    public function getDeliveryAmount()
    {
        return $this->container['delivery_amount'];
    }

    /**
     * Sets delivery_amount
     *
     * @param double $delivery_amount Delivery amount
     *
     * @return $this
     */
    public function setDeliveryAmount($delivery_amount)
    {
        $this->container['delivery_amount'] = $delivery_amount;

        return $this;
    }

    /**
     * Gets order_items_amount
     *
     * @return double
     */
    public function getOrderItemsAmount()
    {
        return $this->container['order_items_amount'];
    }

    /**
     * Sets order_items_amount
     *
     * @param double $order_items_amount Ordered items amount
     *
     * @return $this
     */
    public function setOrderItemsAmount($order_items_amount)
    {
        $this->container['order_items_amount'] = $order_items_amount;

        return $this;
    }

    /**
     * Gets service_charge_amount
     *
     * @return double
     */
    public function getServiceChargeAmount()
    {
        return $this->container['service_charge_amount'];
    }

    /**
     * Sets service_charge_amount
     *
     * @param double $service_charge_amount Service Charge Amount
     *
     * @return $this
     */
    public function setServiceChargeAmount($service_charge_amount)
    {
        $this->container['service_charge_amount'] = $service_charge_amount;

        return $this;
    }

    /**
     * Gets service_charge_percentage
     *
     * @return double
     */
    public function getServiceChargePercentage()
    {
        return $this->container['service_charge_percentage'];
    }

    /**
     * Sets service_charge_percentage
     *
     * @param double $service_charge_percentage Service Charge Percentage
     *
     * @return $this
     */
    public function setServiceChargePercentage($service_charge_percentage)
    {
        $this->container['service_charge_percentage'] = $service_charge_percentage;

        return $this;
    }

    /**
     * Gets amount
     *
     * @return double
     */
    public function getAmount()
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount
     *
     * @param double $amount This is the sum of the OrderItemsAmount, DeliveryAmount, TipAmount and Voucher.Amount (which is usually negative) and OnlineOrderingFee for cash orders.  It does not include the OnlineOrderingFee in the case of card orders as this fee is charged by Flipdish directly to the customer.
     *
     * @return $this
     */
    public function setAmount($amount)
    {
        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets processing_fee
     *
     * @return double
     */
    public function getProcessingFee()
    {
        return $this->container['processing_fee'];
    }

    /**
     * Sets processing_fee
     *
     * @param double $processing_fee This contains the online ordering processing fee. For card payments this is charged directly to the customer and for cash orders it is paid by the customer to the store. It is tax inclusive.
     *
     * @return $this
     */
    public function setProcessingFee($processing_fee)
    {
        $this->container['processing_fee'] = $processing_fee;

        return $this;
    }

    /**
     * Gets payment_account_type
     *
     * @return string
     */
    public function getPaymentAccountType()
    {
        return $this->container['payment_account_type'];
    }

    /**
     * Sets payment_account_type
     *
     * @param string $payment_account_type Payment account type
     *
     * @return $this
     */
    public function setPaymentAccountType($payment_account_type)
    {
        $allowedValues = $this->getPaymentAccountTypeAllowableValues();
        if (!is_null($payment_account_type) && !in_array($payment_account_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'payment_account_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['payment_account_type'] = $payment_account_type;

        return $this;
    }

    /**
     * Gets payment_account_description
     *
     * @return string
     */
    public function getPaymentAccountDescription()
    {
        return $this->container['payment_account_description'];
    }

    /**
     * Sets payment_account_description
     *
     * @param string $payment_account_description Payment account description (like Visa ****2371 or Apple Pay. or Cash)
     *
     * @return $this
     */
    public function setPaymentAccountDescription($payment_account_description)
    {
        $this->container['payment_account_description'] = $payment_account_description;

        return $this;
    }

    /**
     * Gets order_state
     *
     * @return string
     */
    public function getOrderState()
    {
        return $this->container['order_state'];
    }

    /**
     * Sets order_state
     *
     * @param string $order_state Order state
     *
     * @return $this
     */
    public function setOrderState($order_state)
    {
        $allowedValues = $this->getOrderStateAllowableValues();
        if (!is_null($order_state) && !in_array($order_state, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'order_state', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['order_state'] = $order_state;

        return $this;
    }

    /**
     * Gets is_pre_order
     *
     * @return bool
     */
    public function getIsPreOrder()
    {
        return $this->container['is_pre_order'];
    }

    /**
     * Sets is_pre_order
     *
     * @param bool $is_pre_order Is pre-order
     *
     * @return $this
     */
    public function setIsPreOrder($is_pre_order)
    {
        $this->container['is_pre_order'] = $is_pre_order;

        return $this;
    }

    /**
     * Gets placed_time
     *
     * @return \DateTime
     */
    public function getPlacedTime()
    {
        return $this->container['placed_time'];
    }

    /**
     * Sets placed_time
     *
     * @param \DateTime $placed_time Order placed time
     *
     * @return $this
     */
    public function setPlacedTime($placed_time)
    {
        $this->container['placed_time'] = $placed_time;

        return $this;
    }

    /**
     * Gets requested_for_time
     *
     * @return \DateTime
     */
    public function getRequestedForTime()
    {
        return $this->container['requested_for_time'];
    }

    /**
     * Sets requested_for_time
     *
     * @param \DateTime $requested_for_time Order requested for
     *
     * @return $this
     */
    public function setRequestedForTime($requested_for_time)
    {
        $this->container['requested_for_time'] = $requested_for_time;

        return $this;
    }

    /**
     * Gets chef_note
     *
     * @return string
     */
    public function getChefNote()
    {
        return $this->container['chef_note'];
    }

    /**
     * Sets chef_note
     *
     * @param string $chef_note Chef note
     *
     * @return $this
     */
    public function setChefNote($chef_note)
    {
        $this->container['chef_note'] = $chef_note;

        return $this;
    }

    /**
     * Gets app_type
     *
     * @return string
     */
    public function getAppType()
    {
        return $this->container['app_type'];
    }

    /**
     * Sets app_type
     *
     * @param string $app_type Used app type
     *
     * @return $this
     */
    public function setAppType($app_type)
    {
        $allowedValues = $this->getAppTypeAllowableValues();
        if (!is_null($app_type) && !in_array($app_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'app_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['app_type'] = $app_type;

        return $this;
    }

    /**
     * Gets user_rating
     *
     * @return int
     */
    public function getUserRating()
    {
        return $this->container['user_rating'];
    }

    /**
     * Sets user_rating
     *
     * @param int $user_rating User rating
     *
     * @return $this
     */
    public function setUserRating($user_rating)
    {
        $this->container['user_rating'] = $user_rating;

        return $this;
    }

    /**
     * Gets payment_status
     *
     * @return string
     */
    public function getPaymentStatus()
    {
        return $this->container['payment_status'];
    }

    /**
     * Sets payment_status
     *
     * @param string $payment_status Status of the payment
     *
     * @return $this
     */
    public function setPaymentStatus($payment_status)
    {
        $allowedValues = $this->getPaymentStatusAllowableValues();
        if (!is_null($payment_status) && !in_array($payment_status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'payment_status', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['payment_status'] = $payment_status;

        return $this;
    }

    /**
     * Gets rejection_reason
     *
     * @return string
     */
    public function getRejectionReason()
    {
        return $this->container['rejection_reason'];
    }

    /**
     * Sets rejection_reason
     *
     * @param string $rejection_reason Rejection reason. Can have value if the order is rejected.
     *
     * @return $this
     */
    public function setRejectionReason($rejection_reason)
    {
        $allowedValues = $this->getRejectionReasonAllowableValues();
        if (!is_null($rejection_reason) && !in_array($rejection_reason, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'rejection_reason', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['rejection_reason'] = $rejection_reason;

        return $this;
    }

    /**
     * Gets refunded_amount
     *
     * @return double
     */
    public function getRefundedAmount()
    {
        return $this->container['refunded_amount'];
    }

    /**
     * Sets refunded_amount
     *
     * @param double $refunded_amount Amount refunded to customer.
     *
     * @return $this
     */
    public function setRefundedAmount($refunded_amount)
    {
        $this->container['refunded_amount'] = $refunded_amount;

        return $this;
    }

    /**
     * Gets delivery_tracking_status
     *
     * @return string
     */
    public function getDeliveryTrackingStatus()
    {
        return $this->container['delivery_tracking_status'];
    }

    /**
     * Sets delivery_tracking_status
     *
     * @param string $delivery_tracking_status Delivery tracking status
     *
     * @return $this
     */
    public function setDeliveryTrackingStatus($delivery_tracking_status)
    {
        $allowedValues = $this->getDeliveryTrackingStatusAllowableValues();
        if (!is_null($delivery_tracking_status) && !in_array($delivery_tracking_status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'delivery_tracking_status', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['delivery_tracking_status'] = $delivery_tracking_status;

        return $this;
    }

    /**
     * Gets driver_id
     *
     * @return int
     */
    public function getDriverId()
    {
        return $this->container['driver_id'];
    }

    /**
     * Sets driver_id
     *
     * @param int $driver_id Assigned driver identifier
     *
     * @return $this
     */
    public function setDriverId($driver_id)
    {
        $this->container['driver_id'] = $driver_id;

        return $this;
    }

    /**
     * Gets total_tax
     *
     * @return double
     */
    public function getTotalTax()
    {
        return $this->container['total_tax'];
    }

    /**
     * Sets total_tax
     *
     * @param double $total_tax Total tax applied to order
     *
     * @return $this
     */
    public function setTotalTax($total_tax)
    {
        $this->container['total_tax'] = $total_tax;

        return $this;
    }

    /**
     * Gets order_tracking_code
     *
     * @return string
     */
    public function getOrderTrackingCode()
    {
        return $this->container['order_tracking_code'];
    }

    /**
     * Sets order_tracking_code
     *
     * @param string $order_tracking_code Unique, 6 character long alpha numeric code for tracking.
     *
     * @return $this
     */
    public function setOrderTrackingCode($order_tracking_code)
    {
        $this->container['order_tracking_code'] = $order_tracking_code;

        return $this;
    }

    /**
     * Gets delivery_fee_area_id
     *
     * @return int
     */
    public function getDeliveryFeeAreaId()
    {
        return $this->container['delivery_fee_area_id'];
    }

    /**
     * Sets delivery_fee_area_id
     *
     * @param int $delivery_fee_area_id Delivery area identifier
     *
     * @return $this
     */
    public function setDeliveryFeeAreaId($delivery_fee_area_id)
    {
        $this->container['delivery_fee_area_id'] = $delivery_fee_area_id;

        return $this;
    }

    /**
     * Gets receipt_code
     *
     * @return string
     */
    public function getReceiptCode()
    {
        return $this->container['receipt_code'];
    }

    /**
     * Sets receipt_code
     *
     * @param string $receipt_code Code used to view the order's receipt
     *
     * @return $this
     */
    public function setReceiptCode($receipt_code)
    {
        $this->container['receipt_code'] = $receipt_code;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


