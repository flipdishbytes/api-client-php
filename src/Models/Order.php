<?php
/**
 * Order
 *
 * PHP version 5
 *
 * @category Class
 * @package  Flipdish\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Flipdish Open API v1.0
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.2
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Flipdish\Client\Models;

use \ArrayAccess;
use \Flipdish\Client\ObjectSerializer;

/**
 * Order Class Doc Comment
 *
 * @category Class
 * @description Order
 * @package  Flipdish\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Order implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Order';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'store' => '\Flipdish\Client\Models\StoreSummary',
        'customer' => '\Flipdish\Client\Models\CustomerSummary',
        'voucher' => '\Flipdish\Client\Models\OrderVoucherSummary',
        'fees' => '\Flipdish\Client\Models\FeeSummary',
        'order_items' => '\Flipdish\Client\Models\OrderItem[]',
        'delivery_location' => '\Flipdish\Client\Models\DeliveryLocation',
        'customer_location' => '\Flipdish\Client\Models\Coordinates',
        'order_id' => 'int',
        'delivery_type' => 'string',
        'pickup_location_type' => 'string',
        'tip_amount' => 'double',
        'delivery_amount' => 'double',
        'order_items_amount' => 'double',
        'amount' => 'double',
        'processing_fee' => 'double',
        'payment_account_type' => 'string',
        'payment_account_description' => 'string',
        'order_state' => 'string',
        'is_pre_order' => 'bool',
        'placed_time' => '\DateTime',
        'requested_for_time' => '\DateTime',
        'chef_note' => 'string',
        'app_type' => 'string',
        'user_rating' => 'int',
        'payment_status' => 'string',
        'rejection_reason' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'store' => null,
        'customer' => null,
        'voucher' => null,
        'fees' => null,
        'order_items' => null,
        'delivery_location' => null,
        'customer_location' => null,
        'order_id' => 'int32',
        'delivery_type' => null,
        'pickup_location_type' => null,
        'tip_amount' => 'double',
        'delivery_amount' => 'double',
        'order_items_amount' => 'double',
        'amount' => 'double',
        'processing_fee' => 'double',
        'payment_account_type' => null,
        'payment_account_description' => null,
        'order_state' => null,
        'is_pre_order' => null,
        'placed_time' => 'date-time',
        'requested_for_time' => 'date-time',
        'chef_note' => null,
        'app_type' => null,
        'user_rating' => 'int32',
        'payment_status' => null,
        'rejection_reason' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'store' => 'Store',
        'customer' => 'Customer',
        'voucher' => 'Voucher',
        'fees' => 'Fees',
        'order_items' => 'OrderItems',
        'delivery_location' => 'DeliveryLocation',
        'customer_location' => 'CustomerLocation',
        'order_id' => 'OrderId',
        'delivery_type' => 'DeliveryType',
        'pickup_location_type' => 'PickupLocationType',
        'tip_amount' => 'TipAmount',
        'delivery_amount' => 'DeliveryAmount',
        'order_items_amount' => 'OrderItemsAmount',
        'amount' => 'Amount',
        'processing_fee' => 'ProcessingFee',
        'payment_account_type' => 'PaymentAccountType',
        'payment_account_description' => 'PaymentAccountDescription',
        'order_state' => 'OrderState',
        'is_pre_order' => 'IsPreOrder',
        'placed_time' => 'PlacedTime',
        'requested_for_time' => 'RequestedForTime',
        'chef_note' => 'ChefNote',
        'app_type' => 'AppType',
        'user_rating' => 'UserRating',
        'payment_status' => 'PaymentStatus',
        'rejection_reason' => 'RejectionReason'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'store' => 'setStore',
        'customer' => 'setCustomer',
        'voucher' => 'setVoucher',
        'fees' => 'setFees',
        'order_items' => 'setOrderItems',
        'delivery_location' => 'setDeliveryLocation',
        'customer_location' => 'setCustomerLocation',
        'order_id' => 'setOrderId',
        'delivery_type' => 'setDeliveryType',
        'pickup_location_type' => 'setPickupLocationType',
        'tip_amount' => 'setTipAmount',
        'delivery_amount' => 'setDeliveryAmount',
        'order_items_amount' => 'setOrderItemsAmount',
        'amount' => 'setAmount',
        'processing_fee' => 'setProcessingFee',
        'payment_account_type' => 'setPaymentAccountType',
        'payment_account_description' => 'setPaymentAccountDescription',
        'order_state' => 'setOrderState',
        'is_pre_order' => 'setIsPreOrder',
        'placed_time' => 'setPlacedTime',
        'requested_for_time' => 'setRequestedForTime',
        'chef_note' => 'setChefNote',
        'app_type' => 'setAppType',
        'user_rating' => 'setUserRating',
        'payment_status' => 'setPaymentStatus',
        'rejection_reason' => 'setRejectionReason'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'store' => 'getStore',
        'customer' => 'getCustomer',
        'voucher' => 'getVoucher',
        'fees' => 'getFees',
        'order_items' => 'getOrderItems',
        'delivery_location' => 'getDeliveryLocation',
        'customer_location' => 'getCustomerLocation',
        'order_id' => 'getOrderId',
        'delivery_type' => 'getDeliveryType',
        'pickup_location_type' => 'getPickupLocationType',
        'tip_amount' => 'getTipAmount',
        'delivery_amount' => 'getDeliveryAmount',
        'order_items_amount' => 'getOrderItemsAmount',
        'amount' => 'getAmount',
        'processing_fee' => 'getProcessingFee',
        'payment_account_type' => 'getPaymentAccountType',
        'payment_account_description' => 'getPaymentAccountDescription',
        'order_state' => 'getOrderState',
        'is_pre_order' => 'getIsPreOrder',
        'placed_time' => 'getPlacedTime',
        'requested_for_time' => 'getRequestedForTime',
        'chef_note' => 'getChefNote',
        'app_type' => 'getAppType',
        'user_rating' => 'getUserRating',
        'payment_status' => 'getPaymentStatus',
        'rejection_reason' => 'getRejectionReason'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const DELIVERY_TYPE_DELIVERY = 'Delivery';
    const DELIVERY_TYPE_PICKUP = 'Pickup';
    const PICKUP_LOCATION_TYPE_TAKE_OUT = 'TakeOut';
    const PICKUP_LOCATION_TYPE_TABLE_SERVICE = 'TableService';
    const PICKUP_LOCATION_TYPE_DINE_IN = 'DineIn';
    const PAYMENT_ACCOUNT_TYPE_CARD = 'Card';
    const PAYMENT_ACCOUNT_TYPE_CASH = 'Cash';
    const PAYMENT_ACCOUNT_TYPE_IDEAL = 'Ideal';
    const PAYMENT_ACCOUNT_TYPE_BANCONTACT = 'Bancontact';
    const PAYMENT_ACCOUNT_TYPE_GIROPAY = 'Giropay';
    const PAYMENT_ACCOUNT_TYPE_EPS = 'Eps';
    const ORDER_STATE_CREATED = 'Created';
    const ORDER_STATE_PLACED_CAN_BE_CANCELLED = 'PlacedCanBeCancelled';
    const ORDER_STATE_READY_TO_PROCESS = 'ReadyToProcess';
    const ORDER_STATE_ACCEPTED_BY_RESTAURANT = 'AcceptedByRestaurant';
    const ORDER_STATE_DISPATCHED = 'Dispatched';
    const ORDER_STATE_DELIVERED = 'Delivered';
    const ORDER_STATE_CANCELLED = 'Cancelled';
    const ORDER_STATE_MANUAL_REVIEW = 'ManualReview';
    const ORDER_STATE_REJECTED_BY_STORE = 'RejectedByStore';
    const ORDER_STATE_REJECTED_BY_FLIPDISH = 'RejectedByFlipdish';
    const ORDER_STATE_REJECTED_AUTOMATICALLY = 'RejectedAutomatically';
    const ORDER_STATE_REJECTED_AFTER_BEING_ACCEPTED = 'RejectedAfterBeingAccepted';
    const ORDER_STATE_ACCEPTED_AND_REFUNDED = 'AcceptedAndRefunded';
    const APP_TYPE_UNKNOWN = 'Unknown';
    const APP_TYPE_IOS = 'Ios';
    const APP_TYPE_ANDROID = 'Android';
    const APP_TYPE_WEB = 'Web';
    const APP_TYPE_KIOSK = 'Kiosk';
    const APP_TYPE_POS = 'Pos';
    const APP_TYPE_TELEPHONE_CALL = 'TelephoneCall';
    const APP_TYPE_SMS = 'Sms';
    const APP_TYPE_PWA_ANDROID = 'PwaAndroid';
    const APP_TYPE_PWA_IOS = 'PwaIos';
    const PAYMENT_STATUS_PAID = 'Paid';
    const PAYMENT_STATUS_UNPAID = 'Unpaid';
    const PAYMENT_STATUS_REFUNDED = 'Refunded';
    const PAYMENT_STATUS_PARTIALLY_REFUNDED = 'PartiallyRefunded';
    const PAYMENT_STATUS_DISPUTED = 'Disputed';
    const REJECTION_REASON_TOO_BUSY = 'TooBusy';
    const REJECTION_REASON_FOOD_UNAVAILABLE = 'FoodUnavailable';
    const REJECTION_REASON_UNABLE_TO_DELIVER = 'UnableToDeliver';
    const REJECTION_REASON_UNKNOWN_ADDRESS = 'UnknownAddress';
    const REJECTION_REASON_UNKNOWN_REASON = 'UnknownReason';
    const REJECTION_REASON_TOO_SOON = 'TooSoon';
    const REJECTION_REASON_TIME_UNAVAILABLE = 'TimeUnavailable';
    const REJECTION_REASON_DONT_DELIVER_TO_AREA = 'DontDeliverToArea';
    const REJECTION_REASON_STORE_UNCONTACTABLE = 'StoreUncontactable';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDeliveryTypeAllowableValues()
    {
        return [
            self::DELIVERY_TYPE_DELIVERY,
            self::DELIVERY_TYPE_PICKUP,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPickupLocationTypeAllowableValues()
    {
        return [
            self::PICKUP_LOCATION_TYPE_TAKE_OUT,
            self::PICKUP_LOCATION_TYPE_TABLE_SERVICE,
            self::PICKUP_LOCATION_TYPE_DINE_IN,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPaymentAccountTypeAllowableValues()
    {
        return [
            self::PAYMENT_ACCOUNT_TYPE_CARD,
            self::PAYMENT_ACCOUNT_TYPE_CASH,
            self::PAYMENT_ACCOUNT_TYPE_IDEAL,
            self::PAYMENT_ACCOUNT_TYPE_BANCONTACT,
            self::PAYMENT_ACCOUNT_TYPE_GIROPAY,
            self::PAYMENT_ACCOUNT_TYPE_EPS,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getOrderStateAllowableValues()
    {
        return [
            self::ORDER_STATE_CREATED,
            self::ORDER_STATE_PLACED_CAN_BE_CANCELLED,
            self::ORDER_STATE_READY_TO_PROCESS,
            self::ORDER_STATE_ACCEPTED_BY_RESTAURANT,
            self::ORDER_STATE_DISPATCHED,
            self::ORDER_STATE_DELIVERED,
            self::ORDER_STATE_CANCELLED,
            self::ORDER_STATE_MANUAL_REVIEW,
            self::ORDER_STATE_REJECTED_BY_STORE,
            self::ORDER_STATE_REJECTED_BY_FLIPDISH,
            self::ORDER_STATE_REJECTED_AUTOMATICALLY,
            self::ORDER_STATE_REJECTED_AFTER_BEING_ACCEPTED,
            self::ORDER_STATE_ACCEPTED_AND_REFUNDED,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAppTypeAllowableValues()
    {
        return [
            self::APP_TYPE_UNKNOWN,
            self::APP_TYPE_IOS,
            self::APP_TYPE_ANDROID,
            self::APP_TYPE_WEB,
            self::APP_TYPE_KIOSK,
            self::APP_TYPE_POS,
            self::APP_TYPE_TELEPHONE_CALL,
            self::APP_TYPE_SMS,
            self::APP_TYPE_PWA_ANDROID,
            self::APP_TYPE_PWA_IOS,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPaymentStatusAllowableValues()
    {
        return [
            self::PAYMENT_STATUS_PAID,
            self::PAYMENT_STATUS_UNPAID,
            self::PAYMENT_STATUS_REFUNDED,
            self::PAYMENT_STATUS_PARTIALLY_REFUNDED,
            self::PAYMENT_STATUS_DISPUTED,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getRejectionReasonAllowableValues()
    {
        return [
            self::REJECTION_REASON_TOO_BUSY,
            self::REJECTION_REASON_FOOD_UNAVAILABLE,
            self::REJECTION_REASON_UNABLE_TO_DELIVER,
            self::REJECTION_REASON_UNKNOWN_ADDRESS,
            self::REJECTION_REASON_UNKNOWN_REASON,
            self::REJECTION_REASON_TOO_SOON,
            self::REJECTION_REASON_TIME_UNAVAILABLE,
            self::REJECTION_REASON_DONT_DELIVER_TO_AREA,
            self::REJECTION_REASON_STORE_UNCONTACTABLE,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['store'] = isset($data['store']) ? $data['store'] : null;
        $this->container['customer'] = isset($data['customer']) ? $data['customer'] : null;
        $this->container['voucher'] = isset($data['voucher']) ? $data['voucher'] : null;
        $this->container['fees'] = isset($data['fees']) ? $data['fees'] : null;
        $this->container['order_items'] = isset($data['order_items']) ? $data['order_items'] : null;
        $this->container['delivery_location'] = isset($data['delivery_location']) ? $data['delivery_location'] : null;
        $this->container['customer_location'] = isset($data['customer_location']) ? $data['customer_location'] : null;
        $this->container['order_id'] = isset($data['order_id']) ? $data['order_id'] : null;
        $this->container['delivery_type'] = isset($data['delivery_type']) ? $data['delivery_type'] : null;
        $this->container['pickup_location_type'] = isset($data['pickup_location_type']) ? $data['pickup_location_type'] : null;
        $this->container['tip_amount'] = isset($data['tip_amount']) ? $data['tip_amount'] : null;
        $this->container['delivery_amount'] = isset($data['delivery_amount']) ? $data['delivery_amount'] : null;
        $this->container['order_items_amount'] = isset($data['order_items_amount']) ? $data['order_items_amount'] : null;
        $this->container['amount'] = isset($data['amount']) ? $data['amount'] : null;
        $this->container['processing_fee'] = isset($data['processing_fee']) ? $data['processing_fee'] : null;
        $this->container['payment_account_type'] = isset($data['payment_account_type']) ? $data['payment_account_type'] : null;
        $this->container['payment_account_description'] = isset($data['payment_account_description']) ? $data['payment_account_description'] : null;
        $this->container['order_state'] = isset($data['order_state']) ? $data['order_state'] : null;
        $this->container['is_pre_order'] = isset($data['is_pre_order']) ? $data['is_pre_order'] : null;
        $this->container['placed_time'] = isset($data['placed_time']) ? $data['placed_time'] : null;
        $this->container['requested_for_time'] = isset($data['requested_for_time']) ? $data['requested_for_time'] : null;
        $this->container['chef_note'] = isset($data['chef_note']) ? $data['chef_note'] : null;
        $this->container['app_type'] = isset($data['app_type']) ? $data['app_type'] : null;
        $this->container['user_rating'] = isset($data['user_rating']) ? $data['user_rating'] : null;
        $this->container['payment_status'] = isset($data['payment_status']) ? $data['payment_status'] : null;
        $this->container['rejection_reason'] = isset($data['rejection_reason']) ? $data['rejection_reason'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getDeliveryTypeAllowableValues();
        if (!is_null($this->container['delivery_type']) && !in_array($this->container['delivery_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'delivery_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getPickupLocationTypeAllowableValues();
        if (!is_null($this->container['pickup_location_type']) && !in_array($this->container['pickup_location_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'pickup_location_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getPaymentAccountTypeAllowableValues();
        if (!is_null($this->container['payment_account_type']) && !in_array($this->container['payment_account_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'payment_account_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getOrderStateAllowableValues();
        if (!is_null($this->container['order_state']) && !in_array($this->container['order_state'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'order_state', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getAppTypeAllowableValues();
        if (!is_null($this->container['app_type']) && !in_array($this->container['app_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'app_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getPaymentStatusAllowableValues();
        if (!is_null($this->container['payment_status']) && !in_array($this->container['payment_status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'payment_status', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getRejectionReasonAllowableValues();
        if (!is_null($this->container['rejection_reason']) && !in_array($this->container['rejection_reason'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'rejection_reason', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets store
     *
     * @return \Flipdish\Client\Models\StoreSummary
     */
    public function getStore()
    {
        return $this->container['store'];
    }

    /**
     * Sets store
     *
     * @param \Flipdish\Client\Models\StoreSummary $store Store summary
     *
     * @return $this
     */
    public function setStore($store)
    {
        $this->container['store'] = $store;

        return $this;
    }

    /**
     * Gets customer
     *
     * @return \Flipdish\Client\Models\CustomerSummary
     */
    public function getCustomer()
    {
        return $this->container['customer'];
    }

    /**
     * Sets customer
     *
     * @param \Flipdish\Client\Models\CustomerSummary $customer Customer summary
     *
     * @return $this
     */
    public function setCustomer($customer)
    {
        $this->container['customer'] = $customer;

        return $this;
    }

    /**
     * Gets voucher
     *
     * @return \Flipdish\Client\Models\OrderVoucherSummary
     */
    public function getVoucher()
    {
        return $this->container['voucher'];
    }

    /**
     * Sets voucher
     *
     * @param \Flipdish\Client\Models\OrderVoucherSummary $voucher Voucher summary
     *
     * @return $this
     */
    public function setVoucher($voucher)
    {
        $this->container['voucher'] = $voucher;

        return $this;
    }

    /**
     * Gets fees
     *
     * @return \Flipdish\Client\Models\FeeSummary
     */
    public function getFees()
    {
        return $this->container['fees'];
    }

    /**
     * Sets fees
     *
     * @param \Flipdish\Client\Models\FeeSummary $fees Fee summary
     *
     * @return $this
     */
    public function setFees($fees)
    {
        $this->container['fees'] = $fees;

        return $this;
    }

    /**
     * Gets order_items
     *
     * @return \Flipdish\Client\Models\OrderItem[]
     */
    public function getOrderItems()
    {
        return $this->container['order_items'];
    }

    /**
     * Sets order_items
     *
     * @param \Flipdish\Client\Models\OrderItem[] $order_items Ordered items
     *
     * @return $this
     */
    public function setOrderItems($order_items)
    {
        $this->container['order_items'] = $order_items;

        return $this;
    }

    /**
     * Gets delivery_location
     *
     * @return \Flipdish\Client\Models\DeliveryLocation
     */
    public function getDeliveryLocation()
    {
        return $this->container['delivery_location'];
    }

    /**
     * Sets delivery_location
     *
     * @param \Flipdish\Client\Models\DeliveryLocation $delivery_location Delivery location for delivery orders
     *
     * @return $this
     */
    public function setDeliveryLocation($delivery_location)
    {
        $this->container['delivery_location'] = $delivery_location;

        return $this;
    }

    /**
     * Gets customer_location
     *
     * @return \Flipdish\Client\Models\Coordinates
     */
    public function getCustomerLocation()
    {
        return $this->container['customer_location'];
    }

    /**
     * Sets customer_location
     *
     * @param \Flipdish\Client\Models\Coordinates $customer_location Customer location
     *
     * @return $this
     */
    public function setCustomerLocation($customer_location)
    {
        $this->container['customer_location'] = $customer_location;

        return $this;
    }

    /**
     * Gets order_id
     *
     * @return int
     */
    public function getOrderId()
    {
        return $this->container['order_id'];
    }

    /**
     * Sets order_id
     *
     * @param int $order_id Order identifier
     *
     * @return $this
     */
    public function setOrderId($order_id)
    {
        $this->container['order_id'] = $order_id;

        return $this;
    }

    /**
     * Gets delivery_type
     *
     * @return string
     */
    public function getDeliveryType()
    {
        return $this->container['delivery_type'];
    }

    /**
     * Sets delivery_type
     *
     * @param string $delivery_type Delivery type
     *
     * @return $this
     */
    public function setDeliveryType($delivery_type)
    {
        $allowedValues = $this->getDeliveryTypeAllowableValues();
        if (!is_null($delivery_type) && !in_array($delivery_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'delivery_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['delivery_type'] = $delivery_type;

        return $this;
    }

    /**
     * Gets pickup_location_type
     *
     * @return string
     */
    public function getPickupLocationType()
    {
        return $this->container['pickup_location_type'];
    }

    /**
     * Sets pickup_location_type
     *
     * @param string $pickup_location_type Pickup location type
     *
     * @return $this
     */
    public function setPickupLocationType($pickup_location_type)
    {
        $allowedValues = $this->getPickupLocationTypeAllowableValues();
        if (!is_null($pickup_location_type) && !in_array($pickup_location_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'pickup_location_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['pickup_location_type'] = $pickup_location_type;

        return $this;
    }

    /**
     * Gets tip_amount
     *
     * @return double
     */
    public function getTipAmount()
    {
        return $this->container['tip_amount'];
    }

    /**
     * Sets tip_amount
     *
     * @param double $tip_amount Tip amount
     *
     * @return $this
     */
    public function setTipAmount($tip_amount)
    {
        $this->container['tip_amount'] = $tip_amount;

        return $this;
    }

    /**
     * Gets delivery_amount
     *
     * @return double
     */
    public function getDeliveryAmount()
    {
        return $this->container['delivery_amount'];
    }

    /**
     * Sets delivery_amount
     *
     * @param double $delivery_amount Delivery amount
     *
     * @return $this
     */
    public function setDeliveryAmount($delivery_amount)
    {
        $this->container['delivery_amount'] = $delivery_amount;

        return $this;
    }

    /**
     * Gets order_items_amount
     *
     * @return double
     */
    public function getOrderItemsAmount()
    {
        return $this->container['order_items_amount'];
    }

    /**
     * Sets order_items_amount
     *
     * @param double $order_items_amount Ordered items amount
     *
     * @return $this
     */
    public function setOrderItemsAmount($order_items_amount)
    {
        $this->container['order_items_amount'] = $order_items_amount;

        return $this;
    }

    /**
     * Gets amount
     *
     * @return double
     */
    public function getAmount()
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount
     *
     * @param double $amount This is the sum of the OrderItemsAmount, DeliveryAmount, TipAmount and Voucher.Amount (which is usually negative) and OnlineOrderingFee for cash orders.  It does not include the OnlineOrderingFee in the case of card orders as this fee is charged by Flipdish directly to the customer.
     *
     * @return $this
     */
    public function setAmount($amount)
    {
        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets processing_fee
     *
     * @return double
     */
    public function getProcessingFee()
    {
        return $this->container['processing_fee'];
    }

    /**
     * Sets processing_fee
     *
     * @param double $processing_fee This contains the online ordering processing fee. For card payments this is charged directly to the customer and for cash orders it is paid by the customer to the store. It is tax inclusive.
     *
     * @return $this
     */
    public function setProcessingFee($processing_fee)
    {
        $this->container['processing_fee'] = $processing_fee;

        return $this;
    }

    /**
     * Gets payment_account_type
     *
     * @return string
     */
    public function getPaymentAccountType()
    {
        return $this->container['payment_account_type'];
    }

    /**
     * Sets payment_account_type
     *
     * @param string $payment_account_type Payment account type
     *
     * @return $this
     */
    public function setPaymentAccountType($payment_account_type)
    {
        $allowedValues = $this->getPaymentAccountTypeAllowableValues();
        if (!is_null($payment_account_type) && !in_array($payment_account_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'payment_account_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['payment_account_type'] = $payment_account_type;

        return $this;
    }

    /**
     * Gets payment_account_description
     *
     * @return string
     */
    public function getPaymentAccountDescription()
    {
        return $this->container['payment_account_description'];
    }

    /**
     * Sets payment_account_description
     *
     * @param string $payment_account_description Payment account description (like Visa ****2371 or Apple Pay. or Cash)
     *
     * @return $this
     */
    public function setPaymentAccountDescription($payment_account_description)
    {
        $this->container['payment_account_description'] = $payment_account_description;

        return $this;
    }

    /**
     * Gets order_state
     *
     * @return string
     */
    public function getOrderState()
    {
        return $this->container['order_state'];
    }

    /**
     * Sets order_state
     *
     * @param string $order_state Order state
     *
     * @return $this
     */
    public function setOrderState($order_state)
    {
        $allowedValues = $this->getOrderStateAllowableValues();
        if (!is_null($order_state) && !in_array($order_state, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'order_state', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['order_state'] = $order_state;

        return $this;
    }

    /**
     * Gets is_pre_order
     *
     * @return bool
     */
    public function getIsPreOrder()
    {
        return $this->container['is_pre_order'];
    }

    /**
     * Sets is_pre_order
     *
     * @param bool $is_pre_order Is pre-order
     *
     * @return $this
     */
    public function setIsPreOrder($is_pre_order)
    {
        $this->container['is_pre_order'] = $is_pre_order;

        return $this;
    }

    /**
     * Gets placed_time
     *
     * @return \DateTime
     */
    public function getPlacedTime()
    {
        return $this->container['placed_time'];
    }

    /**
     * Sets placed_time
     *
     * @param \DateTime $placed_time Order placed time
     *
     * @return $this
     */
    public function setPlacedTime($placed_time)
    {
        $this->container['placed_time'] = $placed_time;

        return $this;
    }

    /**
     * Gets requested_for_time
     *
     * @return \DateTime
     */
    public function getRequestedForTime()
    {
        return $this->container['requested_for_time'];
    }

    /**
     * Sets requested_for_time
     *
     * @param \DateTime $requested_for_time Order requested for
     *
     * @return $this
     */
    public function setRequestedForTime($requested_for_time)
    {
        $this->container['requested_for_time'] = $requested_for_time;

        return $this;
    }

    /**
     * Gets chef_note
     *
     * @return string
     */
    public function getChefNote()
    {
        return $this->container['chef_note'];
    }

    /**
     * Sets chef_note
     *
     * @param string $chef_note Chef note
     *
     * @return $this
     */
    public function setChefNote($chef_note)
    {
        $this->container['chef_note'] = $chef_note;

        return $this;
    }

    /**
     * Gets app_type
     *
     * @return string
     */
    public function getAppType()
    {
        return $this->container['app_type'];
    }

    /**
     * Sets app_type
     *
     * @param string $app_type Used app type
     *
     * @return $this
     */
    public function setAppType($app_type)
    {
        $allowedValues = $this->getAppTypeAllowableValues();
        if (!is_null($app_type) && !in_array($app_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'app_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['app_type'] = $app_type;

        return $this;
    }

    /**
     * Gets user_rating
     *
     * @return int
     */
    public function getUserRating()
    {
        return $this->container['user_rating'];
    }

    /**
     * Sets user_rating
     *
     * @param int $user_rating User rating
     *
     * @return $this
     */
    public function setUserRating($user_rating)
    {
        $this->container['user_rating'] = $user_rating;

        return $this;
    }

    /**
     * Gets payment_status
     *
     * @return string
     */
    public function getPaymentStatus()
    {
        return $this->container['payment_status'];
    }

    /**
     * Sets payment_status
     *
     * @param string $payment_status Status of the payment
     *
     * @return $this
     */
    public function setPaymentStatus($payment_status)
    {
        $allowedValues = $this->getPaymentStatusAllowableValues();
        if (!is_null($payment_status) && !in_array($payment_status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'payment_status', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['payment_status'] = $payment_status;

        return $this;
    }

    /**
     * Gets rejection_reason
     *
     * @return string
     */
    public function getRejectionReason()
    {
        return $this->container['rejection_reason'];
    }

    /**
     * Sets rejection_reason
     *
     * @param string $rejection_reason Rejection reason. Can have value if the order is rejected.
     *
     * @return $this
     */
    public function setRejectionReason($rejection_reason)
    {
        $allowedValues = $this->getRejectionReasonAllowableValues();
        if (!is_null($rejection_reason) && !in_array($rejection_reason, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'rejection_reason', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['rejection_reason'] = $rejection_reason;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


