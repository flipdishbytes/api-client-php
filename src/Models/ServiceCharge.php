<?php
/**
 * ServiceCharge
 *
 * PHP version 5
 *
 * @category Class
 * @package  Flipdish\\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Flipdish Open API v1.0
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.43
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Flipdish\\Client\Models;

use \ArrayAccess;
use \Flipdish\\Client\ObjectSerializer;

/**
 * ServiceCharge Class Doc Comment
 *
 * @category Class
 * @description Store Service Charge
 * @package  Flipdish\\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ServiceCharge implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ServiceCharge';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'store_id' => 'int',
        'percentage_value' => 'double',
        'enabled' => 'bool',
        'is_optional' => 'bool',
        'display_with_processing_fee' => 'bool',
        'includes_vouchers' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'store_id' => 'int32',
        'percentage_value' => 'double',
        'enabled' => null,
        'is_optional' => null,
        'display_with_processing_fee' => null,
        'includes_vouchers' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'store_id' => 'StoreId',
        'percentage_value' => 'PercentageValue',
        'enabled' => 'Enabled',
        'is_optional' => 'IsOptional',
        'display_with_processing_fee' => 'DisplayWithProcessingFee',
        'includes_vouchers' => 'IncludesVouchers'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'store_id' => 'setStoreId',
        'percentage_value' => 'setPercentageValue',
        'enabled' => 'setEnabled',
        'is_optional' => 'setIsOptional',
        'display_with_processing_fee' => 'setDisplayWithProcessingFee',
        'includes_vouchers' => 'setIncludesVouchers'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'store_id' => 'getStoreId',
        'percentage_value' => 'getPercentageValue',
        'enabled' => 'getEnabled',
        'is_optional' => 'getIsOptional',
        'display_with_processing_fee' => 'getDisplayWithProcessingFee',
        'includes_vouchers' => 'getIncludesVouchers'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['store_id'] = isset($data['store_id']) ? $data['store_id'] : null;
        $this->container['percentage_value'] = isset($data['percentage_value']) ? $data['percentage_value'] : null;
        $this->container['enabled'] = isset($data['enabled']) ? $data['enabled'] : null;
        $this->container['is_optional'] = isset($data['is_optional']) ? $data['is_optional'] : null;
        $this->container['display_with_processing_fee'] = isset($data['display_with_processing_fee']) ? $data['display_with_processing_fee'] : null;
        $this->container['includes_vouchers'] = isset($data['includes_vouchers']) ? $data['includes_vouchers'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets store_id
     *
     * @return int
     */
    public function getStoreId()
    {
        return $this->container['store_id'];
    }

    /**
     * Sets store_id
     *
     * @param int $store_id Store identifier
     *
     * @return $this
     */
    public function setStoreId($store_id)
    {
        $this->container['store_id'] = $store_id;

        return $this;
    }

    /**
     * Gets percentage_value
     *
     * @return double
     */
    public function getPercentageValue()
    {
        return $this->container['percentage_value'];
    }

    /**
     * Sets percentage_value
     *
     * @param double $percentage_value The Default Service Charge Value
     *
     * @return $this
     */
    public function setPercentageValue($percentage_value)
    {
        $this->container['percentage_value'] = $percentage_value;

        return $this;
    }

    /**
     * Gets enabled
     *
     * @return bool
     */
    public function getEnabled()
    {
        return $this->container['enabled'];
    }

    /**
     * Sets enabled
     *
     * @param bool $enabled Enable Service Charge for store true(on) / false(off)
     *
     * @return $this
     */
    public function setEnabled($enabled)
    {
        $this->container['enabled'] = $enabled;

        return $this;
    }

    /**
     * Gets is_optional
     *
     * @return bool
     */
    public function getIsOptional()
    {
        return $this->container['is_optional'];
    }

    /**
     * Sets is_optional
     *
     * @param bool $is_optional Sets the service charge to be optional
     *
     * @return $this
     */
    public function setIsOptional($is_optional)
    {
        $this->container['is_optional'] = $is_optional;

        return $this;
    }

    /**
     * Gets display_with_processing_fee
     *
     * @return bool
     */
    public function getDisplayWithProcessingFee()
    {
        return $this->container['display_with_processing_fee'];
    }

    /**
     * Sets display_with_processing_fee
     *
     * @param bool $display_with_processing_fee Display service charge together with processing fee
     *
     * @return $this
     */
    public function setDisplayWithProcessingFee($display_with_processing_fee)
    {
        $this->container['display_with_processing_fee'] = $display_with_processing_fee;

        return $this;
    }

    /**
     * Gets includes_vouchers
     *
     * @return bool
     */
    public function getIncludesVouchers()
    {
        return $this->container['includes_vouchers'];
    }

    /**
     * Sets includes_vouchers
     *
     * @param bool $includes_vouchers If true, will include voucher value in calculation   i.e 10E order with 1E service charge and 5E voucher would have service charge at 0.5E
     *
     * @return $this
     */
    public function setIncludesVouchers($includes_vouchers)
    {
        $this->container['includes_vouchers'] = $includes_vouchers;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


