<?php
/**
 * User
 *
 * PHP version 5
 *
 * @category Class
 * @package  Flipdish\\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Flipdish Open API v1.0
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.43
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Flipdish\\Client\Models;

use \ArrayAccess;
use \Flipdish\\Client\ObjectSerializer;

/**
 * User Class Doc Comment
 *
 * @category Class
 * @description User
 * @package  Flipdish\\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class User implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'User';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'phone_number' => 'string',
        'email' => 'string',
        'customer_name' => 'string',
        'has_logged_in' => 'bool',
        'user_discriminator' => 'string',
        'ts_create' => '\DateTime',
        'white_label_configs' => '\Flipdish\\Client\Models\UserWhiteLabelConfig[]',
        'user_type' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => 'int32',
        'phone_number' => null,
        'email' => null,
        'customer_name' => null,
        'has_logged_in' => null,
        'user_discriminator' => null,
        'ts_create' => 'date-time',
        'white_label_configs' => null,
        'user_type' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'Id',
        'phone_number' => 'PhoneNumber',
        'email' => 'Email',
        'customer_name' => 'CustomerName',
        'has_logged_in' => 'HasLoggedIn',
        'user_discriminator' => 'UserDiscriminator',
        'ts_create' => 'TsCreate',
        'white_label_configs' => 'WhiteLabelConfigs',
        'user_type' => 'UserType'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'phone_number' => 'setPhoneNumber',
        'email' => 'setEmail',
        'customer_name' => 'setCustomerName',
        'has_logged_in' => 'setHasLoggedIn',
        'user_discriminator' => 'setUserDiscriminator',
        'ts_create' => 'setTsCreate',
        'white_label_configs' => 'setWhiteLabelConfigs',
        'user_type' => 'setUserType'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'phone_number' => 'getPhoneNumber',
        'email' => 'getEmail',
        'customer_name' => 'getCustomerName',
        'has_logged_in' => 'getHasLoggedIn',
        'user_discriminator' => 'getUserDiscriminator',
        'ts_create' => 'getTsCreate',
        'white_label_configs' => 'getWhiteLabelConfigs',
        'user_type' => 'getUserType'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const USER_DISCRIMINATOR_ALL = 'All';
    const USER_DISCRIMINATOR_APPLICATION_USERS = 'ApplicationUsers';
    const USER_DISCRIMINATOR_RESTAURANT_USERS = 'RestaurantUsers';
    const USER_DISCRIMINATOR_HYDRA_USERS = 'HydraUsers';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getUserDiscriminatorAllowableValues()
    {
        return [
            self::USER_DISCRIMINATOR_ALL,
            self::USER_DISCRIMINATOR_APPLICATION_USERS,
            self::USER_DISCRIMINATOR_RESTAURANT_USERS,
            self::USER_DISCRIMINATOR_HYDRA_USERS,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['phone_number'] = isset($data['phone_number']) ? $data['phone_number'] : null;
        $this->container['email'] = isset($data['email']) ? $data['email'] : null;
        $this->container['customer_name'] = isset($data['customer_name']) ? $data['customer_name'] : null;
        $this->container['has_logged_in'] = isset($data['has_logged_in']) ? $data['has_logged_in'] : null;
        $this->container['user_discriminator'] = isset($data['user_discriminator']) ? $data['user_discriminator'] : null;
        $this->container['ts_create'] = isset($data['ts_create']) ? $data['ts_create'] : null;
        $this->container['white_label_configs'] = isset($data['white_label_configs']) ? $data['white_label_configs'] : null;
        $this->container['user_type'] = isset($data['user_type']) ? $data['user_type'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getUserDiscriminatorAllowableValues();
        if (!is_null($this->container['user_discriminator']) && !in_array($this->container['user_discriminator'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'user_discriminator', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id User Id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets phone_number
     *
     * @return string
     */
    public function getPhoneNumber()
    {
        return $this->container['phone_number'];
    }

    /**
     * Sets phone_number
     *
     * @param string $phone_number Phone Number
     *
     * @return $this
     */
    public function setPhoneNumber($phone_number)
    {
        $this->container['phone_number'] = $phone_number;

        return $this;
    }

    /**
     * Gets email
     *
     * @return string
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string $email Email
     *
     * @return $this
     */
    public function setEmail($email)
    {
        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets customer_name
     *
     * @return string
     */
    public function getCustomerName()
    {
        return $this->container['customer_name'];
    }

    /**
     * Sets customer_name
     *
     * @param string $customer_name Customer Name
     *
     * @return $this
     */
    public function setCustomerName($customer_name)
    {
        $this->container['customer_name'] = $customer_name;

        return $this;
    }

    /**
     * Gets has_logged_in
     *
     * @return bool
     */
    public function getHasLoggedIn()
    {
        return $this->container['has_logged_in'];
    }

    /**
     * Sets has_logged_in
     *
     * @param bool $has_logged_in Has Logged In
     *
     * @return $this
     */
    public function setHasLoggedIn($has_logged_in)
    {
        $this->container['has_logged_in'] = $has_logged_in;

        return $this;
    }

    /**
     * Gets user_discriminator
     *
     * @return string
     */
    public function getUserDiscriminator()
    {
        return $this->container['user_discriminator'];
    }

    /**
     * Sets user_discriminator
     *
     * @param string $user_discriminator User Discriminator
     *
     * @return $this
     */
    public function setUserDiscriminator($user_discriminator)
    {
        $allowedValues = $this->getUserDiscriminatorAllowableValues();
        if (!is_null($user_discriminator) && !in_array($user_discriminator, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'user_discriminator', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['user_discriminator'] = $user_discriminator;

        return $this;
    }

    /**
     * Gets ts_create
     *
     * @return \DateTime
     */
    public function getTsCreate()
    {
        return $this->container['ts_create'];
    }

    /**
     * Sets ts_create
     *
     * @param \DateTime $ts_create Timestamp Created
     *
     * @return $this
     */
    public function setTsCreate($ts_create)
    {
        $this->container['ts_create'] = $ts_create;

        return $this;
    }

    /**
     * Gets white_label_configs
     *
     * @return \Flipdish\\Client\Models\UserWhiteLabelConfig[]
     */
    public function getWhiteLabelConfigs()
    {
        return $this->container['white_label_configs'];
    }

    /**
     * Sets white_label_configs
     *
     * @param \Flipdish\\Client\Models\UserWhiteLabelConfig[] $white_label_configs WhiteLabel Configs
     *
     * @return $this
     */
    public function setWhiteLabelConfigs($white_label_configs)
    {
        $this->container['white_label_configs'] = $white_label_configs;

        return $this;
    }

    /**
     * Gets user_type
     *
     * @return string
     */
    public function getUserType()
    {
        return $this->container['user_type'];
    }

    /**
     * Sets user_type
     *
     * @param string $user_type User Type
     *
     * @return $this
     */
    public function setUserType($user_type)
    {
        $this->container['user_type'] = $user_type;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


