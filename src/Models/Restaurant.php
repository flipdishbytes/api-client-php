<?php
/**
 * Restaurant
 *
 * PHP version 5
 *
 * @category Class
 * @package  Flipdish\\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Flipdish Open API v1.0
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.43
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Flipdish\\Client\Models;

use \ArrayAccess;
use \Flipdish\\Client\ObjectSerializer;

/**
 * Restaurant Class Doc Comment
 *
 * @category Class
 * @description Restaurant search result
 * @package  Flipdish\\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Restaurant implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Restaurant';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'white_label_configs' => '\Flipdish\\Client\Models\WhiteLabelConfig[]',
        'virtual_restaurant_id' => 'int',
        'virtual_restaurant_name' => 'string',
        'virtual_restaurant_url' => 'string',
        'physical_restaurant_id' => 'int',
        'physical_restaurant_name' => 'string',
        'physical_restaurant_address' => 'string',
        'menu_id' => 'int',
        'is_archived' => 'bool',
        'is_published' => 'bool',
        'flipdish_stripe_custom_connected_accounts' => 'int[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'white_label_configs' => null,
        'virtual_restaurant_id' => 'int32',
        'virtual_restaurant_name' => null,
        'virtual_restaurant_url' => null,
        'physical_restaurant_id' => 'int32',
        'physical_restaurant_name' => null,
        'physical_restaurant_address' => null,
        'menu_id' => 'int32',
        'is_archived' => null,
        'is_published' => null,
        'flipdish_stripe_custom_connected_accounts' => 'int32'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'white_label_configs' => 'WhiteLabelConfigs',
        'virtual_restaurant_id' => 'VirtualRestaurantId',
        'virtual_restaurant_name' => 'VirtualRestaurantName',
        'virtual_restaurant_url' => 'VirtualRestaurantUrl',
        'physical_restaurant_id' => 'PhysicalRestaurantId',
        'physical_restaurant_name' => 'PhysicalRestaurantName',
        'physical_restaurant_address' => 'PhysicalRestaurantAddress',
        'menu_id' => 'MenuId',
        'is_archived' => 'IsArchived',
        'is_published' => 'IsPublished',
        'flipdish_stripe_custom_connected_accounts' => 'FlipdishStripeCustomConnectedAccounts'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'white_label_configs' => 'setWhiteLabelConfigs',
        'virtual_restaurant_id' => 'setVirtualRestaurantId',
        'virtual_restaurant_name' => 'setVirtualRestaurantName',
        'virtual_restaurant_url' => 'setVirtualRestaurantUrl',
        'physical_restaurant_id' => 'setPhysicalRestaurantId',
        'physical_restaurant_name' => 'setPhysicalRestaurantName',
        'physical_restaurant_address' => 'setPhysicalRestaurantAddress',
        'menu_id' => 'setMenuId',
        'is_archived' => 'setIsArchived',
        'is_published' => 'setIsPublished',
        'flipdish_stripe_custom_connected_accounts' => 'setFlipdishStripeCustomConnectedAccounts'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'white_label_configs' => 'getWhiteLabelConfigs',
        'virtual_restaurant_id' => 'getVirtualRestaurantId',
        'virtual_restaurant_name' => 'getVirtualRestaurantName',
        'virtual_restaurant_url' => 'getVirtualRestaurantUrl',
        'physical_restaurant_id' => 'getPhysicalRestaurantId',
        'physical_restaurant_name' => 'getPhysicalRestaurantName',
        'physical_restaurant_address' => 'getPhysicalRestaurantAddress',
        'menu_id' => 'getMenuId',
        'is_archived' => 'getIsArchived',
        'is_published' => 'getIsPublished',
        'flipdish_stripe_custom_connected_accounts' => 'getFlipdishStripeCustomConnectedAccounts'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['white_label_configs'] = isset($data['white_label_configs']) ? $data['white_label_configs'] : null;
        $this->container['virtual_restaurant_id'] = isset($data['virtual_restaurant_id']) ? $data['virtual_restaurant_id'] : null;
        $this->container['virtual_restaurant_name'] = isset($data['virtual_restaurant_name']) ? $data['virtual_restaurant_name'] : null;
        $this->container['virtual_restaurant_url'] = isset($data['virtual_restaurant_url']) ? $data['virtual_restaurant_url'] : null;
        $this->container['physical_restaurant_id'] = isset($data['physical_restaurant_id']) ? $data['physical_restaurant_id'] : null;
        $this->container['physical_restaurant_name'] = isset($data['physical_restaurant_name']) ? $data['physical_restaurant_name'] : null;
        $this->container['physical_restaurant_address'] = isset($data['physical_restaurant_address']) ? $data['physical_restaurant_address'] : null;
        $this->container['menu_id'] = isset($data['menu_id']) ? $data['menu_id'] : null;
        $this->container['is_archived'] = isset($data['is_archived']) ? $data['is_archived'] : null;
        $this->container['is_published'] = isset($data['is_published']) ? $data['is_published'] : null;
        $this->container['flipdish_stripe_custom_connected_accounts'] = isset($data['flipdish_stripe_custom_connected_accounts']) ? $data['flipdish_stripe_custom_connected_accounts'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets white_label_configs
     *
     * @return \Flipdish\\Client\Models\WhiteLabelConfig[]
     */
    public function getWhiteLabelConfigs()
    {
        return $this->container['white_label_configs'];
    }

    /**
     * Sets white_label_configs
     *
     * @param \Flipdish\\Client\Models\WhiteLabelConfig[] $white_label_configs Collection of white label configurations
     *
     * @return $this
     */
    public function setWhiteLabelConfigs($white_label_configs)
    {
        $this->container['white_label_configs'] = $white_label_configs;

        return $this;
    }

    /**
     * Gets virtual_restaurant_id
     *
     * @return int
     */
    public function getVirtualRestaurantId()
    {
        return $this->container['virtual_restaurant_id'];
    }

    /**
     * Sets virtual_restaurant_id
     *
     * @param int $virtual_restaurant_id Virtual restaurant identifier
     *
     * @return $this
     */
    public function setVirtualRestaurantId($virtual_restaurant_id)
    {
        $this->container['virtual_restaurant_id'] = $virtual_restaurant_id;

        return $this;
    }

    /**
     * Gets virtual_restaurant_name
     *
     * @return string
     */
    public function getVirtualRestaurantName()
    {
        return $this->container['virtual_restaurant_name'];
    }

    /**
     * Sets virtual_restaurant_name
     *
     * @param string $virtual_restaurant_name Virtual restaurant name
     *
     * @return $this
     */
    public function setVirtualRestaurantName($virtual_restaurant_name)
    {
        $this->container['virtual_restaurant_name'] = $virtual_restaurant_name;

        return $this;
    }

    /**
     * Gets virtual_restaurant_url
     *
     * @return string
     */
    public function getVirtualRestaurantUrl()
    {
        return $this->container['virtual_restaurant_url'];
    }

    /**
     * Sets virtual_restaurant_url
     *
     * @param string $virtual_restaurant_url Virtual restaurant URL
     *
     * @return $this
     */
    public function setVirtualRestaurantUrl($virtual_restaurant_url)
    {
        $this->container['virtual_restaurant_url'] = $virtual_restaurant_url;

        return $this;
    }

    /**
     * Gets physical_restaurant_id
     *
     * @return int
     */
    public function getPhysicalRestaurantId()
    {
        return $this->container['physical_restaurant_id'];
    }

    /**
     * Sets physical_restaurant_id
     *
     * @param int $physical_restaurant_id Physical restaurant identifier
     *
     * @return $this
     */
    public function setPhysicalRestaurantId($physical_restaurant_id)
    {
        $this->container['physical_restaurant_id'] = $physical_restaurant_id;

        return $this;
    }

    /**
     * Gets physical_restaurant_name
     *
     * @return string
     */
    public function getPhysicalRestaurantName()
    {
        return $this->container['physical_restaurant_name'];
    }

    /**
     * Sets physical_restaurant_name
     *
     * @param string $physical_restaurant_name Physical restaurant name
     *
     * @return $this
     */
    public function setPhysicalRestaurantName($physical_restaurant_name)
    {
        $this->container['physical_restaurant_name'] = $physical_restaurant_name;

        return $this;
    }

    /**
     * Gets physical_restaurant_address
     *
     * @return string
     */
    public function getPhysicalRestaurantAddress()
    {
        return $this->container['physical_restaurant_address'];
    }

    /**
     * Sets physical_restaurant_address
     *
     * @param string $physical_restaurant_address Physical restaurant address
     *
     * @return $this
     */
    public function setPhysicalRestaurantAddress($physical_restaurant_address)
    {
        $this->container['physical_restaurant_address'] = $physical_restaurant_address;

        return $this;
    }

    /**
     * Gets menu_id
     *
     * @return int
     */
    public function getMenuId()
    {
        return $this->container['menu_id'];
    }

    /**
     * Sets menu_id
     *
     * @param int $menu_id Menu identifier
     *
     * @return $this
     */
    public function setMenuId($menu_id)
    {
        $this->container['menu_id'] = $menu_id;

        return $this;
    }

    /**
     * Gets is_archived
     *
     * @return bool
     */
    public function getIsArchived()
    {
        return $this->container['is_archived'];
    }

    /**
     * Sets is_archived
     *
     * @param bool $is_archived Indicates if the restaurant is archived
     *
     * @return $this
     */
    public function setIsArchived($is_archived)
    {
        $this->container['is_archived'] = $is_archived;

        return $this;
    }

    /**
     * Gets is_published
     *
     * @return bool
     */
    public function getIsPublished()
    {
        return $this->container['is_published'];
    }

    /**
     * Sets is_published
     *
     * @param bool $is_published Indicates if the restaurant is published
     *
     * @return $this
     */
    public function setIsPublished($is_published)
    {
        $this->container['is_published'] = $is_published;

        return $this;
    }

    /**
     * Gets flipdish_stripe_custom_connected_accounts
     *
     * @return int[]
     */
    public function getFlipdishStripeCustomConnectedAccounts()
    {
        return $this->container['flipdish_stripe_custom_connected_accounts'];
    }

    /**
     * Sets flipdish_stripe_custom_connected_accounts
     *
     * @param int[] $flipdish_stripe_custom_connected_accounts List of Flipdish Stripe custom connected account identifiers
     *
     * @return $this
     */
    public function setFlipdishStripeCustomConnectedAccounts($flipdish_stripe_custom_connected_accounts)
    {
        $this->container['flipdish_stripe_custom_connected_accounts'] = $flipdish_stripe_custom_connected_accounts;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


