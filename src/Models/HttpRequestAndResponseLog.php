<?php
/**
 * HttpRequestAndResponseLog
 *
 * PHP version 5
 *
 * @category Class
 * @package  Flipdish\\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Flipdish Open API v1.0
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.19
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Flipdish\\Client\Models;

use \ArrayAccess;
use \Flipdish\\Client\ObjectSerializer;

/**
 * HttpRequestAndResponseLog Class Doc Comment
 *
 * @category Class
 * @description Http Request and Response Log
 * @package  Flipdish\\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class HttpRequestAndResponseLog implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'HttpRequestAndResponseLog';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'guid' => 'string',
        'verb' => 'string',
        'request_uri' => 'string',
        'status_code' => 'int',
        'reason_phrase' => 'string',
        'call_duration_in_milliseconds' => 'int',
        'user_id' => 'string',
        'ip_address' => 'string',
        'created_date_time' => 'string',
        'request_headers' => 'map[string,string]',
        'request_body' => 'string',
        'request_length' => 'int',
        'response_headers' => 'map[string,string]',
        'response_body' => 'string',
        'response_length' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'guid' => 'uuid',
        'verb' => null,
        'request_uri' => null,
        'status_code' => 'int32',
        'reason_phrase' => null,
        'call_duration_in_milliseconds' => 'int64',
        'user_id' => null,
        'ip_address' => null,
        'created_date_time' => null,
        'request_headers' => null,
        'request_body' => null,
        'request_length' => 'int64',
        'response_headers' => null,
        'response_body' => null,
        'response_length' => 'int64'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'guid' => 'Guid',
        'verb' => 'Verb',
        'request_uri' => 'RequestUri',
        'status_code' => 'StatusCode',
        'reason_phrase' => 'ReasonPhrase',
        'call_duration_in_milliseconds' => 'CallDurationInMilliseconds',
        'user_id' => 'UserId',
        'ip_address' => 'IpAddress',
        'created_date_time' => 'CreatedDateTime',
        'request_headers' => 'RequestHeaders',
        'request_body' => 'RequestBody',
        'request_length' => 'RequestLength',
        'response_headers' => 'ResponseHeaders',
        'response_body' => 'ResponseBody',
        'response_length' => 'ResponseLength'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'guid' => 'setGuid',
        'verb' => 'setVerb',
        'request_uri' => 'setRequestUri',
        'status_code' => 'setStatusCode',
        'reason_phrase' => 'setReasonPhrase',
        'call_duration_in_milliseconds' => 'setCallDurationInMilliseconds',
        'user_id' => 'setUserId',
        'ip_address' => 'setIpAddress',
        'created_date_time' => 'setCreatedDateTime',
        'request_headers' => 'setRequestHeaders',
        'request_body' => 'setRequestBody',
        'request_length' => 'setRequestLength',
        'response_headers' => 'setResponseHeaders',
        'response_body' => 'setResponseBody',
        'response_length' => 'setResponseLength'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'guid' => 'getGuid',
        'verb' => 'getVerb',
        'request_uri' => 'getRequestUri',
        'status_code' => 'getStatusCode',
        'reason_phrase' => 'getReasonPhrase',
        'call_duration_in_milliseconds' => 'getCallDurationInMilliseconds',
        'user_id' => 'getUserId',
        'ip_address' => 'getIpAddress',
        'created_date_time' => 'getCreatedDateTime',
        'request_headers' => 'getRequestHeaders',
        'request_body' => 'getRequestBody',
        'request_length' => 'getRequestLength',
        'response_headers' => 'getResponseHeaders',
        'response_body' => 'getResponseBody',
        'response_length' => 'getResponseLength'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['guid'] = isset($data['guid']) ? $data['guid'] : null;
        $this->container['verb'] = isset($data['verb']) ? $data['verb'] : null;
        $this->container['request_uri'] = isset($data['request_uri']) ? $data['request_uri'] : null;
        $this->container['status_code'] = isset($data['status_code']) ? $data['status_code'] : null;
        $this->container['reason_phrase'] = isset($data['reason_phrase']) ? $data['reason_phrase'] : null;
        $this->container['call_duration_in_milliseconds'] = isset($data['call_duration_in_milliseconds']) ? $data['call_duration_in_milliseconds'] : null;
        $this->container['user_id'] = isset($data['user_id']) ? $data['user_id'] : null;
        $this->container['ip_address'] = isset($data['ip_address']) ? $data['ip_address'] : null;
        $this->container['created_date_time'] = isset($data['created_date_time']) ? $data['created_date_time'] : null;
        $this->container['request_headers'] = isset($data['request_headers']) ? $data['request_headers'] : null;
        $this->container['request_body'] = isset($data['request_body']) ? $data['request_body'] : null;
        $this->container['request_length'] = isset($data['request_length']) ? $data['request_length'] : null;
        $this->container['response_headers'] = isset($data['response_headers']) ? $data['response_headers'] : null;
        $this->container['response_body'] = isset($data['response_body']) ? $data['response_body'] : null;
        $this->container['response_length'] = isset($data['response_length']) ? $data['response_length'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets guid
     *
     * @return string
     */
    public function getGuid()
    {
        return $this->container['guid'];
    }

    /**
     * Sets guid
     *
     * @param string $guid Id of the log
     *
     * @return $this
     */
    public function setGuid($guid)
    {
        $this->container['guid'] = $guid;

        return $this;
    }

    /**
     * Gets verb
     *
     * @return string
     */
    public function getVerb()
    {
        return $this->container['verb'];
    }

    /**
     * Sets verb
     *
     * @param string $verb Verb associated with the HTTP call.
     *
     * @return $this
     */
    public function setVerb($verb)
    {
        $this->container['verb'] = $verb;

        return $this;
    }

    /**
     * Gets request_uri
     *
     * @return string
     */
    public function getRequestUri()
    {
        return $this->container['request_uri'];
    }

    /**
     * Sets request_uri
     *
     * @param string $request_uri Http request URI.
     *
     * @return $this
     */
    public function setRequestUri($request_uri)
    {
        $this->container['request_uri'] = $request_uri;

        return $this;
    }

    /**
     * Gets status_code
     *
     * @return int
     */
    public function getStatusCode()
    {
        return $this->container['status_code'];
    }

    /**
     * Sets status_code
     *
     * @param int $status_code Http response status code.
     *
     * @return $this
     */
    public function setStatusCode($status_code)
    {
        $this->container['status_code'] = $status_code;

        return $this;
    }

    /**
     * Gets reason_phrase
     *
     * @return string
     */
    public function getReasonPhrase()
    {
        return $this->container['reason_phrase'];
    }

    /**
     * Sets reason_phrase
     *
     * @param string $reason_phrase Http response status line.
     *
     * @return $this
     */
    public function setReasonPhrase($reason_phrase)
    {
        $this->container['reason_phrase'] = $reason_phrase;

        return $this;
    }

    /**
     * Gets call_duration_in_milliseconds
     *
     * @return int
     */
    public function getCallDurationInMilliseconds()
    {
        return $this->container['call_duration_in_milliseconds'];
    }

    /**
     * Sets call_duration_in_milliseconds
     *
     * @param int $call_duration_in_milliseconds Call duration representing the duration of the HTTP call in milliseconds.
     *
     * @return $this
     */
    public function setCallDurationInMilliseconds($call_duration_in_milliseconds)
    {
        $this->container['call_duration_in_milliseconds'] = $call_duration_in_milliseconds;

        return $this;
    }

    /**
     * Gets user_id
     *
     * @return string
     */
    public function getUserId()
    {
        return $this->container['user_id'];
    }

    /**
     * Sets user_id
     *
     * @param string $user_id Identity of the caller.
     *
     * @return $this
     */
    public function setUserId($user_id)
    {
        $this->container['user_id'] = $user_id;

        return $this;
    }

    /**
     * Gets ip_address
     *
     * @return string
     */
    public function getIpAddress()
    {
        return $this->container['ip_address'];
    }

    /**
     * Sets ip_address
     *
     * @param string $ip_address Ip address of the caller
     *
     * @return $this
     */
    public function setIpAddress($ip_address)
    {
        $this->container['ip_address'] = $ip_address;

        return $this;
    }

    /**
     * Gets created_date_time
     *
     * @return string
     */
    public function getCreatedDateTime()
    {
        return $this->container['created_date_time'];
    }

    /**
     * Sets created_date_time
     *
     * @param string $created_date_time Timestamp at which the HTTP call took place.
     *
     * @return $this
     */
    public function setCreatedDateTime($created_date_time)
    {
        $this->container['created_date_time'] = $created_date_time;

        return $this;
    }

    /**
     * Gets request_headers
     *
     * @return map[string,string]
     */
    public function getRequestHeaders()
    {
        return $this->container['request_headers'];
    }

    /**
     * Sets request_headers
     *
     * @param map[string,string] $request_headers Http request headers.
     *
     * @return $this
     */
    public function setRequestHeaders($request_headers)
    {
        $this->container['request_headers'] = $request_headers;

        return $this;
    }

    /**
     * Gets request_body
     *
     * @return string
     */
    public function getRequestBody()
    {
        return $this->container['request_body'];
    }

    /**
     * Sets request_body
     *
     * @param string $request_body Http request body, if any.
     *
     * @return $this
     */
    public function setRequestBody($request_body)
    {
        $this->container['request_body'] = $request_body;

        return $this;
    }

    /**
     * Gets request_length
     *
     * @return int
     */
    public function getRequestLength()
    {
        return $this->container['request_length'];
    }

    /**
     * Sets request_length
     *
     * @param int $request_length Http request content-length
     *
     * @return $this
     */
    public function setRequestLength($request_length)
    {
        $this->container['request_length'] = $request_length;

        return $this;
    }

    /**
     * Gets response_headers
     *
     * @return map[string,string]
     */
    public function getResponseHeaders()
    {
        return $this->container['response_headers'];
    }

    /**
     * Sets response_headers
     *
     * @param map[string,string] $response_headers Http response headers.
     *
     * @return $this
     */
    public function setResponseHeaders($response_headers)
    {
        $this->container['response_headers'] = $response_headers;

        return $this;
    }

    /**
     * Gets response_body
     *
     * @return string
     */
    public function getResponseBody()
    {
        return $this->container['response_body'];
    }

    /**
     * Sets response_body
     *
     * @param string $response_body Http response body.
     *
     * @return $this
     */
    public function setResponseBody($response_body)
    {
        $this->container['response_body'] = $response_body;

        return $this;
    }

    /**
     * Gets response_length
     *
     * @return int
     */
    public function getResponseLength()
    {
        return $this->container['response_length'];
    }

    /**
     * Sets response_length
     *
     * @param int $response_length Http response content-length
     *
     * @return $this
     */
    public function setResponseLength($response_length)
    {
        $this->container['response_length'] = $response_length;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


