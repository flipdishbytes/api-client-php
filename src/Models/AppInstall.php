<?php
/**
 * AppInstall
 *
 * PHP version 5
 *
 * @category Class
 * @package  Flipdish\\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Flipdish Open API v1.0
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.43
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Flipdish\\Client\Models;

use \ArrayAccess;
use \Flipdish\\Client\ObjectSerializer;

/**
 * AppInstall Class Doc Comment
 *
 * @category Class
 * @description App Install information
 * @package  Flipdish\\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class AppInstall implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'AppInstall';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'name' => 'string',
        'first_login' => '\DateTime',
        'first_login_human' => 'string',
        'last_activity' => '\DateTime',
        'last_activity_human' => 'string',
        'google_tokens' => 'int',
        'apple_tokens' => 'int',
        'order_count' => 'int',
        'user_agent_at_signup' => 'string',
        'user_agent_most_recent' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'name' => null,
        'first_login' => 'date-time',
        'first_login_human' => null,
        'last_activity' => 'date-time',
        'last_activity_human' => null,
        'google_tokens' => 'int32',
        'apple_tokens' => 'int32',
        'order_count' => 'int32',
        'user_agent_at_signup' => null,
        'user_agent_most_recent' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'Name',
        'first_login' => 'FirstLogin',
        'first_login_human' => 'FirstLoginHuman',
        'last_activity' => 'LastActivity',
        'last_activity_human' => 'LastActivityHuman',
        'google_tokens' => 'GoogleTokens',
        'apple_tokens' => 'AppleTokens',
        'order_count' => 'OrderCount',
        'user_agent_at_signup' => 'UserAgentAtSignup',
        'user_agent_most_recent' => 'UserAgentMostRecent'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
        'first_login' => 'setFirstLogin',
        'first_login_human' => 'setFirstLoginHuman',
        'last_activity' => 'setLastActivity',
        'last_activity_human' => 'setLastActivityHuman',
        'google_tokens' => 'setGoogleTokens',
        'apple_tokens' => 'setAppleTokens',
        'order_count' => 'setOrderCount',
        'user_agent_at_signup' => 'setUserAgentAtSignup',
        'user_agent_most_recent' => 'setUserAgentMostRecent'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
        'first_login' => 'getFirstLogin',
        'first_login_human' => 'getFirstLoginHuman',
        'last_activity' => 'getLastActivity',
        'last_activity_human' => 'getLastActivityHuman',
        'google_tokens' => 'getGoogleTokens',
        'apple_tokens' => 'getAppleTokens',
        'order_count' => 'getOrderCount',
        'user_agent_at_signup' => 'getUserAgentAtSignup',
        'user_agent_most_recent' => 'getUserAgentMostRecent'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['first_login'] = isset($data['first_login']) ? $data['first_login'] : null;
        $this->container['first_login_human'] = isset($data['first_login_human']) ? $data['first_login_human'] : null;
        $this->container['last_activity'] = isset($data['last_activity']) ? $data['last_activity'] : null;
        $this->container['last_activity_human'] = isset($data['last_activity_human']) ? $data['last_activity_human'] : null;
        $this->container['google_tokens'] = isset($data['google_tokens']) ? $data['google_tokens'] : null;
        $this->container['apple_tokens'] = isset($data['apple_tokens']) ? $data['apple_tokens'] : null;
        $this->container['order_count'] = isset($data['order_count']) ? $data['order_count'] : null;
        $this->container['user_agent_at_signup'] = isset($data['user_agent_at_signup']) ? $data['user_agent_at_signup'] : null;
        $this->container['user_agent_most_recent'] = isset($data['user_agent_most_recent']) ? $data['user_agent_most_recent'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name Name of the installed application.
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets first_login
     *
     * @return \DateTime
     */
    public function getFirstLogin()
    {
        return $this->container['first_login'];
    }

    /**
     * Sets first_login
     *
     * @param \DateTime $first_login Date and time of the user's first login to the app.
     *
     * @return $this
     */
    public function setFirstLogin($first_login)
    {
        $this->container['first_login'] = $first_login;

        return $this;
    }

    /**
     * Gets first_login_human
     *
     * @return string
     */
    public function getFirstLoginHuman()
    {
        return $this->container['first_login_human'];
    }

    /**
     * Sets first_login_human
     *
     * @param string $first_login_human Human-readable representation of the first login date.
     *
     * @return $this
     */
    public function setFirstLoginHuman($first_login_human)
    {
        $this->container['first_login_human'] = $first_login_human;

        return $this;
    }

    /**
     * Gets last_activity
     *
     * @return \DateTime
     */
    public function getLastActivity()
    {
        return $this->container['last_activity'];
    }

    /**
     * Sets last_activity
     *
     * @param \DateTime $last_activity Date and time of the user's last activity in the app.
     *
     * @return $this
     */
    public function setLastActivity($last_activity)
    {
        $this->container['last_activity'] = $last_activity;

        return $this;
    }

    /**
     * Gets last_activity_human
     *
     * @return string
     */
    public function getLastActivityHuman()
    {
        return $this->container['last_activity_human'];
    }

    /**
     * Sets last_activity_human
     *
     * @param string $last_activity_human Human-readable representation of the last activity date.
     *
     * @return $this
     */
    public function setLastActivityHuman($last_activity_human)
    {
        $this->container['last_activity_human'] = $last_activity_human;

        return $this;
    }

    /**
     * Gets google_tokens
     *
     * @return int
     */
    public function getGoogleTokens()
    {
        return $this->container['google_tokens'];
    }

    /**
     * Sets google_tokens
     *
     * @param int $google_tokens Number of Google push notification tokens associated with the app install.
     *
     * @return $this
     */
    public function setGoogleTokens($google_tokens)
    {
        $this->container['google_tokens'] = $google_tokens;

        return $this;
    }

    /**
     * Gets apple_tokens
     *
     * @return int
     */
    public function getAppleTokens()
    {
        return $this->container['apple_tokens'];
    }

    /**
     * Sets apple_tokens
     *
     * @param int $apple_tokens Number of Apple push notification tokens associated with the app install.
     *
     * @return $this
     */
    public function setAppleTokens($apple_tokens)
    {
        $this->container['apple_tokens'] = $apple_tokens;

        return $this;
    }

    /**
     * Gets order_count
     *
     * @return int
     */
    public function getOrderCount()
    {
        return $this->container['order_count'];
    }

    /**
     * Sets order_count
     *
     * @param int $order_count Number of orders placed by the user through this app install.
     *
     * @return $this
     */
    public function setOrderCount($order_count)
    {
        $this->container['order_count'] = $order_count;

        return $this;
    }

    /**
     * Gets user_agent_at_signup
     *
     * @return string
     */
    public function getUserAgentAtSignup()
    {
        return $this->container['user_agent_at_signup'];
    }

    /**
     * Sets user_agent_at_signup
     *
     * @param string $user_agent_at_signup User agent string at the time of signup.
     *
     * @return $this
     */
    public function setUserAgentAtSignup($user_agent_at_signup)
    {
        $this->container['user_agent_at_signup'] = $user_agent_at_signup;

        return $this;
    }

    /**
     * Gets user_agent_most_recent
     *
     * @return string
     */
    public function getUserAgentMostRecent()
    {
        return $this->container['user_agent_most_recent'];
    }

    /**
     * Sets user_agent_most_recent
     *
     * @param string $user_agent_most_recent Most recent user agent string used by the user.
     *
     * @return $this
     */
    public function setUserAgentMostRecent($user_agent_most_recent)
    {
        $this->container['user_agent_most_recent'] = $user_agent_most_recent;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


