<?php
/**
 * StoreKioskSettingModel
 *
 * PHP version 5
 *
 * @category Class
 * @package  Flipdish\\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Flipdish Open API v1.0
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.19
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Flipdish\\Client\Models;

use \ArrayAccess;
use \Flipdish\\Client\ObjectSerializer;

/**
 * StoreKioskSettingModel Class Doc Comment
 *
 * @category Class
 * @description Store Kiosk Settings
 * @package  Flipdish\\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class StoreKioskSettingModel implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'StoreKioskSettingModel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'kiosk_name' => 'string',
        'require_customer_name' => 'bool',
        'require_customer_phone_number' => 'bool',
        'request_table_number' => 'bool',
        'offer_dine_in_or_takeaway_options' => 'bool',
        'sort_order' => 'int',
        'config_id' => 'int',
        'store_id' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'kiosk_name' => null,
        'require_customer_name' => null,
        'require_customer_phone_number' => null,
        'request_table_number' => null,
        'offer_dine_in_or_takeaway_options' => null,
        'sort_order' => 'int32',
        'config_id' => 'int32',
        'store_id' => 'int32'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'kiosk_name' => 'KioskName',
        'require_customer_name' => 'RequireCustomerName',
        'require_customer_phone_number' => 'RequireCustomerPhoneNumber',
        'request_table_number' => 'RequestTableNumber',
        'offer_dine_in_or_takeaway_options' => 'OfferDineInOrTakeawayOptions',
        'sort_order' => 'SortOrder',
        'config_id' => 'ConfigId',
        'store_id' => 'StoreId'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'kiosk_name' => 'setKioskName',
        'require_customer_name' => 'setRequireCustomerName',
        'require_customer_phone_number' => 'setRequireCustomerPhoneNumber',
        'request_table_number' => 'setRequestTableNumber',
        'offer_dine_in_or_takeaway_options' => 'setOfferDineInOrTakeawayOptions',
        'sort_order' => 'setSortOrder',
        'config_id' => 'setConfigId',
        'store_id' => 'setStoreId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'kiosk_name' => 'getKioskName',
        'require_customer_name' => 'getRequireCustomerName',
        'require_customer_phone_number' => 'getRequireCustomerPhoneNumber',
        'request_table_number' => 'getRequestTableNumber',
        'offer_dine_in_or_takeaway_options' => 'getOfferDineInOrTakeawayOptions',
        'sort_order' => 'getSortOrder',
        'config_id' => 'getConfigId',
        'store_id' => 'getStoreId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['kiosk_name'] = isset($data['kiosk_name']) ? $data['kiosk_name'] : null;
        $this->container['require_customer_name'] = isset($data['require_customer_name']) ? $data['require_customer_name'] : null;
        $this->container['require_customer_phone_number'] = isset($data['require_customer_phone_number']) ? $data['require_customer_phone_number'] : null;
        $this->container['request_table_number'] = isset($data['request_table_number']) ? $data['request_table_number'] : null;
        $this->container['offer_dine_in_or_takeaway_options'] = isset($data['offer_dine_in_or_takeaway_options']) ? $data['offer_dine_in_or_takeaway_options'] : null;
        $this->container['sort_order'] = isset($data['sort_order']) ? $data['sort_order'] : null;
        $this->container['config_id'] = isset($data['config_id']) ? $data['config_id'] : null;
        $this->container['store_id'] = isset($data['store_id']) ? $data['store_id'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets kiosk_name
     *
     * @return string
     */
    public function getKioskName()
    {
        return $this->container['kiosk_name'];
    }

    /**
     * Sets kiosk_name
     *
     * @param string $kiosk_name Name of the Kiosk
     *
     * @return $this
     */
    public function setKioskName($kiosk_name)
    {
        $this->container['kiosk_name'] = $kiosk_name;

        return $this;
    }

    /**
     * Gets require_customer_name
     *
     * @return bool
     */
    public function getRequireCustomerName()
    {
        return $this->container['require_customer_name'];
    }

    /**
     * Sets require_customer_name
     *
     * @param bool $require_customer_name Require customer name flag
     *
     * @return $this
     */
    public function setRequireCustomerName($require_customer_name)
    {
        $this->container['require_customer_name'] = $require_customer_name;

        return $this;
    }

    /**
     * Gets require_customer_phone_number
     *
     * @return bool
     */
    public function getRequireCustomerPhoneNumber()
    {
        return $this->container['require_customer_phone_number'];
    }

    /**
     * Sets require_customer_phone_number
     *
     * @param bool $require_customer_phone_number Require customer phone number flag
     *
     * @return $this
     */
    public function setRequireCustomerPhoneNumber($require_customer_phone_number)
    {
        $this->container['require_customer_phone_number'] = $require_customer_phone_number;

        return $this;
    }

    /**
     * Gets request_table_number
     *
     * @return bool
     */
    public function getRequestTableNumber()
    {
        return $this->container['request_table_number'];
    }

    /**
     * Sets request_table_number
     *
     * @param bool $request_table_number Request table number flag
     *
     * @return $this
     */
    public function setRequestTableNumber($request_table_number)
    {
        $this->container['request_table_number'] = $request_table_number;

        return $this;
    }

    /**
     * Gets offer_dine_in_or_takeaway_options
     *
     * @return bool
     */
    public function getOfferDineInOrTakeawayOptions()
    {
        return $this->container['offer_dine_in_or_takeaway_options'];
    }

    /**
     * Sets offer_dine_in_or_takeaway_options
     *
     * @param bool $offer_dine_in_or_takeaway_options Offer Dine-In/Takeaway option flag
     *
     * @return $this
     */
    public function setOfferDineInOrTakeawayOptions($offer_dine_in_or_takeaway_options)
    {
        $this->container['offer_dine_in_or_takeaway_options'] = $offer_dine_in_or_takeaway_options;

        return $this;
    }

    /**
     * Gets sort_order
     *
     * @return int
     */
    public function getSortOrder()
    {
        return $this->container['sort_order'];
    }

    /**
     * Sets sort_order
     *
     * @param int $sort_order Order in which the Kiosks should be listed
     *
     * @return $this
     */
    public function setSortOrder($sort_order)
    {
        $this->container['sort_order'] = $sort_order;

        return $this;
    }

    /**
     * Gets config_id
     *
     * @return int
     */
    public function getConfigId()
    {
        return $this->container['config_id'];
    }

    /**
     * Sets config_id
     *
     * @param int $config_id Kiosk (Hydra) config id
     *
     * @return $this
     */
    public function setConfigId($config_id)
    {
        $this->container['config_id'] = $config_id;

        return $this;
    }

    /**
     * Gets store_id
     *
     * @return int
     */
    public function getStoreId()
    {
        return $this->container['store_id'];
    }

    /**
     * Sets store_id
     *
     * @param int $store_id Id of the store (Physical Restaurant)
     *
     * @return $this
     */
    public function setStoreId($store_id)
    {
        $this->container['store_id'] = $store_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


