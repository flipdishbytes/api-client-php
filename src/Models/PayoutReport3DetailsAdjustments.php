<?php
/**
 * PayoutReport3DetailsAdjustments
 *
 * PHP version 5
 *
 * @category Class
 * @package  Flipdish\\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Flipdish Open API v1.0
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.43
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Flipdish\\Client\Models;

use \ArrayAccess;
use \Flipdish\\Client\ObjectSerializer;

/**
 * PayoutReport3DetailsAdjustments Class Doc Comment
 *
 * @category Class
 * @package  Flipdish\\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PayoutReport3DetailsAdjustments implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'PayoutReport3DetailsAdjustments';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'opening_balance_date' => '\DateTime',
        'closing_balance_date' => '\DateTime',
        'opening_balance' => 'double',
        'refunds_on_card_orders' => 'double',
        'refunds_on_cash_orders' => 'double',
        'cash_customer_fees' => 'double',
        'chargebacks' => 'double',
        'other_transactions' => 'double',
        'closing_balance' => 'double',
        'balance_repaid' => 'double',
        'refunds_on_card_orders_brackets_amount' => 'double',
        'refunds_on_card_orders_brackets_out_of_amount' => 'double',
        'refunds_on_cash_orders_brackets_amount' => 'double',
        'refunds_on_cash_orders_brackets_out_of_amount' => 'double',
        'cash_customer_fees_brackets_amount' => 'double',
        'cash_customer_fees_brackets_out_of_amount' => 'double',
        'balance_change' => 'double',
        'previous_payout_id' => 'int',
        'next_payout_id' => 'int',
        'refunded_fees_on_chargebacks' => 'double',
        'total_chargeback_cost' => 'double'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'opening_balance_date' => 'date-time',
        'closing_balance_date' => 'date-time',
        'opening_balance' => 'double',
        'refunds_on_card_orders' => 'double',
        'refunds_on_cash_orders' => 'double',
        'cash_customer_fees' => 'double',
        'chargebacks' => 'double',
        'other_transactions' => 'double',
        'closing_balance' => 'double',
        'balance_repaid' => 'double',
        'refunds_on_card_orders_brackets_amount' => 'double',
        'refunds_on_card_orders_brackets_out_of_amount' => 'double',
        'refunds_on_cash_orders_brackets_amount' => 'double',
        'refunds_on_cash_orders_brackets_out_of_amount' => 'double',
        'cash_customer_fees_brackets_amount' => 'double',
        'cash_customer_fees_brackets_out_of_amount' => 'double',
        'balance_change' => 'double',
        'previous_payout_id' => 'int32',
        'next_payout_id' => 'int32',
        'refunded_fees_on_chargebacks' => 'double',
        'total_chargeback_cost' => 'double'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'opening_balance_date' => 'OpeningBalanceDate',
        'closing_balance_date' => 'ClosingBalanceDate',
        'opening_balance' => 'OpeningBalance',
        'refunds_on_card_orders' => 'RefundsOnCardOrders',
        'refunds_on_cash_orders' => 'RefundsOnCashOrders',
        'cash_customer_fees' => 'CashCustomerFees',
        'chargebacks' => 'Chargebacks',
        'other_transactions' => 'OtherTransactions',
        'closing_balance' => 'ClosingBalance',
        'balance_repaid' => 'BalanceRepaid',
        'refunds_on_card_orders_brackets_amount' => 'RefundsOnCardOrdersBracketsAmount',
        'refunds_on_card_orders_brackets_out_of_amount' => 'RefundsOnCardOrdersBracketsOutOfAmount',
        'refunds_on_cash_orders_brackets_amount' => 'RefundsOnCashOrdersBracketsAmount',
        'refunds_on_cash_orders_brackets_out_of_amount' => 'RefundsOnCashOrdersBracketsOutOfAmount',
        'cash_customer_fees_brackets_amount' => 'CashCustomerFeesBracketsAmount',
        'cash_customer_fees_brackets_out_of_amount' => 'CashCustomerFeesBracketsOutOfAmount',
        'balance_change' => 'BalanceChange',
        'previous_payout_id' => 'PreviousPayoutId',
        'next_payout_id' => 'NextPayoutId',
        'refunded_fees_on_chargebacks' => 'RefundedFeesOnChargebacks',
        'total_chargeback_cost' => 'TotalChargebackCost'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'opening_balance_date' => 'setOpeningBalanceDate',
        'closing_balance_date' => 'setClosingBalanceDate',
        'opening_balance' => 'setOpeningBalance',
        'refunds_on_card_orders' => 'setRefundsOnCardOrders',
        'refunds_on_cash_orders' => 'setRefundsOnCashOrders',
        'cash_customer_fees' => 'setCashCustomerFees',
        'chargebacks' => 'setChargebacks',
        'other_transactions' => 'setOtherTransactions',
        'closing_balance' => 'setClosingBalance',
        'balance_repaid' => 'setBalanceRepaid',
        'refunds_on_card_orders_brackets_amount' => 'setRefundsOnCardOrdersBracketsAmount',
        'refunds_on_card_orders_brackets_out_of_amount' => 'setRefundsOnCardOrdersBracketsOutOfAmount',
        'refunds_on_cash_orders_brackets_amount' => 'setRefundsOnCashOrdersBracketsAmount',
        'refunds_on_cash_orders_brackets_out_of_amount' => 'setRefundsOnCashOrdersBracketsOutOfAmount',
        'cash_customer_fees_brackets_amount' => 'setCashCustomerFeesBracketsAmount',
        'cash_customer_fees_brackets_out_of_amount' => 'setCashCustomerFeesBracketsOutOfAmount',
        'balance_change' => 'setBalanceChange',
        'previous_payout_id' => 'setPreviousPayoutId',
        'next_payout_id' => 'setNextPayoutId',
        'refunded_fees_on_chargebacks' => 'setRefundedFeesOnChargebacks',
        'total_chargeback_cost' => 'setTotalChargebackCost'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'opening_balance_date' => 'getOpeningBalanceDate',
        'closing_balance_date' => 'getClosingBalanceDate',
        'opening_balance' => 'getOpeningBalance',
        'refunds_on_card_orders' => 'getRefundsOnCardOrders',
        'refunds_on_cash_orders' => 'getRefundsOnCashOrders',
        'cash_customer_fees' => 'getCashCustomerFees',
        'chargebacks' => 'getChargebacks',
        'other_transactions' => 'getOtherTransactions',
        'closing_balance' => 'getClosingBalance',
        'balance_repaid' => 'getBalanceRepaid',
        'refunds_on_card_orders_brackets_amount' => 'getRefundsOnCardOrdersBracketsAmount',
        'refunds_on_card_orders_brackets_out_of_amount' => 'getRefundsOnCardOrdersBracketsOutOfAmount',
        'refunds_on_cash_orders_brackets_amount' => 'getRefundsOnCashOrdersBracketsAmount',
        'refunds_on_cash_orders_brackets_out_of_amount' => 'getRefundsOnCashOrdersBracketsOutOfAmount',
        'cash_customer_fees_brackets_amount' => 'getCashCustomerFeesBracketsAmount',
        'cash_customer_fees_brackets_out_of_amount' => 'getCashCustomerFeesBracketsOutOfAmount',
        'balance_change' => 'getBalanceChange',
        'previous_payout_id' => 'getPreviousPayoutId',
        'next_payout_id' => 'getNextPayoutId',
        'refunded_fees_on_chargebacks' => 'getRefundedFeesOnChargebacks',
        'total_chargeback_cost' => 'getTotalChargebackCost'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['opening_balance_date'] = isset($data['opening_balance_date']) ? $data['opening_balance_date'] : null;
        $this->container['closing_balance_date'] = isset($data['closing_balance_date']) ? $data['closing_balance_date'] : null;
        $this->container['opening_balance'] = isset($data['opening_balance']) ? $data['opening_balance'] : null;
        $this->container['refunds_on_card_orders'] = isset($data['refunds_on_card_orders']) ? $data['refunds_on_card_orders'] : null;
        $this->container['refunds_on_cash_orders'] = isset($data['refunds_on_cash_orders']) ? $data['refunds_on_cash_orders'] : null;
        $this->container['cash_customer_fees'] = isset($data['cash_customer_fees']) ? $data['cash_customer_fees'] : null;
        $this->container['chargebacks'] = isset($data['chargebacks']) ? $data['chargebacks'] : null;
        $this->container['other_transactions'] = isset($data['other_transactions']) ? $data['other_transactions'] : null;
        $this->container['closing_balance'] = isset($data['closing_balance']) ? $data['closing_balance'] : null;
        $this->container['balance_repaid'] = isset($data['balance_repaid']) ? $data['balance_repaid'] : null;
        $this->container['refunds_on_card_orders_brackets_amount'] = isset($data['refunds_on_card_orders_brackets_amount']) ? $data['refunds_on_card_orders_brackets_amount'] : null;
        $this->container['refunds_on_card_orders_brackets_out_of_amount'] = isset($data['refunds_on_card_orders_brackets_out_of_amount']) ? $data['refunds_on_card_orders_brackets_out_of_amount'] : null;
        $this->container['refunds_on_cash_orders_brackets_amount'] = isset($data['refunds_on_cash_orders_brackets_amount']) ? $data['refunds_on_cash_orders_brackets_amount'] : null;
        $this->container['refunds_on_cash_orders_brackets_out_of_amount'] = isset($data['refunds_on_cash_orders_brackets_out_of_amount']) ? $data['refunds_on_cash_orders_brackets_out_of_amount'] : null;
        $this->container['cash_customer_fees_brackets_amount'] = isset($data['cash_customer_fees_brackets_amount']) ? $data['cash_customer_fees_brackets_amount'] : null;
        $this->container['cash_customer_fees_brackets_out_of_amount'] = isset($data['cash_customer_fees_brackets_out_of_amount']) ? $data['cash_customer_fees_brackets_out_of_amount'] : null;
        $this->container['balance_change'] = isset($data['balance_change']) ? $data['balance_change'] : null;
        $this->container['previous_payout_id'] = isset($data['previous_payout_id']) ? $data['previous_payout_id'] : null;
        $this->container['next_payout_id'] = isset($data['next_payout_id']) ? $data['next_payout_id'] : null;
        $this->container['refunded_fees_on_chargebacks'] = isset($data['refunded_fees_on_chargebacks']) ? $data['refunded_fees_on_chargebacks'] : null;
        $this->container['total_chargeback_cost'] = isset($data['total_chargeback_cost']) ? $data['total_chargeback_cost'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets opening_balance_date
     *
     * @return \DateTime
     */
    public function getOpeningBalanceDate()
    {
        return $this->container['opening_balance_date'];
    }

    /**
     * Sets opening_balance_date
     *
     * @param \DateTime $opening_balance_date opening_balance_date
     *
     * @return $this
     */
    public function setOpeningBalanceDate($opening_balance_date)
    {
        $this->container['opening_balance_date'] = $opening_balance_date;

        return $this;
    }

    /**
     * Gets closing_balance_date
     *
     * @return \DateTime
     */
    public function getClosingBalanceDate()
    {
        return $this->container['closing_balance_date'];
    }

    /**
     * Sets closing_balance_date
     *
     * @param \DateTime $closing_balance_date closing_balance_date
     *
     * @return $this
     */
    public function setClosingBalanceDate($closing_balance_date)
    {
        $this->container['closing_balance_date'] = $closing_balance_date;

        return $this;
    }

    /**
     * Gets opening_balance
     *
     * @return double
     */
    public function getOpeningBalance()
    {
        return $this->container['opening_balance'];
    }

    /**
     * Sets opening_balance
     *
     * @param double $opening_balance opening_balance
     *
     * @return $this
     */
    public function setOpeningBalance($opening_balance)
    {
        $this->container['opening_balance'] = $opening_balance;

        return $this;
    }

    /**
     * Gets refunds_on_card_orders
     *
     * @return double
     */
    public function getRefundsOnCardOrders()
    {
        return $this->container['refunds_on_card_orders'];
    }

    /**
     * Sets refunds_on_card_orders
     *
     * @param double $refunds_on_card_orders refunds_on_card_orders
     *
     * @return $this
     */
    public function setRefundsOnCardOrders($refunds_on_card_orders)
    {
        $this->container['refunds_on_card_orders'] = $refunds_on_card_orders;

        return $this;
    }

    /**
     * Gets refunds_on_cash_orders
     *
     * @return double
     */
    public function getRefundsOnCashOrders()
    {
        return $this->container['refunds_on_cash_orders'];
    }

    /**
     * Sets refunds_on_cash_orders
     *
     * @param double $refunds_on_cash_orders refunds_on_cash_orders
     *
     * @return $this
     */
    public function setRefundsOnCashOrders($refunds_on_cash_orders)
    {
        $this->container['refunds_on_cash_orders'] = $refunds_on_cash_orders;

        return $this;
    }

    /**
     * Gets cash_customer_fees
     *
     * @return double
     */
    public function getCashCustomerFees()
    {
        return $this->container['cash_customer_fees'];
    }

    /**
     * Sets cash_customer_fees
     *
     * @param double $cash_customer_fees cash_customer_fees
     *
     * @return $this
     */
    public function setCashCustomerFees($cash_customer_fees)
    {
        $this->container['cash_customer_fees'] = $cash_customer_fees;

        return $this;
    }

    /**
     * Gets chargebacks
     *
     * @return double
     */
    public function getChargebacks()
    {
        return $this->container['chargebacks'];
    }

    /**
     * Sets chargebacks
     *
     * @param double $chargebacks chargebacks
     *
     * @return $this
     */
    public function setChargebacks($chargebacks)
    {
        $this->container['chargebacks'] = $chargebacks;

        return $this;
    }

    /**
     * Gets other_transactions
     *
     * @return double
     */
    public function getOtherTransactions()
    {
        return $this->container['other_transactions'];
    }

    /**
     * Sets other_transactions
     *
     * @param double $other_transactions other_transactions
     *
     * @return $this
     */
    public function setOtherTransactions($other_transactions)
    {
        $this->container['other_transactions'] = $other_transactions;

        return $this;
    }

    /**
     * Gets closing_balance
     *
     * @return double
     */
    public function getClosingBalance()
    {
        return $this->container['closing_balance'];
    }

    /**
     * Sets closing_balance
     *
     * @param double $closing_balance closing_balance
     *
     * @return $this
     */
    public function setClosingBalance($closing_balance)
    {
        $this->container['closing_balance'] = $closing_balance;

        return $this;
    }

    /**
     * Gets balance_repaid
     *
     * @return double
     */
    public function getBalanceRepaid()
    {
        return $this->container['balance_repaid'];
    }

    /**
     * Sets balance_repaid
     *
     * @param double $balance_repaid balance_repaid
     *
     * @return $this
     */
    public function setBalanceRepaid($balance_repaid)
    {
        $this->container['balance_repaid'] = $balance_repaid;

        return $this;
    }

    /**
     * Gets refunds_on_card_orders_brackets_amount
     *
     * @return double
     */
    public function getRefundsOnCardOrdersBracketsAmount()
    {
        return $this->container['refunds_on_card_orders_brackets_amount'];
    }

    /**
     * Sets refunds_on_card_orders_brackets_amount
     *
     * @param double $refunds_on_card_orders_brackets_amount refunds_on_card_orders_brackets_amount
     *
     * @return $this
     */
    public function setRefundsOnCardOrdersBracketsAmount($refunds_on_card_orders_brackets_amount)
    {
        $this->container['refunds_on_card_orders_brackets_amount'] = $refunds_on_card_orders_brackets_amount;

        return $this;
    }

    /**
     * Gets refunds_on_card_orders_brackets_out_of_amount
     *
     * @return double
     */
    public function getRefundsOnCardOrdersBracketsOutOfAmount()
    {
        return $this->container['refunds_on_card_orders_brackets_out_of_amount'];
    }

    /**
     * Sets refunds_on_card_orders_brackets_out_of_amount
     *
     * @param double $refunds_on_card_orders_brackets_out_of_amount refunds_on_card_orders_brackets_out_of_amount
     *
     * @return $this
     */
    public function setRefundsOnCardOrdersBracketsOutOfAmount($refunds_on_card_orders_brackets_out_of_amount)
    {
        $this->container['refunds_on_card_orders_brackets_out_of_amount'] = $refunds_on_card_orders_brackets_out_of_amount;

        return $this;
    }

    /**
     * Gets refunds_on_cash_orders_brackets_amount
     *
     * @return double
     */
    public function getRefundsOnCashOrdersBracketsAmount()
    {
        return $this->container['refunds_on_cash_orders_brackets_amount'];
    }

    /**
     * Sets refunds_on_cash_orders_brackets_amount
     *
     * @param double $refunds_on_cash_orders_brackets_amount refunds_on_cash_orders_brackets_amount
     *
     * @return $this
     */
    public function setRefundsOnCashOrdersBracketsAmount($refunds_on_cash_orders_brackets_amount)
    {
        $this->container['refunds_on_cash_orders_brackets_amount'] = $refunds_on_cash_orders_brackets_amount;

        return $this;
    }

    /**
     * Gets refunds_on_cash_orders_brackets_out_of_amount
     *
     * @return double
     */
    public function getRefundsOnCashOrdersBracketsOutOfAmount()
    {
        return $this->container['refunds_on_cash_orders_brackets_out_of_amount'];
    }

    /**
     * Sets refunds_on_cash_orders_brackets_out_of_amount
     *
     * @param double $refunds_on_cash_orders_brackets_out_of_amount refunds_on_cash_orders_brackets_out_of_amount
     *
     * @return $this
     */
    public function setRefundsOnCashOrdersBracketsOutOfAmount($refunds_on_cash_orders_brackets_out_of_amount)
    {
        $this->container['refunds_on_cash_orders_brackets_out_of_amount'] = $refunds_on_cash_orders_brackets_out_of_amount;

        return $this;
    }

    /**
     * Gets cash_customer_fees_brackets_amount
     *
     * @return double
     */
    public function getCashCustomerFeesBracketsAmount()
    {
        return $this->container['cash_customer_fees_brackets_amount'];
    }

    /**
     * Sets cash_customer_fees_brackets_amount
     *
     * @param double $cash_customer_fees_brackets_amount cash_customer_fees_brackets_amount
     *
     * @return $this
     */
    public function setCashCustomerFeesBracketsAmount($cash_customer_fees_brackets_amount)
    {
        $this->container['cash_customer_fees_brackets_amount'] = $cash_customer_fees_brackets_amount;

        return $this;
    }

    /**
     * Gets cash_customer_fees_brackets_out_of_amount
     *
     * @return double
     */
    public function getCashCustomerFeesBracketsOutOfAmount()
    {
        return $this->container['cash_customer_fees_brackets_out_of_amount'];
    }

    /**
     * Sets cash_customer_fees_brackets_out_of_amount
     *
     * @param double $cash_customer_fees_brackets_out_of_amount cash_customer_fees_brackets_out_of_amount
     *
     * @return $this
     */
    public function setCashCustomerFeesBracketsOutOfAmount($cash_customer_fees_brackets_out_of_amount)
    {
        $this->container['cash_customer_fees_brackets_out_of_amount'] = $cash_customer_fees_brackets_out_of_amount;

        return $this;
    }

    /**
     * Gets balance_change
     *
     * @return double
     */
    public function getBalanceChange()
    {
        return $this->container['balance_change'];
    }

    /**
     * Sets balance_change
     *
     * @param double $balance_change balance_change
     *
     * @return $this
     */
    public function setBalanceChange($balance_change)
    {
        $this->container['balance_change'] = $balance_change;

        return $this;
    }

    /**
     * Gets previous_payout_id
     *
     * @return int
     */
    public function getPreviousPayoutId()
    {
        return $this->container['previous_payout_id'];
    }

    /**
     * Sets previous_payout_id
     *
     * @param int $previous_payout_id previous_payout_id
     *
     * @return $this
     */
    public function setPreviousPayoutId($previous_payout_id)
    {
        $this->container['previous_payout_id'] = $previous_payout_id;

        return $this;
    }

    /**
     * Gets next_payout_id
     *
     * @return int
     */
    public function getNextPayoutId()
    {
        return $this->container['next_payout_id'];
    }

    /**
     * Sets next_payout_id
     *
     * @param int $next_payout_id next_payout_id
     *
     * @return $this
     */
    public function setNextPayoutId($next_payout_id)
    {
        $this->container['next_payout_id'] = $next_payout_id;

        return $this;
    }

    /**
     * Gets refunded_fees_on_chargebacks
     *
     * @return double
     */
    public function getRefundedFeesOnChargebacks()
    {
        return $this->container['refunded_fees_on_chargebacks'];
    }

    /**
     * Sets refunded_fees_on_chargebacks
     *
     * @param double $refunded_fees_on_chargebacks refunded_fees_on_chargebacks
     *
     * @return $this
     */
    public function setRefundedFeesOnChargebacks($refunded_fees_on_chargebacks)
    {
        $this->container['refunded_fees_on_chargebacks'] = $refunded_fees_on_chargebacks;

        return $this;
    }

    /**
     * Gets total_chargeback_cost
     *
     * @return double
     */
    public function getTotalChargebackCost()
    {
        return $this->container['total_chargeback_cost'];
    }

    /**
     * Sets total_chargeback_cost
     *
     * @param double $total_chargeback_cost total_chargeback_cost
     *
     * @return $this
     */
    public function setTotalChargebackCost($total_chargeback_cost)
    {
        $this->container['total_chargeback_cost'] = $total_chargeback_cost;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


