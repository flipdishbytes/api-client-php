<?php
/**
 * PayoutReport3DetailsAdjustments
 *
 * PHP version 5
 *
 * @category Class
 * @package  Flipdish\\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Flipdish Open API v1.0
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.19
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Flipdish\\Client\Models;

use \ArrayAccess;
use \Flipdish\\Client\ObjectSerializer;

/**
 * PayoutReport3DetailsAdjustments Class Doc Comment
 *
 * @category Class
 * @package  Flipdish\\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PayoutReport3DetailsAdjustments implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'PayoutReport3DetailsAdjustments';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'opening_balance_date' => '\DateTime',
        'closing_balance_date' => '\DateTime',
        'opening_balance' => 'double',
        'refunds_on_card_orders' => 'double',
        'refunds_on_cash_orders' => 'double',
        'cash_customer_fees' => 'double',
        'chargebacks' => 'double',
        'other_transactions' => 'double',
        'closing_balance' => 'double',
        'opening_balance_credit' => 'double',
        'opening_balance_debit' => 'double',
        'refunds_on_card_orders_credit' => 'double',
        'refunds_on_card_orders_debit' => 'double',
        'refunds_on_cash_orders_credit' => 'double',
        'refunds_on_cash_orders_debit' => 'double',
        'cash_customer_fees_credit' => 'double',
        'cash_customer_fees_debit' => 'double',
        'chargebacks_credit' => 'double',
        'chargebacks_debit' => 'double',
        'other_transactions_credit' => 'double',
        'other_transactions_debit' => 'double',
        'closing_balance_credit' => 'double',
        'closing_balance_debit' => 'double'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'opening_balance_date' => 'date-time',
        'closing_balance_date' => 'date-time',
        'opening_balance' => 'double',
        'refunds_on_card_orders' => 'double',
        'refunds_on_cash_orders' => 'double',
        'cash_customer_fees' => 'double',
        'chargebacks' => 'double',
        'other_transactions' => 'double',
        'closing_balance' => 'double',
        'opening_balance_credit' => 'double',
        'opening_balance_debit' => 'double',
        'refunds_on_card_orders_credit' => 'double',
        'refunds_on_card_orders_debit' => 'double',
        'refunds_on_cash_orders_credit' => 'double',
        'refunds_on_cash_orders_debit' => 'double',
        'cash_customer_fees_credit' => 'double',
        'cash_customer_fees_debit' => 'double',
        'chargebacks_credit' => 'double',
        'chargebacks_debit' => 'double',
        'other_transactions_credit' => 'double',
        'other_transactions_debit' => 'double',
        'closing_balance_credit' => 'double',
        'closing_balance_debit' => 'double'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'opening_balance_date' => 'OpeningBalanceDate',
        'closing_balance_date' => 'ClosingBalanceDate',
        'opening_balance' => 'OpeningBalance',
        'refunds_on_card_orders' => 'RefundsOnCardOrders',
        'refunds_on_cash_orders' => 'RefundsOnCashOrders',
        'cash_customer_fees' => 'CashCustomerFees',
        'chargebacks' => 'Chargebacks',
        'other_transactions' => 'OtherTransactions',
        'closing_balance' => 'ClosingBalance',
        'opening_balance_credit' => 'OpeningBalanceCredit',
        'opening_balance_debit' => 'OpeningBalanceDebit',
        'refunds_on_card_orders_credit' => 'RefundsOnCardOrdersCredit',
        'refunds_on_card_orders_debit' => 'RefundsOnCardOrdersDebit',
        'refunds_on_cash_orders_credit' => 'RefundsOnCashOrdersCredit',
        'refunds_on_cash_orders_debit' => 'RefundsOnCashOrdersDebit',
        'cash_customer_fees_credit' => 'CashCustomerFeesCredit',
        'cash_customer_fees_debit' => 'CashCustomerFeesDebit',
        'chargebacks_credit' => 'ChargebacksCredit',
        'chargebacks_debit' => 'ChargebacksDebit',
        'other_transactions_credit' => 'OtherTransactionsCredit',
        'other_transactions_debit' => 'OtherTransactionsDebit',
        'closing_balance_credit' => 'ClosingBalanceCredit',
        'closing_balance_debit' => 'ClosingBalanceDebit'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'opening_balance_date' => 'setOpeningBalanceDate',
        'closing_balance_date' => 'setClosingBalanceDate',
        'opening_balance' => 'setOpeningBalance',
        'refunds_on_card_orders' => 'setRefundsOnCardOrders',
        'refunds_on_cash_orders' => 'setRefundsOnCashOrders',
        'cash_customer_fees' => 'setCashCustomerFees',
        'chargebacks' => 'setChargebacks',
        'other_transactions' => 'setOtherTransactions',
        'closing_balance' => 'setClosingBalance',
        'opening_balance_credit' => 'setOpeningBalanceCredit',
        'opening_balance_debit' => 'setOpeningBalanceDebit',
        'refunds_on_card_orders_credit' => 'setRefundsOnCardOrdersCredit',
        'refunds_on_card_orders_debit' => 'setRefundsOnCardOrdersDebit',
        'refunds_on_cash_orders_credit' => 'setRefundsOnCashOrdersCredit',
        'refunds_on_cash_orders_debit' => 'setRefundsOnCashOrdersDebit',
        'cash_customer_fees_credit' => 'setCashCustomerFeesCredit',
        'cash_customer_fees_debit' => 'setCashCustomerFeesDebit',
        'chargebacks_credit' => 'setChargebacksCredit',
        'chargebacks_debit' => 'setChargebacksDebit',
        'other_transactions_credit' => 'setOtherTransactionsCredit',
        'other_transactions_debit' => 'setOtherTransactionsDebit',
        'closing_balance_credit' => 'setClosingBalanceCredit',
        'closing_balance_debit' => 'setClosingBalanceDebit'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'opening_balance_date' => 'getOpeningBalanceDate',
        'closing_balance_date' => 'getClosingBalanceDate',
        'opening_balance' => 'getOpeningBalance',
        'refunds_on_card_orders' => 'getRefundsOnCardOrders',
        'refunds_on_cash_orders' => 'getRefundsOnCashOrders',
        'cash_customer_fees' => 'getCashCustomerFees',
        'chargebacks' => 'getChargebacks',
        'other_transactions' => 'getOtherTransactions',
        'closing_balance' => 'getClosingBalance',
        'opening_balance_credit' => 'getOpeningBalanceCredit',
        'opening_balance_debit' => 'getOpeningBalanceDebit',
        'refunds_on_card_orders_credit' => 'getRefundsOnCardOrdersCredit',
        'refunds_on_card_orders_debit' => 'getRefundsOnCardOrdersDebit',
        'refunds_on_cash_orders_credit' => 'getRefundsOnCashOrdersCredit',
        'refunds_on_cash_orders_debit' => 'getRefundsOnCashOrdersDebit',
        'cash_customer_fees_credit' => 'getCashCustomerFeesCredit',
        'cash_customer_fees_debit' => 'getCashCustomerFeesDebit',
        'chargebacks_credit' => 'getChargebacksCredit',
        'chargebacks_debit' => 'getChargebacksDebit',
        'other_transactions_credit' => 'getOtherTransactionsCredit',
        'other_transactions_debit' => 'getOtherTransactionsDebit',
        'closing_balance_credit' => 'getClosingBalanceCredit',
        'closing_balance_debit' => 'getClosingBalanceDebit'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['opening_balance_date'] = isset($data['opening_balance_date']) ? $data['opening_balance_date'] : null;
        $this->container['closing_balance_date'] = isset($data['closing_balance_date']) ? $data['closing_balance_date'] : null;
        $this->container['opening_balance'] = isset($data['opening_balance']) ? $data['opening_balance'] : null;
        $this->container['refunds_on_card_orders'] = isset($data['refunds_on_card_orders']) ? $data['refunds_on_card_orders'] : null;
        $this->container['refunds_on_cash_orders'] = isset($data['refunds_on_cash_orders']) ? $data['refunds_on_cash_orders'] : null;
        $this->container['cash_customer_fees'] = isset($data['cash_customer_fees']) ? $data['cash_customer_fees'] : null;
        $this->container['chargebacks'] = isset($data['chargebacks']) ? $data['chargebacks'] : null;
        $this->container['other_transactions'] = isset($data['other_transactions']) ? $data['other_transactions'] : null;
        $this->container['closing_balance'] = isset($data['closing_balance']) ? $data['closing_balance'] : null;
        $this->container['opening_balance_credit'] = isset($data['opening_balance_credit']) ? $data['opening_balance_credit'] : null;
        $this->container['opening_balance_debit'] = isset($data['opening_balance_debit']) ? $data['opening_balance_debit'] : null;
        $this->container['refunds_on_card_orders_credit'] = isset($data['refunds_on_card_orders_credit']) ? $data['refunds_on_card_orders_credit'] : null;
        $this->container['refunds_on_card_orders_debit'] = isset($data['refunds_on_card_orders_debit']) ? $data['refunds_on_card_orders_debit'] : null;
        $this->container['refunds_on_cash_orders_credit'] = isset($data['refunds_on_cash_orders_credit']) ? $data['refunds_on_cash_orders_credit'] : null;
        $this->container['refunds_on_cash_orders_debit'] = isset($data['refunds_on_cash_orders_debit']) ? $data['refunds_on_cash_orders_debit'] : null;
        $this->container['cash_customer_fees_credit'] = isset($data['cash_customer_fees_credit']) ? $data['cash_customer_fees_credit'] : null;
        $this->container['cash_customer_fees_debit'] = isset($data['cash_customer_fees_debit']) ? $data['cash_customer_fees_debit'] : null;
        $this->container['chargebacks_credit'] = isset($data['chargebacks_credit']) ? $data['chargebacks_credit'] : null;
        $this->container['chargebacks_debit'] = isset($data['chargebacks_debit']) ? $data['chargebacks_debit'] : null;
        $this->container['other_transactions_credit'] = isset($data['other_transactions_credit']) ? $data['other_transactions_credit'] : null;
        $this->container['other_transactions_debit'] = isset($data['other_transactions_debit']) ? $data['other_transactions_debit'] : null;
        $this->container['closing_balance_credit'] = isset($data['closing_balance_credit']) ? $data['closing_balance_credit'] : null;
        $this->container['closing_balance_debit'] = isset($data['closing_balance_debit']) ? $data['closing_balance_debit'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets opening_balance_date
     *
     * @return \DateTime
     */
    public function getOpeningBalanceDate()
    {
        return $this->container['opening_balance_date'];
    }

    /**
     * Sets opening_balance_date
     *
     * @param \DateTime $opening_balance_date opening_balance_date
     *
     * @return $this
     */
    public function setOpeningBalanceDate($opening_balance_date)
    {
        $this->container['opening_balance_date'] = $opening_balance_date;

        return $this;
    }

    /**
     * Gets closing_balance_date
     *
     * @return \DateTime
     */
    public function getClosingBalanceDate()
    {
        return $this->container['closing_balance_date'];
    }

    /**
     * Sets closing_balance_date
     *
     * @param \DateTime $closing_balance_date closing_balance_date
     *
     * @return $this
     */
    public function setClosingBalanceDate($closing_balance_date)
    {
        $this->container['closing_balance_date'] = $closing_balance_date;

        return $this;
    }

    /**
     * Gets opening_balance
     *
     * @return double
     */
    public function getOpeningBalance()
    {
        return $this->container['opening_balance'];
    }

    /**
     * Sets opening_balance
     *
     * @param double $opening_balance opening_balance
     *
     * @return $this
     */
    public function setOpeningBalance($opening_balance)
    {
        $this->container['opening_balance'] = $opening_balance;

        return $this;
    }

    /**
     * Gets refunds_on_card_orders
     *
     * @return double
     */
    public function getRefundsOnCardOrders()
    {
        return $this->container['refunds_on_card_orders'];
    }

    /**
     * Sets refunds_on_card_orders
     *
     * @param double $refunds_on_card_orders refunds_on_card_orders
     *
     * @return $this
     */
    public function setRefundsOnCardOrders($refunds_on_card_orders)
    {
        $this->container['refunds_on_card_orders'] = $refunds_on_card_orders;

        return $this;
    }

    /**
     * Gets refunds_on_cash_orders
     *
     * @return double
     */
    public function getRefundsOnCashOrders()
    {
        return $this->container['refunds_on_cash_orders'];
    }

    /**
     * Sets refunds_on_cash_orders
     *
     * @param double $refunds_on_cash_orders refunds_on_cash_orders
     *
     * @return $this
     */
    public function setRefundsOnCashOrders($refunds_on_cash_orders)
    {
        $this->container['refunds_on_cash_orders'] = $refunds_on_cash_orders;

        return $this;
    }

    /**
     * Gets cash_customer_fees
     *
     * @return double
     */
    public function getCashCustomerFees()
    {
        return $this->container['cash_customer_fees'];
    }

    /**
     * Sets cash_customer_fees
     *
     * @param double $cash_customer_fees cash_customer_fees
     *
     * @return $this
     */
    public function setCashCustomerFees($cash_customer_fees)
    {
        $this->container['cash_customer_fees'] = $cash_customer_fees;

        return $this;
    }

    /**
     * Gets chargebacks
     *
     * @return double
     */
    public function getChargebacks()
    {
        return $this->container['chargebacks'];
    }

    /**
     * Sets chargebacks
     *
     * @param double $chargebacks chargebacks
     *
     * @return $this
     */
    public function setChargebacks($chargebacks)
    {
        $this->container['chargebacks'] = $chargebacks;

        return $this;
    }

    /**
     * Gets other_transactions
     *
     * @return double
     */
    public function getOtherTransactions()
    {
        return $this->container['other_transactions'];
    }

    /**
     * Sets other_transactions
     *
     * @param double $other_transactions other_transactions
     *
     * @return $this
     */
    public function setOtherTransactions($other_transactions)
    {
        $this->container['other_transactions'] = $other_transactions;

        return $this;
    }

    /**
     * Gets closing_balance
     *
     * @return double
     */
    public function getClosingBalance()
    {
        return $this->container['closing_balance'];
    }

    /**
     * Sets closing_balance
     *
     * @param double $closing_balance closing_balance
     *
     * @return $this
     */
    public function setClosingBalance($closing_balance)
    {
        $this->container['closing_balance'] = $closing_balance;

        return $this;
    }

    /**
     * Gets opening_balance_credit
     *
     * @return double
     */
    public function getOpeningBalanceCredit()
    {
        return $this->container['opening_balance_credit'];
    }

    /**
     * Sets opening_balance_credit
     *
     * @param double $opening_balance_credit opening_balance_credit
     *
     * @return $this
     */
    public function setOpeningBalanceCredit($opening_balance_credit)
    {
        $this->container['opening_balance_credit'] = $opening_balance_credit;

        return $this;
    }

    /**
     * Gets opening_balance_debit
     *
     * @return double
     */
    public function getOpeningBalanceDebit()
    {
        return $this->container['opening_balance_debit'];
    }

    /**
     * Sets opening_balance_debit
     *
     * @param double $opening_balance_debit opening_balance_debit
     *
     * @return $this
     */
    public function setOpeningBalanceDebit($opening_balance_debit)
    {
        $this->container['opening_balance_debit'] = $opening_balance_debit;

        return $this;
    }

    /**
     * Gets refunds_on_card_orders_credit
     *
     * @return double
     */
    public function getRefundsOnCardOrdersCredit()
    {
        return $this->container['refunds_on_card_orders_credit'];
    }

    /**
     * Sets refunds_on_card_orders_credit
     *
     * @param double $refunds_on_card_orders_credit refunds_on_card_orders_credit
     *
     * @return $this
     */
    public function setRefundsOnCardOrdersCredit($refunds_on_card_orders_credit)
    {
        $this->container['refunds_on_card_orders_credit'] = $refunds_on_card_orders_credit;

        return $this;
    }

    /**
     * Gets refunds_on_card_orders_debit
     *
     * @return double
     */
    public function getRefundsOnCardOrdersDebit()
    {
        return $this->container['refunds_on_card_orders_debit'];
    }

    /**
     * Sets refunds_on_card_orders_debit
     *
     * @param double $refunds_on_card_orders_debit refunds_on_card_orders_debit
     *
     * @return $this
     */
    public function setRefundsOnCardOrdersDebit($refunds_on_card_orders_debit)
    {
        $this->container['refunds_on_card_orders_debit'] = $refunds_on_card_orders_debit;

        return $this;
    }

    /**
     * Gets refunds_on_cash_orders_credit
     *
     * @return double
     */
    public function getRefundsOnCashOrdersCredit()
    {
        return $this->container['refunds_on_cash_orders_credit'];
    }

    /**
     * Sets refunds_on_cash_orders_credit
     *
     * @param double $refunds_on_cash_orders_credit refunds_on_cash_orders_credit
     *
     * @return $this
     */
    public function setRefundsOnCashOrdersCredit($refunds_on_cash_orders_credit)
    {
        $this->container['refunds_on_cash_orders_credit'] = $refunds_on_cash_orders_credit;

        return $this;
    }

    /**
     * Gets refunds_on_cash_orders_debit
     *
     * @return double
     */
    public function getRefundsOnCashOrdersDebit()
    {
        return $this->container['refunds_on_cash_orders_debit'];
    }

    /**
     * Sets refunds_on_cash_orders_debit
     *
     * @param double $refunds_on_cash_orders_debit refunds_on_cash_orders_debit
     *
     * @return $this
     */
    public function setRefundsOnCashOrdersDebit($refunds_on_cash_orders_debit)
    {
        $this->container['refunds_on_cash_orders_debit'] = $refunds_on_cash_orders_debit;

        return $this;
    }

    /**
     * Gets cash_customer_fees_credit
     *
     * @return double
     */
    public function getCashCustomerFeesCredit()
    {
        return $this->container['cash_customer_fees_credit'];
    }

    /**
     * Sets cash_customer_fees_credit
     *
     * @param double $cash_customer_fees_credit cash_customer_fees_credit
     *
     * @return $this
     */
    public function setCashCustomerFeesCredit($cash_customer_fees_credit)
    {
        $this->container['cash_customer_fees_credit'] = $cash_customer_fees_credit;

        return $this;
    }

    /**
     * Gets cash_customer_fees_debit
     *
     * @return double
     */
    public function getCashCustomerFeesDebit()
    {
        return $this->container['cash_customer_fees_debit'];
    }

    /**
     * Sets cash_customer_fees_debit
     *
     * @param double $cash_customer_fees_debit cash_customer_fees_debit
     *
     * @return $this
     */
    public function setCashCustomerFeesDebit($cash_customer_fees_debit)
    {
        $this->container['cash_customer_fees_debit'] = $cash_customer_fees_debit;

        return $this;
    }

    /**
     * Gets chargebacks_credit
     *
     * @return double
     */
    public function getChargebacksCredit()
    {
        return $this->container['chargebacks_credit'];
    }

    /**
     * Sets chargebacks_credit
     *
     * @param double $chargebacks_credit chargebacks_credit
     *
     * @return $this
     */
    public function setChargebacksCredit($chargebacks_credit)
    {
        $this->container['chargebacks_credit'] = $chargebacks_credit;

        return $this;
    }

    /**
     * Gets chargebacks_debit
     *
     * @return double
     */
    public function getChargebacksDebit()
    {
        return $this->container['chargebacks_debit'];
    }

    /**
     * Sets chargebacks_debit
     *
     * @param double $chargebacks_debit chargebacks_debit
     *
     * @return $this
     */
    public function setChargebacksDebit($chargebacks_debit)
    {
        $this->container['chargebacks_debit'] = $chargebacks_debit;

        return $this;
    }

    /**
     * Gets other_transactions_credit
     *
     * @return double
     */
    public function getOtherTransactionsCredit()
    {
        return $this->container['other_transactions_credit'];
    }

    /**
     * Sets other_transactions_credit
     *
     * @param double $other_transactions_credit other_transactions_credit
     *
     * @return $this
     */
    public function setOtherTransactionsCredit($other_transactions_credit)
    {
        $this->container['other_transactions_credit'] = $other_transactions_credit;

        return $this;
    }

    /**
     * Gets other_transactions_debit
     *
     * @return double
     */
    public function getOtherTransactionsDebit()
    {
        return $this->container['other_transactions_debit'];
    }

    /**
     * Sets other_transactions_debit
     *
     * @param double $other_transactions_debit other_transactions_debit
     *
     * @return $this
     */
    public function setOtherTransactionsDebit($other_transactions_debit)
    {
        $this->container['other_transactions_debit'] = $other_transactions_debit;

        return $this;
    }

    /**
     * Gets closing_balance_credit
     *
     * @return double
     */
    public function getClosingBalanceCredit()
    {
        return $this->container['closing_balance_credit'];
    }

    /**
     * Sets closing_balance_credit
     *
     * @param double $closing_balance_credit closing_balance_credit
     *
     * @return $this
     */
    public function setClosingBalanceCredit($closing_balance_credit)
    {
        $this->container['closing_balance_credit'] = $closing_balance_credit;

        return $this;
    }

    /**
     * Gets closing_balance_debit
     *
     * @return double
     */
    public function getClosingBalanceDebit()
    {
        return $this->container['closing_balance_debit'];
    }

    /**
     * Sets closing_balance_debit
     *
     * @param double $closing_balance_debit closing_balance_debit
     *
     * @return $this
     */
    public function setClosingBalanceDebit($closing_balance_debit)
    {
        $this->container['closing_balance_debit'] = $closing_balance_debit;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


