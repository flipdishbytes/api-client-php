<?php
/**
 * OrderSummary
 *
 * PHP version 5
 *
 * @category Class
 * @package  Flipdish\\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Flipdish Open API v1.0
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.43
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Flipdish\\Client\Models;

use \ArrayAccess;
use \Flipdish\\Client\ObjectSerializer;

/**
 * OrderSummary Class Doc Comment
 *
 * @category Class
 * @description Order summary
 * @package  Flipdish\\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class OrderSummary implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'OrderSummary';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'order_id' => 'int',
        'delivery_type' => 'string',
        'pickup_location_type' => 'string',
        'table_service_catagory' => 'string',
        'order_state' => 'string',
        'requested_for_time' => '\DateTime',
        'store_name' => 'string',
        'store_iana_time_zone' => 'string',
        'customer_name' => 'string',
        'customer_phone_number' => 'string',
        'amount' => 'double',
        'refunded_amount' => 'double',
        'payment_account_type' => 'string',
        'payment_status' => 'string',
        'currency' => 'string',
        'app_type' => 'string',
        'local_order_id' => 'string',
        'drop_off_location_id' => 'int',
        'drop_off_location' => 'string',
        'accepted_for' => '\DateTime',
        'channel' => '\Flipdish\\Client\Models\Channel',
        'in_fraud_zone' => 'bool',
        'unusual_high_value_order' => 'bool',
        'channel_order_id' => 'string',
        'channel_order_display_id' => 'string',
        'order_drop_off_location' => '\Flipdish\\Client\Models\OrderDropOffLocation',
        'order_batch_info' => '\Flipdish\\Client\Models\OrderBatchSummary',
        'delivery_location' => '\Flipdish\\Client\Models\DeliveryLocation'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'order_id' => 'int32',
        'delivery_type' => null,
        'pickup_location_type' => null,
        'table_service_catagory' => null,
        'order_state' => null,
        'requested_for_time' => 'date-time',
        'store_name' => null,
        'store_iana_time_zone' => null,
        'customer_name' => null,
        'customer_phone_number' => null,
        'amount' => 'double',
        'refunded_amount' => 'double',
        'payment_account_type' => null,
        'payment_status' => null,
        'currency' => null,
        'app_type' => null,
        'local_order_id' => null,
        'drop_off_location_id' => 'int32',
        'drop_off_location' => null,
        'accepted_for' => 'date-time',
        'channel' => null,
        'in_fraud_zone' => null,
        'unusual_high_value_order' => null,
        'channel_order_id' => null,
        'channel_order_display_id' => null,
        'order_drop_off_location' => null,
        'order_batch_info' => null,
        'delivery_location' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'order_id' => 'OrderId',
        'delivery_type' => 'DeliveryType',
        'pickup_location_type' => 'PickupLocationType',
        'table_service_catagory' => 'TableServiceCatagory',
        'order_state' => 'OrderState',
        'requested_for_time' => 'RequestedForTime',
        'store_name' => 'StoreName',
        'store_iana_time_zone' => 'StoreIanaTimeZone',
        'customer_name' => 'CustomerName',
        'customer_phone_number' => 'CustomerPhoneNumber',
        'amount' => 'Amount',
        'refunded_amount' => 'RefundedAmount',
        'payment_account_type' => 'PaymentAccountType',
        'payment_status' => 'PaymentStatus',
        'currency' => 'Currency',
        'app_type' => 'AppType',
        'local_order_id' => 'LocalOrderId',
        'drop_off_location_id' => 'DropOffLocationId',
        'drop_off_location' => 'DropOffLocation',
        'accepted_for' => 'AcceptedFor',
        'channel' => 'Channel',
        'in_fraud_zone' => 'InFraudZone',
        'unusual_high_value_order' => 'UnusualHighValueOrder',
        'channel_order_id' => 'ChannelOrderId',
        'channel_order_display_id' => 'ChannelOrderDisplayId',
        'order_drop_off_location' => 'OrderDropOffLocation',
        'order_batch_info' => 'OrderBatchInfo',
        'delivery_location' => 'DeliveryLocation'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'order_id' => 'setOrderId',
        'delivery_type' => 'setDeliveryType',
        'pickup_location_type' => 'setPickupLocationType',
        'table_service_catagory' => 'setTableServiceCatagory',
        'order_state' => 'setOrderState',
        'requested_for_time' => 'setRequestedForTime',
        'store_name' => 'setStoreName',
        'store_iana_time_zone' => 'setStoreIanaTimeZone',
        'customer_name' => 'setCustomerName',
        'customer_phone_number' => 'setCustomerPhoneNumber',
        'amount' => 'setAmount',
        'refunded_amount' => 'setRefundedAmount',
        'payment_account_type' => 'setPaymentAccountType',
        'payment_status' => 'setPaymentStatus',
        'currency' => 'setCurrency',
        'app_type' => 'setAppType',
        'local_order_id' => 'setLocalOrderId',
        'drop_off_location_id' => 'setDropOffLocationId',
        'drop_off_location' => 'setDropOffLocation',
        'accepted_for' => 'setAcceptedFor',
        'channel' => 'setChannel',
        'in_fraud_zone' => 'setInFraudZone',
        'unusual_high_value_order' => 'setUnusualHighValueOrder',
        'channel_order_id' => 'setChannelOrderId',
        'channel_order_display_id' => 'setChannelOrderDisplayId',
        'order_drop_off_location' => 'setOrderDropOffLocation',
        'order_batch_info' => 'setOrderBatchInfo',
        'delivery_location' => 'setDeliveryLocation'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'order_id' => 'getOrderId',
        'delivery_type' => 'getDeliveryType',
        'pickup_location_type' => 'getPickupLocationType',
        'table_service_catagory' => 'getTableServiceCatagory',
        'order_state' => 'getOrderState',
        'requested_for_time' => 'getRequestedForTime',
        'store_name' => 'getStoreName',
        'store_iana_time_zone' => 'getStoreIanaTimeZone',
        'customer_name' => 'getCustomerName',
        'customer_phone_number' => 'getCustomerPhoneNumber',
        'amount' => 'getAmount',
        'refunded_amount' => 'getRefundedAmount',
        'payment_account_type' => 'getPaymentAccountType',
        'payment_status' => 'getPaymentStatus',
        'currency' => 'getCurrency',
        'app_type' => 'getAppType',
        'local_order_id' => 'getLocalOrderId',
        'drop_off_location_id' => 'getDropOffLocationId',
        'drop_off_location' => 'getDropOffLocation',
        'accepted_for' => 'getAcceptedFor',
        'channel' => 'getChannel',
        'in_fraud_zone' => 'getInFraudZone',
        'unusual_high_value_order' => 'getUnusualHighValueOrder',
        'channel_order_id' => 'getChannelOrderId',
        'channel_order_display_id' => 'getChannelOrderDisplayId',
        'order_drop_off_location' => 'getOrderDropOffLocation',
        'order_batch_info' => 'getOrderBatchInfo',
        'delivery_location' => 'getDeliveryLocation'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const DELIVERY_TYPE_DELIVERY = 'Delivery';
    const DELIVERY_TYPE_PICKUP = 'Pickup';
    const PICKUP_LOCATION_TYPE_TAKE_OUT = 'TakeOut';
    const PICKUP_LOCATION_TYPE_TABLE_SERVICE = 'TableService';
    const PICKUP_LOCATION_TYPE_DINE_IN = 'DineIn';
    const TABLE_SERVICE_CATAGORY_GENERIC = 'Generic';
    const TABLE_SERVICE_CATAGORY_VILLA = 'Villa';
    const TABLE_SERVICE_CATAGORY_HOUSE = 'House';
    const TABLE_SERVICE_CATAGORY_ROOM = 'Room';
    const TABLE_SERVICE_CATAGORY_AREA = 'Area';
    const TABLE_SERVICE_CATAGORY_TABLE = 'Table';
    const TABLE_SERVICE_CATAGORY_PARKING_BAY = 'ParkingBay';
    const TABLE_SERVICE_CATAGORY_GATE = 'Gate';
    const TABLE_SERVICE_CATAGORY_DRIVE_THROUGH = 'DriveThrough';
    const TABLE_SERVICE_CATAGORY_TEAM = 'Team';
    const ORDER_STATE_CREATED = 'Created';
    const ORDER_STATE_PLACED_CAN_BE_CANCELLED = 'PlacedCanBeCancelled';
    const ORDER_STATE_READY_TO_PROCESS = 'ReadyToProcess';
    const ORDER_STATE_ACCEPTED_BY_RESTAURANT = 'AcceptedByRestaurant';
    const ORDER_STATE_DISPATCHED = 'Dispatched';
    const ORDER_STATE_DELIVERED = 'Delivered';
    const ORDER_STATE_CANCELLED = 'Cancelled';
    const ORDER_STATE_MANUAL_REVIEW = 'ManualReview';
    const ORDER_STATE_REJECTED_BY_STORE = 'RejectedByStore';
    const ORDER_STATE_REJECTED_BY_FLIPDISH = 'RejectedByFlipdish';
    const ORDER_STATE_REJECTED_AUTOMATICALLY = 'RejectedAutomatically';
    const ORDER_STATE_REJECTED_AFTER_BEING_ACCEPTED = 'RejectedAfterBeingAccepted';
    const ORDER_STATE_ACCEPTED_AND_REFUNDED = 'AcceptedAndRefunded';
    const PAYMENT_ACCOUNT_TYPE_CARD = 'Card';
    const PAYMENT_ACCOUNT_TYPE_CASH = 'Cash';
    const PAYMENT_ACCOUNT_TYPE_IDEAL = 'Ideal';
    const PAYMENT_ACCOUNT_TYPE_BANCONTACT = 'Bancontact';
    const PAYMENT_ACCOUNT_TYPE_GIROPAY = 'Giropay';
    const PAYMENT_ACCOUNT_TYPE_EPS = 'Eps';
    const PAYMENT_ACCOUNT_TYPE_EMV = 'Emv';
    const PAYMENT_ACCOUNT_TYPE_PAY_PAL = 'PayPal';
    const PAYMENT_ACCOUNT_TYPE_PAY_GREEN = 'PayGreen';
    const PAYMENT_ACCOUNT_TYPE_GOOGLE_WALLET_TOKEN = 'GoogleWalletToken';
    const PAYMENT_STATUS_PAID = 'Paid';
    const PAYMENT_STATUS_UNPAID = 'Unpaid';
    const PAYMENT_STATUS_REFUNDED = 'Refunded';
    const PAYMENT_STATUS_PARTIALLY_REFUNDED = 'PartiallyRefunded';
    const PAYMENT_STATUS_DISPUTED = 'Disputed';
    const CURRENCY_EUR = 'EUR';
    const CURRENCY_USD = 'USD';
    const CURRENCY_GBP = 'GBP';
    const CURRENCY_CAD = 'CAD';
    const CURRENCY_AUD = 'AUD';
    const CURRENCY_DJF = 'DJF';
    const CURRENCY_ZAR = 'ZAR';
    const CURRENCY_ETB = 'ETB';
    const CURRENCY_AED = 'AED';
    const CURRENCY_BHD = 'BHD';
    const CURRENCY_DZD = 'DZD';
    const CURRENCY_EGP = 'EGP';
    const CURRENCY_IQD = 'IQD';
    const CURRENCY_JOD = 'JOD';
    const CURRENCY_KWD = 'KWD';
    const CURRENCY_LBP = 'LBP';
    const CURRENCY_LYD = 'LYD';
    const CURRENCY_MAD = 'MAD';
    const CURRENCY_OMR = 'OMR';
    const CURRENCY_QAR = 'QAR';
    const CURRENCY_SAR = 'SAR';
    const CURRENCY_SYP = 'SYP';
    const CURRENCY_TND = 'TND';
    const CURRENCY_YER = 'YER';
    const CURRENCY_CLP = 'CLP';
    const CURRENCY_INR = 'INR';
    const CURRENCY_AZN = 'AZN';
    const CURRENCY_RUB = 'RUB';
    const CURRENCY_BYN = 'BYN';
    const CURRENCY_BGN = 'BGN';
    const CURRENCY_NGN = 'NGN';
    const CURRENCY_BDT = 'BDT';
    const CURRENCY_CNY = 'CNY';
    const CURRENCY_BAM = 'BAM';
    const CURRENCY_CZK = 'CZK';
    const CURRENCY_DKK = 'DKK';
    const CURRENCY_CHF = 'CHF';
    const CURRENCY_MVR = 'MVR';
    const CURRENCY_BTN = 'BTN';
    const CURRENCY_XCD = 'XCD';
    const CURRENCY_BZD = 'BZD';
    const CURRENCY_HKD = 'HKD';
    const CURRENCY_IDR = 'IDR';
    const CURRENCY_JMD = 'JMD';
    const CURRENCY_MYR = 'MYR';
    const CURRENCY_NZD = 'NZD';
    const CURRENCY_PHP = 'PHP';
    const CURRENCY_SGD = 'SGD';
    const CURRENCY_TTD = 'TTD';
    const CURRENCY_XDR = 'XDR';
    const CURRENCY_ARS = 'ARS';
    const CURRENCY_BOB = 'BOB';
    const CURRENCY_COP = 'COP';
    const CURRENCY_CRC = 'CRC';
    const CURRENCY_CUP = 'CUP';
    const CURRENCY_DOP = 'DOP';
    const CURRENCY_GTQ = 'GTQ';
    const CURRENCY_HNL = 'HNL';
    const CURRENCY_MXN = 'MXN';
    const CURRENCY_NIO = 'NIO';
    const CURRENCY_PAB = 'PAB';
    const CURRENCY_PEN = 'PEN';
    const CURRENCY_PYG = 'PYG';
    const CURRENCY_UYU = 'UYU';
    const CURRENCY_VEF = 'VEF';
    const CURRENCY_IRR = 'IRR';
    const CURRENCY_XOF = 'XOF';
    const CURRENCY_CDF = 'CDF';
    const CURRENCY_XAF = 'XAF';
    const CURRENCY_HTG = 'HTG';
    const CURRENCY_ILS = 'ILS';
    const CURRENCY_HRK = 'HRK';
    const CURRENCY_HUF = 'HUF';
    const CURRENCY_AMD = 'AMD';
    const CURRENCY_ISK = 'ISK';
    const CURRENCY_JPY = 'JPY';
    const CURRENCY_GEL = 'GEL';
    const CURRENCY_KZT = 'KZT';
    const CURRENCY_KHR = 'KHR';
    const CURRENCY_KRW = 'KRW';
    const CURRENCY_KGS = 'KGS';
    const CURRENCY_LAK = 'LAK';
    const CURRENCY_MKD = 'MKD';
    const CURRENCY_MNT = 'MNT';
    const CURRENCY_BND = 'BND';
    const CURRENCY_MMK = 'MMK';
    const CURRENCY_NOK = 'NOK';
    const CURRENCY_NPR = 'NPR';
    const CURRENCY_PKR = 'PKR';
    const CURRENCY_PLN = 'PLN';
    const CURRENCY_AFN = 'AFN';
    const CURRENCY_BRL = 'BRL';
    const CURRENCY_MDL = 'MDL';
    const CURRENCY_RON = 'RON';
    const CURRENCY_RWF = 'RWF';
    const CURRENCY_SEK = 'SEK';
    const CURRENCY_LKR = 'LKR';
    const CURRENCY_SOS = 'SOS';
    const CURRENCY_ALL = 'ALL';
    const CURRENCY_RSD = 'RSD';
    const CURRENCY_KES = 'KES';
    const CURRENCY_TJS = 'TJS';
    const CURRENCY_THB = 'THB';
    const CURRENCY_ERN = 'ERN';
    const CURRENCY_TMT = 'TMT';
    const CURRENCY_BWP = 'BWP';
    const CURRENCY__TRY = 'TRY';
    const CURRENCY_UAH = 'UAH';
    const CURRENCY_UZS = 'UZS';
    const CURRENCY_VND = 'VND';
    const CURRENCY_MOP = 'MOP';
    const CURRENCY_TWD = 'TWD';
    const CURRENCY_BMD = 'BMD';
    const APP_TYPE_UNKNOWN = 'Unknown';
    const APP_TYPE_IOS = 'Ios';
    const APP_TYPE_ANDROID = 'Android';
    const APP_TYPE_WEB = 'Web';
    const APP_TYPE_KIOSK = 'Kiosk';
    const APP_TYPE_POS = 'Pos';
    const APP_TYPE_TELEPHONE_CALL = 'TelephoneCall';
    const APP_TYPE_SMS = 'Sms';
    const APP_TYPE_PWA_ANDROID = 'PwaAndroid';
    const APP_TYPE_PWA_IOS = 'PwaIos';
    const APP_TYPE_GOOGLE = 'Google';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDeliveryTypeAllowableValues()
    {
        return [
            self::DELIVERY_TYPE_DELIVERY,
            self::DELIVERY_TYPE_PICKUP,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPickupLocationTypeAllowableValues()
    {
        return [
            self::PICKUP_LOCATION_TYPE_TAKE_OUT,
            self::PICKUP_LOCATION_TYPE_TABLE_SERVICE,
            self::PICKUP_LOCATION_TYPE_DINE_IN,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTableServiceCatagoryAllowableValues()
    {
        return [
            self::TABLE_SERVICE_CATAGORY_GENERIC,
            self::TABLE_SERVICE_CATAGORY_VILLA,
            self::TABLE_SERVICE_CATAGORY_HOUSE,
            self::TABLE_SERVICE_CATAGORY_ROOM,
            self::TABLE_SERVICE_CATAGORY_AREA,
            self::TABLE_SERVICE_CATAGORY_TABLE,
            self::TABLE_SERVICE_CATAGORY_PARKING_BAY,
            self::TABLE_SERVICE_CATAGORY_GATE,
            self::TABLE_SERVICE_CATAGORY_DRIVE_THROUGH,
            self::TABLE_SERVICE_CATAGORY_TEAM,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getOrderStateAllowableValues()
    {
        return [
            self::ORDER_STATE_CREATED,
            self::ORDER_STATE_PLACED_CAN_BE_CANCELLED,
            self::ORDER_STATE_READY_TO_PROCESS,
            self::ORDER_STATE_ACCEPTED_BY_RESTAURANT,
            self::ORDER_STATE_DISPATCHED,
            self::ORDER_STATE_DELIVERED,
            self::ORDER_STATE_CANCELLED,
            self::ORDER_STATE_MANUAL_REVIEW,
            self::ORDER_STATE_REJECTED_BY_STORE,
            self::ORDER_STATE_REJECTED_BY_FLIPDISH,
            self::ORDER_STATE_REJECTED_AUTOMATICALLY,
            self::ORDER_STATE_REJECTED_AFTER_BEING_ACCEPTED,
            self::ORDER_STATE_ACCEPTED_AND_REFUNDED,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPaymentAccountTypeAllowableValues()
    {
        return [
            self::PAYMENT_ACCOUNT_TYPE_CARD,
            self::PAYMENT_ACCOUNT_TYPE_CASH,
            self::PAYMENT_ACCOUNT_TYPE_IDEAL,
            self::PAYMENT_ACCOUNT_TYPE_BANCONTACT,
            self::PAYMENT_ACCOUNT_TYPE_GIROPAY,
            self::PAYMENT_ACCOUNT_TYPE_EPS,
            self::PAYMENT_ACCOUNT_TYPE_EMV,
            self::PAYMENT_ACCOUNT_TYPE_PAY_PAL,
            self::PAYMENT_ACCOUNT_TYPE_PAY_GREEN,
            self::PAYMENT_ACCOUNT_TYPE_GOOGLE_WALLET_TOKEN,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPaymentStatusAllowableValues()
    {
        return [
            self::PAYMENT_STATUS_PAID,
            self::PAYMENT_STATUS_UNPAID,
            self::PAYMENT_STATUS_REFUNDED,
            self::PAYMENT_STATUS_PARTIALLY_REFUNDED,
            self::PAYMENT_STATUS_DISPUTED,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getCurrencyAllowableValues()
    {
        return [
            self::CURRENCY_EUR,
            self::CURRENCY_USD,
            self::CURRENCY_GBP,
            self::CURRENCY_CAD,
            self::CURRENCY_AUD,
            self::CURRENCY_DJF,
            self::CURRENCY_ZAR,
            self::CURRENCY_ETB,
            self::CURRENCY_AED,
            self::CURRENCY_BHD,
            self::CURRENCY_DZD,
            self::CURRENCY_EGP,
            self::CURRENCY_IQD,
            self::CURRENCY_JOD,
            self::CURRENCY_KWD,
            self::CURRENCY_LBP,
            self::CURRENCY_LYD,
            self::CURRENCY_MAD,
            self::CURRENCY_OMR,
            self::CURRENCY_QAR,
            self::CURRENCY_SAR,
            self::CURRENCY_SYP,
            self::CURRENCY_TND,
            self::CURRENCY_YER,
            self::CURRENCY_CLP,
            self::CURRENCY_INR,
            self::CURRENCY_AZN,
            self::CURRENCY_RUB,
            self::CURRENCY_BYN,
            self::CURRENCY_BGN,
            self::CURRENCY_NGN,
            self::CURRENCY_BDT,
            self::CURRENCY_CNY,
            self::CURRENCY_BAM,
            self::CURRENCY_CZK,
            self::CURRENCY_DKK,
            self::CURRENCY_CHF,
            self::CURRENCY_MVR,
            self::CURRENCY_BTN,
            self::CURRENCY_XCD,
            self::CURRENCY_BZD,
            self::CURRENCY_HKD,
            self::CURRENCY_IDR,
            self::CURRENCY_JMD,
            self::CURRENCY_MYR,
            self::CURRENCY_NZD,
            self::CURRENCY_PHP,
            self::CURRENCY_SGD,
            self::CURRENCY_TTD,
            self::CURRENCY_XDR,
            self::CURRENCY_ARS,
            self::CURRENCY_BOB,
            self::CURRENCY_COP,
            self::CURRENCY_CRC,
            self::CURRENCY_CUP,
            self::CURRENCY_DOP,
            self::CURRENCY_GTQ,
            self::CURRENCY_HNL,
            self::CURRENCY_MXN,
            self::CURRENCY_NIO,
            self::CURRENCY_PAB,
            self::CURRENCY_PEN,
            self::CURRENCY_PYG,
            self::CURRENCY_UYU,
            self::CURRENCY_VEF,
            self::CURRENCY_IRR,
            self::CURRENCY_XOF,
            self::CURRENCY_CDF,
            self::CURRENCY_XAF,
            self::CURRENCY_HTG,
            self::CURRENCY_ILS,
            self::CURRENCY_HRK,
            self::CURRENCY_HUF,
            self::CURRENCY_AMD,
            self::CURRENCY_ISK,
            self::CURRENCY_JPY,
            self::CURRENCY_GEL,
            self::CURRENCY_KZT,
            self::CURRENCY_KHR,
            self::CURRENCY_KRW,
            self::CURRENCY_KGS,
            self::CURRENCY_LAK,
            self::CURRENCY_MKD,
            self::CURRENCY_MNT,
            self::CURRENCY_BND,
            self::CURRENCY_MMK,
            self::CURRENCY_NOK,
            self::CURRENCY_NPR,
            self::CURRENCY_PKR,
            self::CURRENCY_PLN,
            self::CURRENCY_AFN,
            self::CURRENCY_BRL,
            self::CURRENCY_MDL,
            self::CURRENCY_RON,
            self::CURRENCY_RWF,
            self::CURRENCY_SEK,
            self::CURRENCY_LKR,
            self::CURRENCY_SOS,
            self::CURRENCY_ALL,
            self::CURRENCY_RSD,
            self::CURRENCY_KES,
            self::CURRENCY_TJS,
            self::CURRENCY_THB,
            self::CURRENCY_ERN,
            self::CURRENCY_TMT,
            self::CURRENCY_BWP,
            self::CURRENCY__TRY,
            self::CURRENCY_UAH,
            self::CURRENCY_UZS,
            self::CURRENCY_VND,
            self::CURRENCY_MOP,
            self::CURRENCY_TWD,
            self::CURRENCY_BMD,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAppTypeAllowableValues()
    {
        return [
            self::APP_TYPE_UNKNOWN,
            self::APP_TYPE_IOS,
            self::APP_TYPE_ANDROID,
            self::APP_TYPE_WEB,
            self::APP_TYPE_KIOSK,
            self::APP_TYPE_POS,
            self::APP_TYPE_TELEPHONE_CALL,
            self::APP_TYPE_SMS,
            self::APP_TYPE_PWA_ANDROID,
            self::APP_TYPE_PWA_IOS,
            self::APP_TYPE_GOOGLE,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['order_id'] = isset($data['order_id']) ? $data['order_id'] : null;
        $this->container['delivery_type'] = isset($data['delivery_type']) ? $data['delivery_type'] : null;
        $this->container['pickup_location_type'] = isset($data['pickup_location_type']) ? $data['pickup_location_type'] : null;
        $this->container['table_service_catagory'] = isset($data['table_service_catagory']) ? $data['table_service_catagory'] : null;
        $this->container['order_state'] = isset($data['order_state']) ? $data['order_state'] : null;
        $this->container['requested_for_time'] = isset($data['requested_for_time']) ? $data['requested_for_time'] : null;
        $this->container['store_name'] = isset($data['store_name']) ? $data['store_name'] : null;
        $this->container['store_iana_time_zone'] = isset($data['store_iana_time_zone']) ? $data['store_iana_time_zone'] : null;
        $this->container['customer_name'] = isset($data['customer_name']) ? $data['customer_name'] : null;
        $this->container['customer_phone_number'] = isset($data['customer_phone_number']) ? $data['customer_phone_number'] : null;
        $this->container['amount'] = isset($data['amount']) ? $data['amount'] : null;
        $this->container['refunded_amount'] = isset($data['refunded_amount']) ? $data['refunded_amount'] : null;
        $this->container['payment_account_type'] = isset($data['payment_account_type']) ? $data['payment_account_type'] : null;
        $this->container['payment_status'] = isset($data['payment_status']) ? $data['payment_status'] : null;
        $this->container['currency'] = isset($data['currency']) ? $data['currency'] : null;
        $this->container['app_type'] = isset($data['app_type']) ? $data['app_type'] : null;
        $this->container['local_order_id'] = isset($data['local_order_id']) ? $data['local_order_id'] : null;
        $this->container['drop_off_location_id'] = isset($data['drop_off_location_id']) ? $data['drop_off_location_id'] : null;
        $this->container['drop_off_location'] = isset($data['drop_off_location']) ? $data['drop_off_location'] : null;
        $this->container['accepted_for'] = isset($data['accepted_for']) ? $data['accepted_for'] : null;
        $this->container['channel'] = isset($data['channel']) ? $data['channel'] : null;
        $this->container['in_fraud_zone'] = isset($data['in_fraud_zone']) ? $data['in_fraud_zone'] : null;
        $this->container['unusual_high_value_order'] = isset($data['unusual_high_value_order']) ? $data['unusual_high_value_order'] : null;
        $this->container['channel_order_id'] = isset($data['channel_order_id']) ? $data['channel_order_id'] : null;
        $this->container['channel_order_display_id'] = isset($data['channel_order_display_id']) ? $data['channel_order_display_id'] : null;
        $this->container['order_drop_off_location'] = isset($data['order_drop_off_location']) ? $data['order_drop_off_location'] : null;
        $this->container['order_batch_info'] = isset($data['order_batch_info']) ? $data['order_batch_info'] : null;
        $this->container['delivery_location'] = isset($data['delivery_location']) ? $data['delivery_location'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getDeliveryTypeAllowableValues();
        if (!is_null($this->container['delivery_type']) && !in_array($this->container['delivery_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'delivery_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getPickupLocationTypeAllowableValues();
        if (!is_null($this->container['pickup_location_type']) && !in_array($this->container['pickup_location_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'pickup_location_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getTableServiceCatagoryAllowableValues();
        if (!is_null($this->container['table_service_catagory']) && !in_array($this->container['table_service_catagory'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'table_service_catagory', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getOrderStateAllowableValues();
        if (!is_null($this->container['order_state']) && !in_array($this->container['order_state'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'order_state', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getPaymentAccountTypeAllowableValues();
        if (!is_null($this->container['payment_account_type']) && !in_array($this->container['payment_account_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'payment_account_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getPaymentStatusAllowableValues();
        if (!is_null($this->container['payment_status']) && !in_array($this->container['payment_status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'payment_status', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getCurrencyAllowableValues();
        if (!is_null($this->container['currency']) && !in_array($this->container['currency'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'currency', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getAppTypeAllowableValues();
        if (!is_null($this->container['app_type']) && !in_array($this->container['app_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'app_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets order_id
     *
     * @return int
     */
    public function getOrderId()
    {
        return $this->container['order_id'];
    }

    /**
     * Sets order_id
     *
     * @param int $order_id Order identifier
     *
     * @return $this
     */
    public function setOrderId($order_id)
    {
        $this->container['order_id'] = $order_id;

        return $this;
    }

    /**
     * Gets delivery_type
     *
     * @return string
     */
    public function getDeliveryType()
    {
        return $this->container['delivery_type'];
    }

    /**
     * Sets delivery_type
     *
     * @param string $delivery_type Delivery type
     *
     * @return $this
     */
    public function setDeliveryType($delivery_type)
    {
        $allowedValues = $this->getDeliveryTypeAllowableValues();
        if (!is_null($delivery_type) && !in_array($delivery_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'delivery_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['delivery_type'] = $delivery_type;

        return $this;
    }

    /**
     * Gets pickup_location_type
     *
     * @return string
     */
    public function getPickupLocationType()
    {
        return $this->container['pickup_location_type'];
    }

    /**
     * Sets pickup_location_type
     *
     * @param string $pickup_location_type Pickup location type
     *
     * @return $this
     */
    public function setPickupLocationType($pickup_location_type)
    {
        $allowedValues = $this->getPickupLocationTypeAllowableValues();
        if (!is_null($pickup_location_type) && !in_array($pickup_location_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'pickup_location_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['pickup_location_type'] = $pickup_location_type;

        return $this;
    }

    /**
     * Gets table_service_catagory
     *
     * @return string
     */
    public function getTableServiceCatagory()
    {
        return $this->container['table_service_catagory'];
    }

    /**
     * Sets table_service_catagory
     *
     * @param string $table_service_catagory Table service category
     *
     * @return $this
     */
    public function setTableServiceCatagory($table_service_catagory)
    {
        $allowedValues = $this->getTableServiceCatagoryAllowableValues();
        if (!is_null($table_service_catagory) && !in_array($table_service_catagory, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'table_service_catagory', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['table_service_catagory'] = $table_service_catagory;

        return $this;
    }

    /**
     * Gets order_state
     *
     * @return string
     */
    public function getOrderState()
    {
        return $this->container['order_state'];
    }

    /**
     * Sets order_state
     *
     * @param string $order_state Order state
     *
     * @return $this
     */
    public function setOrderState($order_state)
    {
        $allowedValues = $this->getOrderStateAllowableValues();
        if (!is_null($order_state) && !in_array($order_state, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'order_state', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['order_state'] = $order_state;

        return $this;
    }

    /**
     * Gets requested_for_time
     *
     * @return \DateTime
     */
    public function getRequestedForTime()
    {
        return $this->container['requested_for_time'];
    }

    /**
     * Sets requested_for_time
     *
     * @param \DateTime $requested_for_time Order requested for
     *
     * @return $this
     */
    public function setRequestedForTime($requested_for_time)
    {
        $this->container['requested_for_time'] = $requested_for_time;

        return $this;
    }

    /**
     * Gets store_name
     *
     * @return string
     */
    public function getStoreName()
    {
        return $this->container['store_name'];
    }

    /**
     * Sets store_name
     *
     * @param string $store_name Name of the store
     *
     * @return $this
     */
    public function setStoreName($store_name)
    {
        $this->container['store_name'] = $store_name;

        return $this;
    }

    /**
     * Gets store_iana_time_zone
     *
     * @return string
     */
    public function getStoreIanaTimeZone()
    {
        return $this->container['store_iana_time_zone'];
    }

    /**
     * Sets store_iana_time_zone
     *
     * @param string $store_iana_time_zone Store IANA time zone
     *
     * @return $this
     */
    public function setStoreIanaTimeZone($store_iana_time_zone)
    {
        $this->container['store_iana_time_zone'] = $store_iana_time_zone;

        return $this;
    }

    /**
     * Gets customer_name
     *
     * @return string
     */
    public function getCustomerName()
    {
        return $this->container['customer_name'];
    }

    /**
     * Sets customer_name
     *
     * @param string $customer_name Name of the customer
     *
     * @return $this
     */
    public function setCustomerName($customer_name)
    {
        $this->container['customer_name'] = $customer_name;

        return $this;
    }

    /**
     * Gets customer_phone_number
     *
     * @return string
     */
    public function getCustomerPhoneNumber()
    {
        return $this->container['customer_phone_number'];
    }

    /**
     * Sets customer_phone_number
     *
     * @param string $customer_phone_number Phone number of customer
     *
     * @return $this
     */
    public function setCustomerPhoneNumber($customer_phone_number)
    {
        $this->container['customer_phone_number'] = $customer_phone_number;

        return $this;
    }

    /**
     * Gets amount
     *
     * @return double
     */
    public function getAmount()
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount
     *
     * @param double $amount This is the sum of the OrderItemsAmount, DeliveryAmount, TipAmount and Voucher.Amount (which is usually negative) and OnlineOrderingFee  It does include the OnlineOrderingFee
     *
     * @return $this
     */
    public function setAmount($amount)
    {
        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets refunded_amount
     *
     * @return double
     */
    public function getRefundedAmount()
    {
        return $this->container['refunded_amount'];
    }

    /**
     * Sets refunded_amount
     *
     * @param double $refunded_amount Refunded amount
     *
     * @return $this
     */
    public function setRefundedAmount($refunded_amount)
    {
        $this->container['refunded_amount'] = $refunded_amount;

        return $this;
    }

    /**
     * Gets payment_account_type
     *
     * @return string
     */
    public function getPaymentAccountType()
    {
        return $this->container['payment_account_type'];
    }

    /**
     * Sets payment_account_type
     *
     * @param string $payment_account_type Payment Account
     *
     * @return $this
     */
    public function setPaymentAccountType($payment_account_type)
    {
        $allowedValues = $this->getPaymentAccountTypeAllowableValues();
        if (!is_null($payment_account_type) && !in_array($payment_account_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'payment_account_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['payment_account_type'] = $payment_account_type;

        return $this;
    }

    /**
     * Gets payment_status
     *
     * @return string
     */
    public function getPaymentStatus()
    {
        return $this->container['payment_status'];
    }

    /**
     * Sets payment_status
     *
     * @param string $payment_status Status of the payment
     *
     * @return $this
     */
    public function setPaymentStatus($payment_status)
    {
        $allowedValues = $this->getPaymentStatusAllowableValues();
        if (!is_null($payment_status) && !in_array($payment_status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'payment_status', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['payment_status'] = $payment_status;

        return $this;
    }

    /**
     * Gets currency
     *
     * @return string
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     *
     * @param string $currency Currency of payment
     *
     * @return $this
     */
    public function setCurrency($currency)
    {
        $allowedValues = $this->getCurrencyAllowableValues();
        if (!is_null($currency) && !in_array($currency, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'currency', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets app_type
     *
     * @return string
     */
    public function getAppType()
    {
        return $this->container['app_type'];
    }

    /**
     * Sets app_type
     *
     * @param string $app_type Type of app end user is on
     *
     * @return $this
     */
    public function setAppType($app_type)
    {
        $allowedValues = $this->getAppTypeAllowableValues();
        if (!is_null($app_type) && !in_array($app_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'app_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['app_type'] = $app_type;

        return $this;
    }

    /**
     * Gets local_order_id
     *
     * @return string
     */
    public function getLocalOrderId()
    {
        return $this->container['local_order_id'];
    }

    /**
     * Sets local_order_id
     *
     * @param string $local_order_id Local order Id. This is used for displaying a \"shorter\" order ID for customers (eg. Kiosk orders)
     *
     * @return $this
     */
    public function setLocalOrderId($local_order_id)
    {
        $this->container['local_order_id'] = $local_order_id;

        return $this;
    }

    /**
     * Gets drop_off_location_id
     *
     * @return int
     */
    public function getDropOffLocationId()
    {
        return $this->container['drop_off_location_id'];
    }

    /**
     * Sets drop_off_location_id
     *
     * @param int $drop_off_location_id id of the collection/drop off location
     *
     * @return $this
     */
    public function setDropOffLocationId($drop_off_location_id)
    {
        $this->container['drop_off_location_id'] = $drop_off_location_id;

        return $this;
    }

    /**
     * Gets drop_off_location
     *
     * @return string
     */
    public function getDropOffLocation()
    {
        return $this->container['drop_off_location'];
    }

    /**
     * Sets drop_off_location
     *
     * @param string $drop_off_location Represents table service drop off location
     *
     * @return $this
     */
    public function setDropOffLocation($drop_off_location)
    {
        $this->container['drop_off_location'] = $drop_off_location;

        return $this;
    }

    /**
     * Gets accepted_for
     *
     * @return \DateTime
     */
    public function getAcceptedFor()
    {
        return $this->container['accepted_for'];
    }

    /**
     * Sets accepted_for
     *
     * @param \DateTime $accepted_for Time store has accepted the order for
     *
     * @return $this
     */
    public function setAcceptedFor($accepted_for)
    {
        $this->container['accepted_for'] = $accepted_for;

        return $this;
    }

    /**
     * Gets channel
     *
     * @return \Flipdish\\Client\Models\Channel
     */
    public function getChannel()
    {
        return $this->container['channel'];
    }

    /**
     * Sets channel
     *
     * @param \Flipdish\\Client\Models\Channel $channel Channel where the Order comes from
     *
     * @return $this
     */
    public function setChannel($channel)
    {
        $this->container['channel'] = $channel;

        return $this;
    }

    /**
     * Gets in_fraud_zone
     *
     * @return bool
     */
    public function getInFraudZone()
    {
        return $this->container['in_fraud_zone'];
    }

    /**
     * Sets in_fraud_zone
     *
     * @param bool $in_fraud_zone Was order made within a fraud zone
     *
     * @return $this
     */
    public function setInFraudZone($in_fraud_zone)
    {
        $this->container['in_fraud_zone'] = $in_fraud_zone;

        return $this;
    }

    /**
     * Gets unusual_high_value_order
     *
     * @return bool
     */
    public function getUnusualHighValueOrder()
    {
        return $this->container['unusual_high_value_order'];
    }

    /**
     * Sets unusual_high_value_order
     *
     * @param bool $unusual_high_value_order Is order of unusually high value
     *
     * @return $this
     */
    public function setUnusualHighValueOrder($unusual_high_value_order)
    {
        $this->container['unusual_high_value_order'] = $unusual_high_value_order;

        return $this;
    }

    /**
     * Gets channel_order_id
     *
     * @return string
     */
    public function getChannelOrderId()
    {
        return $this->container['channel_order_id'];
    }

    /**
     * Sets channel_order_id
     *
     * @param string $channel_order_id ChannelOrderId from external channel
     *
     * @return $this
     */
    public function setChannelOrderId($channel_order_id)
    {
        $this->container['channel_order_id'] = $channel_order_id;

        return $this;
    }

    /**
     * Gets channel_order_display_id
     *
     * @return string
     */
    public function getChannelOrderDisplayId()
    {
        return $this->container['channel_order_display_id'];
    }

    /**
     * Sets channel_order_display_id
     *
     * @param string $channel_order_display_id ChannelOrderDisplayId from external channel
     *
     * @return $this
     */
    public function setChannelOrderDisplayId($channel_order_display_id)
    {
        $this->container['channel_order_display_id'] = $channel_order_display_id;

        return $this;
    }

    /**
     * Gets order_drop_off_location
     *
     * @return \Flipdish\\Client\Models\OrderDropOffLocation
     */
    public function getOrderDropOffLocation()
    {
        return $this->container['order_drop_off_location'];
    }

    /**
     * Sets order_drop_off_location
     *
     * @param \Flipdish\\Client\Models\OrderDropOffLocation $order_drop_off_location DropOffLocation selected for this order
     *
     * @return $this
     */
    public function setOrderDropOffLocation($order_drop_off_location)
    {
        $this->container['order_drop_off_location'] = $order_drop_off_location;

        return $this;
    }

    /**
     * Gets order_batch_info
     *
     * @return \Flipdish\\Client\Models\OrderBatchSummary
     */
    public function getOrderBatchInfo()
    {
        return $this->container['order_batch_info'];
    }

    /**
     * Sets order_batch_info
     *
     * @param \Flipdish\\Client\Models\OrderBatchSummary $order_batch_info OrderBatch information
     *
     * @return $this
     */
    public function setOrderBatchInfo($order_batch_info)
    {
        $this->container['order_batch_info'] = $order_batch_info;

        return $this;
    }

    /**
     * Gets delivery_location
     *
     * @return \Flipdish\\Client\Models\DeliveryLocation
     */
    public function getDeliveryLocation()
    {
        return $this->container['delivery_location'];
    }

    /**
     * Sets delivery_location
     *
     * @param \Flipdish\\Client\Models\DeliveryLocation $delivery_location Delivery location details
     *
     * @return $this
     */
    public function setDeliveryLocation($delivery_location)
    {
        $this->container['delivery_location'] = $delivery_location;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


