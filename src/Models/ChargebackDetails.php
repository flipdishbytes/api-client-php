<?php
/**
 * ChargebackDetails
 *
 * PHP version 5
 *
 * @category Class
 * @package  Flipdish\\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Flipdish Open API v1.0
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.19
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Flipdish\\Client\Models;

use \ArrayAccess;
use \Flipdish\\Client\ObjectSerializer;

/**
 * ChargebackDetails Class Doc Comment
 *
 * @category Class
 * @description Chargebacks breakdown
 * @package  Flipdish\\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ChargebackDetails implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ChargebackDetails';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'chargeback_amount' => 'double',
        'pos_sales_chargeback_amount' => 'double',
        'chargeback_refunded_fees' => 'double',
        'chargebacks_count' => 'int',
        'total_chargeback_cost' => 'double'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'chargeback_amount' => 'double',
        'pos_sales_chargeback_amount' => 'double',
        'chargeback_refunded_fees' => 'double',
        'chargebacks_count' => 'int32',
        'total_chargeback_cost' => 'double'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'chargeback_amount' => 'ChargebackAmount',
        'pos_sales_chargeback_amount' => 'PosSalesChargebackAmount',
        'chargeback_refunded_fees' => 'ChargebackRefundedFees',
        'chargebacks_count' => 'ChargebacksCount',
        'total_chargeback_cost' => 'TotalChargebackCost'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'chargeback_amount' => 'setChargebackAmount',
        'pos_sales_chargeback_amount' => 'setPosSalesChargebackAmount',
        'chargeback_refunded_fees' => 'setChargebackRefundedFees',
        'chargebacks_count' => 'setChargebacksCount',
        'total_chargeback_cost' => 'setTotalChargebackCost'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'chargeback_amount' => 'getChargebackAmount',
        'pos_sales_chargeback_amount' => 'getPosSalesChargebackAmount',
        'chargeback_refunded_fees' => 'getChargebackRefundedFees',
        'chargebacks_count' => 'getChargebacksCount',
        'total_chargeback_cost' => 'getTotalChargebackCost'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['chargeback_amount'] = isset($data['chargeback_amount']) ? $data['chargeback_amount'] : null;
        $this->container['pos_sales_chargeback_amount'] = isset($data['pos_sales_chargeback_amount']) ? $data['pos_sales_chargeback_amount'] : null;
        $this->container['chargeback_refunded_fees'] = isset($data['chargeback_refunded_fees']) ? $data['chargeback_refunded_fees'] : null;
        $this->container['chargebacks_count'] = isset($data['chargebacks_count']) ? $data['chargebacks_count'] : null;
        $this->container['total_chargeback_cost'] = isset($data['total_chargeback_cost']) ? $data['total_chargeback_cost'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets chargeback_amount
     *
     * @return double
     */
    public function getChargebackAmount()
    {
        return $this->container['chargeback_amount'];
    }

    /**
     * Sets chargeback_amount
     *
     * @param double $chargeback_amount Chargeback amount
     *
     * @return $this
     */
    public function setChargebackAmount($chargeback_amount)
    {
        $this->container['chargeback_amount'] = $chargeback_amount;

        return $this;
    }

    /**
     * Gets pos_sales_chargeback_amount
     *
     * @return double
     */
    public function getPosSalesChargebackAmount()
    {
        return $this->container['pos_sales_chargeback_amount'];
    }

    /**
     * Sets pos_sales_chargeback_amount
     *
     * @param double $pos_sales_chargeback_amount POS Chargeback amount
     *
     * @return $this
     */
    public function setPosSalesChargebackAmount($pos_sales_chargeback_amount)
    {
        $this->container['pos_sales_chargeback_amount'] = $pos_sales_chargeback_amount;

        return $this;
    }

    /**
     * Gets chargeback_refunded_fees
     *
     * @return double
     */
    public function getChargebackRefundedFees()
    {
        return $this->container['chargeback_refunded_fees'];
    }

    /**
     * Sets chargeback_refunded_fees
     *
     * @param double $chargeback_refunded_fees Chargeback refunded feeds
     *
     * @return $this
     */
    public function setChargebackRefundedFees($chargeback_refunded_fees)
    {
        $this->container['chargeback_refunded_fees'] = $chargeback_refunded_fees;

        return $this;
    }

    /**
     * Gets chargebacks_count
     *
     * @return int
     */
    public function getChargebacksCount()
    {
        return $this->container['chargebacks_count'];
    }

    /**
     * Sets chargebacks_count
     *
     * @param int $chargebacks_count Number of chargebacks
     *
     * @return $this
     */
    public function setChargebacksCount($chargebacks_count)
    {
        $this->container['chargebacks_count'] = $chargebacks_count;

        return $this;
    }

    /**
     * Gets total_chargeback_cost
     *
     * @return double
     */
    public function getTotalChargebackCost()
    {
        return $this->container['total_chargeback_cost'];
    }

    /**
     * Sets total_chargeback_cost
     *
     * @param double $total_chargeback_cost Total amount
     *
     * @return $this
     */
    public function setTotalChargebackCost($total_chargeback_cost)
    {
        $this->container['total_chargeback_cost'] = $total_chargeback_cost;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


