<?php
/**
 * AppStoreAppSummary
 *
 * PHP version 5
 *
 * @category Class
 * @package  Flipdish\\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Flipdish Open API v1.0
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.19
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Flipdish\\Client\Models;

use \ArrayAccess;
use \Flipdish\\Client\ObjectSerializer;

/**
 * AppStoreAppSummary Class Doc Comment
 *
 * @category Class
 * @description App store app summary information
 * @package  Flipdish\\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class AppStoreAppSummary implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'AppStoreAppSummary';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'string',
        'verification_status' => 'string',
        'logo' => 'string',
        'name' => 'string',
        'description' => 'string',
        'is_enabled' => 'bool',
        'tags' => 'string[]',
        'regions' => 'string[]',
        'developer_name' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
        'verification_status' => null,
        'logo' => null,
        'name' => null,
        'description' => null,
        'is_enabled' => null,
        'tags' => null,
        'regions' => null,
        'developer_name' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'Id',
        'verification_status' => 'VerificationStatus',
        'logo' => 'Logo',
        'name' => 'Name',
        'description' => 'Description',
        'is_enabled' => 'IsEnabled',
        'tags' => 'Tags',
        'regions' => 'Regions',
        'developer_name' => 'DeveloperName'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'verification_status' => 'setVerificationStatus',
        'logo' => 'setLogo',
        'name' => 'setName',
        'description' => 'setDescription',
        'is_enabled' => 'setIsEnabled',
        'tags' => 'setTags',
        'regions' => 'setRegions',
        'developer_name' => 'setDeveloperName'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'verification_status' => 'getVerificationStatus',
        'logo' => 'getLogo',
        'name' => 'getName',
        'description' => 'getDescription',
        'is_enabled' => 'getIsEnabled',
        'tags' => 'getTags',
        'regions' => 'getRegions',
        'developer_name' => 'getDeveloperName'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const VERIFICATION_STATUS_DRAFT = 'Draft';
    const VERIFICATION_STATUS_SUBMITTED = 'Submitted';
    const VERIFICATION_STATUS_VERIFIED = 'Verified';
    const TAGS_POINT_OF_SALE = 'PointOfSale';
    const TAGS_DELIVERY_AND_LOGISTICS = 'DeliveryAndLogistics';
    const TAGS_CRM = 'CRM';
    const TAGS_GIFT_CARD = 'GiftCard';
    const TAGS_ACCOUNTING = 'Accounting';
    const TAGS_LOYALTY_AND_MARKETING = 'LoyaltyAndMarketing';
    const TAGS_OTHER = 'Other';
    const REGIONS_GB = 'GB';
    const REGIONS_IE = 'IE';
    const REGIONS_FR = 'FR';
    const REGIONS_ES = 'ES';
    const REGIONS_PT = 'PT';
    const REGIONS_IT = 'IT';
    const REGIONS_DE = 'DE';
    const REGIONS_PL = 'PL';
    const REGIONS_BE = 'BE';
    const REGIONS_LU = 'LU';
    const REGIONS_NL = 'NL';
    const REGIONS_US = 'US';
    const REGIONS_CA = 'CA';
    const REGIONS_BG = 'BG';
    const REGIONS_MX = 'MX';
    const REGIONS_AU = 'AU';
    const REGIONS_NZ = 'NZ';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getVerificationStatusAllowableValues()
    {
        return [
            self::VERIFICATION_STATUS_DRAFT,
            self::VERIFICATION_STATUS_SUBMITTED,
            self::VERIFICATION_STATUS_VERIFIED,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTagsAllowableValues()
    {
        return [
            self::TAGS_POINT_OF_SALE,
            self::TAGS_DELIVERY_AND_LOGISTICS,
            self::TAGS_CRM,
            self::TAGS_GIFT_CARD,
            self::TAGS_ACCOUNTING,
            self::TAGS_LOYALTY_AND_MARKETING,
            self::TAGS_OTHER,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getRegionsAllowableValues()
    {
        return [
            self::REGIONS_GB,
            self::REGIONS_IE,
            self::REGIONS_FR,
            self::REGIONS_ES,
            self::REGIONS_PT,
            self::REGIONS_IT,
            self::REGIONS_DE,
            self::REGIONS_PL,
            self::REGIONS_BE,
            self::REGIONS_LU,
            self::REGIONS_NL,
            self::REGIONS_US,
            self::REGIONS_CA,
            self::REGIONS_BG,
            self::REGIONS_MX,
            self::REGIONS_AU,
            self::REGIONS_NZ,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['verification_status'] = isset($data['verification_status']) ? $data['verification_status'] : null;
        $this->container['logo'] = isset($data['logo']) ? $data['logo'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['is_enabled'] = isset($data['is_enabled']) ? $data['is_enabled'] : null;
        $this->container['tags'] = isset($data['tags']) ? $data['tags'] : null;
        $this->container['regions'] = isset($data['regions']) ? $data['regions'] : null;
        $this->container['developer_name'] = isset($data['developer_name']) ? $data['developer_name'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['verification_status'] === null) {
            $invalidProperties[] = "'verification_status' can't be null";
        }
        $allowedValues = $this->getVerificationStatusAllowableValues();
        if (!is_null($this->container['verification_status']) && !in_array($this->container['verification_status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'verification_status', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ($this->container['description'] === null) {
            $invalidProperties[] = "'description' can't be null";
        }
        if ($this->container['tags'] === null) {
            $invalidProperties[] = "'tags' can't be null";
        }
        if ($this->container['regions'] === null) {
            $invalidProperties[] = "'regions' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id Unique App store app id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets verification_status
     *
     * @return string
     */
    public function getVerificationStatus()
    {
        return $this->container['verification_status'];
    }

    /**
     * Sets verification_status
     *
     * @param string $verification_status Application verification status
     *
     * @return $this
     */
    public function setVerificationStatus($verification_status)
    {
        $allowedValues = $this->getVerificationStatusAllowableValues();
        if (!in_array($verification_status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'verification_status', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['verification_status'] = $verification_status;

        return $this;
    }

    /**
     * Gets logo
     *
     * @return string
     */
    public function getLogo()
    {
        return $this->container['logo'];
    }

    /**
     * Sets logo
     *
     * @param string $logo Logo
     *
     * @return $this
     */
    public function setLogo($logo)
    {
        $this->container['logo'] = $logo;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name Name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description Description
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets is_enabled
     *
     * @return bool
     */
    public function getIsEnabled()
    {
        return $this->container['is_enabled'];
    }

    /**
     * Sets is_enabled
     *
     * @param bool $is_enabled Is application enabled
     *
     * @return $this
     */
    public function setIsEnabled($is_enabled)
    {
        $this->container['is_enabled'] = $is_enabled;

        return $this;
    }

    /**
     * Gets tags
     *
     * @return string[]
     */
    public function getTags()
    {
        return $this->container['tags'];
    }

    /**
     * Sets tags
     *
     * @param string[] $tags Tags
     *
     * @return $this
     */
    public function setTags($tags)
    {
        $allowedValues = $this->getTagsAllowableValues();
        if (array_diff($tags, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'tags', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['tags'] = $tags;

        return $this;
    }

    /**
     * Gets regions
     *
     * @return string[]
     */
    public function getRegions()
    {
        return $this->container['regions'];
    }

    /**
     * Sets regions
     *
     * @param string[] $regions Regions
     *
     * @return $this
     */
    public function setRegions($regions)
    {
        $allowedValues = $this->getRegionsAllowableValues();
        if (array_diff($regions, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'regions', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['regions'] = $regions;

        return $this;
    }

    /**
     * Gets developer_name
     *
     * @return string
     */
    public function getDeveloperName()
    {
        return $this->container['developer_name'];
    }

    /**
     * Sets developer_name
     *
     * @param string $developer_name Developer Name
     *
     * @return $this
     */
    public function setDeveloperName($developer_name)
    {
        $this->container['developer_name'] = $developer_name;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


