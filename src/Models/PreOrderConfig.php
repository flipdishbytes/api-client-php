<?php
/**
 * PreOrderConfig
 *
 * PHP version 5
 *
 * @category Class
 * @package  Flipdish\\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Flipdish Open API v1.0
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.19
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Flipdish\\Client\Models;

use \ArrayAccess;
use \Flipdish\\Client\ObjectSerializer;

/**
 * PreOrderConfig Class Doc Comment
 *
 * @category Class
 * @description Pre Order Config
 * @package  Flipdish\\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PreOrderConfig implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'PreOrderConfig';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'lead_time_minutes' => 'int',
        'interval_minutes' => 'int',
        'max_order_ahead_days' => 'int',
        'include_asap' => 'bool',
        'include_more_granular_initial_time' => 'bool',
        'cut_off_time_previous_day_basic' => 'string',
        'cut_off_time_current_day_basic' => 'string',
        'pre_order_time_display_type' => 'string',
        'always_appear_open' => 'bool',
        'require_explicit_select_always' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'lead_time_minutes' => 'int32',
        'interval_minutes' => 'int32',
        'max_order_ahead_days' => 'int32',
        'include_asap' => null,
        'include_more_granular_initial_time' => null,
        'cut_off_time_previous_day_basic' => null,
        'cut_off_time_current_day_basic' => null,
        'pre_order_time_display_type' => null,
        'always_appear_open' => null,
        'require_explicit_select_always' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'lead_time_minutes' => 'LeadTimeMinutes',
        'interval_minutes' => 'IntervalMinutes',
        'max_order_ahead_days' => 'MaxOrderAheadDays',
        'include_asap' => 'IncludeAsap',
        'include_more_granular_initial_time' => 'IncludeMoreGranularInitialTime',
        'cut_off_time_previous_day_basic' => 'CutOffTimePreviousDayBasic',
        'cut_off_time_current_day_basic' => 'CutOffTimeCurrentDayBasic',
        'pre_order_time_display_type' => 'PreOrderTimeDisplayType',
        'always_appear_open' => 'AlwaysAppearOpen',
        'require_explicit_select_always' => 'RequireExplicitSelectAlways'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'lead_time_minutes' => 'setLeadTimeMinutes',
        'interval_minutes' => 'setIntervalMinutes',
        'max_order_ahead_days' => 'setMaxOrderAheadDays',
        'include_asap' => 'setIncludeAsap',
        'include_more_granular_initial_time' => 'setIncludeMoreGranularInitialTime',
        'cut_off_time_previous_day_basic' => 'setCutOffTimePreviousDayBasic',
        'cut_off_time_current_day_basic' => 'setCutOffTimeCurrentDayBasic',
        'pre_order_time_display_type' => 'setPreOrderTimeDisplayType',
        'always_appear_open' => 'setAlwaysAppearOpen',
        'require_explicit_select_always' => 'setRequireExplicitSelectAlways'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'lead_time_minutes' => 'getLeadTimeMinutes',
        'interval_minutes' => 'getIntervalMinutes',
        'max_order_ahead_days' => 'getMaxOrderAheadDays',
        'include_asap' => 'getIncludeAsap',
        'include_more_granular_initial_time' => 'getIncludeMoreGranularInitialTime',
        'cut_off_time_previous_day_basic' => 'getCutOffTimePreviousDayBasic',
        'cut_off_time_current_day_basic' => 'getCutOffTimeCurrentDayBasic',
        'pre_order_time_display_type' => 'getPreOrderTimeDisplayType',
        'always_appear_open' => 'getAlwaysAppearOpen',
        'require_explicit_select_always' => 'getRequireExplicitSelectAlways'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const PRE_ORDER_TIME_DISPLAY_TYPE_SINGLE_TIME = 'SingleTime';
    const PRE_ORDER_TIME_DISPLAY_TYPE_START_AND_END_TIME = 'StartAndEndTime';
    const PRE_ORDER_TIME_DISPLAY_TYPE_DAY_ONLY = 'DayOnly';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPreOrderTimeDisplayTypeAllowableValues()
    {
        return [
            self::PRE_ORDER_TIME_DISPLAY_TYPE_SINGLE_TIME,
            self::PRE_ORDER_TIME_DISPLAY_TYPE_START_AND_END_TIME,
            self::PRE_ORDER_TIME_DISPLAY_TYPE_DAY_ONLY,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['lead_time_minutes'] = isset($data['lead_time_minutes']) ? $data['lead_time_minutes'] : null;
        $this->container['interval_minutes'] = isset($data['interval_minutes']) ? $data['interval_minutes'] : null;
        $this->container['max_order_ahead_days'] = isset($data['max_order_ahead_days']) ? $data['max_order_ahead_days'] : null;
        $this->container['include_asap'] = isset($data['include_asap']) ? $data['include_asap'] : null;
        $this->container['include_more_granular_initial_time'] = isset($data['include_more_granular_initial_time']) ? $data['include_more_granular_initial_time'] : null;
        $this->container['cut_off_time_previous_day_basic'] = isset($data['cut_off_time_previous_day_basic']) ? $data['cut_off_time_previous_day_basic'] : null;
        $this->container['cut_off_time_current_day_basic'] = isset($data['cut_off_time_current_day_basic']) ? $data['cut_off_time_current_day_basic'] : null;
        $this->container['pre_order_time_display_type'] = isset($data['pre_order_time_display_type']) ? $data['pre_order_time_display_type'] : null;
        $this->container['always_appear_open'] = isset($data['always_appear_open']) ? $data['always_appear_open'] : null;
        $this->container['require_explicit_select_always'] = isset($data['require_explicit_select_always']) ? $data['require_explicit_select_always'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getPreOrderTimeDisplayTypeAllowableValues();
        if (!is_null($this->container['pre_order_time_display_type']) && !in_array($this->container['pre_order_time_display_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'pre_order_time_display_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets lead_time_minutes
     *
     * @return int
     */
    public function getLeadTimeMinutes()
    {
        return $this->container['lead_time_minutes'];
    }

    /**
     * Sets lead_time_minutes
     *
     * @param int $lead_time_minutes Lead Time in Minutes
     *
     * @return $this
     */
    public function setLeadTimeMinutes($lead_time_minutes)
    {
        $this->container['lead_time_minutes'] = $lead_time_minutes;

        return $this;
    }

    /**
     * Gets interval_minutes
     *
     * @return int
     */
    public function getIntervalMinutes()
    {
        return $this->container['interval_minutes'];
    }

    /**
     * Sets interval_minutes
     *
     * @param int $interval_minutes Interval in minutes
     *
     * @return $this
     */
    public function setIntervalMinutes($interval_minutes)
    {
        $this->container['interval_minutes'] = $interval_minutes;

        return $this;
    }

    /**
     * Gets max_order_ahead_days
     *
     * @return int
     */
    public function getMaxOrderAheadDays()
    {
        return $this->container['max_order_ahead_days'];
    }

    /**
     * Sets max_order_ahead_days
     *
     * @param int $max_order_ahead_days Max Days to order ahead
     *
     * @return $this
     */
    public function setMaxOrderAheadDays($max_order_ahead_days)
    {
        $this->container['max_order_ahead_days'] = $max_order_ahead_days;

        return $this;
    }

    /**
     * Gets include_asap
     *
     * @return bool
     */
    public function getIncludeAsap()
    {
        return $this->container['include_asap'];
    }

    /**
     * Sets include_asap
     *
     * @param bool $include_asap Show ASAP as option
     *
     * @return $this
     */
    public function setIncludeAsap($include_asap)
    {
        $this->container['include_asap'] = $include_asap;

        return $this;
    }

    /**
     * Gets include_more_granular_initial_time
     *
     * @return bool
     */
    public function getIncludeMoreGranularInitialTime()
    {
        return $this->container['include_more_granular_initial_time'];
    }

    /**
     * Sets include_more_granular_initial_time
     *
     * @param bool $include_more_granular_initial_time Granual Init' Time
     *
     * @return $this
     */
    public function setIncludeMoreGranularInitialTime($include_more_granular_initial_time)
    {
        $this->container['include_more_granular_initial_time'] = $include_more_granular_initial_time;

        return $this;
    }

    /**
     * Gets cut_off_time_previous_day_basic
     *
     * @return string
     */
    public function getCutOffTimePreviousDayBasic()
    {
        return $this->container['cut_off_time_previous_day_basic'];
    }

    /**
     * Sets cut_off_time_previous_day_basic
     *
     * @param string $cut_off_time_previous_day_basic Cut off time previous day
     *
     * @return $this
     */
    public function setCutOffTimePreviousDayBasic($cut_off_time_previous_day_basic)
    {
        $this->container['cut_off_time_previous_day_basic'] = $cut_off_time_previous_day_basic;

        return $this;
    }

    /**
     * Gets cut_off_time_current_day_basic
     *
     * @return string
     */
    public function getCutOffTimeCurrentDayBasic()
    {
        return $this->container['cut_off_time_current_day_basic'];
    }

    /**
     * Sets cut_off_time_current_day_basic
     *
     * @param string $cut_off_time_current_day_basic Cut off time current day
     *
     * @return $this
     */
    public function setCutOffTimeCurrentDayBasic($cut_off_time_current_day_basic)
    {
        $this->container['cut_off_time_current_day_basic'] = $cut_off_time_current_day_basic;

        return $this;
    }

    /**
     * Gets pre_order_time_display_type
     *
     * @return string
     */
    public function getPreOrderTimeDisplayType()
    {
        return $this->container['pre_order_time_display_type'];
    }

    /**
     * Sets pre_order_time_display_type
     *
     * @param string $pre_order_time_display_type Type of time displayed.
     *
     * @return $this
     */
    public function setPreOrderTimeDisplayType($pre_order_time_display_type)
    {
        $allowedValues = $this->getPreOrderTimeDisplayTypeAllowableValues();
        if (!is_null($pre_order_time_display_type) && !in_array($pre_order_time_display_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'pre_order_time_display_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['pre_order_time_display_type'] = $pre_order_time_display_type;

        return $this;
    }

    /**
     * Gets always_appear_open
     *
     * @return bool
     */
    public function getAlwaysAppearOpen()
    {
        return $this->container['always_appear_open'];
    }

    /**
     * Sets always_appear_open
     *
     * @param bool $always_appear_open Specifies whether a customer can pre-order outside the store opening hours or not.
     *
     * @return $this
     */
    public function setAlwaysAppearOpen($always_appear_open)
    {
        $this->container['always_appear_open'] = $always_appear_open;

        return $this;
    }

    /**
     * Gets require_explicit_select_always
     *
     * @return bool
     */
    public function getRequireExplicitSelectAlways()
    {
        return $this->container['require_explicit_select_always'];
    }

    /**
     * Sets require_explicit_select_always
     *
     * @param bool $require_explicit_select_always Force customer to select collection time.
     *
     * @return $this
     */
    public function setRequireExplicitSelectAlways($require_explicit_select_always)
    {
        $this->container['require_explicit_select_always'] = $require_explicit_select_always;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


