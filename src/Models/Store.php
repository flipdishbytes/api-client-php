<?php
/**
 * Store
 *
 * PHP version 5
 *
 * @category Class
 * @package  Flipdish\\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Flipdish Open API v1.0
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.19
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Flipdish\\Client\Models;

use \ArrayAccess;
use \Flipdish\\Client\ObjectSerializer;

/**
 * Store Class Doc Comment
 *
 * @category Class
 * @description Store
 * @package  Flipdish\\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Store implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Store';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'store_id' => 'int',
        'store_group_id' => 'int',
        'address' => '\Flipdish\\Client\Models\StoreAddress',
        'delivery_zones' => '\Flipdish\\Client\Models\DeliveryZone[]',
        'apm_phone_number' => 'string',
        'pickup_hours' => '\Flipdish\\Client\Models\BusinessHoursPeriod[]',
        'delivery_hours' => '\Flipdish\\Client\Models\BusinessHoursPeriod[]',
        'menu_id' => 'int',
        'order_confirmation_message_override_delivery' => 'string',
        'order_confirmation_message_override_pickup' => 'string',
        'printout_layout_type' => 'string',
        'store_notes' => '\Flipdish\\Client\Models\StoreNote[]',
        'microsoft_time_zone' => 'string',
        'iana_time_zone' => 'string',
        'currency' => 'string',
        'pre_order_delivery_enabled' => 'bool',
        'pre_order_pickup_enabled' => 'bool',
        'logo_url' => 'string',
        'fraud_prevention_strategy' => 'string',
        'phone_number' => 'string',
        'always_appear_open' => 'bool',
        'pre_order_enabled' => 'bool',
        'take_out_enabled' => 'bool',
        'table_service_enabled' => 'bool',
        'dine_in_enabled' => 'bool',
        'allow_pre_orders_and_table_service' => 'bool',
        'pickup_enabled' => 'bool',
        'delivery_enabled' => 'bool',
        'card_order_delivery_enabled' => 'bool',
        'cash_orders_delivery_enabled' => 'bool',
        'card_orders_pickup_enabled' => 'bool',
        'cash_orders_pickup_enabled' => 'bool',
        'tips_enabled' => 'bool',
        'automatically_accept_orders' => 'bool',
        'open_for_delivery' => 'bool',
        'open_for_pickup' => 'bool',
        'minimum_pickup_order_amount' => 'double',
        'require_customer_name_for_pickup' => 'bool',
        'gdpr_customer_phone_numbers' => 'bool',
        'require_customer_name_for_delivery' => 'bool',
        'allow_chef_notes' => 'bool',
        'eta_in_pickup_confirmation_sms_enabled' => 'bool',
        'eta_in_delivery_confirmation_sms_enabled' => 'bool',
        'is_archived' => 'bool',
        'is_published' => 'bool',
        'name' => 'string',
        'email_address' => 'string',
        'staff_language' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'store_id' => 'int32',
        'store_group_id' => 'int32',
        'address' => null,
        'delivery_zones' => null,
        'apm_phone_number' => null,
        'pickup_hours' => null,
        'delivery_hours' => null,
        'menu_id' => 'int32',
        'order_confirmation_message_override_delivery' => null,
        'order_confirmation_message_override_pickup' => null,
        'printout_layout_type' => null,
        'store_notes' => null,
        'microsoft_time_zone' => null,
        'iana_time_zone' => null,
        'currency' => null,
        'pre_order_delivery_enabled' => null,
        'pre_order_pickup_enabled' => null,
        'logo_url' => null,
        'fraud_prevention_strategy' => null,
        'phone_number' => null,
        'always_appear_open' => null,
        'pre_order_enabled' => null,
        'take_out_enabled' => null,
        'table_service_enabled' => null,
        'dine_in_enabled' => null,
        'allow_pre_orders_and_table_service' => null,
        'pickup_enabled' => null,
        'delivery_enabled' => null,
        'card_order_delivery_enabled' => null,
        'cash_orders_delivery_enabled' => null,
        'card_orders_pickup_enabled' => null,
        'cash_orders_pickup_enabled' => null,
        'tips_enabled' => null,
        'automatically_accept_orders' => null,
        'open_for_delivery' => null,
        'open_for_pickup' => null,
        'minimum_pickup_order_amount' => 'double',
        'require_customer_name_for_pickup' => null,
        'gdpr_customer_phone_numbers' => null,
        'require_customer_name_for_delivery' => null,
        'allow_chef_notes' => null,
        'eta_in_pickup_confirmation_sms_enabled' => null,
        'eta_in_delivery_confirmation_sms_enabled' => null,
        'is_archived' => null,
        'is_published' => null,
        'name' => null,
        'email_address' => null,
        'staff_language' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'store_id' => 'StoreId',
        'store_group_id' => 'StoreGroupId',
        'address' => 'Address',
        'delivery_zones' => 'DeliveryZones',
        'apm_phone_number' => 'ApmPhoneNumber',
        'pickup_hours' => 'PickupHours',
        'delivery_hours' => 'DeliveryHours',
        'menu_id' => 'MenuId',
        'order_confirmation_message_override_delivery' => 'OrderConfirmationMessageOverrideDelivery',
        'order_confirmation_message_override_pickup' => 'OrderConfirmationMessageOverridePickup',
        'printout_layout_type' => 'PrintoutLayoutType',
        'store_notes' => 'StoreNotes',
        'microsoft_time_zone' => 'MicrosoftTimeZone',
        'iana_time_zone' => 'IanaTimeZone',
        'currency' => 'Currency',
        'pre_order_delivery_enabled' => 'PreOrderDeliveryEnabled',
        'pre_order_pickup_enabled' => 'PreOrderPickupEnabled',
        'logo_url' => 'LogoUrl',
        'fraud_prevention_strategy' => 'FraudPreventionStrategy',
        'phone_number' => 'PhoneNumber',
        'always_appear_open' => 'AlwaysAppearOpen',
        'pre_order_enabled' => 'PreOrderEnabled',
        'take_out_enabled' => 'TakeOutEnabled',
        'table_service_enabled' => 'TableServiceEnabled',
        'dine_in_enabled' => 'DineInEnabled',
        'allow_pre_orders_and_table_service' => 'AllowPreOrdersAndTableService',
        'pickup_enabled' => 'PickupEnabled',
        'delivery_enabled' => 'DeliveryEnabled',
        'card_order_delivery_enabled' => 'CardOrderDeliveryEnabled',
        'cash_orders_delivery_enabled' => 'CashOrdersDeliveryEnabled',
        'card_orders_pickup_enabled' => 'CardOrdersPickupEnabled',
        'cash_orders_pickup_enabled' => 'CashOrdersPickupEnabled',
        'tips_enabled' => 'TipsEnabled',
        'automatically_accept_orders' => 'AutomaticallyAcceptOrders',
        'open_for_delivery' => 'OpenForDelivery',
        'open_for_pickup' => 'OpenForPickup',
        'minimum_pickup_order_amount' => 'MinimumPickupOrderAmount',
        'require_customer_name_for_pickup' => 'RequireCustomerNameForPickup',
        'gdpr_customer_phone_numbers' => 'GdprCustomerPhoneNumbers',
        'require_customer_name_for_delivery' => 'RequireCustomerNameForDelivery',
        'allow_chef_notes' => 'AllowChefNotes',
        'eta_in_pickup_confirmation_sms_enabled' => 'EtaInPickupConfirmationSmsEnabled',
        'eta_in_delivery_confirmation_sms_enabled' => 'EtaInDeliveryConfirmationSmsEnabled',
        'is_archived' => 'IsArchived',
        'is_published' => 'IsPublished',
        'name' => 'Name',
        'email_address' => 'EmailAddress',
        'staff_language' => 'StaffLanguage'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'store_id' => 'setStoreId',
        'store_group_id' => 'setStoreGroupId',
        'address' => 'setAddress',
        'delivery_zones' => 'setDeliveryZones',
        'apm_phone_number' => 'setApmPhoneNumber',
        'pickup_hours' => 'setPickupHours',
        'delivery_hours' => 'setDeliveryHours',
        'menu_id' => 'setMenuId',
        'order_confirmation_message_override_delivery' => 'setOrderConfirmationMessageOverrideDelivery',
        'order_confirmation_message_override_pickup' => 'setOrderConfirmationMessageOverridePickup',
        'printout_layout_type' => 'setPrintoutLayoutType',
        'store_notes' => 'setStoreNotes',
        'microsoft_time_zone' => 'setMicrosoftTimeZone',
        'iana_time_zone' => 'setIanaTimeZone',
        'currency' => 'setCurrency',
        'pre_order_delivery_enabled' => 'setPreOrderDeliveryEnabled',
        'pre_order_pickup_enabled' => 'setPreOrderPickupEnabled',
        'logo_url' => 'setLogoUrl',
        'fraud_prevention_strategy' => 'setFraudPreventionStrategy',
        'phone_number' => 'setPhoneNumber',
        'always_appear_open' => 'setAlwaysAppearOpen',
        'pre_order_enabled' => 'setPreOrderEnabled',
        'take_out_enabled' => 'setTakeOutEnabled',
        'table_service_enabled' => 'setTableServiceEnabled',
        'dine_in_enabled' => 'setDineInEnabled',
        'allow_pre_orders_and_table_service' => 'setAllowPreOrdersAndTableService',
        'pickup_enabled' => 'setPickupEnabled',
        'delivery_enabled' => 'setDeliveryEnabled',
        'card_order_delivery_enabled' => 'setCardOrderDeliveryEnabled',
        'cash_orders_delivery_enabled' => 'setCashOrdersDeliveryEnabled',
        'card_orders_pickup_enabled' => 'setCardOrdersPickupEnabled',
        'cash_orders_pickup_enabled' => 'setCashOrdersPickupEnabled',
        'tips_enabled' => 'setTipsEnabled',
        'automatically_accept_orders' => 'setAutomaticallyAcceptOrders',
        'open_for_delivery' => 'setOpenForDelivery',
        'open_for_pickup' => 'setOpenForPickup',
        'minimum_pickup_order_amount' => 'setMinimumPickupOrderAmount',
        'require_customer_name_for_pickup' => 'setRequireCustomerNameForPickup',
        'gdpr_customer_phone_numbers' => 'setGdprCustomerPhoneNumbers',
        'require_customer_name_for_delivery' => 'setRequireCustomerNameForDelivery',
        'allow_chef_notes' => 'setAllowChefNotes',
        'eta_in_pickup_confirmation_sms_enabled' => 'setEtaInPickupConfirmationSmsEnabled',
        'eta_in_delivery_confirmation_sms_enabled' => 'setEtaInDeliveryConfirmationSmsEnabled',
        'is_archived' => 'setIsArchived',
        'is_published' => 'setIsPublished',
        'name' => 'setName',
        'email_address' => 'setEmailAddress',
        'staff_language' => 'setStaffLanguage'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'store_id' => 'getStoreId',
        'store_group_id' => 'getStoreGroupId',
        'address' => 'getAddress',
        'delivery_zones' => 'getDeliveryZones',
        'apm_phone_number' => 'getApmPhoneNumber',
        'pickup_hours' => 'getPickupHours',
        'delivery_hours' => 'getDeliveryHours',
        'menu_id' => 'getMenuId',
        'order_confirmation_message_override_delivery' => 'getOrderConfirmationMessageOverrideDelivery',
        'order_confirmation_message_override_pickup' => 'getOrderConfirmationMessageOverridePickup',
        'printout_layout_type' => 'getPrintoutLayoutType',
        'store_notes' => 'getStoreNotes',
        'microsoft_time_zone' => 'getMicrosoftTimeZone',
        'iana_time_zone' => 'getIanaTimeZone',
        'currency' => 'getCurrency',
        'pre_order_delivery_enabled' => 'getPreOrderDeliveryEnabled',
        'pre_order_pickup_enabled' => 'getPreOrderPickupEnabled',
        'logo_url' => 'getLogoUrl',
        'fraud_prevention_strategy' => 'getFraudPreventionStrategy',
        'phone_number' => 'getPhoneNumber',
        'always_appear_open' => 'getAlwaysAppearOpen',
        'pre_order_enabled' => 'getPreOrderEnabled',
        'take_out_enabled' => 'getTakeOutEnabled',
        'table_service_enabled' => 'getTableServiceEnabled',
        'dine_in_enabled' => 'getDineInEnabled',
        'allow_pre_orders_and_table_service' => 'getAllowPreOrdersAndTableService',
        'pickup_enabled' => 'getPickupEnabled',
        'delivery_enabled' => 'getDeliveryEnabled',
        'card_order_delivery_enabled' => 'getCardOrderDeliveryEnabled',
        'cash_orders_delivery_enabled' => 'getCashOrdersDeliveryEnabled',
        'card_orders_pickup_enabled' => 'getCardOrdersPickupEnabled',
        'cash_orders_pickup_enabled' => 'getCashOrdersPickupEnabled',
        'tips_enabled' => 'getTipsEnabled',
        'automatically_accept_orders' => 'getAutomaticallyAcceptOrders',
        'open_for_delivery' => 'getOpenForDelivery',
        'open_for_pickup' => 'getOpenForPickup',
        'minimum_pickup_order_amount' => 'getMinimumPickupOrderAmount',
        'require_customer_name_for_pickup' => 'getRequireCustomerNameForPickup',
        'gdpr_customer_phone_numbers' => 'getGdprCustomerPhoneNumbers',
        'require_customer_name_for_delivery' => 'getRequireCustomerNameForDelivery',
        'allow_chef_notes' => 'getAllowChefNotes',
        'eta_in_pickup_confirmation_sms_enabled' => 'getEtaInPickupConfirmationSmsEnabled',
        'eta_in_delivery_confirmation_sms_enabled' => 'getEtaInDeliveryConfirmationSmsEnabled',
        'is_archived' => 'getIsArchived',
        'is_published' => 'getIsPublished',
        'name' => 'getName',
        'email_address' => 'getEmailAddress',
        'staff_language' => 'getStaffLanguage'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const PRINTOUT_LAYOUT_TYPE__DEFAULT = 'Default';
    const PRINTOUT_LAYOUT_TYPE_CENTRA = 'Centra';
    const PRINTOUT_LAYOUT_TYPE_SMALL_CHEF_NOTES = 'SmallChefNotes';
    const PRINTOUT_LAYOUT_TYPE_SMALL_CHEF_NOTES_AND_CENTRA = 'SmallChefNotesAndCentra';
    const CURRENCY_EUR = 'EUR';
    const CURRENCY_USD = 'USD';
    const CURRENCY_GBP = 'GBP';
    const CURRENCY_CAD = 'CAD';
    const CURRENCY_AUD = 'AUD';
    const CURRENCY_DJF = 'DJF';
    const CURRENCY_ZAR = 'ZAR';
    const CURRENCY_ETB = 'ETB';
    const CURRENCY_AED = 'AED';
    const CURRENCY_BHD = 'BHD';
    const CURRENCY_DZD = 'DZD';
    const CURRENCY_EGP = 'EGP';
    const CURRENCY_IQD = 'IQD';
    const CURRENCY_JOD = 'JOD';
    const CURRENCY_KWD = 'KWD';
    const CURRENCY_LBP = 'LBP';
    const CURRENCY_LYD = 'LYD';
    const CURRENCY_MAD = 'MAD';
    const CURRENCY_OMR = 'OMR';
    const CURRENCY_QAR = 'QAR';
    const CURRENCY_SAR = 'SAR';
    const CURRENCY_SYP = 'SYP';
    const CURRENCY_TND = 'TND';
    const CURRENCY_YER = 'YER';
    const CURRENCY_CLP = 'CLP';
    const CURRENCY_INR = 'INR';
    const CURRENCY_AZN = 'AZN';
    const CURRENCY_RUB = 'RUB';
    const CURRENCY_BYN = 'BYN';
    const CURRENCY_BGN = 'BGN';
    const CURRENCY_NGN = 'NGN';
    const CURRENCY_BDT = 'BDT';
    const CURRENCY_CNY = 'CNY';
    const CURRENCY_BAM = 'BAM';
    const CURRENCY_CZK = 'CZK';
    const CURRENCY_DKK = 'DKK';
    const CURRENCY_CHF = 'CHF';
    const CURRENCY_MVR = 'MVR';
    const CURRENCY_BTN = 'BTN';
    const CURRENCY_XCD = 'XCD';
    const CURRENCY_BZD = 'BZD';
    const CURRENCY_HKD = 'HKD';
    const CURRENCY_IDR = 'IDR';
    const CURRENCY_JMD = 'JMD';
    const CURRENCY_MYR = 'MYR';
    const CURRENCY_NZD = 'NZD';
    const CURRENCY_PHP = 'PHP';
    const CURRENCY_SGD = 'SGD';
    const CURRENCY_TTD = 'TTD';
    const CURRENCY_XDR = 'XDR';
    const CURRENCY_ARS = 'ARS';
    const CURRENCY_BOB = 'BOB';
    const CURRENCY_COP = 'COP';
    const CURRENCY_CRC = 'CRC';
    const CURRENCY_CUP = 'CUP';
    const CURRENCY_DOP = 'DOP';
    const CURRENCY_GTQ = 'GTQ';
    const CURRENCY_HNL = 'HNL';
    const CURRENCY_MXN = 'MXN';
    const CURRENCY_NIO = 'NIO';
    const CURRENCY_PAB = 'PAB';
    const CURRENCY_PEN = 'PEN';
    const CURRENCY_PYG = 'PYG';
    const CURRENCY_UYU = 'UYU';
    const CURRENCY_VEF = 'VEF';
    const CURRENCY_IRR = 'IRR';
    const CURRENCY_XOF = 'XOF';
    const CURRENCY_CDF = 'CDF';
    const CURRENCY_XAF = 'XAF';
    const CURRENCY_HTG = 'HTG';
    const CURRENCY_ILS = 'ILS';
    const CURRENCY_HRK = 'HRK';
    const CURRENCY_HUF = 'HUF';
    const CURRENCY_AMD = 'AMD';
    const CURRENCY_ISK = 'ISK';
    const CURRENCY_JPY = 'JPY';
    const CURRENCY_GEL = 'GEL';
    const CURRENCY_KZT = 'KZT';
    const CURRENCY_KHR = 'KHR';
    const CURRENCY_KRW = 'KRW';
    const CURRENCY_KGS = 'KGS';
    const CURRENCY_LAK = 'LAK';
    const CURRENCY_MKD = 'MKD';
    const CURRENCY_MNT = 'MNT';
    const CURRENCY_BND = 'BND';
    const CURRENCY_MMK = 'MMK';
    const CURRENCY_NOK = 'NOK';
    const CURRENCY_NPR = 'NPR';
    const CURRENCY_PKR = 'PKR';
    const CURRENCY_PLN = 'PLN';
    const CURRENCY_AFN = 'AFN';
    const CURRENCY_BRL = 'BRL';
    const CURRENCY_MDL = 'MDL';
    const CURRENCY_RON = 'RON';
    const CURRENCY_RWF = 'RWF';
    const CURRENCY_SEK = 'SEK';
    const CURRENCY_LKR = 'LKR';
    const CURRENCY_SOS = 'SOS';
    const CURRENCY_ALL = 'ALL';
    const CURRENCY_RSD = 'RSD';
    const CURRENCY_KES = 'KES';
    const CURRENCY_TJS = 'TJS';
    const CURRENCY_THB = 'THB';
    const CURRENCY_ERN = 'ERN';
    const CURRENCY_TMT = 'TMT';
    const CURRENCY_BWP = 'BWP';
    const CURRENCY__TRY = 'TRY';
    const CURRENCY_UAH = 'UAH';
    const CURRENCY_UZS = 'UZS';
    const CURRENCY_VND = 'VND';
    const CURRENCY_MOP = 'MOP';
    const CURRENCY_TWD = 'TWD';
    const CURRENCY_BMD = 'BMD';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPrintoutLayoutTypeAllowableValues()
    {
        return [
            self::PRINTOUT_LAYOUT_TYPE__DEFAULT,
            self::PRINTOUT_LAYOUT_TYPE_CENTRA,
            self::PRINTOUT_LAYOUT_TYPE_SMALL_CHEF_NOTES,
            self::PRINTOUT_LAYOUT_TYPE_SMALL_CHEF_NOTES_AND_CENTRA,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getCurrencyAllowableValues()
    {
        return [
            self::CURRENCY_EUR,
            self::CURRENCY_USD,
            self::CURRENCY_GBP,
            self::CURRENCY_CAD,
            self::CURRENCY_AUD,
            self::CURRENCY_DJF,
            self::CURRENCY_ZAR,
            self::CURRENCY_ETB,
            self::CURRENCY_AED,
            self::CURRENCY_BHD,
            self::CURRENCY_DZD,
            self::CURRENCY_EGP,
            self::CURRENCY_IQD,
            self::CURRENCY_JOD,
            self::CURRENCY_KWD,
            self::CURRENCY_LBP,
            self::CURRENCY_LYD,
            self::CURRENCY_MAD,
            self::CURRENCY_OMR,
            self::CURRENCY_QAR,
            self::CURRENCY_SAR,
            self::CURRENCY_SYP,
            self::CURRENCY_TND,
            self::CURRENCY_YER,
            self::CURRENCY_CLP,
            self::CURRENCY_INR,
            self::CURRENCY_AZN,
            self::CURRENCY_RUB,
            self::CURRENCY_BYN,
            self::CURRENCY_BGN,
            self::CURRENCY_NGN,
            self::CURRENCY_BDT,
            self::CURRENCY_CNY,
            self::CURRENCY_BAM,
            self::CURRENCY_CZK,
            self::CURRENCY_DKK,
            self::CURRENCY_CHF,
            self::CURRENCY_MVR,
            self::CURRENCY_BTN,
            self::CURRENCY_XCD,
            self::CURRENCY_BZD,
            self::CURRENCY_HKD,
            self::CURRENCY_IDR,
            self::CURRENCY_JMD,
            self::CURRENCY_MYR,
            self::CURRENCY_NZD,
            self::CURRENCY_PHP,
            self::CURRENCY_SGD,
            self::CURRENCY_TTD,
            self::CURRENCY_XDR,
            self::CURRENCY_ARS,
            self::CURRENCY_BOB,
            self::CURRENCY_COP,
            self::CURRENCY_CRC,
            self::CURRENCY_CUP,
            self::CURRENCY_DOP,
            self::CURRENCY_GTQ,
            self::CURRENCY_HNL,
            self::CURRENCY_MXN,
            self::CURRENCY_NIO,
            self::CURRENCY_PAB,
            self::CURRENCY_PEN,
            self::CURRENCY_PYG,
            self::CURRENCY_UYU,
            self::CURRENCY_VEF,
            self::CURRENCY_IRR,
            self::CURRENCY_XOF,
            self::CURRENCY_CDF,
            self::CURRENCY_XAF,
            self::CURRENCY_HTG,
            self::CURRENCY_ILS,
            self::CURRENCY_HRK,
            self::CURRENCY_HUF,
            self::CURRENCY_AMD,
            self::CURRENCY_ISK,
            self::CURRENCY_JPY,
            self::CURRENCY_GEL,
            self::CURRENCY_KZT,
            self::CURRENCY_KHR,
            self::CURRENCY_KRW,
            self::CURRENCY_KGS,
            self::CURRENCY_LAK,
            self::CURRENCY_MKD,
            self::CURRENCY_MNT,
            self::CURRENCY_BND,
            self::CURRENCY_MMK,
            self::CURRENCY_NOK,
            self::CURRENCY_NPR,
            self::CURRENCY_PKR,
            self::CURRENCY_PLN,
            self::CURRENCY_AFN,
            self::CURRENCY_BRL,
            self::CURRENCY_MDL,
            self::CURRENCY_RON,
            self::CURRENCY_RWF,
            self::CURRENCY_SEK,
            self::CURRENCY_LKR,
            self::CURRENCY_SOS,
            self::CURRENCY_ALL,
            self::CURRENCY_RSD,
            self::CURRENCY_KES,
            self::CURRENCY_TJS,
            self::CURRENCY_THB,
            self::CURRENCY_ERN,
            self::CURRENCY_TMT,
            self::CURRENCY_BWP,
            self::CURRENCY__TRY,
            self::CURRENCY_UAH,
            self::CURRENCY_UZS,
            self::CURRENCY_VND,
            self::CURRENCY_MOP,
            self::CURRENCY_TWD,
            self::CURRENCY_BMD,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['store_id'] = isset($data['store_id']) ? $data['store_id'] : null;
        $this->container['store_group_id'] = isset($data['store_group_id']) ? $data['store_group_id'] : null;
        $this->container['address'] = isset($data['address']) ? $data['address'] : null;
        $this->container['delivery_zones'] = isset($data['delivery_zones']) ? $data['delivery_zones'] : null;
        $this->container['apm_phone_number'] = isset($data['apm_phone_number']) ? $data['apm_phone_number'] : null;
        $this->container['pickup_hours'] = isset($data['pickup_hours']) ? $data['pickup_hours'] : null;
        $this->container['delivery_hours'] = isset($data['delivery_hours']) ? $data['delivery_hours'] : null;
        $this->container['menu_id'] = isset($data['menu_id']) ? $data['menu_id'] : null;
        $this->container['order_confirmation_message_override_delivery'] = isset($data['order_confirmation_message_override_delivery']) ? $data['order_confirmation_message_override_delivery'] : null;
        $this->container['order_confirmation_message_override_pickup'] = isset($data['order_confirmation_message_override_pickup']) ? $data['order_confirmation_message_override_pickup'] : null;
        $this->container['printout_layout_type'] = isset($data['printout_layout_type']) ? $data['printout_layout_type'] : null;
        $this->container['store_notes'] = isset($data['store_notes']) ? $data['store_notes'] : null;
        $this->container['microsoft_time_zone'] = isset($data['microsoft_time_zone']) ? $data['microsoft_time_zone'] : null;
        $this->container['iana_time_zone'] = isset($data['iana_time_zone']) ? $data['iana_time_zone'] : null;
        $this->container['currency'] = isset($data['currency']) ? $data['currency'] : null;
        $this->container['pre_order_delivery_enabled'] = isset($data['pre_order_delivery_enabled']) ? $data['pre_order_delivery_enabled'] : null;
        $this->container['pre_order_pickup_enabled'] = isset($data['pre_order_pickup_enabled']) ? $data['pre_order_pickup_enabled'] : null;
        $this->container['logo_url'] = isset($data['logo_url']) ? $data['logo_url'] : null;
        $this->container['fraud_prevention_strategy'] = isset($data['fraud_prevention_strategy']) ? $data['fraud_prevention_strategy'] : null;
        $this->container['phone_number'] = isset($data['phone_number']) ? $data['phone_number'] : null;
        $this->container['always_appear_open'] = isset($data['always_appear_open']) ? $data['always_appear_open'] : null;
        $this->container['pre_order_enabled'] = isset($data['pre_order_enabled']) ? $data['pre_order_enabled'] : null;
        $this->container['take_out_enabled'] = isset($data['take_out_enabled']) ? $data['take_out_enabled'] : null;
        $this->container['table_service_enabled'] = isset($data['table_service_enabled']) ? $data['table_service_enabled'] : null;
        $this->container['dine_in_enabled'] = isset($data['dine_in_enabled']) ? $data['dine_in_enabled'] : null;
        $this->container['allow_pre_orders_and_table_service'] = isset($data['allow_pre_orders_and_table_service']) ? $data['allow_pre_orders_and_table_service'] : null;
        $this->container['pickup_enabled'] = isset($data['pickup_enabled']) ? $data['pickup_enabled'] : null;
        $this->container['delivery_enabled'] = isset($data['delivery_enabled']) ? $data['delivery_enabled'] : null;
        $this->container['card_order_delivery_enabled'] = isset($data['card_order_delivery_enabled']) ? $data['card_order_delivery_enabled'] : null;
        $this->container['cash_orders_delivery_enabled'] = isset($data['cash_orders_delivery_enabled']) ? $data['cash_orders_delivery_enabled'] : null;
        $this->container['card_orders_pickup_enabled'] = isset($data['card_orders_pickup_enabled']) ? $data['card_orders_pickup_enabled'] : null;
        $this->container['cash_orders_pickup_enabled'] = isset($data['cash_orders_pickup_enabled']) ? $data['cash_orders_pickup_enabled'] : null;
        $this->container['tips_enabled'] = isset($data['tips_enabled']) ? $data['tips_enabled'] : null;
        $this->container['automatically_accept_orders'] = isset($data['automatically_accept_orders']) ? $data['automatically_accept_orders'] : null;
        $this->container['open_for_delivery'] = isset($data['open_for_delivery']) ? $data['open_for_delivery'] : null;
        $this->container['open_for_pickup'] = isset($data['open_for_pickup']) ? $data['open_for_pickup'] : null;
        $this->container['minimum_pickup_order_amount'] = isset($data['minimum_pickup_order_amount']) ? $data['minimum_pickup_order_amount'] : null;
        $this->container['require_customer_name_for_pickup'] = isset($data['require_customer_name_for_pickup']) ? $data['require_customer_name_for_pickup'] : null;
        $this->container['gdpr_customer_phone_numbers'] = isset($data['gdpr_customer_phone_numbers']) ? $data['gdpr_customer_phone_numbers'] : null;
        $this->container['require_customer_name_for_delivery'] = isset($data['require_customer_name_for_delivery']) ? $data['require_customer_name_for_delivery'] : null;
        $this->container['allow_chef_notes'] = isset($data['allow_chef_notes']) ? $data['allow_chef_notes'] : null;
        $this->container['eta_in_pickup_confirmation_sms_enabled'] = isset($data['eta_in_pickup_confirmation_sms_enabled']) ? $data['eta_in_pickup_confirmation_sms_enabled'] : null;
        $this->container['eta_in_delivery_confirmation_sms_enabled'] = isset($data['eta_in_delivery_confirmation_sms_enabled']) ? $data['eta_in_delivery_confirmation_sms_enabled'] : null;
        $this->container['is_archived'] = isset($data['is_archived']) ? $data['is_archived'] : null;
        $this->container['is_published'] = isset($data['is_published']) ? $data['is_published'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['email_address'] = isset($data['email_address']) ? $data['email_address'] : null;
        $this->container['staff_language'] = isset($data['staff_language']) ? $data['staff_language'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getPrintoutLayoutTypeAllowableValues();
        if (!is_null($this->container['printout_layout_type']) && !in_array($this->container['printout_layout_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'printout_layout_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getCurrencyAllowableValues();
        if (!is_null($this->container['currency']) && !in_array($this->container['currency'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'currency', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['email_address']) && (mb_strlen($this->container['email_address']) > 100)) {
            $invalidProperties[] = "invalid value for 'email_address', the character length must be smaller than or equal to 100.";
        }

        if (!is_null($this->container['email_address']) && (mb_strlen($this->container['email_address']) < 0)) {
            $invalidProperties[] = "invalid value for 'email_address', the character length must be bigger than or equal to 0.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets store_id
     *
     * @return int
     */
    public function getStoreId()
    {
        return $this->container['store_id'];
    }

    /**
     * Sets store_id
     *
     * @param int $store_id Store identifier
     *
     * @return $this
     */
    public function setStoreId($store_id)
    {
        $this->container['store_id'] = $store_id;

        return $this;
    }

    /**
     * Gets store_group_id
     *
     * @return int
     */
    public function getStoreGroupId()
    {
        return $this->container['store_group_id'];
    }

    /**
     * Sets store_group_id
     *
     * @param int $store_group_id Store group id to which this store belongs
     *
     * @return $this
     */
    public function setStoreGroupId($store_group_id)
    {
        $this->container['store_group_id'] = $store_group_id;

        return $this;
    }

    /**
     * Gets address
     *
     * @return \Flipdish\\Client\Models\StoreAddress
     */
    public function getAddress()
    {
        return $this->container['address'];
    }

    /**
     * Sets address
     *
     * @param \Flipdish\\Client\Models\StoreAddress $address Store address
     *
     * @return $this
     */
    public function setAddress($address)
    {
        $this->container['address'] = $address;

        return $this;
    }

    /**
     * Gets delivery_zones
     *
     * @return \Flipdish\\Client\Models\DeliveryZone[]
     */
    public function getDeliveryZones()
    {
        return $this->container['delivery_zones'];
    }

    /**
     * Sets delivery_zones
     *
     * @param \Flipdish\\Client\Models\DeliveryZone[] $delivery_zones Delivery zones
     *
     * @return $this
     */
    public function setDeliveryZones($delivery_zones)
    {
        $this->container['delivery_zones'] = $delivery_zones;

        return $this;
    }

    /**
     * Gets apm_phone_number
     *
     * @return string
     */
    public function getApmPhoneNumber()
    {
        return $this->container['apm_phone_number'];
    }

    /**
     * Sets apm_phone_number
     *
     * @param string $apm_phone_number Automated Phone Marketing number
     *
     * @return $this
     */
    public function setApmPhoneNumber($apm_phone_number)
    {
        $this->container['apm_phone_number'] = $apm_phone_number;

        return $this;
    }

    /**
     * Gets pickup_hours
     *
     * @return \Flipdish\\Client\Models\BusinessHoursPeriod[]
     */
    public function getPickupHours()
    {
        return $this->container['pickup_hours'];
    }

    /**
     * Sets pickup_hours
     *
     * @param \Flipdish\\Client\Models\BusinessHoursPeriod[] $pickup_hours Pickup hours
     *
     * @return $this
     */
    public function setPickupHours($pickup_hours)
    {
        $this->container['pickup_hours'] = $pickup_hours;

        return $this;
    }

    /**
     * Gets delivery_hours
     *
     * @return \Flipdish\\Client\Models\BusinessHoursPeriod[]
     */
    public function getDeliveryHours()
    {
        return $this->container['delivery_hours'];
    }

    /**
     * Sets delivery_hours
     *
     * @param \Flipdish\\Client\Models\BusinessHoursPeriod[] $delivery_hours Delivery hours
     *
     * @return $this
     */
    public function setDeliveryHours($delivery_hours)
    {
        $this->container['delivery_hours'] = $delivery_hours;

        return $this;
    }

    /**
     * Gets menu_id
     *
     * @return int
     */
    public function getMenuId()
    {
        return $this->container['menu_id'];
    }

    /**
     * Sets menu_id
     *
     * @param int $menu_id Menu identifier
     *
     * @return $this
     */
    public function setMenuId($menu_id)
    {
        $this->container['menu_id'] = $menu_id;

        return $this;
    }

    /**
     * Gets order_confirmation_message_override_delivery
     *
     * @return string
     */
    public function getOrderConfirmationMessageOverrideDelivery()
    {
        return $this->container['order_confirmation_message_override_delivery'];
    }

    /**
     * Sets order_confirmation_message_override_delivery
     *
     * @param string $order_confirmation_message_override_delivery Overridden confirmation message for delivery orders
     *
     * @return $this
     */
    public function setOrderConfirmationMessageOverrideDelivery($order_confirmation_message_override_delivery)
    {
        $this->container['order_confirmation_message_override_delivery'] = $order_confirmation_message_override_delivery;

        return $this;
    }

    /**
     * Gets order_confirmation_message_override_pickup
     *
     * @return string
     */
    public function getOrderConfirmationMessageOverridePickup()
    {
        return $this->container['order_confirmation_message_override_pickup'];
    }

    /**
     * Sets order_confirmation_message_override_pickup
     *
     * @param string $order_confirmation_message_override_pickup Overridden confirmation message for pickup orders
     *
     * @return $this
     */
    public function setOrderConfirmationMessageOverridePickup($order_confirmation_message_override_pickup)
    {
        $this->container['order_confirmation_message_override_pickup'] = $order_confirmation_message_override_pickup;

        return $this;
    }

    /**
     * Gets printout_layout_type
     *
     * @return string
     */
    public function getPrintoutLayoutType()
    {
        return $this->container['printout_layout_type'];
    }

    /**
     * Sets printout_layout_type
     *
     * @param string $printout_layout_type Printout layout
     *
     * @return $this
     */
    public function setPrintoutLayoutType($printout_layout_type)
    {
        $allowedValues = $this->getPrintoutLayoutTypeAllowableValues();
        if (!is_null($printout_layout_type) && !in_array($printout_layout_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'printout_layout_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['printout_layout_type'] = $printout_layout_type;

        return $this;
    }

    /**
     * Gets store_notes
     *
     * @return \Flipdish\\Client\Models\StoreNote[]
     */
    public function getStoreNotes()
    {
        return $this->container['store_notes'];
    }

    /**
     * Sets store_notes
     *
     * @param \Flipdish\\Client\Models\StoreNote[] $store_notes Store notes
     *
     * @return $this
     */
    public function setStoreNotes($store_notes)
    {
        $this->container['store_notes'] = $store_notes;

        return $this;
    }

    /**
     * Gets microsoft_time_zone
     *
     * @return string
     */
    public function getMicrosoftTimeZone()
    {
        return $this->container['microsoft_time_zone'];
    }

    /**
     * Sets microsoft_time_zone
     *
     * @param string $microsoft_time_zone Microsoft Time Zone Index Values (https://msdn.microsoft.com/en-us/library/ms912391)  (Editable through store coordinate change)
     *
     * @return $this
     */
    public function setMicrosoftTimeZone($microsoft_time_zone)
    {
        $this->container['microsoft_time_zone'] = $microsoft_time_zone;

        return $this;
    }

    /**
     * Gets iana_time_zone
     *
     * @return string
     */
    public function getIanaTimeZone()
    {
        return $this->container['iana_time_zone'];
    }

    /**
     * Sets iana_time_zone
     *
     * @param string $iana_time_zone IANA Time Zone (https://www.iana.org/time-zones)  (Editable through store coordinate change)
     *
     * @return $this
     */
    public function setIanaTimeZone($iana_time_zone)
    {
        $this->container['iana_time_zone'] = $iana_time_zone;

        return $this;
    }

    /**
     * Gets currency
     *
     * @return string
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     *
     * @param string $currency Currency (derived from Store Group)
     *
     * @return $this
     */
    public function setCurrency($currency)
    {
        $allowedValues = $this->getCurrencyAllowableValues();
        if (!is_null($currency) && !in_array($currency, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'currency', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets pre_order_delivery_enabled
     *
     * @return bool
     */
    public function getPreOrderDeliveryEnabled()
    {
        return $this->container['pre_order_delivery_enabled'];
    }

    /**
     * Sets pre_order_delivery_enabled
     *
     * @param bool $pre_order_delivery_enabled Is PerOrder Enabled for Delivery
     *
     * @return $this
     */
    public function setPreOrderDeliveryEnabled($pre_order_delivery_enabled)
    {
        $this->container['pre_order_delivery_enabled'] = $pre_order_delivery_enabled;

        return $this;
    }

    /**
     * Gets pre_order_pickup_enabled
     *
     * @return bool
     */
    public function getPreOrderPickupEnabled()
    {
        return $this->container['pre_order_pickup_enabled'];
    }

    /**
     * Sets pre_order_pickup_enabled
     *
     * @param bool $pre_order_pickup_enabled Is PerOrder Enabled for Pickup
     *
     * @return $this
     */
    public function setPreOrderPickupEnabled($pre_order_pickup_enabled)
    {
        $this->container['pre_order_pickup_enabled'] = $pre_order_pickup_enabled;

        return $this;
    }

    /**
     * Gets logo_url
     *
     * @return string
     */
    public function getLogoUrl()
    {
        return $this->container['logo_url'];
    }

    /**
     * Sets logo_url
     *
     * @param string $logo_url Url for logo image
     *
     * @return $this
     */
    public function setLogoUrl($logo_url)
    {
        $this->container['logo_url'] = $logo_url;

        return $this;
    }

    /**
     * Gets fraud_prevention_strategy
     *
     * @return string
     */
    public function getFraudPreventionStrategy()
    {
        return $this->container['fraud_prevention_strategy'];
    }

    /**
     * Sets fraud_prevention_strategy
     *
     * @param string $fraud_prevention_strategy Fraud Prevention Strategy
     *
     * @return $this
     */
    public function setFraudPreventionStrategy($fraud_prevention_strategy)
    {
        $this->container['fraud_prevention_strategy'] = $fraud_prevention_strategy;

        return $this;
    }

    /**
     * Gets phone_number
     *
     * @return string
     */
    public function getPhoneNumber()
    {
        return $this->container['phone_number'];
    }

    /**
     * Sets phone_number
     *
     * @param string $phone_number Phone number
     *
     * @return $this
     */
    public function setPhoneNumber($phone_number)
    {
        $this->container['phone_number'] = $phone_number;

        return $this;
    }

    /**
     * Gets always_appear_open
     *
     * @return bool
     */
    public function getAlwaysAppearOpen()
    {
        return $this->container['always_appear_open'];
    }

    /**
     * Sets always_appear_open
     *
     * @param bool $always_appear_open True if the store always appears open
     *
     * @return $this
     */
    public function setAlwaysAppearOpen($always_appear_open)
    {
        $this->container['always_appear_open'] = $always_appear_open;

        return $this;
    }

    /**
     * Gets pre_order_enabled
     *
     * @return bool
     */
    public function getPreOrderEnabled()
    {
        return $this->container['pre_order_enabled'];
    }

    /**
     * Sets pre_order_enabled
     *
     * @param bool $pre_order_enabled True if the store accepts pre-orders
     *
     * @return $this
     */
    public function setPreOrderEnabled($pre_order_enabled)
    {
        $this->container['pre_order_enabled'] = $pre_order_enabled;

        return $this;
    }

    /**
     * Gets take_out_enabled
     *
     * @return bool
     */
    public function getTakeOutEnabled()
    {
        return $this->container['take_out_enabled'];
    }

    /**
     * Sets take_out_enabled
     *
     * @param bool $take_out_enabled True if the store accepts take-out orders
     *
     * @return $this
     */
    public function setTakeOutEnabled($take_out_enabled)
    {
        $this->container['take_out_enabled'] = $take_out_enabled;

        return $this;
    }

    /**
     * Gets table_service_enabled
     *
     * @return bool
     */
    public function getTableServiceEnabled()
    {
        return $this->container['table_service_enabled'];
    }

    /**
     * Sets table_service_enabled
     *
     * @param bool $table_service_enabled True if the store has table service
     *
     * @return $this
     */
    public function setTableServiceEnabled($table_service_enabled)
    {
        $this->container['table_service_enabled'] = $table_service_enabled;

        return $this;
    }

    /**
     * Gets dine_in_enabled
     *
     * @return bool
     */
    public function getDineInEnabled()
    {
        return $this->container['dine_in_enabled'];
    }

    /**
     * Sets dine_in_enabled
     *
     * @param bool $dine_in_enabled True if the store accepts dine-in orders
     *
     * @return $this
     */
    public function setDineInEnabled($dine_in_enabled)
    {
        $this->container['dine_in_enabled'] = $dine_in_enabled;

        return $this;
    }

    /**
     * Gets allow_pre_orders_and_table_service
     *
     * @return bool
     */
    public function getAllowPreOrdersAndTableService()
    {
        return $this->container['allow_pre_orders_and_table_service'];
    }

    /**
     * Sets allow_pre_orders_and_table_service
     *
     * @param bool $allow_pre_orders_and_table_service True if both pre-orders and talbe service can be enabled
     *
     * @return $this
     */
    public function setAllowPreOrdersAndTableService($allow_pre_orders_and_table_service)
    {
        $this->container['allow_pre_orders_and_table_service'] = $allow_pre_orders_and_table_service;

        return $this;
    }

    /**
     * Gets pickup_enabled
     *
     * @return bool
     */
    public function getPickupEnabled()
    {
        return $this->container['pickup_enabled'];
    }

    /**
     * Sets pickup_enabled
     *
     * @param bool $pickup_enabled True if the store accepts pickup orders
     *
     * @return $this
     */
    public function setPickupEnabled($pickup_enabled)
    {
        $this->container['pickup_enabled'] = $pickup_enabled;

        return $this;
    }

    /**
     * Gets delivery_enabled
     *
     * @return bool
     */
    public function getDeliveryEnabled()
    {
        return $this->container['delivery_enabled'];
    }

    /**
     * Sets delivery_enabled
     *
     * @param bool $delivery_enabled True if the store accepts delivery orders
     *
     * @return $this
     */
    public function setDeliveryEnabled($delivery_enabled)
    {
        $this->container['delivery_enabled'] = $delivery_enabled;

        return $this;
    }

    /**
     * Gets card_order_delivery_enabled
     *
     * @return bool
     */
    public function getCardOrderDeliveryEnabled()
    {
        return $this->container['card_order_delivery_enabled'];
    }

    /**
     * Sets card_order_delivery_enabled
     *
     * @param bool $card_order_delivery_enabled True if the store accepts card payment for delivery orders
     *
     * @return $this
     */
    public function setCardOrderDeliveryEnabled($card_order_delivery_enabled)
    {
        $this->container['card_order_delivery_enabled'] = $card_order_delivery_enabled;

        return $this;
    }

    /**
     * Gets cash_orders_delivery_enabled
     *
     * @return bool
     */
    public function getCashOrdersDeliveryEnabled()
    {
        return $this->container['cash_orders_delivery_enabled'];
    }

    /**
     * Sets cash_orders_delivery_enabled
     *
     * @param bool $cash_orders_delivery_enabled True if the store accepts cash payment for delivery orders
     *
     * @return $this
     */
    public function setCashOrdersDeliveryEnabled($cash_orders_delivery_enabled)
    {
        $this->container['cash_orders_delivery_enabled'] = $cash_orders_delivery_enabled;

        return $this;
    }

    /**
     * Gets card_orders_pickup_enabled
     *
     * @return bool
     */
    public function getCardOrdersPickupEnabled()
    {
        return $this->container['card_orders_pickup_enabled'];
    }

    /**
     * Sets card_orders_pickup_enabled
     *
     * @param bool $card_orders_pickup_enabled True if the store accepts card payment for pickup orders
     *
     * @return $this
     */
    public function setCardOrdersPickupEnabled($card_orders_pickup_enabled)
    {
        $this->container['card_orders_pickup_enabled'] = $card_orders_pickup_enabled;

        return $this;
    }

    /**
     * Gets cash_orders_pickup_enabled
     *
     * @return bool
     */
    public function getCashOrdersPickupEnabled()
    {
        return $this->container['cash_orders_pickup_enabled'];
    }

    /**
     * Sets cash_orders_pickup_enabled
     *
     * @param bool $cash_orders_pickup_enabled True if the store accepts cash payment for pickup orders
     *
     * @return $this
     */
    public function setCashOrdersPickupEnabled($cash_orders_pickup_enabled)
    {
        $this->container['cash_orders_pickup_enabled'] = $cash_orders_pickup_enabled;

        return $this;
    }

    /**
     * Gets tips_enabled
     *
     * @return bool
     */
    public function getTipsEnabled()
    {
        return $this->container['tips_enabled'];
    }

    /**
     * Sets tips_enabled
     *
     * @param bool $tips_enabled True if the store accepts tips
     *
     * @return $this
     */
    public function setTipsEnabled($tips_enabled)
    {
        $this->container['tips_enabled'] = $tips_enabled;

        return $this;
    }

    /**
     * Gets automatically_accept_orders
     *
     * @return bool
     */
    public function getAutomaticallyAcceptOrders()
    {
        return $this->container['automatically_accept_orders'];
    }

    /**
     * Sets automatically_accept_orders
     *
     * @param bool $automatically_accept_orders True if the stores orders are automatically accepted in Flipdish
     *
     * @return $this
     */
    public function setAutomaticallyAcceptOrders($automatically_accept_orders)
    {
        $this->container['automatically_accept_orders'] = $automatically_accept_orders;

        return $this;
    }

    /**
     * Gets open_for_delivery
     *
     * @return bool
     */
    public function getOpenForDelivery()
    {
        return $this->container['open_for_delivery'];
    }

    /**
     * Sets open_for_delivery
     *
     * @param bool $open_for_delivery True if the store is open for delivery
     *
     * @return $this
     */
    public function setOpenForDelivery($open_for_delivery)
    {
        $this->container['open_for_delivery'] = $open_for_delivery;

        return $this;
    }

    /**
     * Gets open_for_pickup
     *
     * @return bool
     */
    public function getOpenForPickup()
    {
        return $this->container['open_for_pickup'];
    }

    /**
     * Sets open_for_pickup
     *
     * @param bool $open_for_pickup True if the store is open for pickup
     *
     * @return $this
     */
    public function setOpenForPickup($open_for_pickup)
    {
        $this->container['open_for_pickup'] = $open_for_pickup;

        return $this;
    }

    /**
     * Gets minimum_pickup_order_amount
     *
     * @return double
     */
    public function getMinimumPickupOrderAmount()
    {
        return $this->container['minimum_pickup_order_amount'];
    }

    /**
     * Sets minimum_pickup_order_amount
     *
     * @param double $minimum_pickup_order_amount Minimum pickup order amount
     *
     * @return $this
     */
    public function setMinimumPickupOrderAmount($minimum_pickup_order_amount)
    {
        $this->container['minimum_pickup_order_amount'] = $minimum_pickup_order_amount;

        return $this;
    }

    /**
     * Gets require_customer_name_for_pickup
     *
     * @return bool
     */
    public function getRequireCustomerNameForPickup()
    {
        return $this->container['require_customer_name_for_pickup'];
    }

    /**
     * Sets require_customer_name_for_pickup
     *
     * @param bool $require_customer_name_for_pickup True if customer name required for pickup orders
     *
     * @return $this
     */
    public function setRequireCustomerNameForPickup($require_customer_name_for_pickup)
    {
        $this->container['require_customer_name_for_pickup'] = $require_customer_name_for_pickup;

        return $this;
    }

    /**
     * Gets gdpr_customer_phone_numbers
     *
     * @return bool
     */
    public function getGdprCustomerPhoneNumbers()
    {
        return $this->container['gdpr_customer_phone_numbers'];
    }

    /**
     * Sets gdpr_customer_phone_numbers
     *
     * @param bool $gdpr_customer_phone_numbers Mask your customers phone numbers printed on receipts and reduce the amout of personally identifiable customer information that is exposed.
     *
     * @return $this
     */
    public function setGdprCustomerPhoneNumbers($gdpr_customer_phone_numbers)
    {
        $this->container['gdpr_customer_phone_numbers'] = $gdpr_customer_phone_numbers;

        return $this;
    }

    /**
     * Gets require_customer_name_for_delivery
     *
     * @return bool
     */
    public function getRequireCustomerNameForDelivery()
    {
        return $this->container['require_customer_name_for_delivery'];
    }

    /**
     * Sets require_customer_name_for_delivery
     *
     * @param bool $require_customer_name_for_delivery True if customer name required for delivery orders
     *
     * @return $this
     */
    public function setRequireCustomerNameForDelivery($require_customer_name_for_delivery)
    {
        $this->container['require_customer_name_for_delivery'] = $require_customer_name_for_delivery;

        return $this;
    }

    /**
     * Gets allow_chef_notes
     *
     * @return bool
     */
    public function getAllowChefNotes()
    {
        return $this->container['allow_chef_notes'];
    }

    /**
     * Sets allow_chef_notes
     *
     * @param bool $allow_chef_notes True if the customer is allowed enter custom notes with their orders
     *
     * @return $this
     */
    public function setAllowChefNotes($allow_chef_notes)
    {
        $this->container['allow_chef_notes'] = $allow_chef_notes;

        return $this;
    }

    /**
     * Gets eta_in_pickup_confirmation_sms_enabled
     *
     * @return bool
     */
    public function getEtaInPickupConfirmationSmsEnabled()
    {
        return $this->container['eta_in_pickup_confirmation_sms_enabled'];
    }

    /**
     * Sets eta_in_pickup_confirmation_sms_enabled
     *
     * @param bool $eta_in_pickup_confirmation_sms_enabled True if order confirmation sms includes estimated time when order will be ready for collection
     *
     * @return $this
     */
    public function setEtaInPickupConfirmationSmsEnabled($eta_in_pickup_confirmation_sms_enabled)
    {
        $this->container['eta_in_pickup_confirmation_sms_enabled'] = $eta_in_pickup_confirmation_sms_enabled;

        return $this;
    }

    /**
     * Gets eta_in_delivery_confirmation_sms_enabled
     *
     * @return bool
     */
    public function getEtaInDeliveryConfirmationSmsEnabled()
    {
        return $this->container['eta_in_delivery_confirmation_sms_enabled'];
    }

    /**
     * Sets eta_in_delivery_confirmation_sms_enabled
     *
     * @param bool $eta_in_delivery_confirmation_sms_enabled True if order confirmation sms includes estimated time when order will delivered
     *
     * @return $this
     */
    public function setEtaInDeliveryConfirmationSmsEnabled($eta_in_delivery_confirmation_sms_enabled)
    {
        $this->container['eta_in_delivery_confirmation_sms_enabled'] = $eta_in_delivery_confirmation_sms_enabled;

        return $this;
    }

    /**
     * Gets is_archived
     *
     * @return bool
     */
    public function getIsArchived()
    {
        return $this->container['is_archived'];
    }

    /**
     * Sets is_archived
     *
     * @param bool $is_archived Is the Store Archived
     *
     * @return $this
     */
    public function setIsArchived($is_archived)
    {
        $this->container['is_archived'] = $is_archived;

        return $this;
    }

    /**
     * Gets is_published
     *
     * @return bool
     */
    public function getIsPublished()
    {
        return $this->container['is_published'];
    }

    /**
     * Sets is_published
     *
     * @param bool $is_published Is the Store Published
     *
     * @return $this
     */
    public function setIsPublished($is_published)
    {
        $this->container['is_published'] = $is_published;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name Name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets email_address
     *
     * @return string
     */
    public function getEmailAddress()
    {
        return $this->container['email_address'];
    }

    /**
     * Sets email_address
     *
     * @param string $email_address Email address (visible to customers)
     *
     * @return $this
     */
    public function setEmailAddress($email_address)
    {
        if (!is_null($email_address) && (mb_strlen($email_address) > 100)) {
            throw new \InvalidArgumentException('invalid length for $email_address when calling Store., must be smaller than or equal to 100.');
        }
        if (!is_null($email_address) && (mb_strlen($email_address) < 0)) {
            throw new \InvalidArgumentException('invalid length for $email_address when calling Store., must be bigger than or equal to 0.');
        }

        $this->container['email_address'] = $email_address;

        return $this;
    }

    /**
     * Gets staff_language
     *
     * @return string
     */
    public function getStaffLanguage()
    {
        return $this->container['staff_language'];
    }

    /**
     * Sets staff_language
     *
     * @param string $staff_language Staff Language (used for communication with the staff)  Emails, Printouts etc
     *
     * @return $this
     */
    public function setStaffLanguage($staff_language)
    {
        $this->container['staff_language'] = $staff_language;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


