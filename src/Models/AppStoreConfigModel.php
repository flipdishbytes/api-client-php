<?php
/**
 * AppStoreConfigModel
 *
 * PHP version 5
 *
 * @category Class
 * @package  Flipdish\\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Flipdish Open API v1.0
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.43
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Flipdish\\Client\Models;

use \ArrayAccess;
use \Flipdish\\Client\ObjectSerializer;

/**
 * AppStoreConfigModel Class Doc Comment
 *
 * @category Class
 * @description App Store configuration model
 * @package  Flipdish\\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class AppStoreConfigModel implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'AppStoreConfigModel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'white_label_id' => 'int',
        'ready_to_publish_to_app_store' => 'bool',
        'app_store_name' => 'string',
        'app_store_apple_id' => 'string',
        'app_store_url' => 'string',
        'app_store_id' => 'string',
        'app_store_password' => 'string',
        'team_id' => 'string',
        'app_group_id' => 'string',
        'bundle_id' => 'string',
        'app_store_signing_identity' => 'string',
        'app_store_token' => 'string',
        'app_store_merchant_id' => 'string',
        'p8_private_key' => 'string',
        'p8_private_key_id' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'white_label_id' => 'int32',
        'ready_to_publish_to_app_store' => null,
        'app_store_name' => null,
        'app_store_apple_id' => null,
        'app_store_url' => null,
        'app_store_id' => null,
        'app_store_password' => null,
        'team_id' => null,
        'app_group_id' => null,
        'bundle_id' => null,
        'app_store_signing_identity' => null,
        'app_store_token' => null,
        'app_store_merchant_id' => null,
        'p8_private_key' => null,
        'p8_private_key_id' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'white_label_id' => 'WhiteLabelId',
        'ready_to_publish_to_app_store' => 'ReadyToPublishToAppStore',
        'app_store_name' => 'AppStoreName',
        'app_store_apple_id' => 'AppStoreAppleId',
        'app_store_url' => 'AppStoreUrl',
        'app_store_id' => 'AppStoreId',
        'app_store_password' => 'AppStorePassword',
        'team_id' => 'TeamId',
        'app_group_id' => 'AppGroupId',
        'bundle_id' => 'BundleId',
        'app_store_signing_identity' => 'AppStoreSigningIdentity',
        'app_store_token' => 'AppStoreToken',
        'app_store_merchant_id' => 'AppStoreMerchantId',
        'p8_private_key' => 'P8PrivateKey',
        'p8_private_key_id' => 'P8PrivateKeyId'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'white_label_id' => 'setWhiteLabelId',
        'ready_to_publish_to_app_store' => 'setReadyToPublishToAppStore',
        'app_store_name' => 'setAppStoreName',
        'app_store_apple_id' => 'setAppStoreAppleId',
        'app_store_url' => 'setAppStoreUrl',
        'app_store_id' => 'setAppStoreId',
        'app_store_password' => 'setAppStorePassword',
        'team_id' => 'setTeamId',
        'app_group_id' => 'setAppGroupId',
        'bundle_id' => 'setBundleId',
        'app_store_signing_identity' => 'setAppStoreSigningIdentity',
        'app_store_token' => 'setAppStoreToken',
        'app_store_merchant_id' => 'setAppStoreMerchantId',
        'p8_private_key' => 'setP8PrivateKey',
        'p8_private_key_id' => 'setP8PrivateKeyId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'white_label_id' => 'getWhiteLabelId',
        'ready_to_publish_to_app_store' => 'getReadyToPublishToAppStore',
        'app_store_name' => 'getAppStoreName',
        'app_store_apple_id' => 'getAppStoreAppleId',
        'app_store_url' => 'getAppStoreUrl',
        'app_store_id' => 'getAppStoreId',
        'app_store_password' => 'getAppStorePassword',
        'team_id' => 'getTeamId',
        'app_group_id' => 'getAppGroupId',
        'bundle_id' => 'getBundleId',
        'app_store_signing_identity' => 'getAppStoreSigningIdentity',
        'app_store_token' => 'getAppStoreToken',
        'app_store_merchant_id' => 'getAppStoreMerchantId',
        'p8_private_key' => 'getP8PrivateKey',
        'p8_private_key_id' => 'getP8PrivateKeyId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['white_label_id'] = isset($data['white_label_id']) ? $data['white_label_id'] : null;
        $this->container['ready_to_publish_to_app_store'] = isset($data['ready_to_publish_to_app_store']) ? $data['ready_to_publish_to_app_store'] : null;
        $this->container['app_store_name'] = isset($data['app_store_name']) ? $data['app_store_name'] : null;
        $this->container['app_store_apple_id'] = isset($data['app_store_apple_id']) ? $data['app_store_apple_id'] : null;
        $this->container['app_store_url'] = isset($data['app_store_url']) ? $data['app_store_url'] : null;
        $this->container['app_store_id'] = isset($data['app_store_id']) ? $data['app_store_id'] : null;
        $this->container['app_store_password'] = isset($data['app_store_password']) ? $data['app_store_password'] : null;
        $this->container['team_id'] = isset($data['team_id']) ? $data['team_id'] : null;
        $this->container['app_group_id'] = isset($data['app_group_id']) ? $data['app_group_id'] : null;
        $this->container['bundle_id'] = isset($data['bundle_id']) ? $data['bundle_id'] : null;
        $this->container['app_store_signing_identity'] = isset($data['app_store_signing_identity']) ? $data['app_store_signing_identity'] : null;
        $this->container['app_store_token'] = isset($data['app_store_token']) ? $data['app_store_token'] : null;
        $this->container['app_store_merchant_id'] = isset($data['app_store_merchant_id']) ? $data['app_store_merchant_id'] : null;
        $this->container['p8_private_key'] = isset($data['p8_private_key']) ? $data['p8_private_key'] : null;
        $this->container['p8_private_key_id'] = isset($data['p8_private_key_id']) ? $data['p8_private_key_id'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets white_label_id
     *
     * @return int
     */
    public function getWhiteLabelId()
    {
        return $this->container['white_label_id'];
    }

    /**
     * Sets white_label_id
     *
     * @param int $white_label_id White label ID
     *
     * @return $this
     */
    public function setWhiteLabelId($white_label_id)
    {
        $this->container['white_label_id'] = $white_label_id;

        return $this;
    }

    /**
     * Gets ready_to_publish_to_app_store
     *
     * @return bool
     */
    public function getReadyToPublishToAppStore()
    {
        return $this->container['ready_to_publish_to_app_store'];
    }

    /**
     * Sets ready_to_publish_to_app_store
     *
     * @param bool $ready_to_publish_to_app_store Ready to publish to app store
     *
     * @return $this
     */
    public function setReadyToPublishToAppStore($ready_to_publish_to_app_store)
    {
        $this->container['ready_to_publish_to_app_store'] = $ready_to_publish_to_app_store;

        return $this;
    }

    /**
     * Gets app_store_name
     *
     * @return string
     */
    public function getAppStoreName()
    {
        return $this->container['app_store_name'];
    }

    /**
     * Sets app_store_name
     *
     * @param string $app_store_name App store name
     *
     * @return $this
     */
    public function setAppStoreName($app_store_name)
    {
        $this->container['app_store_name'] = $app_store_name;

        return $this;
    }

    /**
     * Gets app_store_apple_id
     *
     * @return string
     */
    public function getAppStoreAppleId()
    {
        return $this->container['app_store_apple_id'];
    }

    /**
     * Sets app_store_apple_id
     *
     * @param string $app_store_apple_id App Store Apple ID
     *
     * @return $this
     */
    public function setAppStoreAppleId($app_store_apple_id)
    {
        $this->container['app_store_apple_id'] = $app_store_apple_id;

        return $this;
    }

    /**
     * Gets app_store_url
     *
     * @return string
     */
    public function getAppStoreUrl()
    {
        return $this->container['app_store_url'];
    }

    /**
     * Sets app_store_url
     *
     * @param string $app_store_url App Store URL
     *
     * @return $this
     */
    public function setAppStoreUrl($app_store_url)
    {
        $this->container['app_store_url'] = $app_store_url;

        return $this;
    }

    /**
     * Gets app_store_id
     *
     * @return string
     */
    public function getAppStoreId()
    {
        return $this->container['app_store_id'];
    }

    /**
     * Sets app_store_id
     *
     * @param string $app_store_id App Store ID
     *
     * @return $this
     */
    public function setAppStoreId($app_store_id)
    {
        $this->container['app_store_id'] = $app_store_id;

        return $this;
    }

    /**
     * Gets app_store_password
     *
     * @return string
     */
    public function getAppStorePassword()
    {
        return $this->container['app_store_password'];
    }

    /**
     * Sets app_store_password
     *
     * @param string $app_store_password App Store password
     *
     * @return $this
     */
    public function setAppStorePassword($app_store_password)
    {
        $this->container['app_store_password'] = $app_store_password;

        return $this;
    }

    /**
     * Gets team_id
     *
     * @return string
     */
    public function getTeamId()
    {
        return $this->container['team_id'];
    }

    /**
     * Sets team_id
     *
     * @param string $team_id Team ID
     *
     * @return $this
     */
    public function setTeamId($team_id)
    {
        $this->container['team_id'] = $team_id;

        return $this;
    }

    /**
     * Gets app_group_id
     *
     * @return string
     */
    public function getAppGroupId()
    {
        return $this->container['app_group_id'];
    }

    /**
     * Sets app_group_id
     *
     * @param string $app_group_id App Group ID
     *
     * @return $this
     */
    public function setAppGroupId($app_group_id)
    {
        $this->container['app_group_id'] = $app_group_id;

        return $this;
    }

    /**
     * Gets bundle_id
     *
     * @return string
     */
    public function getBundleId()
    {
        return $this->container['bundle_id'];
    }

    /**
     * Sets bundle_id
     *
     * @param string $bundle_id Bundle ID
     *
     * @return $this
     */
    public function setBundleId($bundle_id)
    {
        $this->container['bundle_id'] = $bundle_id;

        return $this;
    }

    /**
     * Gets app_store_signing_identity
     *
     * @return string
     */
    public function getAppStoreSigningIdentity()
    {
        return $this->container['app_store_signing_identity'];
    }

    /**
     * Sets app_store_signing_identity
     *
     * @param string $app_store_signing_identity App Store signing identity
     *
     * @return $this
     */
    public function setAppStoreSigningIdentity($app_store_signing_identity)
    {
        $this->container['app_store_signing_identity'] = $app_store_signing_identity;

        return $this;
    }

    /**
     * Gets app_store_token
     *
     * @return string
     */
    public function getAppStoreToken()
    {
        return $this->container['app_store_token'];
    }

    /**
     * Sets app_store_token
     *
     * @param string $app_store_token App Store token
     *
     * @return $this
     */
    public function setAppStoreToken($app_store_token)
    {
        $this->container['app_store_token'] = $app_store_token;

        return $this;
    }

    /**
     * Gets app_store_merchant_id
     *
     * @return string
     */
    public function getAppStoreMerchantId()
    {
        return $this->container['app_store_merchant_id'];
    }

    /**
     * Sets app_store_merchant_id
     *
     * @param string $app_store_merchant_id App Store merchant ID
     *
     * @return $this
     */
    public function setAppStoreMerchantId($app_store_merchant_id)
    {
        $this->container['app_store_merchant_id'] = $app_store_merchant_id;

        return $this;
    }

    /**
     * Gets p8_private_key
     *
     * @return string
     */
    public function getP8PrivateKey()
    {
        return $this->container['p8_private_key'];
    }

    /**
     * Sets p8_private_key
     *
     * @param string $p8_private_key P8 private key
     *
     * @return $this
     */
    public function setP8PrivateKey($p8_private_key)
    {
        $this->container['p8_private_key'] = $p8_private_key;

        return $this;
    }

    /**
     * Gets p8_private_key_id
     *
     * @return string
     */
    public function getP8PrivateKeyId()
    {
        return $this->container['p8_private_key_id'];
    }

    /**
     * Sets p8_private_key_id
     *
     * @param string $p8_private_key_id P8 private key ID
     *
     * @return $this
     */
    public function setP8PrivateKeyId($p8_private_key_id)
    {
        $this->container['p8_private_key_id'] = $p8_private_key_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


