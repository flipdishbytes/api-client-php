<?php
/**
 * RevenueDetail
 *
 * PHP version 5
 *
 * @category Class
 * @package  Flipdish\\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Flipdish Open API v1.0
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.43
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Flipdish\\Client\Models;

use \ArrayAccess;
use \Flipdish\\Client\ObjectSerializer;

/**
 * RevenueDetail Class Doc Comment
 *
 * @category Class
 * @description Sales information
 * @package  Flipdish\\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class RevenueDetail implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'RevenueDetail';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'online_sales_amount' => 'double',
        'online_sales_tax' => 'double',
        'online_sales_including_tax' => 'double',
        'online_sales_fees_base_amount' => 'double',
        'cash_sales_amount' => 'double',
        'cash_sales_tax' => 'double',
        'cash_sales_including_tax' => 'double',
        'cash_sales_fees_base_amount' => 'double',
        'total_sales_including_tax' => 'double',
        'online_sales_delivery_charges' => 'double',
        'online_sales_tips' => 'double',
        'total_online_revenue' => 'double',
        'online_sales_service_charges' => 'double'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'online_sales_amount' => 'double',
        'online_sales_tax' => 'double',
        'online_sales_including_tax' => 'double',
        'online_sales_fees_base_amount' => 'double',
        'cash_sales_amount' => 'double',
        'cash_sales_tax' => 'double',
        'cash_sales_including_tax' => 'double',
        'cash_sales_fees_base_amount' => 'double',
        'total_sales_including_tax' => 'double',
        'online_sales_delivery_charges' => 'double',
        'online_sales_tips' => 'double',
        'total_online_revenue' => 'double',
        'online_sales_service_charges' => 'double'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'online_sales_amount' => 'OnlineSalesAmount',
        'online_sales_tax' => 'OnlineSalesTax',
        'online_sales_including_tax' => 'OnlineSalesIncludingTax',
        'online_sales_fees_base_amount' => 'OnlineSalesFeesBaseAmount',
        'cash_sales_amount' => 'CashSalesAmount',
        'cash_sales_tax' => 'CashSalesTax',
        'cash_sales_including_tax' => 'CashSalesIncludingTax',
        'cash_sales_fees_base_amount' => 'CashSalesFeesBaseAmount',
        'total_sales_including_tax' => 'TotalSalesIncludingTax',
        'online_sales_delivery_charges' => 'OnlineSalesDeliveryCharges',
        'online_sales_tips' => 'OnlineSalesTips',
        'total_online_revenue' => 'TotalOnlineRevenue',
        'online_sales_service_charges' => 'OnlineSalesServiceCharges'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'online_sales_amount' => 'setOnlineSalesAmount',
        'online_sales_tax' => 'setOnlineSalesTax',
        'online_sales_including_tax' => 'setOnlineSalesIncludingTax',
        'online_sales_fees_base_amount' => 'setOnlineSalesFeesBaseAmount',
        'cash_sales_amount' => 'setCashSalesAmount',
        'cash_sales_tax' => 'setCashSalesTax',
        'cash_sales_including_tax' => 'setCashSalesIncludingTax',
        'cash_sales_fees_base_amount' => 'setCashSalesFeesBaseAmount',
        'total_sales_including_tax' => 'setTotalSalesIncludingTax',
        'online_sales_delivery_charges' => 'setOnlineSalesDeliveryCharges',
        'online_sales_tips' => 'setOnlineSalesTips',
        'total_online_revenue' => 'setTotalOnlineRevenue',
        'online_sales_service_charges' => 'setOnlineSalesServiceCharges'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'online_sales_amount' => 'getOnlineSalesAmount',
        'online_sales_tax' => 'getOnlineSalesTax',
        'online_sales_including_tax' => 'getOnlineSalesIncludingTax',
        'online_sales_fees_base_amount' => 'getOnlineSalesFeesBaseAmount',
        'cash_sales_amount' => 'getCashSalesAmount',
        'cash_sales_tax' => 'getCashSalesTax',
        'cash_sales_including_tax' => 'getCashSalesIncludingTax',
        'cash_sales_fees_base_amount' => 'getCashSalesFeesBaseAmount',
        'total_sales_including_tax' => 'getTotalSalesIncludingTax',
        'online_sales_delivery_charges' => 'getOnlineSalesDeliveryCharges',
        'online_sales_tips' => 'getOnlineSalesTips',
        'total_online_revenue' => 'getTotalOnlineRevenue',
        'online_sales_service_charges' => 'getOnlineSalesServiceCharges'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['online_sales_amount'] = isset($data['online_sales_amount']) ? $data['online_sales_amount'] : null;
        $this->container['online_sales_tax'] = isset($data['online_sales_tax']) ? $data['online_sales_tax'] : null;
        $this->container['online_sales_including_tax'] = isset($data['online_sales_including_tax']) ? $data['online_sales_including_tax'] : null;
        $this->container['online_sales_fees_base_amount'] = isset($data['online_sales_fees_base_amount']) ? $data['online_sales_fees_base_amount'] : null;
        $this->container['cash_sales_amount'] = isset($data['cash_sales_amount']) ? $data['cash_sales_amount'] : null;
        $this->container['cash_sales_tax'] = isset($data['cash_sales_tax']) ? $data['cash_sales_tax'] : null;
        $this->container['cash_sales_including_tax'] = isset($data['cash_sales_including_tax']) ? $data['cash_sales_including_tax'] : null;
        $this->container['cash_sales_fees_base_amount'] = isset($data['cash_sales_fees_base_amount']) ? $data['cash_sales_fees_base_amount'] : null;
        $this->container['total_sales_including_tax'] = isset($data['total_sales_including_tax']) ? $data['total_sales_including_tax'] : null;
        $this->container['online_sales_delivery_charges'] = isset($data['online_sales_delivery_charges']) ? $data['online_sales_delivery_charges'] : null;
        $this->container['online_sales_tips'] = isset($data['online_sales_tips']) ? $data['online_sales_tips'] : null;
        $this->container['total_online_revenue'] = isset($data['total_online_revenue']) ? $data['total_online_revenue'] : null;
        $this->container['online_sales_service_charges'] = isset($data['online_sales_service_charges']) ? $data['online_sales_service_charges'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets online_sales_amount
     *
     * @return double
     */
    public function getOnlineSalesAmount()
    {
        return $this->container['online_sales_amount'];
    }

    /**
     * Sets online_sales_amount
     *
     * @param double $online_sales_amount Online sales amount
     *
     * @return $this
     */
    public function setOnlineSalesAmount($online_sales_amount)
    {
        $this->container['online_sales_amount'] = $online_sales_amount;

        return $this;
    }

    /**
     * Gets online_sales_tax
     *
     * @return double
     */
    public function getOnlineSalesTax()
    {
        return $this->container['online_sales_tax'];
    }

    /**
     * Sets online_sales_tax
     *
     * @param double $online_sales_tax Online sales tax
     *
     * @return $this
     */
    public function setOnlineSalesTax($online_sales_tax)
    {
        $this->container['online_sales_tax'] = $online_sales_tax;

        return $this;
    }

    /**
     * Gets online_sales_including_tax
     *
     * @return double
     */
    public function getOnlineSalesIncludingTax()
    {
        return $this->container['online_sales_including_tax'];
    }

    /**
     * Sets online_sales_including_tax
     *
     * @param double $online_sales_including_tax Online sales amount plus online sales tax
     *
     * @return $this
     */
    public function setOnlineSalesIncludingTax($online_sales_including_tax)
    {
        $this->container['online_sales_including_tax'] = $online_sales_including_tax;

        return $this;
    }

    /**
     * Gets online_sales_fees_base_amount
     *
     * @return double
     */
    public function getOnlineSalesFeesBaseAmount()
    {
        return $this->container['online_sales_fees_base_amount'];
    }

    /**
     * Sets online_sales_fees_base_amount
     *
     * @param double $online_sales_fees_base_amount Online sales base amount to calculate fees
     *
     * @return $this
     */
    public function setOnlineSalesFeesBaseAmount($online_sales_fees_base_amount)
    {
        $this->container['online_sales_fees_base_amount'] = $online_sales_fees_base_amount;

        return $this;
    }

    /**
     * Gets cash_sales_amount
     *
     * @return double
     */
    public function getCashSalesAmount()
    {
        return $this->container['cash_sales_amount'];
    }

    /**
     * Sets cash_sales_amount
     *
     * @param double $cash_sales_amount Cash sales amount
     *
     * @return $this
     */
    public function setCashSalesAmount($cash_sales_amount)
    {
        $this->container['cash_sales_amount'] = $cash_sales_amount;

        return $this;
    }

    /**
     * Gets cash_sales_tax
     *
     * @return double
     */
    public function getCashSalesTax()
    {
        return $this->container['cash_sales_tax'];
    }

    /**
     * Sets cash_sales_tax
     *
     * @param double $cash_sales_tax Cash sales tax
     *
     * @return $this
     */
    public function setCashSalesTax($cash_sales_tax)
    {
        $this->container['cash_sales_tax'] = $cash_sales_tax;

        return $this;
    }

    /**
     * Gets cash_sales_including_tax
     *
     * @return double
     */
    public function getCashSalesIncludingTax()
    {
        return $this->container['cash_sales_including_tax'];
    }

    /**
     * Sets cash_sales_including_tax
     *
     * @param double $cash_sales_including_tax Cash sales amount plus online sales tax
     *
     * @return $this
     */
    public function setCashSalesIncludingTax($cash_sales_including_tax)
    {
        $this->container['cash_sales_including_tax'] = $cash_sales_including_tax;

        return $this;
    }

    /**
     * Gets cash_sales_fees_base_amount
     *
     * @return double
     */
    public function getCashSalesFeesBaseAmount()
    {
        return $this->container['cash_sales_fees_base_amount'];
    }

    /**
     * Sets cash_sales_fees_base_amount
     *
     * @param double $cash_sales_fees_base_amount Online sales base amount to calculate fees
     *
     * @return $this
     */
    public function setCashSalesFeesBaseAmount($cash_sales_fees_base_amount)
    {
        $this->container['cash_sales_fees_base_amount'] = $cash_sales_fees_base_amount;

        return $this;
    }

    /**
     * Gets total_sales_including_tax
     *
     * @return double
     */
    public function getTotalSalesIncludingTax()
    {
        return $this->container['total_sales_including_tax'];
    }

    /**
     * Sets total_sales_including_tax
     *
     * @param double $total_sales_including_tax Total Sales (online and cash) including tax
     *
     * @return $this
     */
    public function setTotalSalesIncludingTax($total_sales_including_tax)
    {
        $this->container['total_sales_including_tax'] = $total_sales_including_tax;

        return $this;
    }

    /**
     * Gets online_sales_delivery_charges
     *
     * @return double
     */
    public function getOnlineSalesDeliveryCharges()
    {
        return $this->container['online_sales_delivery_charges'];
    }

    /**
     * Sets online_sales_delivery_charges
     *
     * @param double $online_sales_delivery_charges Delivery charges on online sales
     *
     * @return $this
     */
    public function setOnlineSalesDeliveryCharges($online_sales_delivery_charges)
    {
        $this->container['online_sales_delivery_charges'] = $online_sales_delivery_charges;

        return $this;
    }

    /**
     * Gets online_sales_tips
     *
     * @return double
     */
    public function getOnlineSalesTips()
    {
        return $this->container['online_sales_tips'];
    }

    /**
     * Sets online_sales_tips
     *
     * @param double $online_sales_tips Tips for online sales
     *
     * @return $this
     */
    public function setOnlineSalesTips($online_sales_tips)
    {
        $this->container['online_sales_tips'] = $online_sales_tips;

        return $this;
    }

    /**
     * Gets total_online_revenue
     *
     * @return double
     */
    public function getTotalOnlineRevenue()
    {
        return $this->container['total_online_revenue'];
    }

    /**
     * Sets total_online_revenue
     *
     * @param double $total_online_revenue Online sales plus online delivery charges and tips
     *
     * @return $this
     */
    public function setTotalOnlineRevenue($total_online_revenue)
    {
        $this->container['total_online_revenue'] = $total_online_revenue;

        return $this;
    }

    /**
     * Gets online_sales_service_charges
     *
     * @return double
     */
    public function getOnlineSalesServiceCharges()
    {
        return $this->container['online_sales_service_charges'];
    }

    /**
     * Sets online_sales_service_charges
     *
     * @param double $online_sales_service_charges Service charge on online sales
     *
     * @return $this
     */
    public function setOnlineSalesServiceCharges($online_sales_service_charges)
    {
        $this->container['online_sales_service_charges'] = $online_sales_service_charges;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


