<?php
/**
 * PlayStoreConfigModel
 *
 * PHP version 5
 *
 * @category Class
 * @package  Flipdish\\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Flipdish Open API v1.0
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.43
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Flipdish\\Client\Models;

use \ArrayAccess;
use \Flipdish\\Client\ObjectSerializer;

/**
 * PlayStoreConfigModel Class Doc Comment
 *
 * @category Class
 * @description Play Store configuration model
 * @package  Flipdish\\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PlayStoreConfigModel implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'PlayStoreConfigModel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'white_label_id' => 'int',
        'bundle_id' => 'string',
        'description' => 'string',
        'short_description' => 'string',
        'copyright' => 'string',
        'keywords' => 'string',
        'marketing_url' => 'string',
        'privacy_url' => 'string',
        'support_url' => 'string',
        'play_console_account' => 'int',
        'release_notes' => 'string',
        'store_icon' => 'string',
        'ready_to_publish_android' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'white_label_id' => 'int32',
        'bundle_id' => null,
        'description' => null,
        'short_description' => null,
        'copyright' => null,
        'keywords' => null,
        'marketing_url' => null,
        'privacy_url' => null,
        'support_url' => null,
        'play_console_account' => 'int32',
        'release_notes' => null,
        'store_icon' => null,
        'ready_to_publish_android' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'white_label_id' => 'WhiteLabelId',
        'bundle_id' => 'BundleId',
        'description' => 'Description',
        'short_description' => 'ShortDescription',
        'copyright' => 'Copyright',
        'keywords' => 'Keywords',
        'marketing_url' => 'MarketingUrl',
        'privacy_url' => 'PrivacyUrl',
        'support_url' => 'SupportUrl',
        'play_console_account' => 'PlayConsoleAccount',
        'release_notes' => 'ReleaseNotes',
        'store_icon' => 'StoreIcon',
        'ready_to_publish_android' => 'ReadyToPublishAndroid'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'white_label_id' => 'setWhiteLabelId',
        'bundle_id' => 'setBundleId',
        'description' => 'setDescription',
        'short_description' => 'setShortDescription',
        'copyright' => 'setCopyright',
        'keywords' => 'setKeywords',
        'marketing_url' => 'setMarketingUrl',
        'privacy_url' => 'setPrivacyUrl',
        'support_url' => 'setSupportUrl',
        'play_console_account' => 'setPlayConsoleAccount',
        'release_notes' => 'setReleaseNotes',
        'store_icon' => 'setStoreIcon',
        'ready_to_publish_android' => 'setReadyToPublishAndroid'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'white_label_id' => 'getWhiteLabelId',
        'bundle_id' => 'getBundleId',
        'description' => 'getDescription',
        'short_description' => 'getShortDescription',
        'copyright' => 'getCopyright',
        'keywords' => 'getKeywords',
        'marketing_url' => 'getMarketingUrl',
        'privacy_url' => 'getPrivacyUrl',
        'support_url' => 'getSupportUrl',
        'play_console_account' => 'getPlayConsoleAccount',
        'release_notes' => 'getReleaseNotes',
        'store_icon' => 'getStoreIcon',
        'ready_to_publish_android' => 'getReadyToPublishAndroid'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['white_label_id'] = isset($data['white_label_id']) ? $data['white_label_id'] : null;
        $this->container['bundle_id'] = isset($data['bundle_id']) ? $data['bundle_id'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['short_description'] = isset($data['short_description']) ? $data['short_description'] : null;
        $this->container['copyright'] = isset($data['copyright']) ? $data['copyright'] : null;
        $this->container['keywords'] = isset($data['keywords']) ? $data['keywords'] : null;
        $this->container['marketing_url'] = isset($data['marketing_url']) ? $data['marketing_url'] : null;
        $this->container['privacy_url'] = isset($data['privacy_url']) ? $data['privacy_url'] : null;
        $this->container['support_url'] = isset($data['support_url']) ? $data['support_url'] : null;
        $this->container['play_console_account'] = isset($data['play_console_account']) ? $data['play_console_account'] : null;
        $this->container['release_notes'] = isset($data['release_notes']) ? $data['release_notes'] : null;
        $this->container['store_icon'] = isset($data['store_icon']) ? $data['store_icon'] : null;
        $this->container['ready_to_publish_android'] = isset($data['ready_to_publish_android']) ? $data['ready_to_publish_android'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets white_label_id
     *
     * @return int
     */
    public function getWhiteLabelId()
    {
        return $this->container['white_label_id'];
    }

    /**
     * Sets white_label_id
     *
     * @param int $white_label_id White label ID
     *
     * @return $this
     */
    public function setWhiteLabelId($white_label_id)
    {
        $this->container['white_label_id'] = $white_label_id;

        return $this;
    }

    /**
     * Gets bundle_id
     *
     * @return string
     */
    public function getBundleId()
    {
        return $this->container['bundle_id'];
    }

    /**
     * Sets bundle_id
     *
     * @param string $bundle_id Bundle ID
     *
     * @return $this
     */
    public function setBundleId($bundle_id)
    {
        $this->container['bundle_id'] = $bundle_id;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description Description
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets short_description
     *
     * @return string
     */
    public function getShortDescription()
    {
        return $this->container['short_description'];
    }

    /**
     * Sets short_description
     *
     * @param string $short_description Short description
     *
     * @return $this
     */
    public function setShortDescription($short_description)
    {
        $this->container['short_description'] = $short_description;

        return $this;
    }

    /**
     * Gets copyright
     *
     * @return string
     */
    public function getCopyright()
    {
        return $this->container['copyright'];
    }

    /**
     * Sets copyright
     *
     * @param string $copyright Copyright
     *
     * @return $this
     */
    public function setCopyright($copyright)
    {
        $this->container['copyright'] = $copyright;

        return $this;
    }

    /**
     * Gets keywords
     *
     * @return string
     */
    public function getKeywords()
    {
        return $this->container['keywords'];
    }

    /**
     * Sets keywords
     *
     * @param string $keywords Keywords
     *
     * @return $this
     */
    public function setKeywords($keywords)
    {
        $this->container['keywords'] = $keywords;

        return $this;
    }

    /**
     * Gets marketing_url
     *
     * @return string
     */
    public function getMarketingUrl()
    {
        return $this->container['marketing_url'];
    }

    /**
     * Sets marketing_url
     *
     * @param string $marketing_url Marketing URL
     *
     * @return $this
     */
    public function setMarketingUrl($marketing_url)
    {
        $this->container['marketing_url'] = $marketing_url;

        return $this;
    }

    /**
     * Gets privacy_url
     *
     * @return string
     */
    public function getPrivacyUrl()
    {
        return $this->container['privacy_url'];
    }

    /**
     * Sets privacy_url
     *
     * @param string $privacy_url Privacy URL
     *
     * @return $this
     */
    public function setPrivacyUrl($privacy_url)
    {
        $this->container['privacy_url'] = $privacy_url;

        return $this;
    }

    /**
     * Gets support_url
     *
     * @return string
     */
    public function getSupportUrl()
    {
        return $this->container['support_url'];
    }

    /**
     * Sets support_url
     *
     * @param string $support_url Support URL
     *
     * @return $this
     */
    public function setSupportUrl($support_url)
    {
        $this->container['support_url'] = $support_url;

        return $this;
    }

    /**
     * Gets play_console_account
     *
     * @return int
     */
    public function getPlayConsoleAccount()
    {
        return $this->container['play_console_account'];
    }

    /**
     * Sets play_console_account
     *
     * @param int $play_console_account Play Console account  0: UK, 1: IE
     *
     * @return $this
     */
    public function setPlayConsoleAccount($play_console_account)
    {
        $this->container['play_console_account'] = $play_console_account;

        return $this;
    }

    /**
     * Gets release_notes
     *
     * @return string
     */
    public function getReleaseNotes()
    {
        return $this->container['release_notes'];
    }

    /**
     * Sets release_notes
     *
     * @param string $release_notes Release notes
     *
     * @return $this
     */
    public function setReleaseNotes($release_notes)
    {
        $this->container['release_notes'] = $release_notes;

        return $this;
    }

    /**
     * Gets store_icon
     *
     * @return string
     */
    public function getStoreIcon()
    {
        return $this->container['store_icon'];
    }

    /**
     * Sets store_icon
     *
     * @param string $store_icon Store icon URL
     *
     * @return $this
     */
    public function setStoreIcon($store_icon)
    {
        $this->container['store_icon'] = $store_icon;

        return $this;
    }

    /**
     * Gets ready_to_publish_android
     *
     * @return bool
     */
    public function getReadyToPublishAndroid()
    {
        return $this->container['ready_to_publish_android'];
    }

    /**
     * Sets ready_to_publish_android
     *
     * @param bool $ready_to_publish_android Ready to publish Android
     *
     * @return $this
     */
    public function setReadyToPublishAndroid($ready_to_publish_android)
    {
        $this->container['ready_to_publish_android'] = $ready_to_publish_android;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


