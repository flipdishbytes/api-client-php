<?php
/**
 * UserInfo
 *
 * PHP version 5
 *
 * @category Class
 * @package  Flipdish\\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Flipdish Open API v1.0
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.43
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Flipdish\\Client\Models;

use \ArrayAccess;
use \Flipdish\\Client\ObjectSerializer;

/**
 * UserInfo Class Doc Comment
 *
 * @category Class
 * @description User information
 * @package  Flipdish\\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class UserInfo implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'UserInfo';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'phone_number' => 'string',
        'email' => 'string',
        'email_confirmed' => 'bool',
        'prevent_from_using_cards' => 'bool',
        'is_user_phone_number_blocked' => 'bool',
        'user_white_labels' => '\Flipdish\\Client\Models\UserWhiteLabelInfo[]',
        'user_id' => 'int',
        'user_name' => 'string',
        'customer_name' => 'string',
        'has_logged_in' => 'bool',
        'disable_app_rating_control' => 'bool',
        'globally_opted_out' => 'bool',
        'completed_order_count' => 'int',
        'cancelled_order_count' => 'int',
        'order_total_value' => 'double',
        'ts_most_recent_order' => '\DateTime',
        'ts_first_order' => '\DateTime',
        'is_restaurant_user' => 'bool',
        'installs' => '\Flipdish\\Client\Models\AppInstall[]',
        'delivery_locations' => '\Flipdish\\Client\Models\DeliveryLocation[]',
        'payment_accounts' => '\Flipdish\\Client\Models\PaymentAccount[]',
        'language_id' => 'string',
        'current_language_name' => 'string',
        'languages' => '\Flipdish\\Client\Models\Language[]',
        'sales_force_contact_id' => 'string',
        'stripe_customer_id' => 'string',
        'user_monthly_commissions' => '\Flipdish\\Client\Models\UserMonthlyCommission[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'phone_number' => null,
        'email' => null,
        'email_confirmed' => null,
        'prevent_from_using_cards' => null,
        'is_user_phone_number_blocked' => null,
        'user_white_labels' => null,
        'user_id' => 'int32',
        'user_name' => null,
        'customer_name' => null,
        'has_logged_in' => null,
        'disable_app_rating_control' => null,
        'globally_opted_out' => null,
        'completed_order_count' => 'int32',
        'cancelled_order_count' => 'int32',
        'order_total_value' => 'double',
        'ts_most_recent_order' => 'date-time',
        'ts_first_order' => 'date-time',
        'is_restaurant_user' => null,
        'installs' => null,
        'delivery_locations' => null,
        'payment_accounts' => null,
        'language_id' => null,
        'current_language_name' => null,
        'languages' => null,
        'sales_force_contact_id' => null,
        'stripe_customer_id' => null,
        'user_monthly_commissions' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'phone_number' => 'PhoneNumber',
        'email' => 'Email',
        'email_confirmed' => 'EmailConfirmed',
        'prevent_from_using_cards' => 'PreventFromUsingCards',
        'is_user_phone_number_blocked' => 'IsUserPhoneNumberBlocked',
        'user_white_labels' => 'UserWhiteLabels',
        'user_id' => 'UserId',
        'user_name' => 'UserName',
        'customer_name' => 'CustomerName',
        'has_logged_in' => 'HasLoggedIn',
        'disable_app_rating_control' => 'DisableAppRatingControl',
        'globally_opted_out' => 'GloballyOptedOut',
        'completed_order_count' => 'CompletedOrderCount',
        'cancelled_order_count' => 'CancelledOrderCount',
        'order_total_value' => 'OrderTotalValue',
        'ts_most_recent_order' => 'TsMostRecentOrder',
        'ts_first_order' => 'TsFirstOrder',
        'is_restaurant_user' => 'IsRestaurantUser',
        'installs' => 'Installs',
        'delivery_locations' => 'DeliveryLocations',
        'payment_accounts' => 'PaymentAccounts',
        'language_id' => 'LanguageId',
        'current_language_name' => 'CurrentLanguageName',
        'languages' => 'Languages',
        'sales_force_contact_id' => 'SalesForceContactId',
        'stripe_customer_id' => 'StripeCustomerId',
        'user_monthly_commissions' => 'UserMonthlyCommissions'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'phone_number' => 'setPhoneNumber',
        'email' => 'setEmail',
        'email_confirmed' => 'setEmailConfirmed',
        'prevent_from_using_cards' => 'setPreventFromUsingCards',
        'is_user_phone_number_blocked' => 'setIsUserPhoneNumberBlocked',
        'user_white_labels' => 'setUserWhiteLabels',
        'user_id' => 'setUserId',
        'user_name' => 'setUserName',
        'customer_name' => 'setCustomerName',
        'has_logged_in' => 'setHasLoggedIn',
        'disable_app_rating_control' => 'setDisableAppRatingControl',
        'globally_opted_out' => 'setGloballyOptedOut',
        'completed_order_count' => 'setCompletedOrderCount',
        'cancelled_order_count' => 'setCancelledOrderCount',
        'order_total_value' => 'setOrderTotalValue',
        'ts_most_recent_order' => 'setTsMostRecentOrder',
        'ts_first_order' => 'setTsFirstOrder',
        'is_restaurant_user' => 'setIsRestaurantUser',
        'installs' => 'setInstalls',
        'delivery_locations' => 'setDeliveryLocations',
        'payment_accounts' => 'setPaymentAccounts',
        'language_id' => 'setLanguageId',
        'current_language_name' => 'setCurrentLanguageName',
        'languages' => 'setLanguages',
        'sales_force_contact_id' => 'setSalesForceContactId',
        'stripe_customer_id' => 'setStripeCustomerId',
        'user_monthly_commissions' => 'setUserMonthlyCommissions'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'phone_number' => 'getPhoneNumber',
        'email' => 'getEmail',
        'email_confirmed' => 'getEmailConfirmed',
        'prevent_from_using_cards' => 'getPreventFromUsingCards',
        'is_user_phone_number_blocked' => 'getIsUserPhoneNumberBlocked',
        'user_white_labels' => 'getUserWhiteLabels',
        'user_id' => 'getUserId',
        'user_name' => 'getUserName',
        'customer_name' => 'getCustomerName',
        'has_logged_in' => 'getHasLoggedIn',
        'disable_app_rating_control' => 'getDisableAppRatingControl',
        'globally_opted_out' => 'getGloballyOptedOut',
        'completed_order_count' => 'getCompletedOrderCount',
        'cancelled_order_count' => 'getCancelledOrderCount',
        'order_total_value' => 'getOrderTotalValue',
        'ts_most_recent_order' => 'getTsMostRecentOrder',
        'ts_first_order' => 'getTsFirstOrder',
        'is_restaurant_user' => 'getIsRestaurantUser',
        'installs' => 'getInstalls',
        'delivery_locations' => 'getDeliveryLocations',
        'payment_accounts' => 'getPaymentAccounts',
        'language_id' => 'getLanguageId',
        'current_language_name' => 'getCurrentLanguageName',
        'languages' => 'getLanguages',
        'sales_force_contact_id' => 'getSalesForceContactId',
        'stripe_customer_id' => 'getStripeCustomerId',
        'user_monthly_commissions' => 'getUserMonthlyCommissions'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['phone_number'] = isset($data['phone_number']) ? $data['phone_number'] : null;
        $this->container['email'] = isset($data['email']) ? $data['email'] : null;
        $this->container['email_confirmed'] = isset($data['email_confirmed']) ? $data['email_confirmed'] : null;
        $this->container['prevent_from_using_cards'] = isset($data['prevent_from_using_cards']) ? $data['prevent_from_using_cards'] : null;
        $this->container['is_user_phone_number_blocked'] = isset($data['is_user_phone_number_blocked']) ? $data['is_user_phone_number_blocked'] : null;
        $this->container['user_white_labels'] = isset($data['user_white_labels']) ? $data['user_white_labels'] : null;
        $this->container['user_id'] = isset($data['user_id']) ? $data['user_id'] : null;
        $this->container['user_name'] = isset($data['user_name']) ? $data['user_name'] : null;
        $this->container['customer_name'] = isset($data['customer_name']) ? $data['customer_name'] : null;
        $this->container['has_logged_in'] = isset($data['has_logged_in']) ? $data['has_logged_in'] : null;
        $this->container['disable_app_rating_control'] = isset($data['disable_app_rating_control']) ? $data['disable_app_rating_control'] : null;
        $this->container['globally_opted_out'] = isset($data['globally_opted_out']) ? $data['globally_opted_out'] : null;
        $this->container['completed_order_count'] = isset($data['completed_order_count']) ? $data['completed_order_count'] : null;
        $this->container['cancelled_order_count'] = isset($data['cancelled_order_count']) ? $data['cancelled_order_count'] : null;
        $this->container['order_total_value'] = isset($data['order_total_value']) ? $data['order_total_value'] : null;
        $this->container['ts_most_recent_order'] = isset($data['ts_most_recent_order']) ? $data['ts_most_recent_order'] : null;
        $this->container['ts_first_order'] = isset($data['ts_first_order']) ? $data['ts_first_order'] : null;
        $this->container['is_restaurant_user'] = isset($data['is_restaurant_user']) ? $data['is_restaurant_user'] : null;
        $this->container['installs'] = isset($data['installs']) ? $data['installs'] : null;
        $this->container['delivery_locations'] = isset($data['delivery_locations']) ? $data['delivery_locations'] : null;
        $this->container['payment_accounts'] = isset($data['payment_accounts']) ? $data['payment_accounts'] : null;
        $this->container['language_id'] = isset($data['language_id']) ? $data['language_id'] : null;
        $this->container['current_language_name'] = isset($data['current_language_name']) ? $data['current_language_name'] : null;
        $this->container['languages'] = isset($data['languages']) ? $data['languages'] : null;
        $this->container['sales_force_contact_id'] = isset($data['sales_force_contact_id']) ? $data['sales_force_contact_id'] : null;
        $this->container['stripe_customer_id'] = isset($data['stripe_customer_id']) ? $data['stripe_customer_id'] : null;
        $this->container['user_monthly_commissions'] = isset($data['user_monthly_commissions']) ? $data['user_monthly_commissions'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets phone_number
     *
     * @return string
     */
    public function getPhoneNumber()
    {
        return $this->container['phone_number'];
    }

    /**
     * Sets phone_number
     *
     * @param string $phone_number The user's phone number.
     *
     * @return $this
     */
    public function setPhoneNumber($phone_number)
    {
        $this->container['phone_number'] = $phone_number;

        return $this;
    }

    /**
     * Gets email
     *
     * @return string
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string $email The user's email address.
     *
     * @return $this
     */
    public function setEmail($email)
    {
        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets email_confirmed
     *
     * @return bool
     */
    public function getEmailConfirmed()
    {
        return $this->container['email_confirmed'];
    }

    /**
     * Sets email_confirmed
     *
     * @param bool $email_confirmed Indicates if the user's email address has been confirmed.
     *
     * @return $this
     */
    public function setEmailConfirmed($email_confirmed)
    {
        $this->container['email_confirmed'] = $email_confirmed;

        return $this;
    }

    /**
     * Gets prevent_from_using_cards
     *
     * @return bool
     */
    public function getPreventFromUsingCards()
    {
        return $this->container['prevent_from_using_cards'];
    }

    /**
     * Sets prevent_from_using_cards
     *
     * @param bool $prevent_from_using_cards Indicates if the user is prevented from using cards.
     *
     * @return $this
     */
    public function setPreventFromUsingCards($prevent_from_using_cards)
    {
        $this->container['prevent_from_using_cards'] = $prevent_from_using_cards;

        return $this;
    }

    /**
     * Gets is_user_phone_number_blocked
     *
     * @return bool
     */
    public function getIsUserPhoneNumberBlocked()
    {
        return $this->container['is_user_phone_number_blocked'];
    }

    /**
     * Sets is_user_phone_number_blocked
     *
     * @param bool $is_user_phone_number_blocked Indicates if the user's phone number is blocked.
     *
     * @return $this
     */
    public function setIsUserPhoneNumberBlocked($is_user_phone_number_blocked)
    {
        $this->container['is_user_phone_number_blocked'] = $is_user_phone_number_blocked;

        return $this;
    }

    /**
     * Gets user_white_labels
     *
     * @return \Flipdish\\Client\Models\UserWhiteLabelInfo[]
     */
    public function getUserWhiteLabels()
    {
        return $this->container['user_white_labels'];
    }

    /**
     * Sets user_white_labels
     *
     * @param \Flipdish\\Client\Models\UserWhiteLabelInfo[] $user_white_labels List of white label information associated with the user.
     *
     * @return $this
     */
    public function setUserWhiteLabels($user_white_labels)
    {
        $this->container['user_white_labels'] = $user_white_labels;

        return $this;
    }

    /**
     * Gets user_id
     *
     * @return int
     */
    public function getUserId()
    {
        return $this->container['user_id'];
    }

    /**
     * Sets user_id
     *
     * @param int $user_id The unique identifier for the user.
     *
     * @return $this
     */
    public function setUserId($user_id)
    {
        $this->container['user_id'] = $user_id;

        return $this;
    }

    /**
     * Gets user_name
     *
     * @return string
     */
    public function getUserName()
    {
        return $this->container['user_name'];
    }

    /**
     * Sets user_name
     *
     * @param string $user_name The user's username.
     *
     * @return $this
     */
    public function setUserName($user_name)
    {
        $this->container['user_name'] = $user_name;

        return $this;
    }

    /**
     * Gets customer_name
     *
     * @return string
     */
    public function getCustomerName()
    {
        return $this->container['customer_name'];
    }

    /**
     * Sets customer_name
     *
     * @param string $customer_name The customer's name.
     *
     * @return $this
     */
    public function setCustomerName($customer_name)
    {
        $this->container['customer_name'] = $customer_name;

        return $this;
    }

    /**
     * Gets has_logged_in
     *
     * @return bool
     */
    public function getHasLoggedIn()
    {
        return $this->container['has_logged_in'];
    }

    /**
     * Sets has_logged_in
     *
     * @param bool $has_logged_in Indicates if the user has logged in.
     *
     * @return $this
     */
    public function setHasLoggedIn($has_logged_in)
    {
        $this->container['has_logged_in'] = $has_logged_in;

        return $this;
    }

    /**
     * Gets disable_app_rating_control
     *
     * @return bool
     */
    public function getDisableAppRatingControl()
    {
        return $this->container['disable_app_rating_control'];
    }

    /**
     * Sets disable_app_rating_control
     *
     * @param bool $disable_app_rating_control Indicates if the app rating control is disabled for the user.
     *
     * @return $this
     */
    public function setDisableAppRatingControl($disable_app_rating_control)
    {
        $this->container['disable_app_rating_control'] = $disable_app_rating_control;

        return $this;
    }

    /**
     * Gets globally_opted_out
     *
     * @return bool
     */
    public function getGloballyOptedOut()
    {
        return $this->container['globally_opted_out'];
    }

    /**
     * Sets globally_opted_out
     *
     * @param bool $globally_opted_out Indicates if the user has globally opted out.
     *
     * @return $this
     */
    public function setGloballyOptedOut($globally_opted_out)
    {
        $this->container['globally_opted_out'] = $globally_opted_out;

        return $this;
    }

    /**
     * Gets completed_order_count
     *
     * @return int
     */
    public function getCompletedOrderCount()
    {
        return $this->container['completed_order_count'];
    }

    /**
     * Sets completed_order_count
     *
     * @param int $completed_order_count The number of completed orders by the user.
     *
     * @return $this
     */
    public function setCompletedOrderCount($completed_order_count)
    {
        $this->container['completed_order_count'] = $completed_order_count;

        return $this;
    }

    /**
     * Gets cancelled_order_count
     *
     * @return int
     */
    public function getCancelledOrderCount()
    {
        return $this->container['cancelled_order_count'];
    }

    /**
     * Sets cancelled_order_count
     *
     * @param int $cancelled_order_count The number of cancelled orders by the user.
     *
     * @return $this
     */
    public function setCancelledOrderCount($cancelled_order_count)
    {
        $this->container['cancelled_order_count'] = $cancelled_order_count;

        return $this;
    }

    /**
     * Gets order_total_value
     *
     * @return double
     */
    public function getOrderTotalValue()
    {
        return $this->container['order_total_value'];
    }

    /**
     * Sets order_total_value
     *
     * @param double $order_total_value The total value of orders placed by the user.
     *
     * @return $this
     */
    public function setOrderTotalValue($order_total_value)
    {
        $this->container['order_total_value'] = $order_total_value;

        return $this;
    }

    /**
     * Gets ts_most_recent_order
     *
     * @return \DateTime
     */
    public function getTsMostRecentOrder()
    {
        return $this->container['ts_most_recent_order'];
    }

    /**
     * Sets ts_most_recent_order
     *
     * @param \DateTime $ts_most_recent_order The timestamp of the user's most recent order.
     *
     * @return $this
     */
    public function setTsMostRecentOrder($ts_most_recent_order)
    {
        $this->container['ts_most_recent_order'] = $ts_most_recent_order;

        return $this;
    }

    /**
     * Gets ts_first_order
     *
     * @return \DateTime
     */
    public function getTsFirstOrder()
    {
        return $this->container['ts_first_order'];
    }

    /**
     * Sets ts_first_order
     *
     * @param \DateTime $ts_first_order The timestamp of the user's first order.
     *
     * @return $this
     */
    public function setTsFirstOrder($ts_first_order)
    {
        $this->container['ts_first_order'] = $ts_first_order;

        return $this;
    }

    /**
     * Gets is_restaurant_user
     *
     * @return bool
     */
    public function getIsRestaurantUser()
    {
        return $this->container['is_restaurant_user'];
    }

    /**
     * Sets is_restaurant_user
     *
     * @param bool $is_restaurant_user Indicates if the user is a restaurant user.
     *
     * @return $this
     */
    public function setIsRestaurantUser($is_restaurant_user)
    {
        $this->container['is_restaurant_user'] = $is_restaurant_user;

        return $this;
    }

    /**
     * Gets installs
     *
     * @return \Flipdish\\Client\Models\AppInstall[]
     */
    public function getInstalls()
    {
        return $this->container['installs'];
    }

    /**
     * Sets installs
     *
     * @param \Flipdish\\Client\Models\AppInstall[] $installs List of app installs associated with the user.
     *
     * @return $this
     */
    public function setInstalls($installs)
    {
        $this->container['installs'] = $installs;

        return $this;
    }

    /**
     * Gets delivery_locations
     *
     * @return \Flipdish\\Client\Models\DeliveryLocation[]
     */
    public function getDeliveryLocations()
    {
        return $this->container['delivery_locations'];
    }

    /**
     * Sets delivery_locations
     *
     * @param \Flipdish\\Client\Models\DeliveryLocation[] $delivery_locations List of delivery locations associated with the user.
     *
     * @return $this
     */
    public function setDeliveryLocations($delivery_locations)
    {
        $this->container['delivery_locations'] = $delivery_locations;

        return $this;
    }

    /**
     * Gets payment_accounts
     *
     * @return \Flipdish\\Client\Models\PaymentAccount[]
     */
    public function getPaymentAccounts()
    {
        return $this->container['payment_accounts'];
    }

    /**
     * Sets payment_accounts
     *
     * @param \Flipdish\\Client\Models\PaymentAccount[] $payment_accounts List of payment accounts associated with the user.
     *
     * @return $this
     */
    public function setPaymentAccounts($payment_accounts)
    {
        $this->container['payment_accounts'] = $payment_accounts;

        return $this;
    }

    /**
     * Gets language_id
     *
     * @return string
     */
    public function getLanguageId()
    {
        return $this->container['language_id'];
    }

    /**
     * Sets language_id
     *
     * @param string $language_id The language identifier for the user.
     *
     * @return $this
     */
    public function setLanguageId($language_id)
    {
        $this->container['language_id'] = $language_id;

        return $this;
    }

    /**
     * Gets current_language_name
     *
     * @return string
     */
    public function getCurrentLanguageName()
    {
        return $this->container['current_language_name'];
    }

    /**
     * Sets current_language_name
     *
     * @param string $current_language_name Current language name for the user.
     *
     * @return $this
     */
    public function setCurrentLanguageName($current_language_name)
    {
        $this->container['current_language_name'] = $current_language_name;

        return $this;
    }

    /**
     * Gets languages
     *
     * @return \Flipdish\\Client\Models\Language[]
     */
    public function getLanguages()
    {
        return $this->container['languages'];
    }

    /**
     * Sets languages
     *
     * @param \Flipdish\\Client\Models\Language[] $languages Available languages that the user can choose from.
     *
     * @return $this
     */
    public function setLanguages($languages)
    {
        $this->container['languages'] = $languages;

        return $this;
    }

    /**
     * Gets sales_force_contact_id
     *
     * @return string
     */
    public function getSalesForceContactId()
    {
        return $this->container['sales_force_contact_id'];
    }

    /**
     * Sets sales_force_contact_id
     *
     * @param string $sales_force_contact_id The Salesforce contact ID for the user.
     *
     * @return $this
     */
    public function setSalesForceContactId($sales_force_contact_id)
    {
        $this->container['sales_force_contact_id'] = $sales_force_contact_id;

        return $this;
    }

    /**
     * Gets stripe_customer_id
     *
     * @return string
     */
    public function getStripeCustomerId()
    {
        return $this->container['stripe_customer_id'];
    }

    /**
     * Sets stripe_customer_id
     *
     * @param string $stripe_customer_id The Stripe customer ID for the user.
     *
     * @return $this
     */
    public function setStripeCustomerId($stripe_customer_id)
    {
        $this->container['stripe_customer_id'] = $stripe_customer_id;

        return $this;
    }

    /**
     * Gets user_monthly_commissions
     *
     * @return \Flipdish\\Client\Models\UserMonthlyCommission[]
     */
    public function getUserMonthlyCommissions()
    {
        return $this->container['user_monthly_commissions'];
    }

    /**
     * Sets user_monthly_commissions
     *
     * @param \Flipdish\\Client\Models\UserMonthlyCommission[] $user_monthly_commissions User's monthly commissions.
     *
     * @return $this
     */
    public function setUserMonthlyCommissions($user_monthly_commissions)
    {
        $this->container['user_monthly_commissions'] = $user_monthly_commissions;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


