<?php
/**
 * PayoutReport3DetailsFlipdishFees
 *
 * PHP version 5
 *
 * @category Class
 * @package  Flipdish\\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Flipdish Open API v1.0
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.19
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Flipdish\\Client\Models;

use \ArrayAccess;
use \Flipdish\\Client\ObjectSerializer;

/**
 * PayoutReport3DetailsFlipdishFees Class Doc Comment
 *
 * @category Class
 * @package  Flipdish\\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PayoutReport3DetailsFlipdishFees implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'PayoutReport3DetailsFlipdishFees';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'web_and_app_cash' => 'double',
        'web_and_app_card' => 'double',
        'kiosk_cash' => 'double',
        'kiosk_card' => 'double',
        'qrop_cash' => 'double',
        'qrop_card' => 'double',
        'pos_card' => 'double',
        'pos_card_on_flipdish_orders' => 'double',
        'other_integration_fees' => 'double',
        'vat' => 'double',
        'total' => 'double'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'web_and_app_cash' => 'double',
        'web_and_app_card' => 'double',
        'kiosk_cash' => 'double',
        'kiosk_card' => 'double',
        'qrop_cash' => 'double',
        'qrop_card' => 'double',
        'pos_card' => 'double',
        'pos_card_on_flipdish_orders' => 'double',
        'other_integration_fees' => 'double',
        'vat' => 'double',
        'total' => 'double'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'web_and_app_cash' => 'WebAndAppCash',
        'web_and_app_card' => 'WebAndAppCard',
        'kiosk_cash' => 'KioskCash',
        'kiosk_card' => 'KioskCard',
        'qrop_cash' => 'QropCash',
        'qrop_card' => 'QropCard',
        'pos_card' => 'PosCard',
        'pos_card_on_flipdish_orders' => 'PosCardOnFlipdishOrders',
        'other_integration_fees' => 'OtherIntegrationFees',
        'vat' => 'Vat',
        'total' => 'Total'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'web_and_app_cash' => 'setWebAndAppCash',
        'web_and_app_card' => 'setWebAndAppCard',
        'kiosk_cash' => 'setKioskCash',
        'kiosk_card' => 'setKioskCard',
        'qrop_cash' => 'setQropCash',
        'qrop_card' => 'setQropCard',
        'pos_card' => 'setPosCard',
        'pos_card_on_flipdish_orders' => 'setPosCardOnFlipdishOrders',
        'other_integration_fees' => 'setOtherIntegrationFees',
        'vat' => 'setVat',
        'total' => 'setTotal'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'web_and_app_cash' => 'getWebAndAppCash',
        'web_and_app_card' => 'getWebAndAppCard',
        'kiosk_cash' => 'getKioskCash',
        'kiosk_card' => 'getKioskCard',
        'qrop_cash' => 'getQropCash',
        'qrop_card' => 'getQropCard',
        'pos_card' => 'getPosCard',
        'pos_card_on_flipdish_orders' => 'getPosCardOnFlipdishOrders',
        'other_integration_fees' => 'getOtherIntegrationFees',
        'vat' => 'getVat',
        'total' => 'getTotal'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['web_and_app_cash'] = isset($data['web_and_app_cash']) ? $data['web_and_app_cash'] : null;
        $this->container['web_and_app_card'] = isset($data['web_and_app_card']) ? $data['web_and_app_card'] : null;
        $this->container['kiosk_cash'] = isset($data['kiosk_cash']) ? $data['kiosk_cash'] : null;
        $this->container['kiosk_card'] = isset($data['kiosk_card']) ? $data['kiosk_card'] : null;
        $this->container['qrop_cash'] = isset($data['qrop_cash']) ? $data['qrop_cash'] : null;
        $this->container['qrop_card'] = isset($data['qrop_card']) ? $data['qrop_card'] : null;
        $this->container['pos_card'] = isset($data['pos_card']) ? $data['pos_card'] : null;
        $this->container['pos_card_on_flipdish_orders'] = isset($data['pos_card_on_flipdish_orders']) ? $data['pos_card_on_flipdish_orders'] : null;
        $this->container['other_integration_fees'] = isset($data['other_integration_fees']) ? $data['other_integration_fees'] : null;
        $this->container['vat'] = isset($data['vat']) ? $data['vat'] : null;
        $this->container['total'] = isset($data['total']) ? $data['total'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets web_and_app_cash
     *
     * @return double
     */
    public function getWebAndAppCash()
    {
        return $this->container['web_and_app_cash'];
    }

    /**
     * Sets web_and_app_cash
     *
     * @param double $web_and_app_cash web_and_app_cash
     *
     * @return $this
     */
    public function setWebAndAppCash($web_and_app_cash)
    {
        $this->container['web_and_app_cash'] = $web_and_app_cash;

        return $this;
    }

    /**
     * Gets web_and_app_card
     *
     * @return double
     */
    public function getWebAndAppCard()
    {
        return $this->container['web_and_app_card'];
    }

    /**
     * Sets web_and_app_card
     *
     * @param double $web_and_app_card web_and_app_card
     *
     * @return $this
     */
    public function setWebAndAppCard($web_and_app_card)
    {
        $this->container['web_and_app_card'] = $web_and_app_card;

        return $this;
    }

    /**
     * Gets kiosk_cash
     *
     * @return double
     */
    public function getKioskCash()
    {
        return $this->container['kiosk_cash'];
    }

    /**
     * Sets kiosk_cash
     *
     * @param double $kiosk_cash kiosk_cash
     *
     * @return $this
     */
    public function setKioskCash($kiosk_cash)
    {
        $this->container['kiosk_cash'] = $kiosk_cash;

        return $this;
    }

    /**
     * Gets kiosk_card
     *
     * @return double
     */
    public function getKioskCard()
    {
        return $this->container['kiosk_card'];
    }

    /**
     * Sets kiosk_card
     *
     * @param double $kiosk_card kiosk_card
     *
     * @return $this
     */
    public function setKioskCard($kiosk_card)
    {
        $this->container['kiosk_card'] = $kiosk_card;

        return $this;
    }

    /**
     * Gets qrop_cash
     *
     * @return double
     */
    public function getQropCash()
    {
        return $this->container['qrop_cash'];
    }

    /**
     * Sets qrop_cash
     *
     * @param double $qrop_cash qrop_cash
     *
     * @return $this
     */
    public function setQropCash($qrop_cash)
    {
        $this->container['qrop_cash'] = $qrop_cash;

        return $this;
    }

    /**
     * Gets qrop_card
     *
     * @return double
     */
    public function getQropCard()
    {
        return $this->container['qrop_card'];
    }

    /**
     * Sets qrop_card
     *
     * @param double $qrop_card qrop_card
     *
     * @return $this
     */
    public function setQropCard($qrop_card)
    {
        $this->container['qrop_card'] = $qrop_card;

        return $this;
    }

    /**
     * Gets pos_card
     *
     * @return double
     */
    public function getPosCard()
    {
        return $this->container['pos_card'];
    }

    /**
     * Sets pos_card
     *
     * @param double $pos_card pos_card
     *
     * @return $this
     */
    public function setPosCard($pos_card)
    {
        $this->container['pos_card'] = $pos_card;

        return $this;
    }

    /**
     * Gets pos_card_on_flipdish_orders
     *
     * @return double
     */
    public function getPosCardOnFlipdishOrders()
    {
        return $this->container['pos_card_on_flipdish_orders'];
    }

    /**
     * Sets pos_card_on_flipdish_orders
     *
     * @param double $pos_card_on_flipdish_orders pos_card_on_flipdish_orders
     *
     * @return $this
     */
    public function setPosCardOnFlipdishOrders($pos_card_on_flipdish_orders)
    {
        $this->container['pos_card_on_flipdish_orders'] = $pos_card_on_flipdish_orders;

        return $this;
    }

    /**
     * Gets other_integration_fees
     *
     * @return double
     */
    public function getOtherIntegrationFees()
    {
        return $this->container['other_integration_fees'];
    }

    /**
     * Sets other_integration_fees
     *
     * @param double $other_integration_fees other_integration_fees
     *
     * @return $this
     */
    public function setOtherIntegrationFees($other_integration_fees)
    {
        $this->container['other_integration_fees'] = $other_integration_fees;

        return $this;
    }

    /**
     * Gets vat
     *
     * @return double
     */
    public function getVat()
    {
        return $this->container['vat'];
    }

    /**
     * Sets vat
     *
     * @param double $vat vat
     *
     * @return $this
     */
    public function setVat($vat)
    {
        $this->container['vat'] = $vat;

        return $this;
    }

    /**
     * Gets total
     *
     * @return double
     */
    public function getTotal()
    {
        return $this->container['total'];
    }

    /**
     * Sets total
     *
     * @param double $total total
     *
     * @return $this
     */
    public function setTotal($total)
    {
        $this->container['total'] = $total;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


