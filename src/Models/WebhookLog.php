<?php
/**
 * WebhookLog
 *
 * PHP version 5
 *
 * @category Class
 * @package  Flipdish\\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Flipdish Open API v1.0
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.43
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Flipdish\\Client\Models;

use \ArrayAccess;
use \Flipdish\\Client\ObjectSerializer;

/**
 * WebhookLog Class Doc Comment
 *
 * @category Class
 * @description Webhook log
 * @package  Flipdish\\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class WebhookLog implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'WebhookLog';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'webhook_subscription_owner_user_id' => 'int',
        'event_created' => 'string',
        'webhook_triggered' => 'string',
        'webhook_event_name' => 'string',
        'webhook_subscription_callback_url' => 'string',
        'http_response_status_code' => 'string',
        'http_response_status' => 'string',
        'request_headers' => 'string',
        'request_body' => 'string',
        'response_headers' => 'string',
        'response_body' => 'string',
        'duration' => 'string',
        'retry_count' => 'int',
        'flipdish_webhook_id' => 'string',
        'version' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'webhook_subscription_owner_user_id' => 'int32',
        'event_created' => null,
        'webhook_triggered' => null,
        'webhook_event_name' => null,
        'webhook_subscription_callback_url' => null,
        'http_response_status_code' => null,
        'http_response_status' => null,
        'request_headers' => null,
        'request_body' => null,
        'response_headers' => null,
        'response_body' => null,
        'duration' => null,
        'retry_count' => 'int32',
        'flipdish_webhook_id' => 'uuid',
        'version' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'webhook_subscription_owner_user_id' => 'WebhookSubscriptionOwnerUserId',
        'event_created' => 'EventCreated',
        'webhook_triggered' => 'WebhookTriggered',
        'webhook_event_name' => 'WebhookEventName',
        'webhook_subscription_callback_url' => 'WebhookSubscriptionCallbackUrl',
        'http_response_status_code' => 'HttpResponseStatusCode',
        'http_response_status' => 'HttpResponseStatus',
        'request_headers' => 'RequestHeaders',
        'request_body' => 'RequestBody',
        'response_headers' => 'ResponseHeaders',
        'response_body' => 'ResponseBody',
        'duration' => 'Duration',
        'retry_count' => 'RetryCount',
        'flipdish_webhook_id' => 'FlipdishWebhookId',
        'version' => 'Version'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'webhook_subscription_owner_user_id' => 'setWebhookSubscriptionOwnerUserId',
        'event_created' => 'setEventCreated',
        'webhook_triggered' => 'setWebhookTriggered',
        'webhook_event_name' => 'setWebhookEventName',
        'webhook_subscription_callback_url' => 'setWebhookSubscriptionCallbackUrl',
        'http_response_status_code' => 'setHttpResponseStatusCode',
        'http_response_status' => 'setHttpResponseStatus',
        'request_headers' => 'setRequestHeaders',
        'request_body' => 'setRequestBody',
        'response_headers' => 'setResponseHeaders',
        'response_body' => 'setResponseBody',
        'duration' => 'setDuration',
        'retry_count' => 'setRetryCount',
        'flipdish_webhook_id' => 'setFlipdishWebhookId',
        'version' => 'setVersion'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'webhook_subscription_owner_user_id' => 'getWebhookSubscriptionOwnerUserId',
        'event_created' => 'getEventCreated',
        'webhook_triggered' => 'getWebhookTriggered',
        'webhook_event_name' => 'getWebhookEventName',
        'webhook_subscription_callback_url' => 'getWebhookSubscriptionCallbackUrl',
        'http_response_status_code' => 'getHttpResponseStatusCode',
        'http_response_status' => 'getHttpResponseStatus',
        'request_headers' => 'getRequestHeaders',
        'request_body' => 'getRequestBody',
        'response_headers' => 'getResponseHeaders',
        'response_body' => 'getResponseBody',
        'duration' => 'getDuration',
        'retry_count' => 'getRetryCount',
        'flipdish_webhook_id' => 'getFlipdishWebhookId',
        'version' => 'getVersion'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['webhook_subscription_owner_user_id'] = isset($data['webhook_subscription_owner_user_id']) ? $data['webhook_subscription_owner_user_id'] : null;
        $this->container['event_created'] = isset($data['event_created']) ? $data['event_created'] : null;
        $this->container['webhook_triggered'] = isset($data['webhook_triggered']) ? $data['webhook_triggered'] : null;
        $this->container['webhook_event_name'] = isset($data['webhook_event_name']) ? $data['webhook_event_name'] : null;
        $this->container['webhook_subscription_callback_url'] = isset($data['webhook_subscription_callback_url']) ? $data['webhook_subscription_callback_url'] : null;
        $this->container['http_response_status_code'] = isset($data['http_response_status_code']) ? $data['http_response_status_code'] : null;
        $this->container['http_response_status'] = isset($data['http_response_status']) ? $data['http_response_status'] : null;
        $this->container['request_headers'] = isset($data['request_headers']) ? $data['request_headers'] : null;
        $this->container['request_body'] = isset($data['request_body']) ? $data['request_body'] : null;
        $this->container['response_headers'] = isset($data['response_headers']) ? $data['response_headers'] : null;
        $this->container['response_body'] = isset($data['response_body']) ? $data['response_body'] : null;
        $this->container['duration'] = isset($data['duration']) ? $data['duration'] : null;
        $this->container['retry_count'] = isset($data['retry_count']) ? $data['retry_count'] : null;
        $this->container['flipdish_webhook_id'] = isset($data['flipdish_webhook_id']) ? $data['flipdish_webhook_id'] : null;
        $this->container['version'] = isset($data['version']) ? $data['version'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets webhook_subscription_owner_user_id
     *
     * @return int
     */
    public function getWebhookSubscriptionOwnerUserId()
    {
        return $this->container['webhook_subscription_owner_user_id'];
    }

    /**
     * Sets webhook_subscription_owner_user_id
     *
     * @param int $webhook_subscription_owner_user_id Webhook subscription owner user identifier
     *
     * @return $this
     */
    public function setWebhookSubscriptionOwnerUserId($webhook_subscription_owner_user_id)
    {
        $this->container['webhook_subscription_owner_user_id'] = $webhook_subscription_owner_user_id;

        return $this;
    }

    /**
     * Gets event_created
     *
     * @return string
     */
    public function getEventCreated()
    {
        return $this->container['event_created'];
    }

    /**
     * Sets event_created
     *
     * @param string $event_created Event created
     *
     * @return $this
     */
    public function setEventCreated($event_created)
    {
        $this->container['event_created'] = $event_created;

        return $this;
    }

    /**
     * Gets webhook_triggered
     *
     * @return string
     */
    public function getWebhookTriggered()
    {
        return $this->container['webhook_triggered'];
    }

    /**
     * Sets webhook_triggered
     *
     * @param string $webhook_triggered Webhook triggered
     *
     * @return $this
     */
    public function setWebhookTriggered($webhook_triggered)
    {
        $this->container['webhook_triggered'] = $webhook_triggered;

        return $this;
    }

    /**
     * Gets webhook_event_name
     *
     * @return string
     */
    public function getWebhookEventName()
    {
        return $this->container['webhook_event_name'];
    }

    /**
     * Sets webhook_event_name
     *
     * @param string $webhook_event_name Webhook event name
     *
     * @return $this
     */
    public function setWebhookEventName($webhook_event_name)
    {
        $this->container['webhook_event_name'] = $webhook_event_name;

        return $this;
    }

    /**
     * Gets webhook_subscription_callback_url
     *
     * @return string
     */
    public function getWebhookSubscriptionCallbackUrl()
    {
        return $this->container['webhook_subscription_callback_url'];
    }

    /**
     * Sets webhook_subscription_callback_url
     *
     * @param string $webhook_subscription_callback_url Webhook subscription callback url
     *
     * @return $this
     */
    public function setWebhookSubscriptionCallbackUrl($webhook_subscription_callback_url)
    {
        $this->container['webhook_subscription_callback_url'] = $webhook_subscription_callback_url;

        return $this;
    }

    /**
     * Gets http_response_status_code
     *
     * @return string
     */
    public function getHttpResponseStatusCode()
    {
        return $this->container['http_response_status_code'];
    }

    /**
     * Sets http_response_status_code
     *
     * @param string $http_response_status_code Received HTTP repsonse status HTTP code
     *
     * @return $this
     */
    public function setHttpResponseStatusCode($http_response_status_code)
    {
        $this->container['http_response_status_code'] = $http_response_status_code;

        return $this;
    }

    /**
     * Gets http_response_status
     *
     * @return string
     */
    public function getHttpResponseStatus()
    {
        return $this->container['http_response_status'];
    }

    /**
     * Sets http_response_status
     *
     * @param string $http_response_status Received HTTP repsonse status
     *
     * @return $this
     */
    public function setHttpResponseStatus($http_response_status)
    {
        $this->container['http_response_status'] = $http_response_status;

        return $this;
    }

    /**
     * Gets request_headers
     *
     * @return string
     */
    public function getRequestHeaders()
    {
        return $this->container['request_headers'];
    }

    /**
     * Sets request_headers
     *
     * @param string $request_headers Request headers
     *
     * @return $this
     */
    public function setRequestHeaders($request_headers)
    {
        $this->container['request_headers'] = $request_headers;

        return $this;
    }

    /**
     * Gets request_body
     *
     * @return string
     */
    public function getRequestBody()
    {
        return $this->container['request_body'];
    }

    /**
     * Sets request_body
     *
     * @param string $request_body Request body
     *
     * @return $this
     */
    public function setRequestBody($request_body)
    {
        $this->container['request_body'] = $request_body;

        return $this;
    }

    /**
     * Gets response_headers
     *
     * @return string
     */
    public function getResponseHeaders()
    {
        return $this->container['response_headers'];
    }

    /**
     * Sets response_headers
     *
     * @param string $response_headers Received response headers
     *
     * @return $this
     */
    public function setResponseHeaders($response_headers)
    {
        $this->container['response_headers'] = $response_headers;

        return $this;
    }

    /**
     * Gets response_body
     *
     * @return string
     */
    public function getResponseBody()
    {
        return $this->container['response_body'];
    }

    /**
     * Sets response_body
     *
     * @param string $response_body Received response body
     *
     * @return $this
     */
    public function setResponseBody($response_body)
    {
        $this->container['response_body'] = $response_body;

        return $this;
    }

    /**
     * Gets duration
     *
     * @return string
     */
    public function getDuration()
    {
        return $this->container['duration'];
    }

    /**
     * Sets duration
     *
     * @param string $duration Duration of HTTP request
     *
     * @return $this
     */
    public function setDuration($duration)
    {
        $this->container['duration'] = $duration;

        return $this;
    }

    /**
     * Gets retry_count
     *
     * @return int
     */
    public function getRetryCount()
    {
        return $this->container['retry_count'];
    }

    /**
     * Sets retry_count
     *
     * @param int $retry_count Retry count
     *
     * @return $this
     */
    public function setRetryCount($retry_count)
    {
        $this->container['retry_count'] = $retry_count;

        return $this;
    }

    /**
     * Gets flipdish_webhook_id
     *
     * @return string
     */
    public function getFlipdishWebhookId()
    {
        return $this->container['flipdish_webhook_id'];
    }

    /**
     * Sets flipdish_webhook_id
     *
     * @param string $flipdish_webhook_id Flipdish webhook identifier
     *
     * @return $this
     */
    public function setFlipdishWebhookId($flipdish_webhook_id)
    {
        $this->container['flipdish_webhook_id'] = $flipdish_webhook_id;

        return $this;
    }

    /**
     * Gets version
     *
     * @return string
     */
    public function getVersion()
    {
        return $this->container['version'];
    }

    /**
     * Sets version
     *
     * @param string $version Flipdish webhook version
     *
     * @return $this
     */
    public function setVersion($version)
    {
        $this->container['version'] = $version;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


