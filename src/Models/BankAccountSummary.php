<?php
/**
 * BankAccountSummary
 *
 * PHP version 5
 *
 * @category Class
 * @package  Flipdish\\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Flipdish Open API v1.0
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.19
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Flipdish\\Client\Models;

use \ArrayAccess;
use \Flipdish\\Client\ObjectSerializer;

/**
 * BankAccountSummary Class Doc Comment
 *
 * @category Class
 * @description 
 * @package  Flipdish\\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class BankAccountSummary implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'BankAccountSummary';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'store_names' => 'string[]',
        'account_state' => 'string',
        'currency_code' => 'string',
        'stripe_connected_account_info' => '\Flipdish\\Client\Models\StripeConnectedAccountInfo',
        'account_name' => 'string',
        'iban' => 'string',
        'swift' => 'string',
        'national_clearing_code' => 'string',
        'populated_account_fields' => '\Flipdish\\Client\Models\AccountFieldKeyValuePair[]',
        'rejection_reason' => 'string',
        'business_type' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => 'int32',
        'store_names' => null,
        'account_state' => null,
        'currency_code' => null,
        'stripe_connected_account_info' => null,
        'account_name' => null,
        'iban' => null,
        'swift' => null,
        'national_clearing_code' => null,
        'populated_account_fields' => null,
        'rejection_reason' => null,
        'business_type' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'Id',
        'store_names' => 'StoreNames',
        'account_state' => 'AccountState',
        'currency_code' => 'CurrencyCode',
        'stripe_connected_account_info' => 'StripeConnectedAccountInfo',
        'account_name' => 'AccountName',
        'iban' => 'Iban',
        'swift' => 'Swift',
        'national_clearing_code' => 'NationalClearingCode',
        'populated_account_fields' => 'PopulatedAccountFields',
        'rejection_reason' => 'RejectionReason',
        'business_type' => 'BusinessType'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'store_names' => 'setStoreNames',
        'account_state' => 'setAccountState',
        'currency_code' => 'setCurrencyCode',
        'stripe_connected_account_info' => 'setStripeConnectedAccountInfo',
        'account_name' => 'setAccountName',
        'iban' => 'setIban',
        'swift' => 'setSwift',
        'national_clearing_code' => 'setNationalClearingCode',
        'populated_account_fields' => 'setPopulatedAccountFields',
        'rejection_reason' => 'setRejectionReason',
        'business_type' => 'setBusinessType'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'store_names' => 'getStoreNames',
        'account_state' => 'getAccountState',
        'currency_code' => 'getCurrencyCode',
        'stripe_connected_account_info' => 'getStripeConnectedAccountInfo',
        'account_name' => 'getAccountName',
        'iban' => 'getIban',
        'swift' => 'getSwift',
        'national_clearing_code' => 'getNationalClearingCode',
        'populated_account_fields' => 'getPopulatedAccountFields',
        'rejection_reason' => 'getRejectionReason',
        'business_type' => 'getBusinessType'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const ACCOUNT_STATE_UNVERIFIED = 'Unverified';
    const ACCOUNT_STATE_AWATING_VERIFICATION = 'AwatingVerification';
    const ACCOUNT_STATE_VERIFIED = 'Verified';
    const ACCOUNT_STATE_GRANDFATHERED = 'Grandfathered';
    const BUSINESS_TYPE_INDIVIDUAL = 'Individual';
    const BUSINESS_TYPE_COMPANY = 'Company';
    const BUSINESS_TYPE_NON_PROFIT = 'NonProfit';
    const BUSINESS_TYPE_GOVERNMENT_ENTITY = 'GovernmentEntity';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAccountStateAllowableValues()
    {
        return [
            self::ACCOUNT_STATE_UNVERIFIED,
            self::ACCOUNT_STATE_AWATING_VERIFICATION,
            self::ACCOUNT_STATE_VERIFIED,
            self::ACCOUNT_STATE_GRANDFATHERED,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getBusinessTypeAllowableValues()
    {
        return [
            self::BUSINESS_TYPE_INDIVIDUAL,
            self::BUSINESS_TYPE_COMPANY,
            self::BUSINESS_TYPE_NON_PROFIT,
            self::BUSINESS_TYPE_GOVERNMENT_ENTITY,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['store_names'] = isset($data['store_names']) ? $data['store_names'] : null;
        $this->container['account_state'] = isset($data['account_state']) ? $data['account_state'] : null;
        $this->container['currency_code'] = isset($data['currency_code']) ? $data['currency_code'] : null;
        $this->container['stripe_connected_account_info'] = isset($data['stripe_connected_account_info']) ? $data['stripe_connected_account_info'] : null;
        $this->container['account_name'] = isset($data['account_name']) ? $data['account_name'] : null;
        $this->container['iban'] = isset($data['iban']) ? $data['iban'] : null;
        $this->container['swift'] = isset($data['swift']) ? $data['swift'] : null;
        $this->container['national_clearing_code'] = isset($data['national_clearing_code']) ? $data['national_clearing_code'] : null;
        $this->container['populated_account_fields'] = isset($data['populated_account_fields']) ? $data['populated_account_fields'] : null;
        $this->container['rejection_reason'] = isset($data['rejection_reason']) ? $data['rejection_reason'] : null;
        $this->container['business_type'] = isset($data['business_type']) ? $data['business_type'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getAccountStateAllowableValues();
        if (!is_null($this->container['account_state']) && !in_array($this->container['account_state'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'account_state', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getBusinessTypeAllowableValues();
        if (!is_null($this->container['business_type']) && !in_array($this->container['business_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'business_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id Id of this account
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets store_names
     *
     * @return string[]
     */
    public function getStoreNames()
    {
        return $this->container['store_names'];
    }

    /**
     * Sets store_names
     *
     * @param string[] $store_names Store Names that are attached to this account
     *
     * @return $this
     */
    public function setStoreNames($store_names)
    {
        $this->container['store_names'] = $store_names;

        return $this;
    }

    /**
     * Gets account_state
     *
     * @return string
     */
    public function getAccountState()
    {
        return $this->container['account_state'];
    }

    /**
     * Sets account_state
     *
     * @param string $account_state Status of Account
     *
     * @return $this
     */
    public function setAccountState($account_state)
    {
        $allowedValues = $this->getAccountStateAllowableValues();
        if (!is_null($account_state) && !in_array($account_state, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'account_state', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['account_state'] = $account_state;

        return $this;
    }

    /**
     * Gets currency_code
     *
     * @return string
     */
    public function getCurrencyCode()
    {
        return $this->container['currency_code'];
    }

    /**
     * Sets currency_code
     *
     * @param string $currency_code Currency of Account
     *
     * @return $this
     */
    public function setCurrencyCode($currency_code)
    {
        $this->container['currency_code'] = $currency_code;

        return $this;
    }

    /**
     * Gets stripe_connected_account_info
     *
     * @return \Flipdish\\Client\Models\StripeConnectedAccountInfo
     */
    public function getStripeConnectedAccountInfo()
    {
        return $this->container['stripe_connected_account_info'];
    }

    /**
     * Sets stripe_connected_account_info
     *
     * @param \Flipdish\\Client\Models\StripeConnectedAccountInfo $stripe_connected_account_info Information about the Stripe connected account associated with this bank account (if any)
     *
     * @return $this
     */
    public function setStripeConnectedAccountInfo($stripe_connected_account_info)
    {
        $this->container['stripe_connected_account_info'] = $stripe_connected_account_info;

        return $this;
    }

    /**
     * Gets account_name
     *
     * @return string
     */
    public function getAccountName()
    {
        return $this->container['account_name'];
    }

    /**
     * Sets account_name
     *
     * @param string $account_name Name of this account
     *
     * @return $this
     */
    public function setAccountName($account_name)
    {
        $this->container['account_name'] = $account_name;

        return $this;
    }

    /**
     * Gets iban
     *
     * @return string
     */
    public function getIban()
    {
        return $this->container['iban'];
    }

    /**
     * Sets iban
     *
     * @param string $iban IBAN of this account
     *
     * @return $this
     */
    public function setIban($iban)
    {
        $this->container['iban'] = $iban;

        return $this;
    }

    /**
     * Gets swift
     *
     * @return string
     */
    public function getSwift()
    {
        return $this->container['swift'];
    }

    /**
     * Sets swift
     *
     * @param string $swift SWIFT of this bank account
     *
     * @return $this
     */
    public function setSwift($swift)
    {
        $this->container['swift'] = $swift;

        return $this;
    }

    /**
     * Gets national_clearing_code
     *
     * @return string
     */
    public function getNationalClearingCode()
    {
        return $this->container['national_clearing_code'];
    }

    /**
     * Sets national_clearing_code
     *
     * @param string $national_clearing_code National Clearing Code (BSB in Australia, Routing Number in USA/Canada, NCC in NZ)
     *
     * @return $this
     */
    public function setNationalClearingCode($national_clearing_code)
    {
        $this->container['national_clearing_code'] = $national_clearing_code;

        return $this;
    }

    /**
     * Gets populated_account_fields
     *
     * @return \Flipdish\\Client\Models\AccountFieldKeyValuePair[]
     */
    public function getPopulatedAccountFields()
    {
        return $this->container['populated_account_fields'];
    }

    /**
     * Sets populated_account_fields
     *
     * @param \Flipdish\\Client\Models\AccountFieldKeyValuePair[] $populated_account_fields A list of one or more populated account fields (field key-value pairs).  If this list contains at least one item, the Iban, Swift and NationalClearingCode fields will be ignored.
     *
     * @return $this
     */
    public function setPopulatedAccountFields($populated_account_fields)
    {
        $this->container['populated_account_fields'] = $populated_account_fields;

        return $this;
    }

    /**
     * Gets rejection_reason
     *
     * @return string
     */
    public function getRejectionReason()
    {
        return $this->container['rejection_reason'];
    }

    /**
     * Sets rejection_reason
     *
     * @param string $rejection_reason Reason for Rejection
     *
     * @return $this
     */
    public function setRejectionReason($rejection_reason)
    {
        $this->container['rejection_reason'] = $rejection_reason;

        return $this;
    }

    /**
     * Gets business_type
     *
     * @return string
     */
    public function getBusinessType()
    {
        return $this->container['business_type'];
    }

    /**
     * Sets business_type
     *
     * @param string $business_type Business Type
     *
     * @return $this
     */
    public function setBusinessType($business_type)
    {
        $allowedValues = $this->getBusinessTypeAllowableValues();
        if (!is_null($business_type) && !in_array($business_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'business_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['business_type'] = $business_type;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


