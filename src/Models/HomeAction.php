<?php
/**
 * HomeAction
 *
 * PHP version 5
 *
 * @category Class
 * @package  Flipdish\\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Flipdish Open API v1.0
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.43
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Flipdish\\Client\Models;

use \ArrayAccess;
use \Flipdish\\Client\ObjectSerializer;

/**
 * HomeAction Class Doc Comment
 *
 * @category Class
 * @description 
 * @package  Flipdish\\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class HomeAction implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'HomeAction';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'home_action_id' => 'int',
        'home_action_type' => 'string',
        'order' => 'int',
        'title_key' => 'string',
        'action_key' => 'string',
        'description_key' => 'string',
        'action' => 'string',
        'dismissible' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'home_action_id' => 'int32',
        'home_action_type' => null,
        'order' => 'int32',
        'title_key' => null,
        'action_key' => null,
        'description_key' => null,
        'action' => null,
        'dismissible' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'home_action_id' => 'HomeActionId',
        'home_action_type' => 'HomeActionType',
        'order' => 'Order',
        'title_key' => 'TitleKey',
        'action_key' => 'ActionKey',
        'description_key' => 'DescriptionKey',
        'action' => 'Action',
        'dismissible' => 'Dismissible'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'home_action_id' => 'setHomeActionId',
        'home_action_type' => 'setHomeActionType',
        'order' => 'setOrder',
        'title_key' => 'setTitleKey',
        'action_key' => 'setActionKey',
        'description_key' => 'setDescriptionKey',
        'action' => 'setAction',
        'dismissible' => 'setDismissible'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'home_action_id' => 'getHomeActionId',
        'home_action_type' => 'getHomeActionType',
        'order' => 'getOrder',
        'title_key' => 'getTitleKey',
        'action_key' => 'getActionKey',
        'description_key' => 'getDescriptionKey',
        'action' => 'getAction',
        'dismissible' => 'getDismissible'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const HOME_ACTION_TYPE_PORTAL = 'Portal';
    const HOME_ACTION_TYPE_EXTERNAL = 'External';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getHomeActionTypeAllowableValues()
    {
        return [
            self::HOME_ACTION_TYPE_PORTAL,
            self::HOME_ACTION_TYPE_EXTERNAL,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['home_action_id'] = isset($data['home_action_id']) ? $data['home_action_id'] : null;
        $this->container['home_action_type'] = isset($data['home_action_type']) ? $data['home_action_type'] : null;
        $this->container['order'] = isset($data['order']) ? $data['order'] : null;
        $this->container['title_key'] = isset($data['title_key']) ? $data['title_key'] : null;
        $this->container['action_key'] = isset($data['action_key']) ? $data['action_key'] : null;
        $this->container['description_key'] = isset($data['description_key']) ? $data['description_key'] : null;
        $this->container['action'] = isset($data['action']) ? $data['action'] : null;
        $this->container['dismissible'] = isset($data['dismissible']) ? $data['dismissible'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getHomeActionTypeAllowableValues();
        if (!is_null($this->container['home_action_type']) && !in_array($this->container['home_action_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'home_action_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets home_action_id
     *
     * @return int
     */
    public function getHomeActionId()
    {
        return $this->container['home_action_id'];
    }

    /**
     * Sets home_action_id
     *
     * @param int $home_action_id 
     *
     * @return $this
     */
    public function setHomeActionId($home_action_id)
    {
        $this->container['home_action_id'] = $home_action_id;

        return $this;
    }

    /**
     * Gets home_action_type
     *
     * @return string
     */
    public function getHomeActionType()
    {
        return $this->container['home_action_type'];
    }

    /**
     * Sets home_action_type
     *
     * @param string $home_action_type Type of Action
     *
     * @return $this
     */
    public function setHomeActionType($home_action_type)
    {
        $allowedValues = $this->getHomeActionTypeAllowableValues();
        if (!is_null($home_action_type) && !in_array($home_action_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'home_action_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['home_action_type'] = $home_action_type;

        return $this;
    }

    /**
     * Gets order
     *
     * @return int
     */
    public function getOrder()
    {
        return $this->container['order'];
    }

    /**
     * Sets order
     *
     * @param int $order 
     *
     * @return $this
     */
    public function setOrder($order)
    {
        $this->container['order'] = $order;

        return $this;
    }

    /**
     * Gets title_key
     *
     * @return string
     */
    public function getTitleKey()
    {
        return $this->container['title_key'];
    }

    /**
     * Sets title_key
     *
     * @param string $title_key 
     *
     * @return $this
     */
    public function setTitleKey($title_key)
    {
        $this->container['title_key'] = $title_key;

        return $this;
    }

    /**
     * Gets action_key
     *
     * @return string
     */
    public function getActionKey()
    {
        return $this->container['action_key'];
    }

    /**
     * Sets action_key
     *
     * @param string $action_key 
     *
     * @return $this
     */
    public function setActionKey($action_key)
    {
        $this->container['action_key'] = $action_key;

        return $this;
    }

    /**
     * Gets description_key
     *
     * @return string
     */
    public function getDescriptionKey()
    {
        return $this->container['description_key'];
    }

    /**
     * Sets description_key
     *
     * @param string $description_key 
     *
     * @return $this
     */
    public function setDescriptionKey($description_key)
    {
        $this->container['description_key'] = $description_key;

        return $this;
    }

    /**
     * Gets action
     *
     * @return string
     */
    public function getAction()
    {
        return $this->container['action'];
    }

    /**
     * Sets action
     *
     * @param string $action 
     *
     * @return $this
     */
    public function setAction($action)
    {
        $this->container['action'] = $action;

        return $this;
    }

    /**
     * Gets dismissible
     *
     * @return bool
     */
    public function getDismissible()
    {
        return $this->container['dismissible'];
    }

    /**
     * Sets dismissible
     *
     * @param bool $dismissible 
     *
     * @return $this
     */
    public function setDismissible($dismissible)
    {
        $this->container['dismissible'] = $dismissible;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


