<?php
/**
 * StoreEndOfDayReport
 *
 * PHP version 5
 *
 * @category Class
 * @package  Flipdish\\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Flipdish Open API v1.0
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.19
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Flipdish\\Client\Models;

use \ArrayAccess;
use \Flipdish\\Client\ObjectSerializer;

/**
 * StoreEndOfDayReport Class Doc Comment
 *
 * @category Class
 * @description Store end of day report
 * @package  Flipdish\\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class StoreEndOfDayReport implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'StoreEndOfDayReport';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'store_id' => 'int',
        'store_name' => 'string',
        'currency' => 'string',
        'order_count' => 'int',
        'order_value' => 'double',
        'order_value_excluding_delivery_fees' => 'double',
        'collection_order_count' => 'int',
        'collection_cash_order_count' => 'int',
        'collection_paid_online_order_count' => 'int',
        'collection_order_value' => 'double',
        'collection_cash_order_value' => 'double',
        'collection_paid_online_order_value' => 'double',
        'delivery_order_count' => 'int',
        'delivery_cash_order_count' => 'int',
        'delivery_paid_online_order_count' => 'int',
        'delivery_order_value' => 'double',
        'delivery_cash_order_value' => 'double',
        'delivery_paid_online_order_value' => 'double',
        'paid_online_order_count' => 'int',
        'cash_order_count' => 'int',
        'paid_online_order_value' => 'double',
        'cash_order_value' => 'double',
        'paid_online_order_value_excluding_delivery_fees' => 'double',
        'cash_order_value_excluding_delivery_fees' => 'double',
        'start_time' => '\DateTime',
        'end_time' => '\DateTime'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'store_id' => 'int32',
        'store_name' => null,
        'currency' => null,
        'order_count' => 'int32',
        'order_value' => 'double',
        'order_value_excluding_delivery_fees' => 'double',
        'collection_order_count' => 'int32',
        'collection_cash_order_count' => 'int32',
        'collection_paid_online_order_count' => 'int32',
        'collection_order_value' => 'double',
        'collection_cash_order_value' => 'double',
        'collection_paid_online_order_value' => 'double',
        'delivery_order_count' => 'int32',
        'delivery_cash_order_count' => 'int32',
        'delivery_paid_online_order_count' => 'int32',
        'delivery_order_value' => 'double',
        'delivery_cash_order_value' => 'double',
        'delivery_paid_online_order_value' => 'double',
        'paid_online_order_count' => 'int32',
        'cash_order_count' => 'int32',
        'paid_online_order_value' => 'double',
        'cash_order_value' => 'double',
        'paid_online_order_value_excluding_delivery_fees' => 'double',
        'cash_order_value_excluding_delivery_fees' => 'double',
        'start_time' => 'date-time',
        'end_time' => 'date-time'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'store_id' => 'StoreId',
        'store_name' => 'StoreName',
        'currency' => 'Currency',
        'order_count' => 'OrderCount',
        'order_value' => 'OrderValue',
        'order_value_excluding_delivery_fees' => 'OrderValueExcludingDeliveryFees',
        'collection_order_count' => 'CollectionOrderCount',
        'collection_cash_order_count' => 'CollectionCashOrderCount',
        'collection_paid_online_order_count' => 'CollectionPaidOnlineOrderCount',
        'collection_order_value' => 'CollectionOrderValue',
        'collection_cash_order_value' => 'CollectionCashOrderValue',
        'collection_paid_online_order_value' => 'CollectionPaidOnlineOrderValue',
        'delivery_order_count' => 'DeliveryOrderCount',
        'delivery_cash_order_count' => 'DeliveryCashOrderCount',
        'delivery_paid_online_order_count' => 'DeliveryPaidOnlineOrderCount',
        'delivery_order_value' => 'DeliveryOrderValue',
        'delivery_cash_order_value' => 'DeliveryCashOrderValue',
        'delivery_paid_online_order_value' => 'DeliveryPaidOnlineOrderValue',
        'paid_online_order_count' => 'PaidOnlineOrderCount',
        'cash_order_count' => 'CashOrderCount',
        'paid_online_order_value' => 'PaidOnlineOrderValue',
        'cash_order_value' => 'CashOrderValue',
        'paid_online_order_value_excluding_delivery_fees' => 'PaidOnlineOrderValueExcludingDeliveryFees',
        'cash_order_value_excluding_delivery_fees' => 'CashOrderValueExcludingDeliveryFees',
        'start_time' => 'StartTime',
        'end_time' => 'EndTime'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'store_id' => 'setStoreId',
        'store_name' => 'setStoreName',
        'currency' => 'setCurrency',
        'order_count' => 'setOrderCount',
        'order_value' => 'setOrderValue',
        'order_value_excluding_delivery_fees' => 'setOrderValueExcludingDeliveryFees',
        'collection_order_count' => 'setCollectionOrderCount',
        'collection_cash_order_count' => 'setCollectionCashOrderCount',
        'collection_paid_online_order_count' => 'setCollectionPaidOnlineOrderCount',
        'collection_order_value' => 'setCollectionOrderValue',
        'collection_cash_order_value' => 'setCollectionCashOrderValue',
        'collection_paid_online_order_value' => 'setCollectionPaidOnlineOrderValue',
        'delivery_order_count' => 'setDeliveryOrderCount',
        'delivery_cash_order_count' => 'setDeliveryCashOrderCount',
        'delivery_paid_online_order_count' => 'setDeliveryPaidOnlineOrderCount',
        'delivery_order_value' => 'setDeliveryOrderValue',
        'delivery_cash_order_value' => 'setDeliveryCashOrderValue',
        'delivery_paid_online_order_value' => 'setDeliveryPaidOnlineOrderValue',
        'paid_online_order_count' => 'setPaidOnlineOrderCount',
        'cash_order_count' => 'setCashOrderCount',
        'paid_online_order_value' => 'setPaidOnlineOrderValue',
        'cash_order_value' => 'setCashOrderValue',
        'paid_online_order_value_excluding_delivery_fees' => 'setPaidOnlineOrderValueExcludingDeliveryFees',
        'cash_order_value_excluding_delivery_fees' => 'setCashOrderValueExcludingDeliveryFees',
        'start_time' => 'setStartTime',
        'end_time' => 'setEndTime'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'store_id' => 'getStoreId',
        'store_name' => 'getStoreName',
        'currency' => 'getCurrency',
        'order_count' => 'getOrderCount',
        'order_value' => 'getOrderValue',
        'order_value_excluding_delivery_fees' => 'getOrderValueExcludingDeliveryFees',
        'collection_order_count' => 'getCollectionOrderCount',
        'collection_cash_order_count' => 'getCollectionCashOrderCount',
        'collection_paid_online_order_count' => 'getCollectionPaidOnlineOrderCount',
        'collection_order_value' => 'getCollectionOrderValue',
        'collection_cash_order_value' => 'getCollectionCashOrderValue',
        'collection_paid_online_order_value' => 'getCollectionPaidOnlineOrderValue',
        'delivery_order_count' => 'getDeliveryOrderCount',
        'delivery_cash_order_count' => 'getDeliveryCashOrderCount',
        'delivery_paid_online_order_count' => 'getDeliveryPaidOnlineOrderCount',
        'delivery_order_value' => 'getDeliveryOrderValue',
        'delivery_cash_order_value' => 'getDeliveryCashOrderValue',
        'delivery_paid_online_order_value' => 'getDeliveryPaidOnlineOrderValue',
        'paid_online_order_count' => 'getPaidOnlineOrderCount',
        'cash_order_count' => 'getCashOrderCount',
        'paid_online_order_value' => 'getPaidOnlineOrderValue',
        'cash_order_value' => 'getCashOrderValue',
        'paid_online_order_value_excluding_delivery_fees' => 'getPaidOnlineOrderValueExcludingDeliveryFees',
        'cash_order_value_excluding_delivery_fees' => 'getCashOrderValueExcludingDeliveryFees',
        'start_time' => 'getStartTime',
        'end_time' => 'getEndTime'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const CURRENCY_EUR = 'EUR';
    const CURRENCY_USD = 'USD';
    const CURRENCY_GBP = 'GBP';
    const CURRENCY_CAD = 'CAD';
    const CURRENCY_AUD = 'AUD';
    const CURRENCY_DJF = 'DJF';
    const CURRENCY_ZAR = 'ZAR';
    const CURRENCY_ETB = 'ETB';
    const CURRENCY_AED = 'AED';
    const CURRENCY_BHD = 'BHD';
    const CURRENCY_DZD = 'DZD';
    const CURRENCY_EGP = 'EGP';
    const CURRENCY_IQD = 'IQD';
    const CURRENCY_JOD = 'JOD';
    const CURRENCY_KWD = 'KWD';
    const CURRENCY_LBP = 'LBP';
    const CURRENCY_LYD = 'LYD';
    const CURRENCY_MAD = 'MAD';
    const CURRENCY_OMR = 'OMR';
    const CURRENCY_QAR = 'QAR';
    const CURRENCY_SAR = 'SAR';
    const CURRENCY_SYP = 'SYP';
    const CURRENCY_TND = 'TND';
    const CURRENCY_YER = 'YER';
    const CURRENCY_CLP = 'CLP';
    const CURRENCY_INR = 'INR';
    const CURRENCY_AZN = 'AZN';
    const CURRENCY_RUB = 'RUB';
    const CURRENCY_BYN = 'BYN';
    const CURRENCY_BGN = 'BGN';
    const CURRENCY_NGN = 'NGN';
    const CURRENCY_BDT = 'BDT';
    const CURRENCY_CNY = 'CNY';
    const CURRENCY_BAM = 'BAM';
    const CURRENCY_CZK = 'CZK';
    const CURRENCY_DKK = 'DKK';
    const CURRENCY_CHF = 'CHF';
    const CURRENCY_MVR = 'MVR';
    const CURRENCY_BTN = 'BTN';
    const CURRENCY_XCD = 'XCD';
    const CURRENCY_BZD = 'BZD';
    const CURRENCY_HKD = 'HKD';
    const CURRENCY_IDR = 'IDR';
    const CURRENCY_JMD = 'JMD';
    const CURRENCY_MYR = 'MYR';
    const CURRENCY_NZD = 'NZD';
    const CURRENCY_PHP = 'PHP';
    const CURRENCY_SGD = 'SGD';
    const CURRENCY_TTD = 'TTD';
    const CURRENCY_XDR = 'XDR';
    const CURRENCY_ARS = 'ARS';
    const CURRENCY_BOB = 'BOB';
    const CURRENCY_COP = 'COP';
    const CURRENCY_CRC = 'CRC';
    const CURRENCY_CUP = 'CUP';
    const CURRENCY_DOP = 'DOP';
    const CURRENCY_GTQ = 'GTQ';
    const CURRENCY_HNL = 'HNL';
    const CURRENCY_MXN = 'MXN';
    const CURRENCY_NIO = 'NIO';
    const CURRENCY_PAB = 'PAB';
    const CURRENCY_PEN = 'PEN';
    const CURRENCY_PYG = 'PYG';
    const CURRENCY_UYU = 'UYU';
    const CURRENCY_VEF = 'VEF';
    const CURRENCY_IRR = 'IRR';
    const CURRENCY_XOF = 'XOF';
    const CURRENCY_CDF = 'CDF';
    const CURRENCY_XAF = 'XAF';
    const CURRENCY_HTG = 'HTG';
    const CURRENCY_ILS = 'ILS';
    const CURRENCY_HRK = 'HRK';
    const CURRENCY_HUF = 'HUF';
    const CURRENCY_AMD = 'AMD';
    const CURRENCY_ISK = 'ISK';
    const CURRENCY_JPY = 'JPY';
    const CURRENCY_GEL = 'GEL';
    const CURRENCY_KZT = 'KZT';
    const CURRENCY_KHR = 'KHR';
    const CURRENCY_KRW = 'KRW';
    const CURRENCY_KGS = 'KGS';
    const CURRENCY_LAK = 'LAK';
    const CURRENCY_MKD = 'MKD';
    const CURRENCY_MNT = 'MNT';
    const CURRENCY_BND = 'BND';
    const CURRENCY_MMK = 'MMK';
    const CURRENCY_NOK = 'NOK';
    const CURRENCY_NPR = 'NPR';
    const CURRENCY_PKR = 'PKR';
    const CURRENCY_PLN = 'PLN';
    const CURRENCY_AFN = 'AFN';
    const CURRENCY_BRL = 'BRL';
    const CURRENCY_MDL = 'MDL';
    const CURRENCY_RON = 'RON';
    const CURRENCY_RWF = 'RWF';
    const CURRENCY_SEK = 'SEK';
    const CURRENCY_LKR = 'LKR';
    const CURRENCY_SOS = 'SOS';
    const CURRENCY_ALL = 'ALL';
    const CURRENCY_RSD = 'RSD';
    const CURRENCY_KES = 'KES';
    const CURRENCY_TJS = 'TJS';
    const CURRENCY_THB = 'THB';
    const CURRENCY_ERN = 'ERN';
    const CURRENCY_TMT = 'TMT';
    const CURRENCY_BWP = 'BWP';
    const CURRENCY__TRY = 'TRY';
    const CURRENCY_UAH = 'UAH';
    const CURRENCY_UZS = 'UZS';
    const CURRENCY_VND = 'VND';
    const CURRENCY_MOP = 'MOP';
    const CURRENCY_TWD = 'TWD';
    const CURRENCY_BMD = 'BMD';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getCurrencyAllowableValues()
    {
        return [
            self::CURRENCY_EUR,
            self::CURRENCY_USD,
            self::CURRENCY_GBP,
            self::CURRENCY_CAD,
            self::CURRENCY_AUD,
            self::CURRENCY_DJF,
            self::CURRENCY_ZAR,
            self::CURRENCY_ETB,
            self::CURRENCY_AED,
            self::CURRENCY_BHD,
            self::CURRENCY_DZD,
            self::CURRENCY_EGP,
            self::CURRENCY_IQD,
            self::CURRENCY_JOD,
            self::CURRENCY_KWD,
            self::CURRENCY_LBP,
            self::CURRENCY_LYD,
            self::CURRENCY_MAD,
            self::CURRENCY_OMR,
            self::CURRENCY_QAR,
            self::CURRENCY_SAR,
            self::CURRENCY_SYP,
            self::CURRENCY_TND,
            self::CURRENCY_YER,
            self::CURRENCY_CLP,
            self::CURRENCY_INR,
            self::CURRENCY_AZN,
            self::CURRENCY_RUB,
            self::CURRENCY_BYN,
            self::CURRENCY_BGN,
            self::CURRENCY_NGN,
            self::CURRENCY_BDT,
            self::CURRENCY_CNY,
            self::CURRENCY_BAM,
            self::CURRENCY_CZK,
            self::CURRENCY_DKK,
            self::CURRENCY_CHF,
            self::CURRENCY_MVR,
            self::CURRENCY_BTN,
            self::CURRENCY_XCD,
            self::CURRENCY_BZD,
            self::CURRENCY_HKD,
            self::CURRENCY_IDR,
            self::CURRENCY_JMD,
            self::CURRENCY_MYR,
            self::CURRENCY_NZD,
            self::CURRENCY_PHP,
            self::CURRENCY_SGD,
            self::CURRENCY_TTD,
            self::CURRENCY_XDR,
            self::CURRENCY_ARS,
            self::CURRENCY_BOB,
            self::CURRENCY_COP,
            self::CURRENCY_CRC,
            self::CURRENCY_CUP,
            self::CURRENCY_DOP,
            self::CURRENCY_GTQ,
            self::CURRENCY_HNL,
            self::CURRENCY_MXN,
            self::CURRENCY_NIO,
            self::CURRENCY_PAB,
            self::CURRENCY_PEN,
            self::CURRENCY_PYG,
            self::CURRENCY_UYU,
            self::CURRENCY_VEF,
            self::CURRENCY_IRR,
            self::CURRENCY_XOF,
            self::CURRENCY_CDF,
            self::CURRENCY_XAF,
            self::CURRENCY_HTG,
            self::CURRENCY_ILS,
            self::CURRENCY_HRK,
            self::CURRENCY_HUF,
            self::CURRENCY_AMD,
            self::CURRENCY_ISK,
            self::CURRENCY_JPY,
            self::CURRENCY_GEL,
            self::CURRENCY_KZT,
            self::CURRENCY_KHR,
            self::CURRENCY_KRW,
            self::CURRENCY_KGS,
            self::CURRENCY_LAK,
            self::CURRENCY_MKD,
            self::CURRENCY_MNT,
            self::CURRENCY_BND,
            self::CURRENCY_MMK,
            self::CURRENCY_NOK,
            self::CURRENCY_NPR,
            self::CURRENCY_PKR,
            self::CURRENCY_PLN,
            self::CURRENCY_AFN,
            self::CURRENCY_BRL,
            self::CURRENCY_MDL,
            self::CURRENCY_RON,
            self::CURRENCY_RWF,
            self::CURRENCY_SEK,
            self::CURRENCY_LKR,
            self::CURRENCY_SOS,
            self::CURRENCY_ALL,
            self::CURRENCY_RSD,
            self::CURRENCY_KES,
            self::CURRENCY_TJS,
            self::CURRENCY_THB,
            self::CURRENCY_ERN,
            self::CURRENCY_TMT,
            self::CURRENCY_BWP,
            self::CURRENCY__TRY,
            self::CURRENCY_UAH,
            self::CURRENCY_UZS,
            self::CURRENCY_VND,
            self::CURRENCY_MOP,
            self::CURRENCY_TWD,
            self::CURRENCY_BMD,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['store_id'] = isset($data['store_id']) ? $data['store_id'] : null;
        $this->container['store_name'] = isset($data['store_name']) ? $data['store_name'] : null;
        $this->container['currency'] = isset($data['currency']) ? $data['currency'] : null;
        $this->container['order_count'] = isset($data['order_count']) ? $data['order_count'] : null;
        $this->container['order_value'] = isset($data['order_value']) ? $data['order_value'] : null;
        $this->container['order_value_excluding_delivery_fees'] = isset($data['order_value_excluding_delivery_fees']) ? $data['order_value_excluding_delivery_fees'] : null;
        $this->container['collection_order_count'] = isset($data['collection_order_count']) ? $data['collection_order_count'] : null;
        $this->container['collection_cash_order_count'] = isset($data['collection_cash_order_count']) ? $data['collection_cash_order_count'] : null;
        $this->container['collection_paid_online_order_count'] = isset($data['collection_paid_online_order_count']) ? $data['collection_paid_online_order_count'] : null;
        $this->container['collection_order_value'] = isset($data['collection_order_value']) ? $data['collection_order_value'] : null;
        $this->container['collection_cash_order_value'] = isset($data['collection_cash_order_value']) ? $data['collection_cash_order_value'] : null;
        $this->container['collection_paid_online_order_value'] = isset($data['collection_paid_online_order_value']) ? $data['collection_paid_online_order_value'] : null;
        $this->container['delivery_order_count'] = isset($data['delivery_order_count']) ? $data['delivery_order_count'] : null;
        $this->container['delivery_cash_order_count'] = isset($data['delivery_cash_order_count']) ? $data['delivery_cash_order_count'] : null;
        $this->container['delivery_paid_online_order_count'] = isset($data['delivery_paid_online_order_count']) ? $data['delivery_paid_online_order_count'] : null;
        $this->container['delivery_order_value'] = isset($data['delivery_order_value']) ? $data['delivery_order_value'] : null;
        $this->container['delivery_cash_order_value'] = isset($data['delivery_cash_order_value']) ? $data['delivery_cash_order_value'] : null;
        $this->container['delivery_paid_online_order_value'] = isset($data['delivery_paid_online_order_value']) ? $data['delivery_paid_online_order_value'] : null;
        $this->container['paid_online_order_count'] = isset($data['paid_online_order_count']) ? $data['paid_online_order_count'] : null;
        $this->container['cash_order_count'] = isset($data['cash_order_count']) ? $data['cash_order_count'] : null;
        $this->container['paid_online_order_value'] = isset($data['paid_online_order_value']) ? $data['paid_online_order_value'] : null;
        $this->container['cash_order_value'] = isset($data['cash_order_value']) ? $data['cash_order_value'] : null;
        $this->container['paid_online_order_value_excluding_delivery_fees'] = isset($data['paid_online_order_value_excluding_delivery_fees']) ? $data['paid_online_order_value_excluding_delivery_fees'] : null;
        $this->container['cash_order_value_excluding_delivery_fees'] = isset($data['cash_order_value_excluding_delivery_fees']) ? $data['cash_order_value_excluding_delivery_fees'] : null;
        $this->container['start_time'] = isset($data['start_time']) ? $data['start_time'] : null;
        $this->container['end_time'] = isset($data['end_time']) ? $data['end_time'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getCurrencyAllowableValues();
        if (!is_null($this->container['currency']) && !in_array($this->container['currency'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'currency', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets store_id
     *
     * @return int
     */
    public function getStoreId()
    {
        return $this->container['store_id'];
    }

    /**
     * Sets store_id
     *
     * @param int $store_id Store Id
     *
     * @return $this
     */
    public function setStoreId($store_id)
    {
        $this->container['store_id'] = $store_id;

        return $this;
    }

    /**
     * Gets store_name
     *
     * @return string
     */
    public function getStoreName()
    {
        return $this->container['store_name'];
    }

    /**
     * Sets store_name
     *
     * @param string $store_name Store name
     *
     * @return $this
     */
    public function setStoreName($store_name)
    {
        $this->container['store_name'] = $store_name;

        return $this;
    }

    /**
     * Gets currency
     *
     * @return string
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     *
     * @param string $currency Currency
     *
     * @return $this
     */
    public function setCurrency($currency)
    {
        $allowedValues = $this->getCurrencyAllowableValues();
        if (!is_null($currency) && !in_array($currency, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'currency', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets order_count
     *
     * @return int
     */
    public function getOrderCount()
    {
        return $this->container['order_count'];
    }

    /**
     * Sets order_count
     *
     * @param int $order_count Order Count
     *
     * @return $this
     */
    public function setOrderCount($order_count)
    {
        $this->container['order_count'] = $order_count;

        return $this;
    }

    /**
     * Gets order_value
     *
     * @return double
     */
    public function getOrderValue()
    {
        return $this->container['order_value'];
    }

    /**
     * Sets order_value
     *
     * @param double $order_value Order Value
     *
     * @return $this
     */
    public function setOrderValue($order_value)
    {
        $this->container['order_value'] = $order_value;

        return $this;
    }

    /**
     * Gets order_value_excluding_delivery_fees
     *
     * @return double
     */
    public function getOrderValueExcludingDeliveryFees()
    {
        return $this->container['order_value_excluding_delivery_fees'];
    }

    /**
     * Sets order_value_excluding_delivery_fees
     *
     * @param double $order_value_excluding_delivery_fees Order Value Excluding Delivery Fees
     *
     * @return $this
     */
    public function setOrderValueExcludingDeliveryFees($order_value_excluding_delivery_fees)
    {
        $this->container['order_value_excluding_delivery_fees'] = $order_value_excluding_delivery_fees;

        return $this;
    }

    /**
     * Gets collection_order_count
     *
     * @return int
     */
    public function getCollectionOrderCount()
    {
        return $this->container['collection_order_count'];
    }

    /**
     * Sets collection_order_count
     *
     * @param int $collection_order_count Collection Order Count
     *
     * @return $this
     */
    public function setCollectionOrderCount($collection_order_count)
    {
        $this->container['collection_order_count'] = $collection_order_count;

        return $this;
    }

    /**
     * Gets collection_cash_order_count
     *
     * @return int
     */
    public function getCollectionCashOrderCount()
    {
        return $this->container['collection_cash_order_count'];
    }

    /**
     * Sets collection_cash_order_count
     *
     * @param int $collection_cash_order_count Collection Cash Order Count
     *
     * @return $this
     */
    public function setCollectionCashOrderCount($collection_cash_order_count)
    {
        $this->container['collection_cash_order_count'] = $collection_cash_order_count;

        return $this;
    }

    /**
     * Gets collection_paid_online_order_count
     *
     * @return int
     */
    public function getCollectionPaidOnlineOrderCount()
    {
        return $this->container['collection_paid_online_order_count'];
    }

    /**
     * Sets collection_paid_online_order_count
     *
     * @param int $collection_paid_online_order_count Collection Paid Online Order Count
     *
     * @return $this
     */
    public function setCollectionPaidOnlineOrderCount($collection_paid_online_order_count)
    {
        $this->container['collection_paid_online_order_count'] = $collection_paid_online_order_count;

        return $this;
    }

    /**
     * Gets collection_order_value
     *
     * @return double
     */
    public function getCollectionOrderValue()
    {
        return $this->container['collection_order_value'];
    }

    /**
     * Sets collection_order_value
     *
     * @param double $collection_order_value Collection Order Value
     *
     * @return $this
     */
    public function setCollectionOrderValue($collection_order_value)
    {
        $this->container['collection_order_value'] = $collection_order_value;

        return $this;
    }

    /**
     * Gets collection_cash_order_value
     *
     * @return double
     */
    public function getCollectionCashOrderValue()
    {
        return $this->container['collection_cash_order_value'];
    }

    /**
     * Sets collection_cash_order_value
     *
     * @param double $collection_cash_order_value Collection Cash Order Value
     *
     * @return $this
     */
    public function setCollectionCashOrderValue($collection_cash_order_value)
    {
        $this->container['collection_cash_order_value'] = $collection_cash_order_value;

        return $this;
    }

    /**
     * Gets collection_paid_online_order_value
     *
     * @return double
     */
    public function getCollectionPaidOnlineOrderValue()
    {
        return $this->container['collection_paid_online_order_value'];
    }

    /**
     * Sets collection_paid_online_order_value
     *
     * @param double $collection_paid_online_order_value Collection Paid Online Order Value
     *
     * @return $this
     */
    public function setCollectionPaidOnlineOrderValue($collection_paid_online_order_value)
    {
        $this->container['collection_paid_online_order_value'] = $collection_paid_online_order_value;

        return $this;
    }

    /**
     * Gets delivery_order_count
     *
     * @return int
     */
    public function getDeliveryOrderCount()
    {
        return $this->container['delivery_order_count'];
    }

    /**
     * Sets delivery_order_count
     *
     * @param int $delivery_order_count Delivery Order Count
     *
     * @return $this
     */
    public function setDeliveryOrderCount($delivery_order_count)
    {
        $this->container['delivery_order_count'] = $delivery_order_count;

        return $this;
    }

    /**
     * Gets delivery_cash_order_count
     *
     * @return int
     */
    public function getDeliveryCashOrderCount()
    {
        return $this->container['delivery_cash_order_count'];
    }

    /**
     * Sets delivery_cash_order_count
     *
     * @param int $delivery_cash_order_count Delivery Cash Order Count
     *
     * @return $this
     */
    public function setDeliveryCashOrderCount($delivery_cash_order_count)
    {
        $this->container['delivery_cash_order_count'] = $delivery_cash_order_count;

        return $this;
    }

    /**
     * Gets delivery_paid_online_order_count
     *
     * @return int
     */
    public function getDeliveryPaidOnlineOrderCount()
    {
        return $this->container['delivery_paid_online_order_count'];
    }

    /**
     * Sets delivery_paid_online_order_count
     *
     * @param int $delivery_paid_online_order_count Delivery Paid Online Order Count
     *
     * @return $this
     */
    public function setDeliveryPaidOnlineOrderCount($delivery_paid_online_order_count)
    {
        $this->container['delivery_paid_online_order_count'] = $delivery_paid_online_order_count;

        return $this;
    }

    /**
     * Gets delivery_order_value
     *
     * @return double
     */
    public function getDeliveryOrderValue()
    {
        return $this->container['delivery_order_value'];
    }

    /**
     * Sets delivery_order_value
     *
     * @param double $delivery_order_value Delivery Order Value
     *
     * @return $this
     */
    public function setDeliveryOrderValue($delivery_order_value)
    {
        $this->container['delivery_order_value'] = $delivery_order_value;

        return $this;
    }

    /**
     * Gets delivery_cash_order_value
     *
     * @return double
     */
    public function getDeliveryCashOrderValue()
    {
        return $this->container['delivery_cash_order_value'];
    }

    /**
     * Sets delivery_cash_order_value
     *
     * @param double $delivery_cash_order_value Delivery Cash Order Value
     *
     * @return $this
     */
    public function setDeliveryCashOrderValue($delivery_cash_order_value)
    {
        $this->container['delivery_cash_order_value'] = $delivery_cash_order_value;

        return $this;
    }

    /**
     * Gets delivery_paid_online_order_value
     *
     * @return double
     */
    public function getDeliveryPaidOnlineOrderValue()
    {
        return $this->container['delivery_paid_online_order_value'];
    }

    /**
     * Sets delivery_paid_online_order_value
     *
     * @param double $delivery_paid_online_order_value Delivery Paid Online Order Value
     *
     * @return $this
     */
    public function setDeliveryPaidOnlineOrderValue($delivery_paid_online_order_value)
    {
        $this->container['delivery_paid_online_order_value'] = $delivery_paid_online_order_value;

        return $this;
    }

    /**
     * Gets paid_online_order_count
     *
     * @return int
     */
    public function getPaidOnlineOrderCount()
    {
        return $this->container['paid_online_order_count'];
    }

    /**
     * Sets paid_online_order_count
     *
     * @param int $paid_online_order_count Paid Online Order Count
     *
     * @return $this
     */
    public function setPaidOnlineOrderCount($paid_online_order_count)
    {
        $this->container['paid_online_order_count'] = $paid_online_order_count;

        return $this;
    }

    /**
     * Gets cash_order_count
     *
     * @return int
     */
    public function getCashOrderCount()
    {
        return $this->container['cash_order_count'];
    }

    /**
     * Sets cash_order_count
     *
     * @param int $cash_order_count Cash Order Count
     *
     * @return $this
     */
    public function setCashOrderCount($cash_order_count)
    {
        $this->container['cash_order_count'] = $cash_order_count;

        return $this;
    }

    /**
     * Gets paid_online_order_value
     *
     * @return double
     */
    public function getPaidOnlineOrderValue()
    {
        return $this->container['paid_online_order_value'];
    }

    /**
     * Sets paid_online_order_value
     *
     * @param double $paid_online_order_value Paid Online Order Value
     *
     * @return $this
     */
    public function setPaidOnlineOrderValue($paid_online_order_value)
    {
        $this->container['paid_online_order_value'] = $paid_online_order_value;

        return $this;
    }

    /**
     * Gets cash_order_value
     *
     * @return double
     */
    public function getCashOrderValue()
    {
        return $this->container['cash_order_value'];
    }

    /**
     * Sets cash_order_value
     *
     * @param double $cash_order_value Cash Order Value
     *
     * @return $this
     */
    public function setCashOrderValue($cash_order_value)
    {
        $this->container['cash_order_value'] = $cash_order_value;

        return $this;
    }

    /**
     * Gets paid_online_order_value_excluding_delivery_fees
     *
     * @return double
     */
    public function getPaidOnlineOrderValueExcludingDeliveryFees()
    {
        return $this->container['paid_online_order_value_excluding_delivery_fees'];
    }

    /**
     * Sets paid_online_order_value_excluding_delivery_fees
     *
     * @param double $paid_online_order_value_excluding_delivery_fees Paid Online Order Value Excluding Delivery Fees
     *
     * @return $this
     */
    public function setPaidOnlineOrderValueExcludingDeliveryFees($paid_online_order_value_excluding_delivery_fees)
    {
        $this->container['paid_online_order_value_excluding_delivery_fees'] = $paid_online_order_value_excluding_delivery_fees;

        return $this;
    }

    /**
     * Gets cash_order_value_excluding_delivery_fees
     *
     * @return double
     */
    public function getCashOrderValueExcludingDeliveryFees()
    {
        return $this->container['cash_order_value_excluding_delivery_fees'];
    }

    /**
     * Sets cash_order_value_excluding_delivery_fees
     *
     * @param double $cash_order_value_excluding_delivery_fees Cash Order Value Excluding Delivery Fees
     *
     * @return $this
     */
    public function setCashOrderValueExcludingDeliveryFees($cash_order_value_excluding_delivery_fees)
    {
        $this->container['cash_order_value_excluding_delivery_fees'] = $cash_order_value_excluding_delivery_fees;

        return $this;
    }

    /**
     * Gets start_time
     *
     * @return \DateTime
     */
    public function getStartTime()
    {
        return $this->container['start_time'];
    }

    /**
     * Sets start_time
     *
     * @param \DateTime $start_time Start Time
     *
     * @return $this
     */
    public function setStartTime($start_time)
    {
        $this->container['start_time'] = $start_time;

        return $this;
    }

    /**
     * Gets end_time
     *
     * @return \DateTime
     */
    public function getEndTime()
    {
        return $this->container['end_time'];
    }

    /**
     * Sets end_time
     *
     * @param \DateTime $end_time End Time
     *
     * @return $this
     */
    public function setEndTime($end_time)
    {
        $this->container['end_time'] = $end_time;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


