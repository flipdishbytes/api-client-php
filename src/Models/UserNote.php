<?php
/**
 * UserNote
 *
 * PHP version 5
 *
 * @category Class
 * @package  Flipdish\\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Flipdish Open API v1.0
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.43
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Flipdish\\Client\Models;

use \ArrayAccess;
use \Flipdish\\Client\ObjectSerializer;

/**
 * UserNote Class Doc Comment
 *
 * @category Class
 * @description User Note
 * @package  Flipdish\\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class UserNote implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'UserNote';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'user_note_id' => 'int',
        'user_id' => 'int',
        'note' => 'string',
        'ts_create' => '\DateTime',
        'created_by_user_id' => 'int',
        'created_by_user_name' => 'string',
        'created_by_user_email' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'user_note_id' => 'int32',
        'user_id' => 'int32',
        'note' => null,
        'ts_create' => 'date-time',
        'created_by_user_id' => 'int32',
        'created_by_user_name' => null,
        'created_by_user_email' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'user_note_id' => 'UserNoteId',
        'user_id' => 'UserId',
        'note' => 'Note',
        'ts_create' => 'TsCreate',
        'created_by_user_id' => 'CreatedByUserId',
        'created_by_user_name' => 'CreatedByUserName',
        'created_by_user_email' => 'CreatedByUserEmail'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'user_note_id' => 'setUserNoteId',
        'user_id' => 'setUserId',
        'note' => 'setNote',
        'ts_create' => 'setTsCreate',
        'created_by_user_id' => 'setCreatedByUserId',
        'created_by_user_name' => 'setCreatedByUserName',
        'created_by_user_email' => 'setCreatedByUserEmail'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'user_note_id' => 'getUserNoteId',
        'user_id' => 'getUserId',
        'note' => 'getNote',
        'ts_create' => 'getTsCreate',
        'created_by_user_id' => 'getCreatedByUserId',
        'created_by_user_name' => 'getCreatedByUserName',
        'created_by_user_email' => 'getCreatedByUserEmail'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['user_note_id'] = isset($data['user_note_id']) ? $data['user_note_id'] : null;
        $this->container['user_id'] = isset($data['user_id']) ? $data['user_id'] : null;
        $this->container['note'] = isset($data['note']) ? $data['note'] : null;
        $this->container['ts_create'] = isset($data['ts_create']) ? $data['ts_create'] : null;
        $this->container['created_by_user_id'] = isset($data['created_by_user_id']) ? $data['created_by_user_id'] : null;
        $this->container['created_by_user_name'] = isset($data['created_by_user_name']) ? $data['created_by_user_name'] : null;
        $this->container['created_by_user_email'] = isset($data['created_by_user_email']) ? $data['created_by_user_email'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets user_note_id
     *
     * @return int
     */
    public function getUserNoteId()
    {
        return $this->container['user_note_id'];
    }

    /**
     * Sets user_note_id
     *
     * @param int $user_note_id Identifier for the user note.
     *
     * @return $this
     */
    public function setUserNoteId($user_note_id)
    {
        $this->container['user_note_id'] = $user_note_id;

        return $this;
    }

    /**
     * Gets user_id
     *
     * @return int
     */
    public function getUserId()
    {
        return $this->container['user_id'];
    }

    /**
     * Sets user_id
     *
     * @param int $user_id User identifier associated with the note.
     *
     * @return $this
     */
    public function setUserId($user_id)
    {
        $this->container['user_id'] = $user_id;

        return $this;
    }

    /**
     * Gets note
     *
     * @return string
     */
    public function getNote()
    {
        return $this->container['note'];
    }

    /**
     * Sets note
     *
     * @param string $note Note content.
     *
     * @return $this
     */
    public function setNote($note)
    {
        $this->container['note'] = $note;

        return $this;
    }

    /**
     * Gets ts_create
     *
     * @return \DateTime
     */
    public function getTsCreate()
    {
        return $this->container['ts_create'];
    }

    /**
     * Sets ts_create
     *
     * @param \DateTime $ts_create Creation timestamp of the note.
     *
     * @return $this
     */
    public function setTsCreate($ts_create)
    {
        $this->container['ts_create'] = $ts_create;

        return $this;
    }

    /**
     * Gets created_by_user_id
     *
     * @return int
     */
    public function getCreatedByUserId()
    {
        return $this->container['created_by_user_id'];
    }

    /**
     * Sets created_by_user_id
     *
     * @param int $created_by_user_id Identifier of the user who created the note.
     *
     * @return $this
     */
    public function setCreatedByUserId($created_by_user_id)
    {
        $this->container['created_by_user_id'] = $created_by_user_id;

        return $this;
    }

    /**
     * Gets created_by_user_name
     *
     * @return string
     */
    public function getCreatedByUserName()
    {
        return $this->container['created_by_user_name'];
    }

    /**
     * Sets created_by_user_name
     *
     * @param string $created_by_user_name Name of the user who created the note.
     *
     * @return $this
     */
    public function setCreatedByUserName($created_by_user_name)
    {
        $this->container['created_by_user_name'] = $created_by_user_name;

        return $this;
    }

    /**
     * Gets created_by_user_email
     *
     * @return string
     */
    public function getCreatedByUserEmail()
    {
        return $this->container['created_by_user_email'];
    }

    /**
     * Sets created_by_user_email
     *
     * @param string $created_by_user_email Email of the user who created the note.
     *
     * @return $this
     */
    public function setCreatedByUserEmail($created_by_user_email)
    {
        $this->container['created_by_user_email'] = $created_by_user_email;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


