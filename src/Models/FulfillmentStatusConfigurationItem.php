<?php
/**
 * FulfillmentStatusConfigurationItem
 *
 * PHP version 5
 *
 * @category Class
 * @package  Flipdish\\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Flipdish Open API v1.0
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.19
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Flipdish\\Client\Models;

use \ArrayAccess;
use \Flipdish\\Client\ObjectSerializer;

/**
 * FulfillmentStatusConfigurationItem Class Doc Comment
 *
 * @category Class
 * @description Fulfillment Status Item
 * @package  Flipdish\\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class FulfillmentStatusConfigurationItem implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'FulfillmentStatusConfigurationItem';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'status_id' => 'string',
        'status_name' => 'string',
        'enabled' => 'bool',
        'display_name' => 'string',
        'icon' => 'string',
        'public_description' => 'string',
        'internal' => 'bool',
        'next_statuses' => 'string[]',
        'default_next_status' => '\Flipdish\\Client\Models\NextStatusWithOrderType[]',
        'change_type' => 'string',
        'include_in_reports' => 'bool',
        'is_custom' => 'bool',
        'order_types' => 'string[]',
        'communication' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'status_id' => null,
        'status_name' => null,
        'enabled' => null,
        'display_name' => null,
        'icon' => null,
        'public_description' => null,
        'internal' => null,
        'next_statuses' => null,
        'default_next_status' => null,
        'change_type' => null,
        'include_in_reports' => null,
        'is_custom' => null,
        'order_types' => null,
        'communication' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'status_id' => 'StatusId',
        'status_name' => 'StatusName',
        'enabled' => 'Enabled',
        'display_name' => 'DisplayName',
        'icon' => 'Icon',
        'public_description' => 'PublicDescription',
        'internal' => 'Internal',
        'next_statuses' => 'NextStatuses',
        'default_next_status' => 'DefaultNextStatus',
        'change_type' => 'ChangeType',
        'include_in_reports' => 'IncludeInReports',
        'is_custom' => 'IsCustom',
        'order_types' => 'OrderTypes',
        'communication' => 'Communication'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'status_id' => 'setStatusId',
        'status_name' => 'setStatusName',
        'enabled' => 'setEnabled',
        'display_name' => 'setDisplayName',
        'icon' => 'setIcon',
        'public_description' => 'setPublicDescription',
        'internal' => 'setInternal',
        'next_statuses' => 'setNextStatuses',
        'default_next_status' => 'setDefaultNextStatus',
        'change_type' => 'setChangeType',
        'include_in_reports' => 'setIncludeInReports',
        'is_custom' => 'setIsCustom',
        'order_types' => 'setOrderTypes',
        'communication' => 'setCommunication'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'status_id' => 'getStatusId',
        'status_name' => 'getStatusName',
        'enabled' => 'getEnabled',
        'display_name' => 'getDisplayName',
        'icon' => 'getIcon',
        'public_description' => 'getPublicDescription',
        'internal' => 'getInternal',
        'next_statuses' => 'getNextStatuses',
        'default_next_status' => 'getDefaultNextStatus',
        'change_type' => 'getChangeType',
        'include_in_reports' => 'getIncludeInReports',
        'is_custom' => 'getIsCustom',
        'order_types' => 'getOrderTypes',
        'communication' => 'getCommunication'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const CHANGE_TYPE_MANUAL = 'Manual';
    const CHANGE_TYPE_AUTOMATED = 'Automated';
    const CHANGE_TYPE_INTEGRATED = 'Integrated';
    const ORDER_TYPES_ALL = 'All';
    const ORDER_TYPES_DELIVERY = 'Delivery';
    const ORDER_TYPES_COLLECTION = 'Collection';
    const ORDER_TYPES_DINE_IN = 'DineIn';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getChangeTypeAllowableValues()
    {
        return [
            self::CHANGE_TYPE_MANUAL,
            self::CHANGE_TYPE_AUTOMATED,
            self::CHANGE_TYPE_INTEGRATED,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getOrderTypesAllowableValues()
    {
        return [
            self::ORDER_TYPES_ALL,
            self::ORDER_TYPES_DELIVERY,
            self::ORDER_TYPES_COLLECTION,
            self::ORDER_TYPES_DINE_IN,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['status_id'] = isset($data['status_id']) ? $data['status_id'] : null;
        $this->container['status_name'] = isset($data['status_name']) ? $data['status_name'] : null;
        $this->container['enabled'] = isset($data['enabled']) ? $data['enabled'] : null;
        $this->container['display_name'] = isset($data['display_name']) ? $data['display_name'] : null;
        $this->container['icon'] = isset($data['icon']) ? $data['icon'] : null;
        $this->container['public_description'] = isset($data['public_description']) ? $data['public_description'] : null;
        $this->container['internal'] = isset($data['internal']) ? $data['internal'] : null;
        $this->container['next_statuses'] = isset($data['next_statuses']) ? $data['next_statuses'] : null;
        $this->container['default_next_status'] = isset($data['default_next_status']) ? $data['default_next_status'] : null;
        $this->container['change_type'] = isset($data['change_type']) ? $data['change_type'] : null;
        $this->container['include_in_reports'] = isset($data['include_in_reports']) ? $data['include_in_reports'] : null;
        $this->container['is_custom'] = isset($data['is_custom']) ? $data['is_custom'] : null;
        $this->container['order_types'] = isset($data['order_types']) ? $data['order_types'] : null;
        $this->container['communication'] = isset($data['communication']) ? $data['communication'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getChangeTypeAllowableValues();
        if (!is_null($this->container['change_type']) && !in_array($this->container['change_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'change_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets status_id
     *
     * @return string
     */
    public function getStatusId()
    {
        return $this->container['status_id'];
    }

    /**
     * Sets status_id
     *
     * @param string $status_id Status Id (no whitespaces)
     *
     * @return $this
     */
    public function setStatusId($status_id)
    {
        $this->container['status_id'] = $status_id;

        return $this;
    }

    /**
     * Gets status_name
     *
     * @return string
     */
    public function getStatusName()
    {
        return $this->container['status_name'];
    }

    /**
     * Sets status_name
     *
     * @param string $status_name Status name
     *
     * @return $this
     */
    public function setStatusName($status_name)
    {
        $this->container['status_name'] = $status_name;

        return $this;
    }

    /**
     * Gets enabled
     *
     * @return bool
     */
    public function getEnabled()
    {
        return $this->container['enabled'];
    }

    /**
     * Sets enabled
     *
     * @param bool $enabled Is status enabled
     *
     * @return $this
     */
    public function setEnabled($enabled)
    {
        $this->container['enabled'] = $enabled;

        return $this;
    }

    /**
     * Gets display_name
     *
     * @return string
     */
    public function getDisplayName()
    {
        return $this->container['display_name'];
    }

    /**
     * Sets display_name
     *
     * @param string $display_name The short status string that is displayed to users in apps, portal. If empty then Order Status Name is displayed instead
     *
     * @return $this
     */
    public function setDisplayName($display_name)
    {
        $this->container['display_name'] = $display_name;

        return $this;
    }

    /**
     * Gets icon
     *
     * @return string
     */
    public function getIcon()
    {
        return $this->container['icon'];
    }

    /**
     * Sets icon
     *
     * @param string $icon Icon/Image that represents that status visual
     *
     * @return $this
     */
    public function setIcon($icon)
    {
        $this->container['icon'] = $icon;

        return $this;
    }

    /**
     * Gets public_description
     *
     * @return string
     */
    public function getPublicDescription()
    {
        return $this->container['public_description'];
    }

    /**
     * Sets public_description
     *
     * @param string $public_description A string which could be used in notification templates with a placeholder (SMS, email, push, web page with status)
     *
     * @return $this
     */
    public function setPublicDescription($public_description)
    {
        $this->container['public_description'] = $public_description;

        return $this;
    }

    /**
     * Gets internal
     *
     * @return bool
     */
    public function getInternal()
    {
        return $this->container['internal'];
    }

    /**
     * Sets internal
     *
     * @param bool $internal Is internal state (internal states not shown to customers)
     *
     * @return $this
     */
    public function setInternal($internal)
    {
        $this->container['internal'] = $internal;

        return $this;
    }

    /**
     * Gets next_statuses
     *
     * @return string[]
     */
    public function getNextStatuses()
    {
        return $this->container['next_statuses'];
    }

    /**
     * Sets next_statuses
     *
     * @param string[] $next_statuses list of statuses that this status can move to (can be back or forth)
     *
     * @return $this
     */
    public function setNextStatuses($next_statuses)
    {
        $this->container['next_statuses'] = $next_statuses;

        return $this;
    }

    /**
     * Gets default_next_status
     *
     * @return \Flipdish\\Client\Models\NextStatusWithOrderType[]
     */
    public function getDefaultNextStatus()
    {
        return $this->container['default_next_status'];
    }

    /**
     * Sets default_next_status
     *
     * @param \Flipdish\\Client\Models\NextStatusWithOrderType[] $default_next_status The default next status (on a dropdown or quick button on terminal or portal)
     *
     * @return $this
     */
    public function setDefaultNextStatus($default_next_status)
    {
        $this->container['default_next_status'] = $default_next_status;

        return $this;
    }

    /**
     * Gets change_type
     *
     * @return string
     */
    public function getChangeType()
    {
        return $this->container['change_type'];
    }

    /**
     * Sets change_type
     *
     * @param string $change_type How will state change (manually or automated, including timed)
     *
     * @return $this
     */
    public function setChangeType($change_type)
    {
        $allowedValues = $this->getChangeTypeAllowableValues();
        if (!is_null($change_type) && !in_array($change_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'change_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['change_type'] = $change_type;

        return $this;
    }

    /**
     * Gets include_in_reports
     *
     * @return bool
     */
    public function getIncludeInReports()
    {
        return $this->container['include_in_reports'];
    }

    /**
     * Sets include_in_reports
     *
     * @param bool $include_in_reports Include in reports
     *
     * @return $this
     */
    public function setIncludeInReports($include_in_reports)
    {
        $this->container['include_in_reports'] = $include_in_reports;

        return $this;
    }

    /**
     * Gets is_custom
     *
     * @return bool
     */
    public function getIsCustom()
    {
        return $this->container['is_custom'];
    }

    /**
     * Sets is_custom
     *
     * @param bool $is_custom Is custom state. If not, then it's a system state
     *
     * @return $this
     */
    public function setIsCustom($is_custom)
    {
        $this->container['is_custom'] = $is_custom;

        return $this;
    }

    /**
     * Gets order_types
     *
     * @return string[]
     */
    public function getOrderTypes()
    {
        return $this->container['order_types'];
    }

    /**
     * Sets order_types
     *
     * @param string[] $order_types If empty then applies to all ordertypes, otherwise a list of order types this state applies to
     *
     * @return $this
     */
    public function setOrderTypes($order_types)
    {
        $allowedValues = $this->getOrderTypesAllowableValues();
        if (!is_null($order_types) && array_diff($order_types, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'order_types', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['order_types'] = $order_types;

        return $this;
    }

    /**
     * Gets communication
     *
     * @return bool
     */
    public function getCommunication()
    {
        return $this->container['communication'];
    }

    /**
     * Sets communication
     *
     * @param bool $communication Whether state should fire off a notification to the customer
     *
     * @return $this
     */
    public function setCommunication($communication)
    {
        $this->container['communication'] = $communication;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


