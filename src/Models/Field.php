<?php
/**
 * Field
 *
 * PHP version 5
 *
 * @category Class
 * @package  Flipdish\\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Flipdish Open API v1.0
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.19
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Flipdish\\Client\Models;

use \ArrayAccess;
use \Flipdish\\Client\ObjectSerializer;

/**
 * Field Class Doc Comment
 *
 * @category Class
 * @package  Flipdish\\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Field implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Field';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'name' => 'string',
        'description' => 'string',
        'key' => 'string',
        'tooltip' => 'string',
        'position' => 'int',
        'default_value' => 'string',
        'valid_values' => '\Flipdish\\Client\Models\ValidValue[]',
        'validation_regex' => 'string',
        'field_type' => 'string',
        'is_flipdish_restricted' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'name' => null,
        'description' => null,
        'key' => null,
        'tooltip' => null,
        'position' => 'int32',
        'default_value' => null,
        'valid_values' => null,
        'validation_regex' => null,
        'field_type' => null,
        'is_flipdish_restricted' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'Name',
        'description' => 'Description',
        'key' => 'Key',
        'tooltip' => 'Tooltip',
        'position' => 'Position',
        'default_value' => 'DefaultValue',
        'valid_values' => 'ValidValues',
        'validation_regex' => 'ValidationRegex',
        'field_type' => 'FieldType',
        'is_flipdish_restricted' => 'IsFlipdishRestricted'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
        'description' => 'setDescription',
        'key' => 'setKey',
        'tooltip' => 'setTooltip',
        'position' => 'setPosition',
        'default_value' => 'setDefaultValue',
        'valid_values' => 'setValidValues',
        'validation_regex' => 'setValidationRegex',
        'field_type' => 'setFieldType',
        'is_flipdish_restricted' => 'setIsFlipdishRestricted'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
        'description' => 'getDescription',
        'key' => 'getKey',
        'tooltip' => 'getTooltip',
        'position' => 'getPosition',
        'default_value' => 'getDefaultValue',
        'valid_values' => 'getValidValues',
        'validation_regex' => 'getValidationRegex',
        'field_type' => 'getFieldType',
        'is_flipdish_restricted' => 'getIsFlipdishRestricted'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const FIELD_TYPE_TEXT = 'Text';
    const FIELD_TYPE_TEXT_AREA = 'TextArea';
    const FIELD_TYPE_INTEGER = 'Integer';
    const FIELD_TYPE_DECIMAL = 'Decimal';
    const FIELD_TYPE_DATE = 'Date';
    const FIELD_TYPE_DATE_TIME = 'DateTime';
    const FIELD_TYPE_TIME = 'Time';
    const FIELD_TYPE_SELECT = 'Select';
    const FIELD_TYPE_BOOLEAN = 'Boolean';
    const FIELD_TYPE_ACTION_BUTTON = 'ActionButton';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getFieldTypeAllowableValues()
    {
        return [
            self::FIELD_TYPE_TEXT,
            self::FIELD_TYPE_TEXT_AREA,
            self::FIELD_TYPE_INTEGER,
            self::FIELD_TYPE_DECIMAL,
            self::FIELD_TYPE_DATE,
            self::FIELD_TYPE_DATE_TIME,
            self::FIELD_TYPE_TIME,
            self::FIELD_TYPE_SELECT,
            self::FIELD_TYPE_BOOLEAN,
            self::FIELD_TYPE_ACTION_BUTTON,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['key'] = isset($data['key']) ? $data['key'] : null;
        $this->container['tooltip'] = isset($data['tooltip']) ? $data['tooltip'] : null;
        $this->container['position'] = isset($data['position']) ? $data['position'] : null;
        $this->container['default_value'] = isset($data['default_value']) ? $data['default_value'] : null;
        $this->container['valid_values'] = isset($data['valid_values']) ? $data['valid_values'] : null;
        $this->container['validation_regex'] = isset($data['validation_regex']) ? $data['validation_regex'] : null;
        $this->container['field_type'] = isset($data['field_type']) ? $data['field_type'] : null;
        $this->container['is_flipdish_restricted'] = isset($data['is_flipdish_restricted']) ? $data['is_flipdish_restricted'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ($this->container['description'] === null) {
            $invalidProperties[] = "'description' can't be null";
        }
        if ($this->container['key'] === null) {
            $invalidProperties[] = "'key' can't be null";
        }
        if ($this->container['position'] === null) {
            $invalidProperties[] = "'position' can't be null";
        }
        if (($this->container['position'] > 1000)) {
            $invalidProperties[] = "invalid value for 'position', must be smaller than or equal to 1000.";
        }

        if (($this->container['position'] < 1)) {
            $invalidProperties[] = "invalid value for 'position', must be bigger than or equal to 1.";
        }

        if ($this->container['field_type'] === null) {
            $invalidProperties[] = "'field_type' can't be null";
        }
        $allowedValues = $this->getFieldTypeAllowableValues();
        if (!is_null($this->container['field_type']) && !in_array($this->container['field_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'field_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description description
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets key
     *
     * @return string
     */
    public function getKey()
    {
        return $this->container['key'];
    }

    /**
     * Sets key
     *
     * @param string $key key
     *
     * @return $this
     */
    public function setKey($key)
    {
        $this->container['key'] = $key;

        return $this;
    }

    /**
     * Gets tooltip
     *
     * @return string
     */
    public function getTooltip()
    {
        return $this->container['tooltip'];
    }

    /**
     * Sets tooltip
     *
     * @param string $tooltip tooltip
     *
     * @return $this
     */
    public function setTooltip($tooltip)
    {
        $this->container['tooltip'] = $tooltip;

        return $this;
    }

    /**
     * Gets position
     *
     * @return int
     */
    public function getPosition()
    {
        return $this->container['position'];
    }

    /**
     * Sets position
     *
     * @param int $position position
     *
     * @return $this
     */
    public function setPosition($position)
    {

        if (($position > 1000)) {
            throw new \InvalidArgumentException('invalid value for $position when calling Field., must be smaller than or equal to 1000.');
        }
        if (($position < 1)) {
            throw new \InvalidArgumentException('invalid value for $position when calling Field., must be bigger than or equal to 1.');
        }

        $this->container['position'] = $position;

        return $this;
    }

    /**
     * Gets default_value
     *
     * @return string
     */
    public function getDefaultValue()
    {
        return $this->container['default_value'];
    }

    /**
     * Sets default_value
     *
     * @param string $default_value default_value
     *
     * @return $this
     */
    public function setDefaultValue($default_value)
    {
        $this->container['default_value'] = $default_value;

        return $this;
    }

    /**
     * Gets valid_values
     *
     * @return \Flipdish\\Client\Models\ValidValue[]
     */
    public function getValidValues()
    {
        return $this->container['valid_values'];
    }

    /**
     * Sets valid_values
     *
     * @param \Flipdish\\Client\Models\ValidValue[] $valid_values valid_values
     *
     * @return $this
     */
    public function setValidValues($valid_values)
    {
        $this->container['valid_values'] = $valid_values;

        return $this;
    }

    /**
     * Gets validation_regex
     *
     * @return string
     */
    public function getValidationRegex()
    {
        return $this->container['validation_regex'];
    }

    /**
     * Sets validation_regex
     *
     * @param string $validation_regex validation_regex
     *
     * @return $this
     */
    public function setValidationRegex($validation_regex)
    {
        $this->container['validation_regex'] = $validation_regex;

        return $this;
    }

    /**
     * Gets field_type
     *
     * @return string
     */
    public function getFieldType()
    {
        return $this->container['field_type'];
    }

    /**
     * Sets field_type
     *
     * @param string $field_type field_type
     *
     * @return $this
     */
    public function setFieldType($field_type)
    {
        $allowedValues = $this->getFieldTypeAllowableValues();
        if (!in_array($field_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'field_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['field_type'] = $field_type;

        return $this;
    }

    /**
     * Gets is_flipdish_restricted
     *
     * @return bool
     */
    public function getIsFlipdishRestricted()
    {
        return $this->container['is_flipdish_restricted'];
    }

    /**
     * Sets is_flipdish_restricted
     *
     * @param bool $is_flipdish_restricted is_flipdish_restricted
     *
     * @return $this
     */
    public function setIsFlipdishRestricted($is_flipdish_restricted)
    {
        $this->container['is_flipdish_restricted'] = $is_flipdish_restricted;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


