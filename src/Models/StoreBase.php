<?php
/**
 * StoreBase
 *
 * PHP version 5
 *
 * @category Class
 * @package  Flipdish\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Flipdish Open API v1.0
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.2
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Flipdish\Client\Models;

use \ArrayAccess;
use \Flipdish\Client\ObjectSerializer;

/**
 * StoreBase Class Doc Comment
 *
 * @category Class
 * @description Store Base
 * @package  Flipdish\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class StoreBase implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'StoreBase';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'phone_number' => 'string',
        'always_appear_open' => 'bool',
        'pre_order_enabled' => 'bool',
        'take_out_enabled' => 'bool',
        'table_service_enabled' => 'bool',
        'dine_in_enabled' => 'bool',
        'allow_pre_orders_and_table_service' => 'bool',
        'pickup_enabled' => 'bool',
        'delivery_enabled' => 'bool',
        'card_order_delivery_enabled' => 'bool',
        'cash_orders_delivery_enabled' => 'bool',
        'card_orders_pickup_enabled' => 'bool',
        'cash_orders_pickup_enabled' => 'bool',
        'tips_enabled' => 'bool',
        'automatically_accept_orders' => 'bool',
        'open_for_delivery' => 'bool',
        'open_for_pickup' => 'bool',
        'minimum_pickup_order_amount' => 'double',
        'require_customer_name_for_pickup' => 'bool',
        'gdpr_customer_phone_numbers' => 'bool',
        'require_customer_name_for_delivery' => 'bool',
        'eta_in_pickup_confirmation_sms_enabled' => 'bool',
        'eta_in_delivery_confirmation_sms_enabled' => 'bool',
        'name' => 'string',
        'email_address' => 'string',
        'staff_language' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'phone_number' => null,
        'always_appear_open' => null,
        'pre_order_enabled' => null,
        'take_out_enabled' => null,
        'table_service_enabled' => null,
        'dine_in_enabled' => null,
        'allow_pre_orders_and_table_service' => null,
        'pickup_enabled' => null,
        'delivery_enabled' => null,
        'card_order_delivery_enabled' => null,
        'cash_orders_delivery_enabled' => null,
        'card_orders_pickup_enabled' => null,
        'cash_orders_pickup_enabled' => null,
        'tips_enabled' => null,
        'automatically_accept_orders' => null,
        'open_for_delivery' => null,
        'open_for_pickup' => null,
        'minimum_pickup_order_amount' => 'double',
        'require_customer_name_for_pickup' => null,
        'gdpr_customer_phone_numbers' => null,
        'require_customer_name_for_delivery' => null,
        'eta_in_pickup_confirmation_sms_enabled' => null,
        'eta_in_delivery_confirmation_sms_enabled' => null,
        'name' => null,
        'email_address' => null,
        'staff_language' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'phone_number' => 'PhoneNumber',
        'always_appear_open' => 'AlwaysAppearOpen',
        'pre_order_enabled' => 'PreOrderEnabled',
        'take_out_enabled' => 'TakeOutEnabled',
        'table_service_enabled' => 'TableServiceEnabled',
        'dine_in_enabled' => 'DineInEnabled',
        'allow_pre_orders_and_table_service' => 'AllowPreOrdersAndTableService',
        'pickup_enabled' => 'PickupEnabled',
        'delivery_enabled' => 'DeliveryEnabled',
        'card_order_delivery_enabled' => 'CardOrderDeliveryEnabled',
        'cash_orders_delivery_enabled' => 'CashOrdersDeliveryEnabled',
        'card_orders_pickup_enabled' => 'CardOrdersPickupEnabled',
        'cash_orders_pickup_enabled' => 'CashOrdersPickupEnabled',
        'tips_enabled' => 'TipsEnabled',
        'automatically_accept_orders' => 'AutomaticallyAcceptOrders',
        'open_for_delivery' => 'OpenForDelivery',
        'open_for_pickup' => 'OpenForPickup',
        'minimum_pickup_order_amount' => 'MinimumPickupOrderAmount',
        'require_customer_name_for_pickup' => 'RequireCustomerNameForPickup',
        'gdpr_customer_phone_numbers' => 'GdprCustomerPhoneNumbers',
        'require_customer_name_for_delivery' => 'RequireCustomerNameForDelivery',
        'eta_in_pickup_confirmation_sms_enabled' => 'EtaInPickupConfirmationSmsEnabled',
        'eta_in_delivery_confirmation_sms_enabled' => 'EtaInDeliveryConfirmationSmsEnabled',
        'name' => 'Name',
        'email_address' => 'EmailAddress',
        'staff_language' => 'StaffLanguage'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'phone_number' => 'setPhoneNumber',
        'always_appear_open' => 'setAlwaysAppearOpen',
        'pre_order_enabled' => 'setPreOrderEnabled',
        'take_out_enabled' => 'setTakeOutEnabled',
        'table_service_enabled' => 'setTableServiceEnabled',
        'dine_in_enabled' => 'setDineInEnabled',
        'allow_pre_orders_and_table_service' => 'setAllowPreOrdersAndTableService',
        'pickup_enabled' => 'setPickupEnabled',
        'delivery_enabled' => 'setDeliveryEnabled',
        'card_order_delivery_enabled' => 'setCardOrderDeliveryEnabled',
        'cash_orders_delivery_enabled' => 'setCashOrdersDeliveryEnabled',
        'card_orders_pickup_enabled' => 'setCardOrdersPickupEnabled',
        'cash_orders_pickup_enabled' => 'setCashOrdersPickupEnabled',
        'tips_enabled' => 'setTipsEnabled',
        'automatically_accept_orders' => 'setAutomaticallyAcceptOrders',
        'open_for_delivery' => 'setOpenForDelivery',
        'open_for_pickup' => 'setOpenForPickup',
        'minimum_pickup_order_amount' => 'setMinimumPickupOrderAmount',
        'require_customer_name_for_pickup' => 'setRequireCustomerNameForPickup',
        'gdpr_customer_phone_numbers' => 'setGdprCustomerPhoneNumbers',
        'require_customer_name_for_delivery' => 'setRequireCustomerNameForDelivery',
        'eta_in_pickup_confirmation_sms_enabled' => 'setEtaInPickupConfirmationSmsEnabled',
        'eta_in_delivery_confirmation_sms_enabled' => 'setEtaInDeliveryConfirmationSmsEnabled',
        'name' => 'setName',
        'email_address' => 'setEmailAddress',
        'staff_language' => 'setStaffLanguage'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'phone_number' => 'getPhoneNumber',
        'always_appear_open' => 'getAlwaysAppearOpen',
        'pre_order_enabled' => 'getPreOrderEnabled',
        'take_out_enabled' => 'getTakeOutEnabled',
        'table_service_enabled' => 'getTableServiceEnabled',
        'dine_in_enabled' => 'getDineInEnabled',
        'allow_pre_orders_and_table_service' => 'getAllowPreOrdersAndTableService',
        'pickup_enabled' => 'getPickupEnabled',
        'delivery_enabled' => 'getDeliveryEnabled',
        'card_order_delivery_enabled' => 'getCardOrderDeliveryEnabled',
        'cash_orders_delivery_enabled' => 'getCashOrdersDeliveryEnabled',
        'card_orders_pickup_enabled' => 'getCardOrdersPickupEnabled',
        'cash_orders_pickup_enabled' => 'getCashOrdersPickupEnabled',
        'tips_enabled' => 'getTipsEnabled',
        'automatically_accept_orders' => 'getAutomaticallyAcceptOrders',
        'open_for_delivery' => 'getOpenForDelivery',
        'open_for_pickup' => 'getOpenForPickup',
        'minimum_pickup_order_amount' => 'getMinimumPickupOrderAmount',
        'require_customer_name_for_pickup' => 'getRequireCustomerNameForPickup',
        'gdpr_customer_phone_numbers' => 'getGdprCustomerPhoneNumbers',
        'require_customer_name_for_delivery' => 'getRequireCustomerNameForDelivery',
        'eta_in_pickup_confirmation_sms_enabled' => 'getEtaInPickupConfirmationSmsEnabled',
        'eta_in_delivery_confirmation_sms_enabled' => 'getEtaInDeliveryConfirmationSmsEnabled',
        'name' => 'getName',
        'email_address' => 'getEmailAddress',
        'staff_language' => 'getStaffLanguage'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['phone_number'] = isset($data['phone_number']) ? $data['phone_number'] : null;
        $this->container['always_appear_open'] = isset($data['always_appear_open']) ? $data['always_appear_open'] : null;
        $this->container['pre_order_enabled'] = isset($data['pre_order_enabled']) ? $data['pre_order_enabled'] : null;
        $this->container['take_out_enabled'] = isset($data['take_out_enabled']) ? $data['take_out_enabled'] : null;
        $this->container['table_service_enabled'] = isset($data['table_service_enabled']) ? $data['table_service_enabled'] : null;
        $this->container['dine_in_enabled'] = isset($data['dine_in_enabled']) ? $data['dine_in_enabled'] : null;
        $this->container['allow_pre_orders_and_table_service'] = isset($data['allow_pre_orders_and_table_service']) ? $data['allow_pre_orders_and_table_service'] : null;
        $this->container['pickup_enabled'] = isset($data['pickup_enabled']) ? $data['pickup_enabled'] : null;
        $this->container['delivery_enabled'] = isset($data['delivery_enabled']) ? $data['delivery_enabled'] : null;
        $this->container['card_order_delivery_enabled'] = isset($data['card_order_delivery_enabled']) ? $data['card_order_delivery_enabled'] : null;
        $this->container['cash_orders_delivery_enabled'] = isset($data['cash_orders_delivery_enabled']) ? $data['cash_orders_delivery_enabled'] : null;
        $this->container['card_orders_pickup_enabled'] = isset($data['card_orders_pickup_enabled']) ? $data['card_orders_pickup_enabled'] : null;
        $this->container['cash_orders_pickup_enabled'] = isset($data['cash_orders_pickup_enabled']) ? $data['cash_orders_pickup_enabled'] : null;
        $this->container['tips_enabled'] = isset($data['tips_enabled']) ? $data['tips_enabled'] : null;
        $this->container['automatically_accept_orders'] = isset($data['automatically_accept_orders']) ? $data['automatically_accept_orders'] : null;
        $this->container['open_for_delivery'] = isset($data['open_for_delivery']) ? $data['open_for_delivery'] : null;
        $this->container['open_for_pickup'] = isset($data['open_for_pickup']) ? $data['open_for_pickup'] : null;
        $this->container['minimum_pickup_order_amount'] = isset($data['minimum_pickup_order_amount']) ? $data['minimum_pickup_order_amount'] : null;
        $this->container['require_customer_name_for_pickup'] = isset($data['require_customer_name_for_pickup']) ? $data['require_customer_name_for_pickup'] : null;
        $this->container['gdpr_customer_phone_numbers'] = isset($data['gdpr_customer_phone_numbers']) ? $data['gdpr_customer_phone_numbers'] : null;
        $this->container['require_customer_name_for_delivery'] = isset($data['require_customer_name_for_delivery']) ? $data['require_customer_name_for_delivery'] : null;
        $this->container['eta_in_pickup_confirmation_sms_enabled'] = isset($data['eta_in_pickup_confirmation_sms_enabled']) ? $data['eta_in_pickup_confirmation_sms_enabled'] : null;
        $this->container['eta_in_delivery_confirmation_sms_enabled'] = isset($data['eta_in_delivery_confirmation_sms_enabled']) ? $data['eta_in_delivery_confirmation_sms_enabled'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['email_address'] = isset($data['email_address']) ? $data['email_address'] : null;
        $this->container['staff_language'] = isset($data['staff_language']) ? $data['staff_language'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['email_address']) && (mb_strlen($this->container['email_address']) > 100)) {
            $invalidProperties[] = "invalid value for 'email_address', the character length must be smaller than or equal to 100.";
        }

        if (!is_null($this->container['email_address']) && (mb_strlen($this->container['email_address']) < 0)) {
            $invalidProperties[] = "invalid value for 'email_address', the character length must be bigger than or equal to 0.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets phone_number
     *
     * @return string
     */
    public function getPhoneNumber()
    {
        return $this->container['phone_number'];
    }

    /**
     * Sets phone_number
     *
     * @param string $phone_number Phone number
     *
     * @return $this
     */
    public function setPhoneNumber($phone_number)
    {
        $this->container['phone_number'] = $phone_number;

        return $this;
    }

    /**
     * Gets always_appear_open
     *
     * @return bool
     */
    public function getAlwaysAppearOpen()
    {
        return $this->container['always_appear_open'];
    }

    /**
     * Sets always_appear_open
     *
     * @param bool $always_appear_open True if the store always appears open
     *
     * @return $this
     */
    public function setAlwaysAppearOpen($always_appear_open)
    {
        $this->container['always_appear_open'] = $always_appear_open;

        return $this;
    }

    /**
     * Gets pre_order_enabled
     *
     * @return bool
     */
    public function getPreOrderEnabled()
    {
        return $this->container['pre_order_enabled'];
    }

    /**
     * Sets pre_order_enabled
     *
     * @param bool $pre_order_enabled True if the store accepts pre-orders
     *
     * @return $this
     */
    public function setPreOrderEnabled($pre_order_enabled)
    {
        $this->container['pre_order_enabled'] = $pre_order_enabled;

        return $this;
    }

    /**
     * Gets take_out_enabled
     *
     * @return bool
     */
    public function getTakeOutEnabled()
    {
        return $this->container['take_out_enabled'];
    }

    /**
     * Sets take_out_enabled
     *
     * @param bool $take_out_enabled True if the store accepts take-out orders
     *
     * @return $this
     */
    public function setTakeOutEnabled($take_out_enabled)
    {
        $this->container['take_out_enabled'] = $take_out_enabled;

        return $this;
    }

    /**
     * Gets table_service_enabled
     *
     * @return bool
     */
    public function getTableServiceEnabled()
    {
        return $this->container['table_service_enabled'];
    }

    /**
     * Sets table_service_enabled
     *
     * @param bool $table_service_enabled True if the store has table service
     *
     * @return $this
     */
    public function setTableServiceEnabled($table_service_enabled)
    {
        $this->container['table_service_enabled'] = $table_service_enabled;

        return $this;
    }

    /**
     * Gets dine_in_enabled
     *
     * @return bool
     */
    public function getDineInEnabled()
    {
        return $this->container['dine_in_enabled'];
    }

    /**
     * Sets dine_in_enabled
     *
     * @param bool $dine_in_enabled True if the store accepts dine-in orders
     *
     * @return $this
     */
    public function setDineInEnabled($dine_in_enabled)
    {
        $this->container['dine_in_enabled'] = $dine_in_enabled;

        return $this;
    }

    /**
     * Gets allow_pre_orders_and_table_service
     *
     * @return bool
     */
    public function getAllowPreOrdersAndTableService()
    {
        return $this->container['allow_pre_orders_and_table_service'];
    }

    /**
     * Sets allow_pre_orders_and_table_service
     *
     * @param bool $allow_pre_orders_and_table_service True if both pre-orders and talbe service can be enabled
     *
     * @return $this
     */
    public function setAllowPreOrdersAndTableService($allow_pre_orders_and_table_service)
    {
        $this->container['allow_pre_orders_and_table_service'] = $allow_pre_orders_and_table_service;

        return $this;
    }

    /**
     * Gets pickup_enabled
     *
     * @return bool
     */
    public function getPickupEnabled()
    {
        return $this->container['pickup_enabled'];
    }

    /**
     * Sets pickup_enabled
     *
     * @param bool $pickup_enabled True if the store accepts pickup orders
     *
     * @return $this
     */
    public function setPickupEnabled($pickup_enabled)
    {
        $this->container['pickup_enabled'] = $pickup_enabled;

        return $this;
    }

    /**
     * Gets delivery_enabled
     *
     * @return bool
     */
    public function getDeliveryEnabled()
    {
        return $this->container['delivery_enabled'];
    }

    /**
     * Sets delivery_enabled
     *
     * @param bool $delivery_enabled True if the store accepts delivery orders
     *
     * @return $this
     */
    public function setDeliveryEnabled($delivery_enabled)
    {
        $this->container['delivery_enabled'] = $delivery_enabled;

        return $this;
    }

    /**
     * Gets card_order_delivery_enabled
     *
     * @return bool
     */
    public function getCardOrderDeliveryEnabled()
    {
        return $this->container['card_order_delivery_enabled'];
    }

    /**
     * Sets card_order_delivery_enabled
     *
     * @param bool $card_order_delivery_enabled True if the store accepts card payment for delivery orders
     *
     * @return $this
     */
    public function setCardOrderDeliveryEnabled($card_order_delivery_enabled)
    {
        $this->container['card_order_delivery_enabled'] = $card_order_delivery_enabled;

        return $this;
    }

    /**
     * Gets cash_orders_delivery_enabled
     *
     * @return bool
     */
    public function getCashOrdersDeliveryEnabled()
    {
        return $this->container['cash_orders_delivery_enabled'];
    }

    /**
     * Sets cash_orders_delivery_enabled
     *
     * @param bool $cash_orders_delivery_enabled True if the store accepts cash payment for delivery orders
     *
     * @return $this
     */
    public function setCashOrdersDeliveryEnabled($cash_orders_delivery_enabled)
    {
        $this->container['cash_orders_delivery_enabled'] = $cash_orders_delivery_enabled;

        return $this;
    }

    /**
     * Gets card_orders_pickup_enabled
     *
     * @return bool
     */
    public function getCardOrdersPickupEnabled()
    {
        return $this->container['card_orders_pickup_enabled'];
    }

    /**
     * Sets card_orders_pickup_enabled
     *
     * @param bool $card_orders_pickup_enabled True if the store accepts card payment for pickup orders
     *
     * @return $this
     */
    public function setCardOrdersPickupEnabled($card_orders_pickup_enabled)
    {
        $this->container['card_orders_pickup_enabled'] = $card_orders_pickup_enabled;

        return $this;
    }

    /**
     * Gets cash_orders_pickup_enabled
     *
     * @return bool
     */
    public function getCashOrdersPickupEnabled()
    {
        return $this->container['cash_orders_pickup_enabled'];
    }

    /**
     * Sets cash_orders_pickup_enabled
     *
     * @param bool $cash_orders_pickup_enabled True if the store accepts cash payment for pickup orders
     *
     * @return $this
     */
    public function setCashOrdersPickupEnabled($cash_orders_pickup_enabled)
    {
        $this->container['cash_orders_pickup_enabled'] = $cash_orders_pickup_enabled;

        return $this;
    }

    /**
     * Gets tips_enabled
     *
     * @return bool
     */
    public function getTipsEnabled()
    {
        return $this->container['tips_enabled'];
    }

    /**
     * Sets tips_enabled
     *
     * @param bool $tips_enabled True if the store accepts tips
     *
     * @return $this
     */
    public function setTipsEnabled($tips_enabled)
    {
        $this->container['tips_enabled'] = $tips_enabled;

        return $this;
    }

    /**
     * Gets automatically_accept_orders
     *
     * @return bool
     */
    public function getAutomaticallyAcceptOrders()
    {
        return $this->container['automatically_accept_orders'];
    }

    /**
     * Sets automatically_accept_orders
     *
     * @param bool $automatically_accept_orders True if the stores orders are automatically accepted in Flipdish
     *
     * @return $this
     */
    public function setAutomaticallyAcceptOrders($automatically_accept_orders)
    {
        $this->container['automatically_accept_orders'] = $automatically_accept_orders;

        return $this;
    }

    /**
     * Gets open_for_delivery
     *
     * @return bool
     */
    public function getOpenForDelivery()
    {
        return $this->container['open_for_delivery'];
    }

    /**
     * Sets open_for_delivery
     *
     * @param bool $open_for_delivery True if the store is open for delivery
     *
     * @return $this
     */
    public function setOpenForDelivery($open_for_delivery)
    {
        $this->container['open_for_delivery'] = $open_for_delivery;

        return $this;
    }

    /**
     * Gets open_for_pickup
     *
     * @return bool
     */
    public function getOpenForPickup()
    {
        return $this->container['open_for_pickup'];
    }

    /**
     * Sets open_for_pickup
     *
     * @param bool $open_for_pickup True if the store is open for pickup
     *
     * @return $this
     */
    public function setOpenForPickup($open_for_pickup)
    {
        $this->container['open_for_pickup'] = $open_for_pickup;

        return $this;
    }

    /**
     * Gets minimum_pickup_order_amount
     *
     * @return double
     */
    public function getMinimumPickupOrderAmount()
    {
        return $this->container['minimum_pickup_order_amount'];
    }

    /**
     * Sets minimum_pickup_order_amount
     *
     * @param double $minimum_pickup_order_amount Minimum pickup order amount
     *
     * @return $this
     */
    public function setMinimumPickupOrderAmount($minimum_pickup_order_amount)
    {
        $this->container['minimum_pickup_order_amount'] = $minimum_pickup_order_amount;

        return $this;
    }

    /**
     * Gets require_customer_name_for_pickup
     *
     * @return bool
     */
    public function getRequireCustomerNameForPickup()
    {
        return $this->container['require_customer_name_for_pickup'];
    }

    /**
     * Sets require_customer_name_for_pickup
     *
     * @param bool $require_customer_name_for_pickup True if customer name required for pickup orders
     *
     * @return $this
     */
    public function setRequireCustomerNameForPickup($require_customer_name_for_pickup)
    {
        $this->container['require_customer_name_for_pickup'] = $require_customer_name_for_pickup;

        return $this;
    }

    /**
     * Gets gdpr_customer_phone_numbers
     *
     * @return bool
     */
    public function getGdprCustomerPhoneNumbers()
    {
        return $this->container['gdpr_customer_phone_numbers'];
    }

    /**
     * Sets gdpr_customer_phone_numbers
     *
     * @param bool $gdpr_customer_phone_numbers Mask your customers phone numbers printed on receipts and reduce the amout of personally identifiable customer information that is exposed.
     *
     * @return $this
     */
    public function setGdprCustomerPhoneNumbers($gdpr_customer_phone_numbers)
    {
        $this->container['gdpr_customer_phone_numbers'] = $gdpr_customer_phone_numbers;

        return $this;
    }

    /**
     * Gets require_customer_name_for_delivery
     *
     * @return bool
     */
    public function getRequireCustomerNameForDelivery()
    {
        return $this->container['require_customer_name_for_delivery'];
    }

    /**
     * Sets require_customer_name_for_delivery
     *
     * @param bool $require_customer_name_for_delivery True if customer name required for delivery orders
     *
     * @return $this
     */
    public function setRequireCustomerNameForDelivery($require_customer_name_for_delivery)
    {
        $this->container['require_customer_name_for_delivery'] = $require_customer_name_for_delivery;

        return $this;
    }

    /**
     * Gets eta_in_pickup_confirmation_sms_enabled
     *
     * @return bool
     */
    public function getEtaInPickupConfirmationSmsEnabled()
    {
        return $this->container['eta_in_pickup_confirmation_sms_enabled'];
    }

    /**
     * Sets eta_in_pickup_confirmation_sms_enabled
     *
     * @param bool $eta_in_pickup_confirmation_sms_enabled True if order confirmation sms includes estimated time when order will be ready for collection
     *
     * @return $this
     */
    public function setEtaInPickupConfirmationSmsEnabled($eta_in_pickup_confirmation_sms_enabled)
    {
        $this->container['eta_in_pickup_confirmation_sms_enabled'] = $eta_in_pickup_confirmation_sms_enabled;

        return $this;
    }

    /**
     * Gets eta_in_delivery_confirmation_sms_enabled
     *
     * @return bool
     */
    public function getEtaInDeliveryConfirmationSmsEnabled()
    {
        return $this->container['eta_in_delivery_confirmation_sms_enabled'];
    }

    /**
     * Sets eta_in_delivery_confirmation_sms_enabled
     *
     * @param bool $eta_in_delivery_confirmation_sms_enabled True if order confirmation sms includes estimated time when order will delivered
     *
     * @return $this
     */
    public function setEtaInDeliveryConfirmationSmsEnabled($eta_in_delivery_confirmation_sms_enabled)
    {
        $this->container['eta_in_delivery_confirmation_sms_enabled'] = $eta_in_delivery_confirmation_sms_enabled;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name Name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets email_address
     *
     * @return string
     */
    public function getEmailAddress()
    {
        return $this->container['email_address'];
    }

    /**
     * Sets email_address
     *
     * @param string $email_address Email address (visible to customers)
     *
     * @return $this
     */
    public function setEmailAddress($email_address)
    {
        if (!is_null($email_address) && (mb_strlen($email_address) > 100)) {
            throw new \InvalidArgumentException('invalid length for $email_address when calling StoreBase., must be smaller than or equal to 100.');
        }
        if (!is_null($email_address) && (mb_strlen($email_address) < 0)) {
            throw new \InvalidArgumentException('invalid length for $email_address when calling StoreBase., must be bigger than or equal to 0.');
        }

        $this->container['email_address'] = $email_address;

        return $this;
    }

    /**
     * Gets staff_language
     *
     * @return string
     */
    public function getStaffLanguage()
    {
        return $this->container['staff_language'];
    }

    /**
     * Sets staff_language
     *
     * @param string $staff_language Staff Language (used for communcation with the staff)  Emails, Printouts etc
     *
     * @return $this
     */
    public function setStaffLanguage($staff_language)
    {
        $this->container['staff_language'] = $staff_language;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


