<?php
/**
 * JobResponse
 *
 * PHP version 5
 *
 * @category Class
 * @package  Flipdish\\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Flipdish Open API v1.0
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.19
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Flipdish\\Client\Models;

use \ArrayAccess;
use \Flipdish\\Client\ObjectSerializer;

/**
 * JobResponse Class Doc Comment
 *
 * @category Class
 * @description Job Response
 * @package  Flipdish\\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class JobResponse implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'JobResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'created_at' => '\DateTime',
        'status' => 'string',
        'package_type' => 'string',
        'transport_type' => 'string',
        'assignment_code' => 'string',
        'pickup_at' => 'string',
        'dropoff_at' => 'string',
        'comment' => 'string',
        'distance' => 'double',
        'duration' => 'int',
        'deliveries' => '\Flipdish\\Client\Models\JobDelivery[]',
        'pricing' => '\Flipdish\\Client\Models\JobPricing',
        'driver' => '\Flipdish\\Client\Models\JobDriver'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => 'int32',
        'created_at' => 'date-time',
        'status' => null,
        'package_type' => null,
        'transport_type' => null,
        'assignment_code' => null,
        'pickup_at' => null,
        'dropoff_at' => null,
        'comment' => null,
        'distance' => 'double',
        'duration' => 'int32',
        'deliveries' => null,
        'pricing' => null,
        'driver' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'Id',
        'created_at' => 'CreatedAt',
        'status' => 'Status',
        'package_type' => 'PackageType',
        'transport_type' => 'TransportType',
        'assignment_code' => 'AssignmentCode',
        'pickup_at' => 'PickupAt',
        'dropoff_at' => 'DropoffAt',
        'comment' => 'Comment',
        'distance' => 'Distance',
        'duration' => 'Duration',
        'deliveries' => 'Deliveries',
        'pricing' => 'Pricing',
        'driver' => 'Driver'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'created_at' => 'setCreatedAt',
        'status' => 'setStatus',
        'package_type' => 'setPackageType',
        'transport_type' => 'setTransportType',
        'assignment_code' => 'setAssignmentCode',
        'pickup_at' => 'setPickupAt',
        'dropoff_at' => 'setDropoffAt',
        'comment' => 'setComment',
        'distance' => 'setDistance',
        'duration' => 'setDuration',
        'deliveries' => 'setDeliveries',
        'pricing' => 'setPricing',
        'driver' => 'setDriver'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'created_at' => 'getCreatedAt',
        'status' => 'getStatus',
        'package_type' => 'getPackageType',
        'transport_type' => 'getTransportType',
        'assignment_code' => 'getAssignmentCode',
        'pickup_at' => 'getPickupAt',
        'dropoff_at' => 'getDropoffAt',
        'comment' => 'getComment',
        'distance' => 'getDistance',
        'duration' => 'getDuration',
        'deliveries' => 'getDeliveries',
        'pricing' => 'getPricing',
        'driver' => 'getDriver'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['created_at'] = isset($data['created_at']) ? $data['created_at'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['package_type'] = isset($data['package_type']) ? $data['package_type'] : null;
        $this->container['transport_type'] = isset($data['transport_type']) ? $data['transport_type'] : null;
        $this->container['assignment_code'] = isset($data['assignment_code']) ? $data['assignment_code'] : null;
        $this->container['pickup_at'] = isset($data['pickup_at']) ? $data['pickup_at'] : null;
        $this->container['dropoff_at'] = isset($data['dropoff_at']) ? $data['dropoff_at'] : null;
        $this->container['comment'] = isset($data['comment']) ? $data['comment'] : null;
        $this->container['distance'] = isset($data['distance']) ? $data['distance'] : null;
        $this->container['duration'] = isset($data['duration']) ? $data['duration'] : null;
        $this->container['deliveries'] = isset($data['deliveries']) ? $data['deliveries'] : null;
        $this->container['pricing'] = isset($data['pricing']) ? $data['pricing'] : null;
        $this->container['driver'] = isset($data['driver']) ? $data['driver'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id Id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return \DateTime
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param \DateTime $created_at Created At
     *
     * @return $this
     */
    public function setCreatedAt($created_at)
    {
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status Status
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets package_type
     *
     * @return string
     */
    public function getPackageType()
    {
        return $this->container['package_type'];
    }

    /**
     * Sets package_type
     *
     * @param string $package_type Package Type
     *
     * @return $this
     */
    public function setPackageType($package_type)
    {
        $this->container['package_type'] = $package_type;

        return $this;
    }

    /**
     * Gets transport_type
     *
     * @return string
     */
    public function getTransportType()
    {
        return $this->container['transport_type'];
    }

    /**
     * Sets transport_type
     *
     * @param string $transport_type Transport Type
     *
     * @return $this
     */
    public function setTransportType($transport_type)
    {
        $this->container['transport_type'] = $transport_type;

        return $this;
    }

    /**
     * Gets assignment_code
     *
     * @return string
     */
    public function getAssignmentCode()
    {
        return $this->container['assignment_code'];
    }

    /**
     * Sets assignment_code
     *
     * @param string $assignment_code Assignment Code
     *
     * @return $this
     */
    public function setAssignmentCode($assignment_code)
    {
        $this->container['assignment_code'] = $assignment_code;

        return $this;
    }

    /**
     * Gets pickup_at
     *
     * @return string
     */
    public function getPickupAt()
    {
        return $this->container['pickup_at'];
    }

    /**
     * Sets pickup_at
     *
     * @param string $pickup_at Pickup At
     *
     * @return $this
     */
    public function setPickupAt($pickup_at)
    {
        $this->container['pickup_at'] = $pickup_at;

        return $this;
    }

    /**
     * Gets dropoff_at
     *
     * @return string
     */
    public function getDropoffAt()
    {
        return $this->container['dropoff_at'];
    }

    /**
     * Sets dropoff_at
     *
     * @param string $dropoff_at Dropoff At
     *
     * @return $this
     */
    public function setDropoffAt($dropoff_at)
    {
        $this->container['dropoff_at'] = $dropoff_at;

        return $this;
    }

    /**
     * Gets comment
     *
     * @return string
     */
    public function getComment()
    {
        return $this->container['comment'];
    }

    /**
     * Sets comment
     *
     * @param string $comment Comment
     *
     * @return $this
     */
    public function setComment($comment)
    {
        $this->container['comment'] = $comment;

        return $this;
    }

    /**
     * Gets distance
     *
     * @return double
     */
    public function getDistance()
    {
        return $this->container['distance'];
    }

    /**
     * Sets distance
     *
     * @param double $distance Distance
     *
     * @return $this
     */
    public function setDistance($distance)
    {
        $this->container['distance'] = $distance;

        return $this;
    }

    /**
     * Gets duration
     *
     * @return int
     */
    public function getDuration()
    {
        return $this->container['duration'];
    }

    /**
     * Sets duration
     *
     * @param int $duration Duration
     *
     * @return $this
     */
    public function setDuration($duration)
    {
        $this->container['duration'] = $duration;

        return $this;
    }

    /**
     * Gets deliveries
     *
     * @return \Flipdish\\Client\Models\JobDelivery[]
     */
    public function getDeliveries()
    {
        return $this->container['deliveries'];
    }

    /**
     * Sets deliveries
     *
     * @param \Flipdish\\Client\Models\JobDelivery[] $deliveries Deliveries
     *
     * @return $this
     */
    public function setDeliveries($deliveries)
    {
        $this->container['deliveries'] = $deliveries;

        return $this;
    }

    /**
     * Gets pricing
     *
     * @return \Flipdish\\Client\Models\JobPricing
     */
    public function getPricing()
    {
        return $this->container['pricing'];
    }

    /**
     * Sets pricing
     *
     * @param \Flipdish\\Client\Models\JobPricing $pricing Pricing
     *
     * @return $this
     */
    public function setPricing($pricing)
    {
        $this->container['pricing'] = $pricing;

        return $this;
    }

    /**
     * Gets driver
     *
     * @return \Flipdish\\Client\Models\JobDriver
     */
    public function getDriver()
    {
        return $this->container['driver'];
    }

    /**
     * Sets driver
     *
     * @param \Flipdish\\Client\Models\JobDriver $driver Driver
     *
     * @return $this
     */
    public function setDriver($driver)
    {
        $this->container['driver'] = $driver;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


