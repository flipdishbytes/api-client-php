<?php
/**
 * AccountFieldDefinition
 *
 * PHP version 5
 *
 * @category Class
 * @package  Flipdish\\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Flipdish Open API v1.0
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.19
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Flipdish\\Client\Models;

use \ArrayAccess;
use \Flipdish\\Client\ObjectSerializer;

/**
 * AccountFieldDefinition Class Doc Comment
 *
 * @category Class
 * @description Represents the format of a bank account field
 * @package  Flipdish\\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class AccountFieldDefinition implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'AccountFieldDefinition';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'key' => 'string',
        'display_name' => 'string',
        'type' => 'string',
        'min_length' => 'int',
        'max_length' => 'int',
        'digits_only' => 'bool',
        'regex' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'key' => null,
        'display_name' => null,
        'type' => null,
        'min_length' => 'int32',
        'max_length' => 'int32',
        'digits_only' => null,
        'regex' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'key' => 'Key',
        'display_name' => 'DisplayName',
        'type' => 'Type',
        'min_length' => 'MinLength',
        'max_length' => 'MaxLength',
        'digits_only' => 'DigitsOnly',
        'regex' => 'Regex'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'key' => 'setKey',
        'display_name' => 'setDisplayName',
        'type' => 'setType',
        'min_length' => 'setMinLength',
        'max_length' => 'setMaxLength',
        'digits_only' => 'setDigitsOnly',
        'regex' => 'setRegex'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'key' => 'getKey',
        'display_name' => 'getDisplayName',
        'type' => 'getType',
        'min_length' => 'getMinLength',
        'max_length' => 'getMaxLength',
        'digits_only' => 'getDigitsOnly',
        'regex' => 'getRegex'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const KEY_IBAN = 'Iban';
    const KEY_ACCOUNT_NUMBER = 'AccountNumber';
    const KEY_ROUTING_NUMBER = 'RoutingNumber';
    const KEY_BSB = 'BSB';
    const KEY_BRANCH_CODE = 'BranchCode';
    const KEY_BANK_CODE = 'BankCode';
    const KEY_INSTITUTION_NUMBER = 'InstitutionNumber';
    const KEY_TRANSIT_NUMBER = 'TransitNumber';
    const KEY_CLEARING_CODE = 'ClearingCode';
    const KEY_IFSC_CODE = 'IfscCode';
    const KEY_CLABE = 'Clabe';
    const KEY_SORT_CODE = 'SortCode';
    const KEY_SWIFT = 'Swift';
    const TYPE_NONE = 'None';
    const TYPE_IBAN = 'Iban';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getKeyAllowableValues()
    {
        return [
            self::KEY_IBAN,
            self::KEY_ACCOUNT_NUMBER,
            self::KEY_ROUTING_NUMBER,
            self::KEY_BSB,
            self::KEY_BRANCH_CODE,
            self::KEY_BANK_CODE,
            self::KEY_INSTITUTION_NUMBER,
            self::KEY_TRANSIT_NUMBER,
            self::KEY_CLEARING_CODE,
            self::KEY_IFSC_CODE,
            self::KEY_CLABE,
            self::KEY_SORT_CODE,
            self::KEY_SWIFT,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_NONE,
            self::TYPE_IBAN,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['key'] = isset($data['key']) ? $data['key'] : null;
        $this->container['display_name'] = isset($data['display_name']) ? $data['display_name'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['min_length'] = isset($data['min_length']) ? $data['min_length'] : null;
        $this->container['max_length'] = isset($data['max_length']) ? $data['max_length'] : null;
        $this->container['digits_only'] = isset($data['digits_only']) ? $data['digits_only'] : null;
        $this->container['regex'] = isset($data['regex']) ? $data['regex'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getKeyAllowableValues();
        if (!is_null($this->container['key']) && !in_array($this->container['key'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'key', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($this->container['type']) && !in_array($this->container['type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets key
     *
     * @return string
     */
    public function getKey()
    {
        return $this->container['key'];
    }

    /**
     * Sets key
     *
     * @param string $key Depending on the Key, the field's value will be stored in a different field in PayeeBankAccountData
     *
     * @return $this
     */
    public function setKey($key)
    {
        $allowedValues = $this->getKeyAllowableValues();
        if (!is_null($key) && !in_array($key, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'key', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['key'] = $key;

        return $this;
    }

    /**
     * Gets display_name
     *
     * @return string
     */
    public function getDisplayName()
    {
        return $this->container['display_name'];
    }

    /**
     * Sets display_name
     *
     * @param string $display_name Display name of the field
     *
     * @return $this
     */
    public function setDisplayName($display_name)
    {
        $this->container['display_name'] = $display_name;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type There are some fields that are of type known to the frontend (IBAN, Swift) -- for those frontend should use its own validation library, e.g. ibantools
     *
     * @return $this
     */
    public function setType($type)
    {
        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($type) && !in_array($type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets min_length
     *
     * @return int
     */
    public function getMinLength()
    {
        return $this->container['min_length'];
    }

    /**
     * Sets min_length
     *
     * @param int $min_length Minimum length of the field
     *
     * @return $this
     */
    public function setMinLength($min_length)
    {
        $this->container['min_length'] = $min_length;

        return $this;
    }

    /**
     * Gets max_length
     *
     * @return int
     */
    public function getMaxLength()
    {
        return $this->container['max_length'];
    }

    /**
     * Sets max_length
     *
     * @param int $max_length Maximum length of the field
     *
     * @return $this
     */
    public function setMaxLength($max_length)
    {
        $this->container['max_length'] = $max_length;

        return $this;
    }

    /**
     * Gets digits_only
     *
     * @return bool
     */
    public function getDigitsOnly()
    {
        return $this->container['digits_only'];
    }

    /**
     * Sets digits_only
     *
     * @param bool $digits_only Is the field digits (numeric) only
     *
     * @return $this
     */
    public function setDigitsOnly($digits_only)
    {
        $this->container['digits_only'] = $digits_only;

        return $this;
    }

    /**
     * Gets regex
     *
     * @return string
     */
    public function getRegex()
    {
        return $this->container['regex'];
    }

    /**
     * Sets regex
     *
     * @param string $regex Regex for validating the field (if specified)
     *
     * @return $this
     */
    public function setRegex($regex)
    {
        $this->container['regex'] = $regex;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


