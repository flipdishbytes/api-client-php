<?php
/**
 * DeviceSettings
 *
 * PHP version 5
 *
 * @category Class
 * @package  Flipdish\\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Flipdish Open API v1.0
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.19
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Flipdish\\Client\Models;

use \ArrayAccess;
use \Flipdish\\Client\ObjectSerializer;

/**
 * DeviceSettings Class Doc Comment
 *
 * @category Class
 * @description Device settings for Hydra
 * @package  Flipdish\\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class DeviceSettings implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'DeviceSettings';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'volume' => 'int',
        'font_size' => 'double',
        'brightness' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'volume' => 'int32',
        'font_size' => 'double',
        'brightness' => 'int32'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'volume' => 'Volume',
        'font_size' => 'FontSize',
        'brightness' => 'Brightness'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'volume' => 'setVolume',
        'font_size' => 'setFontSize',
        'brightness' => 'setBrightness'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'volume' => 'getVolume',
        'font_size' => 'getFontSize',
        'brightness' => 'getBrightness'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['volume'] = isset($data['volume']) ? $data['volume'] : null;
        $this->container['font_size'] = isset($data['font_size']) ? $data['font_size'] : null;
        $this->container['brightness'] = isset($data['brightness']) ? $data['brightness'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['volume'] === null) {
            $invalidProperties[] = "'volume' can't be null";
        }
        if (($this->container['volume'] > 10)) {
            $invalidProperties[] = "invalid value for 'volume', must be smaller than or equal to 10.";
        }

        if (($this->container['volume'] < 0)) {
            $invalidProperties[] = "invalid value for 'volume', must be bigger than or equal to 0.";
        }

        if ($this->container['font_size'] === null) {
            $invalidProperties[] = "'font_size' can't be null";
        }
        if (($this->container['font_size'] > 100)) {
            $invalidProperties[] = "invalid value for 'font_size', must be smaller than or equal to 100.";
        }

        if (($this->container['font_size'] < 1)) {
            $invalidProperties[] = "invalid value for 'font_size', must be bigger than or equal to 1.";
        }

        if ($this->container['brightness'] === null) {
            $invalidProperties[] = "'brightness' can't be null";
        }
        if (($this->container['brightness'] > 100)) {
            $invalidProperties[] = "invalid value for 'brightness', must be smaller than or equal to 100.";
        }

        if (($this->container['brightness'] < 0)) {
            $invalidProperties[] = "invalid value for 'brightness', must be bigger than or equal to 0.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets volume
     *
     * @return int
     */
    public function getVolume()
    {
        return $this->container['volume'];
    }

    /**
     * Sets volume
     *
     * @param int $volume Gets or sets the device volume
     *
     * @return $this
     */
    public function setVolume($volume)
    {

        if (($volume > 10)) {
            throw new \InvalidArgumentException('invalid value for $volume when calling DeviceSettings., must be smaller than or equal to 10.');
        }
        if (($volume < 0)) {
            throw new \InvalidArgumentException('invalid value for $volume when calling DeviceSettings., must be bigger than or equal to 0.');
        }

        $this->container['volume'] = $volume;

        return $this;
    }

    /**
     * Gets font_size
     *
     * @return double
     */
    public function getFontSize()
    {
        return $this->container['font_size'];
    }

    /**
     * Sets font_size
     *
     * @param double $font_size Gets or sets the font size used on the device
     *
     * @return $this
     */
    public function setFontSize($font_size)
    {

        if (($font_size > 100)) {
            throw new \InvalidArgumentException('invalid value for $font_size when calling DeviceSettings., must be smaller than or equal to 100.');
        }
        if (($font_size < 1)) {
            throw new \InvalidArgumentException('invalid value for $font_size when calling DeviceSettings., must be bigger than or equal to 1.');
        }

        $this->container['font_size'] = $font_size;

        return $this;
    }

    /**
     * Gets brightness
     *
     * @return int
     */
    public function getBrightness()
    {
        return $this->container['brightness'];
    }

    /**
     * Sets brightness
     *
     * @param int $brightness Gets or sets the display brightness on the device
     *
     * @return $this
     */
    public function setBrightness($brightness)
    {

        if (($brightness > 100)) {
            throw new \InvalidArgumentException('invalid value for $brightness when calling DeviceSettings., must be smaller than or equal to 100.');
        }
        if (($brightness < 0)) {
            throw new \InvalidArgumentException('invalid value for $brightness when calling DeviceSettings., must be bigger than or equal to 0.');
        }

        $this->container['brightness'] = $brightness;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


