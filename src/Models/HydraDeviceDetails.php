<?php
/**
 * HydraDeviceDetails
 *
 * PHP version 5
 *
 * @category Class
 * @package  Flipdish\\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Flipdish Open API v1.0
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.19
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Flipdish\\Client\Models;

use \ArrayAccess;
use \Flipdish\\Client\ObjectSerializer;

/**
 * HydraDeviceDetails Class Doc Comment
 *
 * @category Class
 * @description Hydra device details
 * @package  Flipdish\\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class HydraDeviceDetails implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'HydraDeviceDetails';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'hydra_config_id' => 'int',
        'device_id' => 'string',
        'device_type' => 'string',
        'status' => 'string',
        'device_name' => 'string',
        'store_names' => '\Flipdish\\Client\Models\HydraStoreData[]',
        'last_poll_utc' => '\DateTime',
        'version' => 'string',
        'build_number' => 'string',
        'git_sha' => 'string',
        'git_branch' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'hydra_config_id' => 'int32',
        'device_id' => null,
        'device_type' => null,
        'status' => null,
        'device_name' => null,
        'store_names' => null,
        'last_poll_utc' => 'date-time',
        'version' => null,
        'build_number' => null,
        'git_sha' => null,
        'git_branch' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'hydra_config_id' => 'HydraConfigId',
        'device_id' => 'DeviceId',
        'device_type' => 'DeviceType',
        'status' => 'Status',
        'device_name' => 'DeviceName',
        'store_names' => 'StoreNames',
        'last_poll_utc' => 'LastPollUtc',
        'version' => 'Version',
        'build_number' => 'BuildNumber',
        'git_sha' => 'GitSha',
        'git_branch' => 'GitBranch'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'hydra_config_id' => 'setHydraConfigId',
        'device_id' => 'setDeviceId',
        'device_type' => 'setDeviceType',
        'status' => 'setStatus',
        'device_name' => 'setDeviceName',
        'store_names' => 'setStoreNames',
        'last_poll_utc' => 'setLastPollUtc',
        'version' => 'setVersion',
        'build_number' => 'setBuildNumber',
        'git_sha' => 'setGitSha',
        'git_branch' => 'setGitBranch'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'hydra_config_id' => 'getHydraConfigId',
        'device_id' => 'getDeviceId',
        'device_type' => 'getDeviceType',
        'status' => 'getStatus',
        'device_name' => 'getDeviceName',
        'store_names' => 'getStoreNames',
        'last_poll_utc' => 'getLastPollUtc',
        'version' => 'getVersion',
        'build_number' => 'getBuildNumber',
        'git_sha' => 'getGitSha',
        'git_branch' => 'getGitBranch'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const DEVICE_TYPE_KIOSK = 'Kiosk';
    const DEVICE_TYPE_TERMINAL = 'Terminal';
    const DEVICE_TYPE_LEGACY_PRINTER = 'LegacyPrinter';
    const STATUS_ONLINE = 'Online';
    const STATUS_POSSIBLY_OFFLINE = 'PossiblyOffline';
    const STATUS_OFFLINE = 'Offline';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDeviceTypeAllowableValues()
    {
        return [
            self::DEVICE_TYPE_KIOSK,
            self::DEVICE_TYPE_TERMINAL,
            self::DEVICE_TYPE_LEGACY_PRINTER,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_ONLINE,
            self::STATUS_POSSIBLY_OFFLINE,
            self::STATUS_OFFLINE,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['hydra_config_id'] = isset($data['hydra_config_id']) ? $data['hydra_config_id'] : null;
        $this->container['device_id'] = isset($data['device_id']) ? $data['device_id'] : null;
        $this->container['device_type'] = isset($data['device_type']) ? $data['device_type'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['device_name'] = isset($data['device_name']) ? $data['device_name'] : null;
        $this->container['store_names'] = isset($data['store_names']) ? $data['store_names'] : null;
        $this->container['last_poll_utc'] = isset($data['last_poll_utc']) ? $data['last_poll_utc'] : null;
        $this->container['version'] = isset($data['version']) ? $data['version'] : null;
        $this->container['build_number'] = isset($data['build_number']) ? $data['build_number'] : null;
        $this->container['git_sha'] = isset($data['git_sha']) ? $data['git_sha'] : null;
        $this->container['git_branch'] = isset($data['git_branch']) ? $data['git_branch'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getDeviceTypeAllowableValues();
        if (!is_null($this->container['device_type']) && !in_array($this->container['device_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'device_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($this->container['status']) && !in_array($this->container['status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'status', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets hydra_config_id
     *
     * @return int
     */
    public function getHydraConfigId()
    {
        return $this->container['hydra_config_id'];
    }

    /**
     * Sets hydra_config_id
     *
     * @param int $hydra_config_id Flipdish internal device identifier
     *
     * @return $this
     */
    public function setHydraConfigId($hydra_config_id)
    {
        $this->container['hydra_config_id'] = $hydra_config_id;

        return $this;
    }

    /**
     * Gets device_id
     *
     * @return string
     */
    public function getDeviceId()
    {
        return $this->container['device_id'];
    }

    /**
     * Sets device_id
     *
     * @param string $device_id Device Id or Serial Number
     *
     * @return $this
     */
    public function setDeviceId($device_id)
    {
        $this->container['device_id'] = $device_id;

        return $this;
    }

    /**
     * Gets device_type
     *
     * @return string
     */
    public function getDeviceType()
    {
        return $this->container['device_type'];
    }

    /**
     * Sets device_type
     *
     * @param string $device_type Type of the device
     *
     * @return $this
     */
    public function setDeviceType($device_type)
    {
        $allowedValues = $this->getDeviceTypeAllowableValues();
        if (!is_null($device_type) && !in_array($device_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'device_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['device_type'] = $device_type;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status Status of the device
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($status) && !in_array($status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'status', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets device_name
     *
     * @return string
     */
    public function getDeviceName()
    {
        return $this->container['device_name'];
    }

    /**
     * Sets device_name
     *
     * @param string $device_name Device Name
     *
     * @return $this
     */
    public function setDeviceName($device_name)
    {
        $this->container['device_name'] = $device_name;

        return $this;
    }

    /**
     * Gets store_names
     *
     * @return \Flipdish\\Client\Models\HydraStoreData[]
     */
    public function getStoreNames()
    {
        return $this->container['store_names'];
    }

    /**
     * Sets store_names
     *
     * @param \Flipdish\\Client\Models\HydraStoreData[] $store_names Store Names
     *
     * @return $this
     */
    public function setStoreNames($store_names)
    {
        $this->container['store_names'] = $store_names;

        return $this;
    }

    /**
     * Gets last_poll_utc
     *
     * @return \DateTime
     */
    public function getLastPollUtc()
    {
        return $this->container['last_poll_utc'];
    }

    /**
     * Sets last_poll_utc
     *
     * @param \DateTime $last_poll_utc Last poll time in UTC
     *
     * @return $this
     */
    public function setLastPollUtc($last_poll_utc)
    {
        $this->container['last_poll_utc'] = $last_poll_utc;

        return $this;
    }

    /**
     * Gets version
     *
     * @return string
     */
    public function getVersion()
    {
        return $this->container['version'];
    }

    /**
     * Sets version
     *
     * @param string $version Version of the device
     *
     * @return $this
     */
    public function setVersion($version)
    {
        $this->container['version'] = $version;

        return $this;
    }

    /**
     * Gets build_number
     *
     * @return string
     */
    public function getBuildNumber()
    {
        return $this->container['build_number'];
    }

    /**
     * Sets build_number
     *
     * @param string $build_number Build number of the device
     *
     * @return $this
     */
    public function setBuildNumber($build_number)
    {
        $this->container['build_number'] = $build_number;

        return $this;
    }

    /**
     * Gets git_sha
     *
     * @return string
     */
    public function getGitSha()
    {
        return $this->container['git_sha'];
    }

    /**
     * Sets git_sha
     *
     * @param string $git_sha SHA of the commit
     *
     * @return $this
     */
    public function setGitSha($git_sha)
    {
        $this->container['git_sha'] = $git_sha;

        return $this;
    }

    /**
     * Gets git_branch
     *
     * @return string
     */
    public function getGitBranch()
    {
        return $this->container['git_branch'];
    }

    /**
     * Sets git_branch
     *
     * @param string $git_branch Build branch
     *
     * @return $this
     */
    public function setGitBranch($git_branch)
    {
        $this->container['git_branch'] = $git_branch;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


