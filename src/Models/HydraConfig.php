<?php
/**
 * HydraConfig
 *
 * PHP version 5
 *
 * @category Class
 * @package  Flipdish\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Flipdish Open API v1.0
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.19
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Flipdish\Client\Models;

use \ArrayAccess;
use \Flipdish\Client\ObjectSerializer;

/**
 * HydraConfig Class Doc Comment
 *
 * @category Class
 * @description Hydra configuration
 * @package  Flipdish\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class HydraConfig implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'HydraConfig';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'minimum_version' => 'string',
        'payment_options' => 'string[]',
        'device_settings' => '\Flipdish\Client\Models\DeviceSettings',
        'version' => 'string',
        'build_number' => 'string',
        'git_sha' => 'string',
        'git_branch' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'minimum_version' => null,
        'payment_options' => null,
        'device_settings' => null,
        'version' => null,
        'build_number' => null,
        'git_sha' => null,
        'git_branch' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'minimum_version' => 'MinimumVersion',
        'payment_options' => 'PaymentOptions',
        'device_settings' => 'DeviceSettings',
        'version' => 'Version',
        'build_number' => 'BuildNumber',
        'git_sha' => 'GitSha',
        'git_branch' => 'GitBranch'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'minimum_version' => 'setMinimumVersion',
        'payment_options' => 'setPaymentOptions',
        'device_settings' => 'setDeviceSettings',
        'version' => 'setVersion',
        'build_number' => 'setBuildNumber',
        'git_sha' => 'setGitSha',
        'git_branch' => 'setGitBranch'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'minimum_version' => 'getMinimumVersion',
        'payment_options' => 'getPaymentOptions',
        'device_settings' => 'getDeviceSettings',
        'version' => 'getVersion',
        'build_number' => 'getBuildNumber',
        'git_sha' => 'getGitSha',
        'git_branch' => 'getGitBranch'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const PAYMENT_OPTIONS_ONLINE = 'Online';
    const PAYMENT_OPTIONS_EMV = 'Emv';
    const PAYMENT_OPTIONS_COUNTER = 'Counter';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPaymentOptionsAllowableValues()
    {
        return [
            self::PAYMENT_OPTIONS_ONLINE,
            self::PAYMENT_OPTIONS_EMV,
            self::PAYMENT_OPTIONS_COUNTER,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['minimum_version'] = isset($data['minimum_version']) ? $data['minimum_version'] : null;
        $this->container['payment_options'] = isset($data['payment_options']) ? $data['payment_options'] : null;
        $this->container['device_settings'] = isset($data['device_settings']) ? $data['device_settings'] : null;
        $this->container['version'] = isset($data['version']) ? $data['version'] : null;
        $this->container['build_number'] = isset($data['build_number']) ? $data['build_number'] : null;
        $this->container['git_sha'] = isset($data['git_sha']) ? $data['git_sha'] : null;
        $this->container['git_branch'] = isset($data['git_branch']) ? $data['git_branch'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['minimum_version'] === null) {
            $invalidProperties[] = "'minimum_version' can't be null";
        }
        if ($this->container['payment_options'] === null) {
            $invalidProperties[] = "'payment_options' can't be null";
        }
        if ($this->container['device_settings'] === null) {
            $invalidProperties[] = "'device_settings' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets minimum_version
     *
     * @return string
     */
    public function getMinimumVersion()
    {
        return $this->container['minimum_version'];
    }

    /**
     * Sets minimum_version
     *
     * @param string $minimum_version Minimum version
     *
     * @return $this
     */
    public function setMinimumVersion($minimum_version)
    {
        $this->container['minimum_version'] = $minimum_version;

        return $this;
    }

    /**
     * Gets payment_options
     *
     * @return string[]
     */
    public function getPaymentOptions()
    {
        return $this->container['payment_options'];
    }

    /**
     * Sets payment_options
     *
     * @param string[] $payment_options Payment options
     *
     * @return $this
     */
    public function setPaymentOptions($payment_options)
    {
        $allowedValues = $this->getPaymentOptionsAllowableValues();
        if (array_diff($payment_options, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'payment_options', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['payment_options'] = $payment_options;

        return $this;
    }

    /**
     * Gets device_settings
     *
     * @return \Flipdish\Client\Models\DeviceSettings
     */
    public function getDeviceSettings()
    {
        return $this->container['device_settings'];
    }

    /**
     * Sets device_settings
     *
     * @param \Flipdish\Client\Models\DeviceSettings $device_settings Device settings
     *
     * @return $this
     */
    public function setDeviceSettings($device_settings)
    {
        $this->container['device_settings'] = $device_settings;

        return $this;
    }

    /**
     * Gets version
     *
     * @return string
     */
    public function getVersion()
    {
        return $this->container['version'];
    }

    /**
     * Sets version
     *
     * @param string $version Version of the device
     *
     * @return $this
     */
    public function setVersion($version)
    {
        $this->container['version'] = $version;

        return $this;
    }

    /**
     * Gets build_number
     *
     * @return string
     */
    public function getBuildNumber()
    {
        return $this->container['build_number'];
    }

    /**
     * Sets build_number
     *
     * @param string $build_number Build number of the device
     *
     * @return $this
     */
    public function setBuildNumber($build_number)
    {
        $this->container['build_number'] = $build_number;

        return $this;
    }

    /**
     * Gets git_sha
     *
     * @return string
     */
    public function getGitSha()
    {
        return $this->container['git_sha'];
    }

    /**
     * Sets git_sha
     *
     * @param string $git_sha SHA of the commit
     *
     * @return $this
     */
    public function setGitSha($git_sha)
    {
        $this->container['git_sha'] = $git_sha;

        return $this;
    }

    /**
     * Gets git_branch
     *
     * @return string
     */
    public function getGitBranch()
    {
        return $this->container['git_branch'];
    }

    /**
     * Sets git_branch
     *
     * @param string $git_branch Build branch
     *
     * @return $this
     */
    public function setGitBranch($git_branch)
    {
        $this->container['git_branch'] = $git_branch;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


