<?php
/**
 * OrderIngestSubmitOrderResponse
 *
 * PHP version 5
 *
 * @category Class
 * @package  Flipdish\\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Flipdish Open API v1.0
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.19
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Flipdish\\Client\Models;

use \ArrayAccess;
use \Flipdish\\Client\ObjectSerializer;

/**
 * OrderIngestSubmitOrderResponse Class Doc Comment
 *
 * @category Class
 * @package  Flipdish\\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class OrderIngestSubmitOrderResponse implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'OrderIngestSubmitOrderResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'order_id' => 'int',
        'receipt_url' => 'string',
        'currency_code' => 'string',
        'total_price' => '\Flipdish\\Client\Models\Price',
        'delivery_fee' => '\Flipdish\\Client\Models\Price',
        'estimated_delivery_time' => '\DateTime',
        'channel_order_id' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'order_id' => 'int32',
        'receipt_url' => null,
        'currency_code' => null,
        'total_price' => null,
        'delivery_fee' => null,
        'estimated_delivery_time' => 'date-time',
        'channel_order_id' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'order_id' => 'OrderId',
        'receipt_url' => 'ReceiptUrl',
        'currency_code' => 'CurrencyCode',
        'total_price' => 'TotalPrice',
        'delivery_fee' => 'DeliveryFee',
        'estimated_delivery_time' => 'EstimatedDeliveryTime',
        'channel_order_id' => 'ChannelOrderId'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'order_id' => 'setOrderId',
        'receipt_url' => 'setReceiptUrl',
        'currency_code' => 'setCurrencyCode',
        'total_price' => 'setTotalPrice',
        'delivery_fee' => 'setDeliveryFee',
        'estimated_delivery_time' => 'setEstimatedDeliveryTime',
        'channel_order_id' => 'setChannelOrderId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'order_id' => 'getOrderId',
        'receipt_url' => 'getReceiptUrl',
        'currency_code' => 'getCurrencyCode',
        'total_price' => 'getTotalPrice',
        'delivery_fee' => 'getDeliveryFee',
        'estimated_delivery_time' => 'getEstimatedDeliveryTime',
        'channel_order_id' => 'getChannelOrderId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const CURRENCY_CODE_EUR = 'EUR';
    const CURRENCY_CODE_USD = 'USD';
    const CURRENCY_CODE_GBP = 'GBP';
    const CURRENCY_CODE_CAD = 'CAD';
    const CURRENCY_CODE_AUD = 'AUD';
    const CURRENCY_CODE_DJF = 'DJF';
    const CURRENCY_CODE_ZAR = 'ZAR';
    const CURRENCY_CODE_ETB = 'ETB';
    const CURRENCY_CODE_AED = 'AED';
    const CURRENCY_CODE_BHD = 'BHD';
    const CURRENCY_CODE_DZD = 'DZD';
    const CURRENCY_CODE_EGP = 'EGP';
    const CURRENCY_CODE_IQD = 'IQD';
    const CURRENCY_CODE_JOD = 'JOD';
    const CURRENCY_CODE_KWD = 'KWD';
    const CURRENCY_CODE_LBP = 'LBP';
    const CURRENCY_CODE_LYD = 'LYD';
    const CURRENCY_CODE_MAD = 'MAD';
    const CURRENCY_CODE_OMR = 'OMR';
    const CURRENCY_CODE_QAR = 'QAR';
    const CURRENCY_CODE_SAR = 'SAR';
    const CURRENCY_CODE_SYP = 'SYP';
    const CURRENCY_CODE_TND = 'TND';
    const CURRENCY_CODE_YER = 'YER';
    const CURRENCY_CODE_CLP = 'CLP';
    const CURRENCY_CODE_INR = 'INR';
    const CURRENCY_CODE_AZN = 'AZN';
    const CURRENCY_CODE_RUB = 'RUB';
    const CURRENCY_CODE_BYN = 'BYN';
    const CURRENCY_CODE_BGN = 'BGN';
    const CURRENCY_CODE_NGN = 'NGN';
    const CURRENCY_CODE_BDT = 'BDT';
    const CURRENCY_CODE_CNY = 'CNY';
    const CURRENCY_CODE_BAM = 'BAM';
    const CURRENCY_CODE_CZK = 'CZK';
    const CURRENCY_CODE_DKK = 'DKK';
    const CURRENCY_CODE_CHF = 'CHF';
    const CURRENCY_CODE_MVR = 'MVR';
    const CURRENCY_CODE_BTN = 'BTN';
    const CURRENCY_CODE_XCD = 'XCD';
    const CURRENCY_CODE_BZD = 'BZD';
    const CURRENCY_CODE_HKD = 'HKD';
    const CURRENCY_CODE_IDR = 'IDR';
    const CURRENCY_CODE_JMD = 'JMD';
    const CURRENCY_CODE_MYR = 'MYR';
    const CURRENCY_CODE_NZD = 'NZD';
    const CURRENCY_CODE_PHP = 'PHP';
    const CURRENCY_CODE_SGD = 'SGD';
    const CURRENCY_CODE_TTD = 'TTD';
    const CURRENCY_CODE_XDR = 'XDR';
    const CURRENCY_CODE_ARS = 'ARS';
    const CURRENCY_CODE_BOB = 'BOB';
    const CURRENCY_CODE_COP = 'COP';
    const CURRENCY_CODE_CRC = 'CRC';
    const CURRENCY_CODE_CUP = 'CUP';
    const CURRENCY_CODE_DOP = 'DOP';
    const CURRENCY_CODE_GTQ = 'GTQ';
    const CURRENCY_CODE_HNL = 'HNL';
    const CURRENCY_CODE_MXN = 'MXN';
    const CURRENCY_CODE_NIO = 'NIO';
    const CURRENCY_CODE_PAB = 'PAB';
    const CURRENCY_CODE_PEN = 'PEN';
    const CURRENCY_CODE_PYG = 'PYG';
    const CURRENCY_CODE_UYU = 'UYU';
    const CURRENCY_CODE_VEF = 'VEF';
    const CURRENCY_CODE_IRR = 'IRR';
    const CURRENCY_CODE_XOF = 'XOF';
    const CURRENCY_CODE_CDF = 'CDF';
    const CURRENCY_CODE_XAF = 'XAF';
    const CURRENCY_CODE_HTG = 'HTG';
    const CURRENCY_CODE_ILS = 'ILS';
    const CURRENCY_CODE_HRK = 'HRK';
    const CURRENCY_CODE_HUF = 'HUF';
    const CURRENCY_CODE_AMD = 'AMD';
    const CURRENCY_CODE_ISK = 'ISK';
    const CURRENCY_CODE_JPY = 'JPY';
    const CURRENCY_CODE_GEL = 'GEL';
    const CURRENCY_CODE_KZT = 'KZT';
    const CURRENCY_CODE_KHR = 'KHR';
    const CURRENCY_CODE_KRW = 'KRW';
    const CURRENCY_CODE_KGS = 'KGS';
    const CURRENCY_CODE_LAK = 'LAK';
    const CURRENCY_CODE_MKD = 'MKD';
    const CURRENCY_CODE_MNT = 'MNT';
    const CURRENCY_CODE_BND = 'BND';
    const CURRENCY_CODE_MMK = 'MMK';
    const CURRENCY_CODE_NOK = 'NOK';
    const CURRENCY_CODE_NPR = 'NPR';
    const CURRENCY_CODE_PKR = 'PKR';
    const CURRENCY_CODE_PLN = 'PLN';
    const CURRENCY_CODE_AFN = 'AFN';
    const CURRENCY_CODE_BRL = 'BRL';
    const CURRENCY_CODE_MDL = 'MDL';
    const CURRENCY_CODE_RON = 'RON';
    const CURRENCY_CODE_RWF = 'RWF';
    const CURRENCY_CODE_SEK = 'SEK';
    const CURRENCY_CODE_LKR = 'LKR';
    const CURRENCY_CODE_SOS = 'SOS';
    const CURRENCY_CODE_ALL = 'ALL';
    const CURRENCY_CODE_RSD = 'RSD';
    const CURRENCY_CODE_KES = 'KES';
    const CURRENCY_CODE_TJS = 'TJS';
    const CURRENCY_CODE_THB = 'THB';
    const CURRENCY_CODE_ERN = 'ERN';
    const CURRENCY_CODE_TMT = 'TMT';
    const CURRENCY_CODE_BWP = 'BWP';
    const CURRENCY_CODE__TRY = 'TRY';
    const CURRENCY_CODE_UAH = 'UAH';
    const CURRENCY_CODE_UZS = 'UZS';
    const CURRENCY_CODE_VND = 'VND';
    const CURRENCY_CODE_MOP = 'MOP';
    const CURRENCY_CODE_TWD = 'TWD';
    const CURRENCY_CODE_BMD = 'BMD';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getCurrencyCodeAllowableValues()
    {
        return [
            self::CURRENCY_CODE_EUR,
            self::CURRENCY_CODE_USD,
            self::CURRENCY_CODE_GBP,
            self::CURRENCY_CODE_CAD,
            self::CURRENCY_CODE_AUD,
            self::CURRENCY_CODE_DJF,
            self::CURRENCY_CODE_ZAR,
            self::CURRENCY_CODE_ETB,
            self::CURRENCY_CODE_AED,
            self::CURRENCY_CODE_BHD,
            self::CURRENCY_CODE_DZD,
            self::CURRENCY_CODE_EGP,
            self::CURRENCY_CODE_IQD,
            self::CURRENCY_CODE_JOD,
            self::CURRENCY_CODE_KWD,
            self::CURRENCY_CODE_LBP,
            self::CURRENCY_CODE_LYD,
            self::CURRENCY_CODE_MAD,
            self::CURRENCY_CODE_OMR,
            self::CURRENCY_CODE_QAR,
            self::CURRENCY_CODE_SAR,
            self::CURRENCY_CODE_SYP,
            self::CURRENCY_CODE_TND,
            self::CURRENCY_CODE_YER,
            self::CURRENCY_CODE_CLP,
            self::CURRENCY_CODE_INR,
            self::CURRENCY_CODE_AZN,
            self::CURRENCY_CODE_RUB,
            self::CURRENCY_CODE_BYN,
            self::CURRENCY_CODE_BGN,
            self::CURRENCY_CODE_NGN,
            self::CURRENCY_CODE_BDT,
            self::CURRENCY_CODE_CNY,
            self::CURRENCY_CODE_BAM,
            self::CURRENCY_CODE_CZK,
            self::CURRENCY_CODE_DKK,
            self::CURRENCY_CODE_CHF,
            self::CURRENCY_CODE_MVR,
            self::CURRENCY_CODE_BTN,
            self::CURRENCY_CODE_XCD,
            self::CURRENCY_CODE_BZD,
            self::CURRENCY_CODE_HKD,
            self::CURRENCY_CODE_IDR,
            self::CURRENCY_CODE_JMD,
            self::CURRENCY_CODE_MYR,
            self::CURRENCY_CODE_NZD,
            self::CURRENCY_CODE_PHP,
            self::CURRENCY_CODE_SGD,
            self::CURRENCY_CODE_TTD,
            self::CURRENCY_CODE_XDR,
            self::CURRENCY_CODE_ARS,
            self::CURRENCY_CODE_BOB,
            self::CURRENCY_CODE_COP,
            self::CURRENCY_CODE_CRC,
            self::CURRENCY_CODE_CUP,
            self::CURRENCY_CODE_DOP,
            self::CURRENCY_CODE_GTQ,
            self::CURRENCY_CODE_HNL,
            self::CURRENCY_CODE_MXN,
            self::CURRENCY_CODE_NIO,
            self::CURRENCY_CODE_PAB,
            self::CURRENCY_CODE_PEN,
            self::CURRENCY_CODE_PYG,
            self::CURRENCY_CODE_UYU,
            self::CURRENCY_CODE_VEF,
            self::CURRENCY_CODE_IRR,
            self::CURRENCY_CODE_XOF,
            self::CURRENCY_CODE_CDF,
            self::CURRENCY_CODE_XAF,
            self::CURRENCY_CODE_HTG,
            self::CURRENCY_CODE_ILS,
            self::CURRENCY_CODE_HRK,
            self::CURRENCY_CODE_HUF,
            self::CURRENCY_CODE_AMD,
            self::CURRENCY_CODE_ISK,
            self::CURRENCY_CODE_JPY,
            self::CURRENCY_CODE_GEL,
            self::CURRENCY_CODE_KZT,
            self::CURRENCY_CODE_KHR,
            self::CURRENCY_CODE_KRW,
            self::CURRENCY_CODE_KGS,
            self::CURRENCY_CODE_LAK,
            self::CURRENCY_CODE_MKD,
            self::CURRENCY_CODE_MNT,
            self::CURRENCY_CODE_BND,
            self::CURRENCY_CODE_MMK,
            self::CURRENCY_CODE_NOK,
            self::CURRENCY_CODE_NPR,
            self::CURRENCY_CODE_PKR,
            self::CURRENCY_CODE_PLN,
            self::CURRENCY_CODE_AFN,
            self::CURRENCY_CODE_BRL,
            self::CURRENCY_CODE_MDL,
            self::CURRENCY_CODE_RON,
            self::CURRENCY_CODE_RWF,
            self::CURRENCY_CODE_SEK,
            self::CURRENCY_CODE_LKR,
            self::CURRENCY_CODE_SOS,
            self::CURRENCY_CODE_ALL,
            self::CURRENCY_CODE_RSD,
            self::CURRENCY_CODE_KES,
            self::CURRENCY_CODE_TJS,
            self::CURRENCY_CODE_THB,
            self::CURRENCY_CODE_ERN,
            self::CURRENCY_CODE_TMT,
            self::CURRENCY_CODE_BWP,
            self::CURRENCY_CODE__TRY,
            self::CURRENCY_CODE_UAH,
            self::CURRENCY_CODE_UZS,
            self::CURRENCY_CODE_VND,
            self::CURRENCY_CODE_MOP,
            self::CURRENCY_CODE_TWD,
            self::CURRENCY_CODE_BMD,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['order_id'] = isset($data['order_id']) ? $data['order_id'] : null;
        $this->container['receipt_url'] = isset($data['receipt_url']) ? $data['receipt_url'] : null;
        $this->container['currency_code'] = isset($data['currency_code']) ? $data['currency_code'] : null;
        $this->container['total_price'] = isset($data['total_price']) ? $data['total_price'] : null;
        $this->container['delivery_fee'] = isset($data['delivery_fee']) ? $data['delivery_fee'] : null;
        $this->container['estimated_delivery_time'] = isset($data['estimated_delivery_time']) ? $data['estimated_delivery_time'] : null;
        $this->container['channel_order_id'] = isset($data['channel_order_id']) ? $data['channel_order_id'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getCurrencyCodeAllowableValues();
        if (!is_null($this->container['currency_code']) && !in_array($this->container['currency_code'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'currency_code', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets order_id
     *
     * @return int
     */
    public function getOrderId()
    {
        return $this->container['order_id'];
    }

    /**
     * Sets order_id
     *
     * @param int $order_id order_id
     *
     * @return $this
     */
    public function setOrderId($order_id)
    {
        $this->container['order_id'] = $order_id;

        return $this;
    }

    /**
     * Gets receipt_url
     *
     * @return string
     */
    public function getReceiptUrl()
    {
        return $this->container['receipt_url'];
    }

    /**
     * Sets receipt_url
     *
     * @param string $receipt_url receipt_url
     *
     * @return $this
     */
    public function setReceiptUrl($receipt_url)
    {
        $this->container['receipt_url'] = $receipt_url;

        return $this;
    }

    /**
     * Gets currency_code
     *
     * @return string
     */
    public function getCurrencyCode()
    {
        return $this->container['currency_code'];
    }

    /**
     * Sets currency_code
     *
     * @param string $currency_code currency_code
     *
     * @return $this
     */
    public function setCurrencyCode($currency_code)
    {
        $allowedValues = $this->getCurrencyCodeAllowableValues();
        if (!is_null($currency_code) && !in_array($currency_code, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'currency_code', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['currency_code'] = $currency_code;

        return $this;
    }

    /**
     * Gets total_price
     *
     * @return \Flipdish\\Client\Models\Price
     */
    public function getTotalPrice()
    {
        return $this->container['total_price'];
    }

    /**
     * Sets total_price
     *
     * @param \Flipdish\\Client\Models\Price $total_price total_price
     *
     * @return $this
     */
    public function setTotalPrice($total_price)
    {
        $this->container['total_price'] = $total_price;

        return $this;
    }

    /**
     * Gets delivery_fee
     *
     * @return \Flipdish\\Client\Models\Price
     */
    public function getDeliveryFee()
    {
        return $this->container['delivery_fee'];
    }

    /**
     * Sets delivery_fee
     *
     * @param \Flipdish\\Client\Models\Price $delivery_fee delivery_fee
     *
     * @return $this
     */
    public function setDeliveryFee($delivery_fee)
    {
        $this->container['delivery_fee'] = $delivery_fee;

        return $this;
    }

    /**
     * Gets estimated_delivery_time
     *
     * @return \DateTime
     */
    public function getEstimatedDeliveryTime()
    {
        return $this->container['estimated_delivery_time'];
    }

    /**
     * Sets estimated_delivery_time
     *
     * @param \DateTime $estimated_delivery_time estimated_delivery_time
     *
     * @return $this
     */
    public function setEstimatedDeliveryTime($estimated_delivery_time)
    {
        $this->container['estimated_delivery_time'] = $estimated_delivery_time;

        return $this;
    }

    /**
     * Gets channel_order_id
     *
     * @return string
     */
    public function getChannelOrderId()
    {
        return $this->container['channel_order_id'];
    }

    /**
     * Sets channel_order_id
     *
     * @param string $channel_order_id channel_order_id
     *
     * @return $this
     */
    public function setChannelOrderId($channel_order_id)
    {
        $this->container['channel_order_id'] = $channel_order_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


