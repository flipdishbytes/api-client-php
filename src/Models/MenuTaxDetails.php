<?php
/**
 * MenuTaxDetails
 *
 * PHP version 5
 *
 * @category Class
 * @package  Flipdish\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Flipdish Open API v1.0
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.19
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Flipdish\Client\Models;

use \ArrayAccess;
use \Flipdish\Client\ObjectSerializer;

/**
 * MenuTaxDetails Class Doc Comment
 *
 * @category Class
 * @description Tax information for Menu
 * @package  Flipdish\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class MenuTaxDetails implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'MenuTaxDetails';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'tax_rates' => '\Flipdish\Client\Models\MenuTaxRate[]',
        'display_tax' => 'bool',
        'tax_type' => 'string',
        'item_taxes' => 'map[string,int]',
        'set_item_taxes' => 'map[string,int]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'tax_rates' => null,
        'display_tax' => null,
        'tax_type' => null,
        'item_taxes' => 'int32',
        'set_item_taxes' => 'int32'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'tax_rates' => 'TaxRates',
        'display_tax' => 'DisplayTax',
        'tax_type' => 'TaxType',
        'item_taxes' => 'ItemTaxes',
        'set_item_taxes' => 'SetItemTaxes'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'tax_rates' => 'setTaxRates',
        'display_tax' => 'setDisplayTax',
        'tax_type' => 'setTaxType',
        'item_taxes' => 'setItemTaxes',
        'set_item_taxes' => 'setSetItemTaxes'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'tax_rates' => 'getTaxRates',
        'display_tax' => 'getDisplayTax',
        'tax_type' => 'getTaxType',
        'item_taxes' => 'getItemTaxes',
        'set_item_taxes' => 'getSetItemTaxes'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const TAX_TYPE_INCLUDED_IN_BASE_PRICE = 'IncludedInBasePrice';
    const TAX_TYPE_EXCLUDED_FROM_BASE_PRICE = 'ExcludedFromBasePrice';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTaxTypeAllowableValues()
    {
        return [
            self::TAX_TYPE_INCLUDED_IN_BASE_PRICE,
            self::TAX_TYPE_EXCLUDED_FROM_BASE_PRICE,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['tax_rates'] = isset($data['tax_rates']) ? $data['tax_rates'] : null;
        $this->container['display_tax'] = isset($data['display_tax']) ? $data['display_tax'] : null;
        $this->container['tax_type'] = isset($data['tax_type']) ? $data['tax_type'] : null;
        $this->container['item_taxes'] = isset($data['item_taxes']) ? $data['item_taxes'] : null;
        $this->container['set_item_taxes'] = isset($data['set_item_taxes']) ? $data['set_item_taxes'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getTaxTypeAllowableValues();
        if (!is_null($this->container['tax_type']) && !in_array($this->container['tax_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'tax_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets tax_rates
     *
     * @return \Flipdish\Client\Models\MenuTaxRate[]
     */
    public function getTaxRates()
    {
        return $this->container['tax_rates'];
    }

    /**
     * Sets tax_rates
     *
     * @param \Flipdish\Client\Models\MenuTaxRate[] $tax_rates Tax Rates
     *
     * @return $this
     */
    public function setTaxRates($tax_rates)
    {
        $this->container['tax_rates'] = $tax_rates;

        return $this;
    }

    /**
     * Gets display_tax
     *
     * @return bool
     */
    public function getDisplayTax()
    {
        return $this->container['display_tax'];
    }

    /**
     * Sets display_tax
     *
     * @param bool $display_tax Display tax for Menu
     *
     * @return $this
     */
    public function setDisplayTax($display_tax)
    {
        $this->container['display_tax'] = $display_tax;

        return $this;
    }

    /**
     * Gets tax_type
     *
     * @return string
     */
    public function getTaxType()
    {
        return $this->container['tax_type'];
    }

    /**
     * Sets tax_type
     *
     * @param string $tax_type TaxType
     *
     * @return $this
     */
    public function setTaxType($tax_type)
    {
        $allowedValues = $this->getTaxTypeAllowableValues();
        if (!is_null($tax_type) && !in_array($tax_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'tax_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['tax_type'] = $tax_type;

        return $this;
    }

    /**
     * Gets item_taxes
     *
     * @return map[string,int]
     */
    public function getItemTaxes()
    {
        return $this->container['item_taxes'];
    }

    /**
     * Sets item_taxes
     *
     * @param map[string,int] $item_taxes ItemIds and TaxIds
     *
     * @return $this
     */
    public function setItemTaxes($item_taxes)
    {
        $this->container['item_taxes'] = $item_taxes;

        return $this;
    }

    /**
     * Gets set_item_taxes
     *
     * @return map[string,int]
     */
    public function getSetItemTaxes()
    {
        return $this->container['set_item_taxes'];
    }

    /**
     * Sets set_item_taxes
     *
     * @param map[string,int] $set_item_taxes SetItemIds and TaxIds
     *
     * @return $this
     */
    public function setSetItemTaxes($set_item_taxes)
    {
        $this->container['set_item_taxes'] = $set_item_taxes;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


