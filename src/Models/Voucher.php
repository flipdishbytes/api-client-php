<?php
/**
 * Voucher
 *
 * PHP version 5
 *
 * @category Class
 * @package  Flipdish\\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Flipdish Open API v1.0
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.43
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Flipdish\\Client\Models;

use \ArrayAccess;
use \Flipdish\\Client\ObjectSerializer;

/**
 * Voucher Class Doc Comment
 *
 * @category Class
 * @description Voucher
 * @package  Flipdish\\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Voucher implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Voucher';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'voucher_id' => 'int',
        'status' => 'string',
        'voucher_type' => 'string',
        'currency' => 'string',
        'store_names' => 'string[]',
        'promotion_details' => '\Flipdish\\Client\Models\PromotionDetails',
        'credit_note_details' => '\Flipdish\\Client\Models\CreditNoteDetails',
        'lump_discount_details' => '\Flipdish\\Client\Models\LumpDiscountDetails',
        'percent_discount_details' => '\Flipdish\\Client\Models\PercentDiscountDetails',
        'code' => 'string',
        'description' => 'string',
        'stores' => 'int[]',
        'valid_on_orders_over' => 'double',
        'takes_priority' => 'bool',
        'is_enabled' => 'bool',
        'is_automatically_applied' => 'bool',
        'include_delivery_fee' => 'bool',
        'is_valid_for_delivery_orders' => 'bool',
        'is_valid_for_pickup_orders' => 'bool',
        'is_valid_for_orders_payed_online' => 'bool',
        'is_valid_for_orders_payed_by_cash' => 'bool',
        'is_valid_for_first_order_only' => 'bool',
        'is_valid_once_per_customer' => 'bool',
        'is_valid_only_once' => 'bool',
        'is_discoverable' => 'bool',
        'start_date' => '\DateTime',
        'expiry_date' => '\DateTime',
        'channel_restrictions' => 'string[]',
        'validity_periods' => '\Flipdish\\Client\Models\ValidityPeriod[]',
        'voucher_sub_type' => 'string',
        'customer_id' => 'int',
        'max_redemptions' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'voucher_id' => 'int32',
        'status' => null,
        'voucher_type' => null,
        'currency' => null,
        'store_names' => null,
        'promotion_details' => null,
        'credit_note_details' => null,
        'lump_discount_details' => null,
        'percent_discount_details' => null,
        'code' => null,
        'description' => null,
        'stores' => 'int32',
        'valid_on_orders_over' => 'double',
        'takes_priority' => null,
        'is_enabled' => null,
        'is_automatically_applied' => null,
        'include_delivery_fee' => null,
        'is_valid_for_delivery_orders' => null,
        'is_valid_for_pickup_orders' => null,
        'is_valid_for_orders_payed_online' => null,
        'is_valid_for_orders_payed_by_cash' => null,
        'is_valid_for_first_order_only' => null,
        'is_valid_once_per_customer' => null,
        'is_valid_only_once' => null,
        'is_discoverable' => null,
        'start_date' => 'date-time',
        'expiry_date' => 'date-time',
        'channel_restrictions' => null,
        'validity_periods' => null,
        'voucher_sub_type' => null,
        'customer_id' => 'int32',
        'max_redemptions' => 'int32'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'voucher_id' => 'VoucherId',
        'status' => 'Status',
        'voucher_type' => 'VoucherType',
        'currency' => 'Currency',
        'store_names' => 'StoreNames',
        'promotion_details' => 'PromotionDetails',
        'credit_note_details' => 'CreditNoteDetails',
        'lump_discount_details' => 'LumpDiscountDetails',
        'percent_discount_details' => 'PercentDiscountDetails',
        'code' => 'Code',
        'description' => 'Description',
        'stores' => 'Stores',
        'valid_on_orders_over' => 'ValidOnOrdersOver',
        'takes_priority' => 'TakesPriority',
        'is_enabled' => 'IsEnabled',
        'is_automatically_applied' => 'IsAutomaticallyApplied',
        'include_delivery_fee' => 'IncludeDeliveryFee',
        'is_valid_for_delivery_orders' => 'IsValidForDeliveryOrders',
        'is_valid_for_pickup_orders' => 'IsValidForPickupOrders',
        'is_valid_for_orders_payed_online' => 'IsValidForOrdersPayedOnline',
        'is_valid_for_orders_payed_by_cash' => 'IsValidForOrdersPayedByCash',
        'is_valid_for_first_order_only' => 'IsValidForFirstOrderOnly',
        'is_valid_once_per_customer' => 'IsValidOncePerCustomer',
        'is_valid_only_once' => 'IsValidOnlyOnce',
        'is_discoverable' => 'IsDiscoverable',
        'start_date' => 'StartDate',
        'expiry_date' => 'ExpiryDate',
        'channel_restrictions' => 'ChannelRestrictions',
        'validity_periods' => 'ValidityPeriods',
        'voucher_sub_type' => 'VoucherSubType',
        'customer_id' => 'CustomerId',
        'max_redemptions' => 'MaxRedemptions'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'voucher_id' => 'setVoucherId',
        'status' => 'setStatus',
        'voucher_type' => 'setVoucherType',
        'currency' => 'setCurrency',
        'store_names' => 'setStoreNames',
        'promotion_details' => 'setPromotionDetails',
        'credit_note_details' => 'setCreditNoteDetails',
        'lump_discount_details' => 'setLumpDiscountDetails',
        'percent_discount_details' => 'setPercentDiscountDetails',
        'code' => 'setCode',
        'description' => 'setDescription',
        'stores' => 'setStores',
        'valid_on_orders_over' => 'setValidOnOrdersOver',
        'takes_priority' => 'setTakesPriority',
        'is_enabled' => 'setIsEnabled',
        'is_automatically_applied' => 'setIsAutomaticallyApplied',
        'include_delivery_fee' => 'setIncludeDeliveryFee',
        'is_valid_for_delivery_orders' => 'setIsValidForDeliveryOrders',
        'is_valid_for_pickup_orders' => 'setIsValidForPickupOrders',
        'is_valid_for_orders_payed_online' => 'setIsValidForOrdersPayedOnline',
        'is_valid_for_orders_payed_by_cash' => 'setIsValidForOrdersPayedByCash',
        'is_valid_for_first_order_only' => 'setIsValidForFirstOrderOnly',
        'is_valid_once_per_customer' => 'setIsValidOncePerCustomer',
        'is_valid_only_once' => 'setIsValidOnlyOnce',
        'is_discoverable' => 'setIsDiscoverable',
        'start_date' => 'setStartDate',
        'expiry_date' => 'setExpiryDate',
        'channel_restrictions' => 'setChannelRestrictions',
        'validity_periods' => 'setValidityPeriods',
        'voucher_sub_type' => 'setVoucherSubType',
        'customer_id' => 'setCustomerId',
        'max_redemptions' => 'setMaxRedemptions'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'voucher_id' => 'getVoucherId',
        'status' => 'getStatus',
        'voucher_type' => 'getVoucherType',
        'currency' => 'getCurrency',
        'store_names' => 'getStoreNames',
        'promotion_details' => 'getPromotionDetails',
        'credit_note_details' => 'getCreditNoteDetails',
        'lump_discount_details' => 'getLumpDiscountDetails',
        'percent_discount_details' => 'getPercentDiscountDetails',
        'code' => 'getCode',
        'description' => 'getDescription',
        'stores' => 'getStores',
        'valid_on_orders_over' => 'getValidOnOrdersOver',
        'takes_priority' => 'getTakesPriority',
        'is_enabled' => 'getIsEnabled',
        'is_automatically_applied' => 'getIsAutomaticallyApplied',
        'include_delivery_fee' => 'getIncludeDeliveryFee',
        'is_valid_for_delivery_orders' => 'getIsValidForDeliveryOrders',
        'is_valid_for_pickup_orders' => 'getIsValidForPickupOrders',
        'is_valid_for_orders_payed_online' => 'getIsValidForOrdersPayedOnline',
        'is_valid_for_orders_payed_by_cash' => 'getIsValidForOrdersPayedByCash',
        'is_valid_for_first_order_only' => 'getIsValidForFirstOrderOnly',
        'is_valid_once_per_customer' => 'getIsValidOncePerCustomer',
        'is_valid_only_once' => 'getIsValidOnlyOnce',
        'is_discoverable' => 'getIsDiscoverable',
        'start_date' => 'getStartDate',
        'expiry_date' => 'getExpiryDate',
        'channel_restrictions' => 'getChannelRestrictions',
        'validity_periods' => 'getValidityPeriods',
        'voucher_sub_type' => 'getVoucherSubType',
        'customer_id' => 'getCustomerId',
        'max_redemptions' => 'getMaxRedemptions'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const STATUS_VALID = 'Valid';
    const STATUS_NOT_YET_VALID = 'NotYetValid';
    const STATUS_EXPIRED = 'Expired';
    const STATUS_USED = 'Used';
    const STATUS_DISABLED = 'Disabled';
    const VOUCHER_TYPE_PERCENTAGE_DISCOUNT = 'PercentageDiscount';
    const VOUCHER_TYPE_LUMP_DISCOUNT = 'LumpDiscount';
    const VOUCHER_TYPE_ADD_ITEM = 'AddItem';
    const VOUCHER_TYPE_CREDIT_NOTE = 'CreditNote';
    const VOUCHER_TYPE_FREE_DELIVERY = 'FreeDelivery';
    const CURRENCY_EUR = 'EUR';
    const CURRENCY_USD = 'USD';
    const CURRENCY_GBP = 'GBP';
    const CURRENCY_CAD = 'CAD';
    const CURRENCY_AUD = 'AUD';
    const CURRENCY_DJF = 'DJF';
    const CURRENCY_ZAR = 'ZAR';
    const CURRENCY_ETB = 'ETB';
    const CURRENCY_AED = 'AED';
    const CURRENCY_BHD = 'BHD';
    const CURRENCY_DZD = 'DZD';
    const CURRENCY_EGP = 'EGP';
    const CURRENCY_IQD = 'IQD';
    const CURRENCY_JOD = 'JOD';
    const CURRENCY_KWD = 'KWD';
    const CURRENCY_LBP = 'LBP';
    const CURRENCY_LYD = 'LYD';
    const CURRENCY_MAD = 'MAD';
    const CURRENCY_OMR = 'OMR';
    const CURRENCY_QAR = 'QAR';
    const CURRENCY_SAR = 'SAR';
    const CURRENCY_SYP = 'SYP';
    const CURRENCY_TND = 'TND';
    const CURRENCY_YER = 'YER';
    const CURRENCY_CLP = 'CLP';
    const CURRENCY_INR = 'INR';
    const CURRENCY_AZN = 'AZN';
    const CURRENCY_RUB = 'RUB';
    const CURRENCY_BYN = 'BYN';
    const CURRENCY_BGN = 'BGN';
    const CURRENCY_NGN = 'NGN';
    const CURRENCY_BDT = 'BDT';
    const CURRENCY_CNY = 'CNY';
    const CURRENCY_BAM = 'BAM';
    const CURRENCY_CZK = 'CZK';
    const CURRENCY_DKK = 'DKK';
    const CURRENCY_CHF = 'CHF';
    const CURRENCY_MVR = 'MVR';
    const CURRENCY_BTN = 'BTN';
    const CURRENCY_XCD = 'XCD';
    const CURRENCY_BZD = 'BZD';
    const CURRENCY_HKD = 'HKD';
    const CURRENCY_IDR = 'IDR';
    const CURRENCY_JMD = 'JMD';
    const CURRENCY_MYR = 'MYR';
    const CURRENCY_NZD = 'NZD';
    const CURRENCY_PHP = 'PHP';
    const CURRENCY_SGD = 'SGD';
    const CURRENCY_TTD = 'TTD';
    const CURRENCY_XDR = 'XDR';
    const CURRENCY_ARS = 'ARS';
    const CURRENCY_BOB = 'BOB';
    const CURRENCY_COP = 'COP';
    const CURRENCY_CRC = 'CRC';
    const CURRENCY_CUP = 'CUP';
    const CURRENCY_DOP = 'DOP';
    const CURRENCY_GTQ = 'GTQ';
    const CURRENCY_HNL = 'HNL';
    const CURRENCY_MXN = 'MXN';
    const CURRENCY_NIO = 'NIO';
    const CURRENCY_PAB = 'PAB';
    const CURRENCY_PEN = 'PEN';
    const CURRENCY_PYG = 'PYG';
    const CURRENCY_UYU = 'UYU';
    const CURRENCY_VEF = 'VEF';
    const CURRENCY_IRR = 'IRR';
    const CURRENCY_XOF = 'XOF';
    const CURRENCY_CDF = 'CDF';
    const CURRENCY_XAF = 'XAF';
    const CURRENCY_HTG = 'HTG';
    const CURRENCY_ILS = 'ILS';
    const CURRENCY_HRK = 'HRK';
    const CURRENCY_HUF = 'HUF';
    const CURRENCY_AMD = 'AMD';
    const CURRENCY_ISK = 'ISK';
    const CURRENCY_JPY = 'JPY';
    const CURRENCY_GEL = 'GEL';
    const CURRENCY_KZT = 'KZT';
    const CURRENCY_KHR = 'KHR';
    const CURRENCY_KRW = 'KRW';
    const CURRENCY_KGS = 'KGS';
    const CURRENCY_LAK = 'LAK';
    const CURRENCY_MKD = 'MKD';
    const CURRENCY_MNT = 'MNT';
    const CURRENCY_BND = 'BND';
    const CURRENCY_MMK = 'MMK';
    const CURRENCY_NOK = 'NOK';
    const CURRENCY_NPR = 'NPR';
    const CURRENCY_PKR = 'PKR';
    const CURRENCY_PLN = 'PLN';
    const CURRENCY_AFN = 'AFN';
    const CURRENCY_BRL = 'BRL';
    const CURRENCY_MDL = 'MDL';
    const CURRENCY_RON = 'RON';
    const CURRENCY_RWF = 'RWF';
    const CURRENCY_SEK = 'SEK';
    const CURRENCY_LKR = 'LKR';
    const CURRENCY_SOS = 'SOS';
    const CURRENCY_ALL = 'ALL';
    const CURRENCY_RSD = 'RSD';
    const CURRENCY_KES = 'KES';
    const CURRENCY_TJS = 'TJS';
    const CURRENCY_THB = 'THB';
    const CURRENCY_ERN = 'ERN';
    const CURRENCY_TMT = 'TMT';
    const CURRENCY_BWP = 'BWP';
    const CURRENCY__TRY = 'TRY';
    const CURRENCY_UAH = 'UAH';
    const CURRENCY_UZS = 'UZS';
    const CURRENCY_VND = 'VND';
    const CURRENCY_MOP = 'MOP';
    const CURRENCY_TWD = 'TWD';
    const CURRENCY_BMD = 'BMD';
    const CHANNEL_RESTRICTIONS_IOS = 'Ios';
    const CHANNEL_RESTRICTIONS_ANDROID = 'Android';
    const CHANNEL_RESTRICTIONS_WEB = 'Web';
    const CHANNEL_RESTRICTIONS_KIOSK = 'Kiosk';
    const CHANNEL_RESTRICTIONS_POS = 'Pos';
    const CHANNEL_RESTRICTIONS_GOOGLE = 'Google';
    const VOUCHER_SUB_TYPE_NONE = 'None';
    const VOUCHER_SUB_TYPE_SIGN_UP = 'SignUp';
    const VOUCHER_SUB_TYPE_LOYALTY = 'Loyalty';
    const VOUCHER_SUB_TYPE_LOYALTY25 = 'Loyalty25';
    const VOUCHER_SUB_TYPE_RETENTION = 'Retention';
    const VOUCHER_SUB_TYPE_SECONDARY_RETENTION = 'SecondaryRetention';
    const VOUCHER_SUB_TYPE_CUSTOM = 'Custom';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_VALID,
            self::STATUS_NOT_YET_VALID,
            self::STATUS_EXPIRED,
            self::STATUS_USED,
            self::STATUS_DISABLED,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getVoucherTypeAllowableValues()
    {
        return [
            self::VOUCHER_TYPE_PERCENTAGE_DISCOUNT,
            self::VOUCHER_TYPE_LUMP_DISCOUNT,
            self::VOUCHER_TYPE_ADD_ITEM,
            self::VOUCHER_TYPE_CREDIT_NOTE,
            self::VOUCHER_TYPE_FREE_DELIVERY,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getCurrencyAllowableValues()
    {
        return [
            self::CURRENCY_EUR,
            self::CURRENCY_USD,
            self::CURRENCY_GBP,
            self::CURRENCY_CAD,
            self::CURRENCY_AUD,
            self::CURRENCY_DJF,
            self::CURRENCY_ZAR,
            self::CURRENCY_ETB,
            self::CURRENCY_AED,
            self::CURRENCY_BHD,
            self::CURRENCY_DZD,
            self::CURRENCY_EGP,
            self::CURRENCY_IQD,
            self::CURRENCY_JOD,
            self::CURRENCY_KWD,
            self::CURRENCY_LBP,
            self::CURRENCY_LYD,
            self::CURRENCY_MAD,
            self::CURRENCY_OMR,
            self::CURRENCY_QAR,
            self::CURRENCY_SAR,
            self::CURRENCY_SYP,
            self::CURRENCY_TND,
            self::CURRENCY_YER,
            self::CURRENCY_CLP,
            self::CURRENCY_INR,
            self::CURRENCY_AZN,
            self::CURRENCY_RUB,
            self::CURRENCY_BYN,
            self::CURRENCY_BGN,
            self::CURRENCY_NGN,
            self::CURRENCY_BDT,
            self::CURRENCY_CNY,
            self::CURRENCY_BAM,
            self::CURRENCY_CZK,
            self::CURRENCY_DKK,
            self::CURRENCY_CHF,
            self::CURRENCY_MVR,
            self::CURRENCY_BTN,
            self::CURRENCY_XCD,
            self::CURRENCY_BZD,
            self::CURRENCY_HKD,
            self::CURRENCY_IDR,
            self::CURRENCY_JMD,
            self::CURRENCY_MYR,
            self::CURRENCY_NZD,
            self::CURRENCY_PHP,
            self::CURRENCY_SGD,
            self::CURRENCY_TTD,
            self::CURRENCY_XDR,
            self::CURRENCY_ARS,
            self::CURRENCY_BOB,
            self::CURRENCY_COP,
            self::CURRENCY_CRC,
            self::CURRENCY_CUP,
            self::CURRENCY_DOP,
            self::CURRENCY_GTQ,
            self::CURRENCY_HNL,
            self::CURRENCY_MXN,
            self::CURRENCY_NIO,
            self::CURRENCY_PAB,
            self::CURRENCY_PEN,
            self::CURRENCY_PYG,
            self::CURRENCY_UYU,
            self::CURRENCY_VEF,
            self::CURRENCY_IRR,
            self::CURRENCY_XOF,
            self::CURRENCY_CDF,
            self::CURRENCY_XAF,
            self::CURRENCY_HTG,
            self::CURRENCY_ILS,
            self::CURRENCY_HRK,
            self::CURRENCY_HUF,
            self::CURRENCY_AMD,
            self::CURRENCY_ISK,
            self::CURRENCY_JPY,
            self::CURRENCY_GEL,
            self::CURRENCY_KZT,
            self::CURRENCY_KHR,
            self::CURRENCY_KRW,
            self::CURRENCY_KGS,
            self::CURRENCY_LAK,
            self::CURRENCY_MKD,
            self::CURRENCY_MNT,
            self::CURRENCY_BND,
            self::CURRENCY_MMK,
            self::CURRENCY_NOK,
            self::CURRENCY_NPR,
            self::CURRENCY_PKR,
            self::CURRENCY_PLN,
            self::CURRENCY_AFN,
            self::CURRENCY_BRL,
            self::CURRENCY_MDL,
            self::CURRENCY_RON,
            self::CURRENCY_RWF,
            self::CURRENCY_SEK,
            self::CURRENCY_LKR,
            self::CURRENCY_SOS,
            self::CURRENCY_ALL,
            self::CURRENCY_RSD,
            self::CURRENCY_KES,
            self::CURRENCY_TJS,
            self::CURRENCY_THB,
            self::CURRENCY_ERN,
            self::CURRENCY_TMT,
            self::CURRENCY_BWP,
            self::CURRENCY__TRY,
            self::CURRENCY_UAH,
            self::CURRENCY_UZS,
            self::CURRENCY_VND,
            self::CURRENCY_MOP,
            self::CURRENCY_TWD,
            self::CURRENCY_BMD,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getChannelRestrictionsAllowableValues()
    {
        return [
            self::CHANNEL_RESTRICTIONS_IOS,
            self::CHANNEL_RESTRICTIONS_ANDROID,
            self::CHANNEL_RESTRICTIONS_WEB,
            self::CHANNEL_RESTRICTIONS_KIOSK,
            self::CHANNEL_RESTRICTIONS_POS,
            self::CHANNEL_RESTRICTIONS_GOOGLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getVoucherSubTypeAllowableValues()
    {
        return [
            self::VOUCHER_SUB_TYPE_NONE,
            self::VOUCHER_SUB_TYPE_SIGN_UP,
            self::VOUCHER_SUB_TYPE_LOYALTY,
            self::VOUCHER_SUB_TYPE_LOYALTY25,
            self::VOUCHER_SUB_TYPE_RETENTION,
            self::VOUCHER_SUB_TYPE_SECONDARY_RETENTION,
            self::VOUCHER_SUB_TYPE_CUSTOM,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['voucher_id'] = isset($data['voucher_id']) ? $data['voucher_id'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['voucher_type'] = isset($data['voucher_type']) ? $data['voucher_type'] : null;
        $this->container['currency'] = isset($data['currency']) ? $data['currency'] : null;
        $this->container['store_names'] = isset($data['store_names']) ? $data['store_names'] : null;
        $this->container['promotion_details'] = isset($data['promotion_details']) ? $data['promotion_details'] : null;
        $this->container['credit_note_details'] = isset($data['credit_note_details']) ? $data['credit_note_details'] : null;
        $this->container['lump_discount_details'] = isset($data['lump_discount_details']) ? $data['lump_discount_details'] : null;
        $this->container['percent_discount_details'] = isset($data['percent_discount_details']) ? $data['percent_discount_details'] : null;
        $this->container['code'] = isset($data['code']) ? $data['code'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['stores'] = isset($data['stores']) ? $data['stores'] : null;
        $this->container['valid_on_orders_over'] = isset($data['valid_on_orders_over']) ? $data['valid_on_orders_over'] : null;
        $this->container['takes_priority'] = isset($data['takes_priority']) ? $data['takes_priority'] : null;
        $this->container['is_enabled'] = isset($data['is_enabled']) ? $data['is_enabled'] : null;
        $this->container['is_automatically_applied'] = isset($data['is_automatically_applied']) ? $data['is_automatically_applied'] : null;
        $this->container['include_delivery_fee'] = isset($data['include_delivery_fee']) ? $data['include_delivery_fee'] : null;
        $this->container['is_valid_for_delivery_orders'] = isset($data['is_valid_for_delivery_orders']) ? $data['is_valid_for_delivery_orders'] : null;
        $this->container['is_valid_for_pickup_orders'] = isset($data['is_valid_for_pickup_orders']) ? $data['is_valid_for_pickup_orders'] : null;
        $this->container['is_valid_for_orders_payed_online'] = isset($data['is_valid_for_orders_payed_online']) ? $data['is_valid_for_orders_payed_online'] : null;
        $this->container['is_valid_for_orders_payed_by_cash'] = isset($data['is_valid_for_orders_payed_by_cash']) ? $data['is_valid_for_orders_payed_by_cash'] : null;
        $this->container['is_valid_for_first_order_only'] = isset($data['is_valid_for_first_order_only']) ? $data['is_valid_for_first_order_only'] : null;
        $this->container['is_valid_once_per_customer'] = isset($data['is_valid_once_per_customer']) ? $data['is_valid_once_per_customer'] : null;
        $this->container['is_valid_only_once'] = isset($data['is_valid_only_once']) ? $data['is_valid_only_once'] : null;
        $this->container['is_discoverable'] = isset($data['is_discoverable']) ? $data['is_discoverable'] : null;
        $this->container['start_date'] = isset($data['start_date']) ? $data['start_date'] : null;
        $this->container['expiry_date'] = isset($data['expiry_date']) ? $data['expiry_date'] : null;
        $this->container['channel_restrictions'] = isset($data['channel_restrictions']) ? $data['channel_restrictions'] : null;
        $this->container['validity_periods'] = isset($data['validity_periods']) ? $data['validity_periods'] : null;
        $this->container['voucher_sub_type'] = isset($data['voucher_sub_type']) ? $data['voucher_sub_type'] : null;
        $this->container['customer_id'] = isset($data['customer_id']) ? $data['customer_id'] : null;
        $this->container['max_redemptions'] = isset($data['max_redemptions']) ? $data['max_redemptions'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($this->container['status']) && !in_array($this->container['status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'status', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getVoucherTypeAllowableValues();
        if (!is_null($this->container['voucher_type']) && !in_array($this->container['voucher_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'voucher_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getCurrencyAllowableValues();
        if (!is_null($this->container['currency']) && !in_array($this->container['currency'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'currency', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getVoucherSubTypeAllowableValues();
        if (!is_null($this->container['voucher_sub_type']) && !in_array($this->container['voucher_sub_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'voucher_sub_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets voucher_id
     *
     * @return int
     */
    public function getVoucherId()
    {
        return $this->container['voucher_id'];
    }

    /**
     * Sets voucher_id
     *
     * @param int $voucher_id Voucher Id
     *
     * @return $this
     */
    public function setVoucherId($voucher_id)
    {
        $this->container['voucher_id'] = $voucher_id;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status Voucher Status
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($status) && !in_array($status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'status', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets voucher_type
     *
     * @return string
     */
    public function getVoucherType()
    {
        return $this->container['voucher_type'];
    }

    /**
     * Sets voucher_type
     *
     * @param string $voucher_type Voucher Type
     *
     * @return $this
     */
    public function setVoucherType($voucher_type)
    {
        $allowedValues = $this->getVoucherTypeAllowableValues();
        if (!is_null($voucher_type) && !in_array($voucher_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'voucher_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['voucher_type'] = $voucher_type;

        return $this;
    }

    /**
     * Gets currency
     *
     * @return string
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     *
     * @param string $currency Currency of the voucher
     *
     * @return $this
     */
    public function setCurrency($currency)
    {
        $allowedValues = $this->getCurrencyAllowableValues();
        if (!is_null($currency) && !in_array($currency, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'currency', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets store_names
     *
     * @return string[]
     */
    public function getStoreNames()
    {
        return $this->container['store_names'];
    }

    /**
     * Sets store_names
     *
     * @param string[] $store_names Stores that this voucher applies to
     *
     * @return $this
     */
    public function setStoreNames($store_names)
    {
        $this->container['store_names'] = $store_names;

        return $this;
    }

    /**
     * Gets promotion_details
     *
     * @return \Flipdish\\Client\Models\PromotionDetails
     */
    public function getPromotionDetails()
    {
        return $this->container['promotion_details'];
    }

    /**
     * Sets promotion_details
     *
     * @param \Flipdish\\Client\Models\PromotionDetails $promotion_details Promotion details
     *
     * @return $this
     */
    public function setPromotionDetails($promotion_details)
    {
        $this->container['promotion_details'] = $promotion_details;

        return $this;
    }

    /**
     * Gets credit_note_details
     *
     * @return \Flipdish\\Client\Models\CreditNoteDetails
     */
    public function getCreditNoteDetails()
    {
        return $this->container['credit_note_details'];
    }

    /**
     * Sets credit_note_details
     *
     * @param \Flipdish\\Client\Models\CreditNoteDetails $credit_note_details Credit note details
     *
     * @return $this
     */
    public function setCreditNoteDetails($credit_note_details)
    {
        $this->container['credit_note_details'] = $credit_note_details;

        return $this;
    }

    /**
     * Gets lump_discount_details
     *
     * @return \Flipdish\\Client\Models\LumpDiscountDetails
     */
    public function getLumpDiscountDetails()
    {
        return $this->container['lump_discount_details'];
    }

    /**
     * Sets lump_discount_details
     *
     * @param \Flipdish\\Client\Models\LumpDiscountDetails $lump_discount_details Lump discount details
     *
     * @return $this
     */
    public function setLumpDiscountDetails($lump_discount_details)
    {
        $this->container['lump_discount_details'] = $lump_discount_details;

        return $this;
    }

    /**
     * Gets percent_discount_details
     *
     * @return \Flipdish\\Client\Models\PercentDiscountDetails
     */
    public function getPercentDiscountDetails()
    {
        return $this->container['percent_discount_details'];
    }

    /**
     * Sets percent_discount_details
     *
     * @param \Flipdish\\Client\Models\PercentDiscountDetails $percent_discount_details Percent discount details
     *
     * @return $this
     */
    public function setPercentDiscountDetails($percent_discount_details)
    {
        $this->container['percent_discount_details'] = $percent_discount_details;

        return $this;
    }

    /**
     * Gets code
     *
     * @return string
     */
    public function getCode()
    {
        return $this->container['code'];
    }

    /**
     * Sets code
     *
     * @param string $code Voucher Code
     *
     * @return $this
     */
    public function setCode($code)
    {
        $this->container['code'] = $code;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description Voucher Description (Visible on printout)
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets stores
     *
     * @return int[]
     */
    public function getStores()
    {
        return $this->container['stores'];
    }

    /**
     * Sets stores
     *
     * @param int[] $stores Stores that this voucher applies to
     *
     * @return $this
     */
    public function setStores($stores)
    {
        $this->container['stores'] = $stores;

        return $this;
    }

    /**
     * Gets valid_on_orders_over
     *
     * @return double
     */
    public function getValidOnOrdersOver()
    {
        return $this->container['valid_on_orders_over'];
    }

    /**
     * Sets valid_on_orders_over
     *
     * @param double $valid_on_orders_over Valid on orders on or above
     *
     * @return $this
     */
    public function setValidOnOrdersOver($valid_on_orders_over)
    {
        $this->container['valid_on_orders_over'] = $valid_on_orders_over;

        return $this;
    }

    /**
     * Gets takes_priority
     *
     * @return bool
     */
    public function getTakesPriority()
    {
        return $this->container['takes_priority'];
    }

    /**
     * Sets takes_priority
     *
     * @param bool $takes_priority Takes priority
     *
     * @return $this
     */
    public function setTakesPriority($takes_priority)
    {
        $this->container['takes_priority'] = $takes_priority;

        return $this;
    }

    /**
     * Gets is_enabled
     *
     * @return bool
     */
    public function getIsEnabled()
    {
        return $this->container['is_enabled'];
    }

    /**
     * Sets is_enabled
     *
     * @param bool $is_enabled Is voucher enabled
     *
     * @return $this
     */
    public function setIsEnabled($is_enabled)
    {
        $this->container['is_enabled'] = $is_enabled;

        return $this;
    }

    /**
     * Gets is_automatically_applied
     *
     * @return bool
     */
    public function getIsAutomaticallyApplied()
    {
        return $this->container['is_automatically_applied'];
    }

    /**
     * Sets is_automatically_applied
     *
     * @param bool $is_automatically_applied Is voucher automatically applied
     *
     * @return $this
     */
    public function setIsAutomaticallyApplied($is_automatically_applied)
    {
        $this->container['is_automatically_applied'] = $is_automatically_applied;

        return $this;
    }

    /**
     * Gets include_delivery_fee
     *
     * @return bool
     */
    public function getIncludeDeliveryFee()
    {
        return $this->container['include_delivery_fee'];
    }

    /**
     * Sets include_delivery_fee
     *
     * @param bool $include_delivery_fee Include delivery fees
     *
     * @return $this
     */
    public function setIncludeDeliveryFee($include_delivery_fee)
    {
        $this->container['include_delivery_fee'] = $include_delivery_fee;

        return $this;
    }

    /**
     * Gets is_valid_for_delivery_orders
     *
     * @return bool
     */
    public function getIsValidForDeliveryOrders()
    {
        return $this->container['is_valid_for_delivery_orders'];
    }

    /**
     * Sets is_valid_for_delivery_orders
     *
     * @param bool $is_valid_for_delivery_orders Valid for delivery orders
     *
     * @return $this
     */
    public function setIsValidForDeliveryOrders($is_valid_for_delivery_orders)
    {
        $this->container['is_valid_for_delivery_orders'] = $is_valid_for_delivery_orders;

        return $this;
    }

    /**
     * Gets is_valid_for_pickup_orders
     *
     * @return bool
     */
    public function getIsValidForPickupOrders()
    {
        return $this->container['is_valid_for_pickup_orders'];
    }

    /**
     * Sets is_valid_for_pickup_orders
     *
     * @param bool $is_valid_for_pickup_orders Valid for pickup orders
     *
     * @return $this
     */
    public function setIsValidForPickupOrders($is_valid_for_pickup_orders)
    {
        $this->container['is_valid_for_pickup_orders'] = $is_valid_for_pickup_orders;

        return $this;
    }

    /**
     * Gets is_valid_for_orders_payed_online
     *
     * @return bool
     */
    public function getIsValidForOrdersPayedOnline()
    {
        return $this->container['is_valid_for_orders_payed_online'];
    }

    /**
     * Sets is_valid_for_orders_payed_online
     *
     * @param bool $is_valid_for_orders_payed_online Valid for orders payed online
     *
     * @return $this
     */
    public function setIsValidForOrdersPayedOnline($is_valid_for_orders_payed_online)
    {
        $this->container['is_valid_for_orders_payed_online'] = $is_valid_for_orders_payed_online;

        return $this;
    }

    /**
     * Gets is_valid_for_orders_payed_by_cash
     *
     * @return bool
     */
    public function getIsValidForOrdersPayedByCash()
    {
        return $this->container['is_valid_for_orders_payed_by_cash'];
    }

    /**
     * Sets is_valid_for_orders_payed_by_cash
     *
     * @param bool $is_valid_for_orders_payed_by_cash Valid for orders payed in cash
     *
     * @return $this
     */
    public function setIsValidForOrdersPayedByCash($is_valid_for_orders_payed_by_cash)
    {
        $this->container['is_valid_for_orders_payed_by_cash'] = $is_valid_for_orders_payed_by_cash;

        return $this;
    }

    /**
     * Gets is_valid_for_first_order_only
     *
     * @return bool
     */
    public function getIsValidForFirstOrderOnly()
    {
        return $this->container['is_valid_for_first_order_only'];
    }

    /**
     * Sets is_valid_for_first_order_only
     *
     * @param bool $is_valid_for_first_order_only Valid only on the first order by the customer
     *
     * @return $this
     */
    public function setIsValidForFirstOrderOnly($is_valid_for_first_order_only)
    {
        $this->container['is_valid_for_first_order_only'] = $is_valid_for_first_order_only;

        return $this;
    }

    /**
     * Gets is_valid_once_per_customer
     *
     * @return bool
     */
    public function getIsValidOncePerCustomer()
    {
        return $this->container['is_valid_once_per_customer'];
    }

    /**
     * Sets is_valid_once_per_customer
     *
     * @param bool $is_valid_once_per_customer Valid once per customer
     *
     * @return $this
     */
    public function setIsValidOncePerCustomer($is_valid_once_per_customer)
    {
        $this->container['is_valid_once_per_customer'] = $is_valid_once_per_customer;

        return $this;
    }

    /**
     * Gets is_valid_only_once
     *
     * @return bool
     */
    public function getIsValidOnlyOnce()
    {
        return $this->container['is_valid_only_once'];
    }

    /**
     * Sets is_valid_only_once
     *
     * @param bool $is_valid_only_once Valid only once, by any customer (once used cannot be used again by any other customer)
     *
     * @return $this
     */
    public function setIsValidOnlyOnce($is_valid_only_once)
    {
        $this->container['is_valid_only_once'] = $is_valid_only_once;

        return $this;
    }

    /**
     * Gets is_discoverable
     *
     * @return bool
     */
    public function getIsDiscoverable()
    {
        return $this->container['is_discoverable'];
    }

    /**
     * Sets is_discoverable
     *
     * @param bool $is_discoverable Enables the voucher to be offered in the Voucher Discoverability feature
     *
     * @return $this
     */
    public function setIsDiscoverable($is_discoverable)
    {
        $this->container['is_discoverable'] = $is_discoverable;

        return $this;
    }

    /**
     * Gets start_date
     *
     * @return \DateTime
     */
    public function getStartDate()
    {
        return $this->container['start_date'];
    }

    /**
     * Sets start_date
     *
     * @param \DateTime $start_date Voucher Starts On (Time in UTC)
     *
     * @return $this
     */
    public function setStartDate($start_date)
    {
        $this->container['start_date'] = $start_date;

        return $this;
    }

    /**
     * Gets expiry_date
     *
     * @return \DateTime
     */
    public function getExpiryDate()
    {
        return $this->container['expiry_date'];
    }

    /**
     * Sets expiry_date
     *
     * @param \DateTime $expiry_date Voucher Expires On (Time in UTC)
     *
     * @return $this
     */
    public function setExpiryDate($expiry_date)
    {
        $this->container['expiry_date'] = $expiry_date;

        return $this;
    }

    /**
     * Gets channel_restrictions
     *
     * @return string[]
     */
    public function getChannelRestrictions()
    {
        return $this->container['channel_restrictions'];
    }

    /**
     * Sets channel_restrictions
     *
     * @param string[] $channel_restrictions Limit the channels this voucher can be used on
     *
     * @return $this
     */
    public function setChannelRestrictions($channel_restrictions)
    {
        $allowedValues = $this->getChannelRestrictionsAllowableValues();
        if (!is_null($channel_restrictions) && array_diff($channel_restrictions, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'channel_restrictions', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['channel_restrictions'] = $channel_restrictions;

        return $this;
    }

    /**
     * Gets validity_periods
     *
     * @return \Flipdish\\Client\Models\ValidityPeriod[]
     */
    public function getValidityPeriods()
    {
        return $this->container['validity_periods'];
    }

    /**
     * Sets validity_periods
     *
     * @param \Flipdish\\Client\Models\ValidityPeriod[] $validity_periods Periods in which the voucher is valid.  An empty list means the voucher is valid at all times.  When updating the voucher, if this is set to null, the validity periods won't be updated.
     *
     * @return $this
     */
    public function setValidityPeriods($validity_periods)
    {
        $this->container['validity_periods'] = $validity_periods;

        return $this;
    }

    /**
     * Gets voucher_sub_type
     *
     * @return string
     */
    public function getVoucherSubType()
    {
        return $this->container['voucher_sub_type'];
    }

    /**
     * Sets voucher_sub_type
     *
     * @param string $voucher_sub_type Voucher Subtype
     *
     * @return $this
     */
    public function setVoucherSubType($voucher_sub_type)
    {
        $allowedValues = $this->getVoucherSubTypeAllowableValues();
        if (!is_null($voucher_sub_type) && !in_array($voucher_sub_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'voucher_sub_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['voucher_sub_type'] = $voucher_sub_type;

        return $this;
    }

    /**
     * Gets customer_id
     *
     * @return int
     */
    public function getCustomerId()
    {
        return $this->container['customer_id'];
    }

    /**
     * Sets customer_id
     *
     * @param int $customer_id Customer UserID
     *
     * @return $this
     */
    public function setCustomerId($customer_id)
    {
        $this->container['customer_id'] = $customer_id;

        return $this;
    }

    /**
     * Gets max_redemptions
     *
     * @return int
     */
    public function getMaxRedemptions()
    {
        return $this->container['max_redemptions'];
    }

    /**
     * Sets max_redemptions
     *
     * @param int $max_redemptions Maximum number of times the voucher can be redeemed (used)
     *
     * @return $this
     */
    public function setMaxRedemptions($max_redemptions)
    {
        $this->container['max_redemptions'] = $max_redemptions;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


