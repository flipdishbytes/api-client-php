<?php
/**
 * StuartSettingsTransportPrices
 *
 * PHP version 5
 *
 * @category Class
 * @package  Flipdish\\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Flipdish Open API v1.0
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.43
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Flipdish\\Client\Models;

use \ArrayAccess;
use \Flipdish\\Client\ObjectSerializer;

/**
 * StuartSettingsTransportPrices Class Doc Comment
 *
 * @category Class
 * @description If the order exceeds are certain amount this configuration will determine a new vehicle type
 * @package  Flipdish\\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class StuartSettingsTransportPrices implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'StuartSettings_TransportPrices';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'bike' => 'double',
        'cargobike' => 'double',
        'cargobikexl' => 'double',
        'motorbike' => 'double',
        'motorbikexl' => 'double',
        'car' => 'double',
        'van' => 'double'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'bike' => 'double',
        'cargobike' => 'double',
        'cargobikexl' => 'double',
        'motorbike' => 'double',
        'motorbikexl' => 'double',
        'car' => 'double',
        'van' => 'double'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'bike' => 'Bike',
        'cargobike' => 'Cargobike',
        'cargobikexl' => 'Cargobikexl',
        'motorbike' => 'Motorbike',
        'motorbikexl' => 'Motorbikexl',
        'car' => 'Car',
        'van' => 'Van'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'bike' => 'setBike',
        'cargobike' => 'setCargobike',
        'cargobikexl' => 'setCargobikexl',
        'motorbike' => 'setMotorbike',
        'motorbikexl' => 'setMotorbikexl',
        'car' => 'setCar',
        'van' => 'setVan'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'bike' => 'getBike',
        'cargobike' => 'getCargobike',
        'cargobikexl' => 'getCargobikexl',
        'motorbike' => 'getMotorbike',
        'motorbikexl' => 'getMotorbikexl',
        'car' => 'getCar',
        'van' => 'getVan'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['bike'] = isset($data['bike']) ? $data['bike'] : null;
        $this->container['cargobike'] = isset($data['cargobike']) ? $data['cargobike'] : null;
        $this->container['cargobikexl'] = isset($data['cargobikexl']) ? $data['cargobikexl'] : null;
        $this->container['motorbike'] = isset($data['motorbike']) ? $data['motorbike'] : null;
        $this->container['motorbikexl'] = isset($data['motorbikexl']) ? $data['motorbikexl'] : null;
        $this->container['car'] = isset($data['car']) ? $data['car'] : null;
        $this->container['van'] = isset($data['van']) ? $data['van'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets bike
     *
     * @return double
     */
    public function getBike()
    {
        return $this->container['bike'];
    }

    /**
     * Sets bike
     *
     * @param double $bike bike
     *
     * @return $this
     */
    public function setBike($bike)
    {
        $this->container['bike'] = $bike;

        return $this;
    }

    /**
     * Gets cargobike
     *
     * @return double
     */
    public function getCargobike()
    {
        return $this->container['cargobike'];
    }

    /**
     * Sets cargobike
     *
     * @param double $cargobike cargobike
     *
     * @return $this
     */
    public function setCargobike($cargobike)
    {
        $this->container['cargobike'] = $cargobike;

        return $this;
    }

    /**
     * Gets cargobikexl
     *
     * @return double
     */
    public function getCargobikexl()
    {
        return $this->container['cargobikexl'];
    }

    /**
     * Sets cargobikexl
     *
     * @param double $cargobikexl cargobikexl
     *
     * @return $this
     */
    public function setCargobikexl($cargobikexl)
    {
        $this->container['cargobikexl'] = $cargobikexl;

        return $this;
    }

    /**
     * Gets motorbike
     *
     * @return double
     */
    public function getMotorbike()
    {
        return $this->container['motorbike'];
    }

    /**
     * Sets motorbike
     *
     * @param double $motorbike motorbike
     *
     * @return $this
     */
    public function setMotorbike($motorbike)
    {
        $this->container['motorbike'] = $motorbike;

        return $this;
    }

    /**
     * Gets motorbikexl
     *
     * @return double
     */
    public function getMotorbikexl()
    {
        return $this->container['motorbikexl'];
    }

    /**
     * Sets motorbikexl
     *
     * @param double $motorbikexl motorbikexl
     *
     * @return $this
     */
    public function setMotorbikexl($motorbikexl)
    {
        $this->container['motorbikexl'] = $motorbikexl;

        return $this;
    }

    /**
     * Gets car
     *
     * @return double
     */
    public function getCar()
    {
        return $this->container['car'];
    }

    /**
     * Sets car
     *
     * @param double $car car
     *
     * @return $this
     */
    public function setCar($car)
    {
        $this->container['car'] = $car;

        return $this;
    }

    /**
     * Gets van
     *
     * @return double
     */
    public function getVan()
    {
        return $this->container['van'];
    }

    /**
     * Sets van
     *
     * @param double $van van
     *
     * @return $this
     */
    public function setVan($van)
    {
        $this->container['van'] = $van;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


