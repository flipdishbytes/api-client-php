<?php
/**
 * CreateFullMenu
 *
 * PHP version 5
 *
 * @category Class
 * @package  Flipdish\\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Flipdish Open API v1.0
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.43
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Flipdish\\Client\Models;

use \ArrayAccess;
use \Flipdish\\Client\ObjectSerializer;

/**
 * CreateFullMenu Class Doc Comment
 *
 * @category Class
 * @description Create menu object
 * @package  Flipdish\\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CreateFullMenu implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'CreateFullMenu';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'name' => 'string',
        'image_url' => 'string',
        'menu_sections' => '\Flipdish\\Client\Models\CreateFullMenuSection[]',
        'tax_rates' => '\Flipdish\\Client\Models\CreateMenuTaxRate[]',
        'display_section_links' => 'bool',
        'menu_section_behaviour' => 'string',
        'tax_type' => 'string',
        'is_integrated' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'name' => null,
        'image_url' => null,
        'menu_sections' => null,
        'tax_rates' => null,
        'display_section_links' => null,
        'menu_section_behaviour' => null,
        'tax_type' => null,
        'is_integrated' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'Name',
        'image_url' => 'ImageUrl',
        'menu_sections' => 'MenuSections',
        'tax_rates' => 'TaxRates',
        'display_section_links' => 'DisplaySectionLinks',
        'menu_section_behaviour' => 'MenuSectionBehaviour',
        'tax_type' => 'TaxType',
        'is_integrated' => 'IsIntegrated'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
        'image_url' => 'setImageUrl',
        'menu_sections' => 'setMenuSections',
        'tax_rates' => 'setTaxRates',
        'display_section_links' => 'setDisplaySectionLinks',
        'menu_section_behaviour' => 'setMenuSectionBehaviour',
        'tax_type' => 'setTaxType',
        'is_integrated' => 'setIsIntegrated'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
        'image_url' => 'getImageUrl',
        'menu_sections' => 'getMenuSections',
        'tax_rates' => 'getTaxRates',
        'display_section_links' => 'getDisplaySectionLinks',
        'menu_section_behaviour' => 'getMenuSectionBehaviour',
        'tax_type' => 'getTaxType',
        'is_integrated' => 'getIsIntegrated'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const MENU_SECTION_BEHAVIOUR_EXPAND_SINGLE = 'ExpandSingle';
    const MENU_SECTION_BEHAVIOUR_EXPAND_MULTIPLE = 'ExpandMultiple';
    const TAX_TYPE_INCLUDED_IN_BASE_PRICE = 'IncludedInBasePrice';
    const TAX_TYPE_EXCLUDED_FROM_BASE_PRICE = 'ExcludedFromBasePrice';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getMenuSectionBehaviourAllowableValues()
    {
        return [
            self::MENU_SECTION_BEHAVIOUR_EXPAND_SINGLE,
            self::MENU_SECTION_BEHAVIOUR_EXPAND_MULTIPLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTaxTypeAllowableValues()
    {
        return [
            self::TAX_TYPE_INCLUDED_IN_BASE_PRICE,
            self::TAX_TYPE_EXCLUDED_FROM_BASE_PRICE,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['image_url'] = isset($data['image_url']) ? $data['image_url'] : null;
        $this->container['menu_sections'] = isset($data['menu_sections']) ? $data['menu_sections'] : null;
        $this->container['tax_rates'] = isset($data['tax_rates']) ? $data['tax_rates'] : null;
        $this->container['display_section_links'] = isset($data['display_section_links']) ? $data['display_section_links'] : null;
        $this->container['menu_section_behaviour'] = isset($data['menu_section_behaviour']) ? $data['menu_section_behaviour'] : null;
        $this->container['tax_type'] = isset($data['tax_type']) ? $data['tax_type'] : null;
        $this->container['is_integrated'] = isset($data['is_integrated']) ? $data['is_integrated'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['name']) && (mb_strlen($this->container['name']) > 255)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['name']) && (mb_strlen($this->container['name']) < 0)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be bigger than or equal to 0.";
        }

        $allowedValues = $this->getMenuSectionBehaviourAllowableValues();
        if (!is_null($this->container['menu_section_behaviour']) && !in_array($this->container['menu_section_behaviour'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'menu_section_behaviour', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getTaxTypeAllowableValues();
        if (!is_null($this->container['tax_type']) && !in_array($this->container['tax_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'tax_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name Name of Menu, only shown in portal
     *
     * @return $this
     */
    public function setName($name)
    {
        if (!is_null($name) && (mb_strlen($name) > 255)) {
            throw new \InvalidArgumentException('invalid length for $name when calling CreateFullMenu., must be smaller than or equal to 255.');
        }
        if (!is_null($name) && (mb_strlen($name) < 0)) {
            throw new \InvalidArgumentException('invalid length for $name when calling CreateFullMenu., must be bigger than or equal to 0.');
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets image_url
     *
     * @return string
     */
    public function getImageUrl()
    {
        return $this->container['image_url'];
    }

    /**
     * Sets image_url
     *
     * @param string $image_url Image url
     *
     * @return $this
     */
    public function setImageUrl($image_url)
    {
        $this->container['image_url'] = $image_url;

        return $this;
    }

    /**
     * Gets menu_sections
     *
     * @return \Flipdish\\Client\Models\CreateFullMenuSection[]
     */
    public function getMenuSections()
    {
        return $this->container['menu_sections'];
    }

    /**
     * Sets menu_sections
     *
     * @param \Flipdish\\Client\Models\CreateFullMenuSection[] $menu_sections Menu sections (starters, main etc)
     *
     * @return $this
     */
    public function setMenuSections($menu_sections)
    {
        $this->container['menu_sections'] = $menu_sections;

        return $this;
    }

    /**
     * Gets tax_rates
     *
     * @return \Flipdish\\Client\Models\CreateMenuTaxRate[]
     */
    public function getTaxRates()
    {
        return $this->container['tax_rates'];
    }

    /**
     * Sets tax_rates
     *
     * @param \Flipdish\\Client\Models\CreateMenuTaxRate[] $tax_rates Menu tax rates
     *
     * @return $this
     */
    public function setTaxRates($tax_rates)
    {
        $this->container['tax_rates'] = $tax_rates;

        return $this;
    }

    /**
     * Gets display_section_links
     *
     * @return bool
     */
    public function getDisplaySectionLinks()
    {
        return $this->container['display_section_links'];
    }

    /**
     * Sets display_section_links
     *
     * @param bool $display_section_links Display menu section link on UI
     *
     * @return $this
     */
    public function setDisplaySectionLinks($display_section_links)
    {
        $this->container['display_section_links'] = $display_section_links;

        return $this;
    }

    /**
     * Gets menu_section_behaviour
     *
     * @return string
     */
    public function getMenuSectionBehaviour()
    {
        return $this->container['menu_section_behaviour'];
    }

    /**
     * Sets menu_section_behaviour
     *
     * @param string $menu_section_behaviour Menu section behaviour
     *
     * @return $this
     */
    public function setMenuSectionBehaviour($menu_section_behaviour)
    {
        $allowedValues = $this->getMenuSectionBehaviourAllowableValues();
        if (!is_null($menu_section_behaviour) && !in_array($menu_section_behaviour, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'menu_section_behaviour', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['menu_section_behaviour'] = $menu_section_behaviour;

        return $this;
    }

    /**
     * Gets tax_type
     *
     * @return string
     */
    public function getTaxType()
    {
        return $this->container['tax_type'];
    }

    /**
     * Sets tax_type
     *
     * @param string $tax_type Tax type
     *
     * @return $this
     */
    public function setTaxType($tax_type)
    {
        $allowedValues = $this->getTaxTypeAllowableValues();
        if (!is_null($tax_type) && !in_array($tax_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'tax_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['tax_type'] = $tax_type;

        return $this;
    }

    /**
     * Gets is_integrated
     *
     * @return bool
     */
    public function getIsIntegrated()
    {
        return $this->container['is_integrated'];
    }

    /**
     * Sets is_integrated
     *
     * @param bool $is_integrated Flag to indicate if the menu is integrated (contains metadata)
     *
     * @return $this
     */
    public function setIsIntegrated($is_integrated)
    {
        $this->container['is_integrated'] = $is_integrated;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


