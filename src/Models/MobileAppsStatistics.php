<?php
/**
 * MobileAppsStatistics
 *
 * PHP version 5
 *
 * @category Class
 * @package  Flipdish\\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Flipdish Open API v1.0
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.19
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Flipdish\\Client\Models;

use \ArrayAccess;
use \Flipdish\\Client\ObjectSerializer;

/**
 * MobileAppsStatistics Class Doc Comment
 *
 * @category Class
 * @description Mobile Apps Statistics
 * @package  Flipdish\\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class MobileAppsStatistics implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'MobileAppsStatistics';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'number_download' => 'int',
        'current_rate' => 'int',
        'current_version' => 'string',
        'play_store_link' => 'string',
        'app_bundle_id' => 'string',
        'last_updated' => '\DateTime',
        'notes' => 'string',
        'published' => 'bool',
        'platform_type' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'number_download' => 'int32',
        'current_rate' => 'int32',
        'current_version' => null,
        'play_store_link' => null,
        'app_bundle_id' => null,
        'last_updated' => 'date-time',
        'notes' => null,
        'published' => null,
        'platform_type' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'number_download' => 'NumberDownload',
        'current_rate' => 'CurrentRate',
        'current_version' => 'CurrentVersion',
        'play_store_link' => 'PlayStoreLink',
        'app_bundle_id' => 'AppBundleId',
        'last_updated' => 'LastUpdated',
        'notes' => 'Notes',
        'published' => 'Published',
        'platform_type' => 'PlatformType'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'number_download' => 'setNumberDownload',
        'current_rate' => 'setCurrentRate',
        'current_version' => 'setCurrentVersion',
        'play_store_link' => 'setPlayStoreLink',
        'app_bundle_id' => 'setAppBundleId',
        'last_updated' => 'setLastUpdated',
        'notes' => 'setNotes',
        'published' => 'setPublished',
        'platform_type' => 'setPlatformType'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'number_download' => 'getNumberDownload',
        'current_rate' => 'getCurrentRate',
        'current_version' => 'getCurrentVersion',
        'play_store_link' => 'getPlayStoreLink',
        'app_bundle_id' => 'getAppBundleId',
        'last_updated' => 'getLastUpdated',
        'notes' => 'getNotes',
        'published' => 'getPublished',
        'platform_type' => 'getPlatformType'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const PLATFORM_TYPE_ANDROID = 'Android';
    const PLATFORM_TYPE_IOS = 'IOS';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPlatformTypeAllowableValues()
    {
        return [
            self::PLATFORM_TYPE_ANDROID,
            self::PLATFORM_TYPE_IOS,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['number_download'] = isset($data['number_download']) ? $data['number_download'] : null;
        $this->container['current_rate'] = isset($data['current_rate']) ? $data['current_rate'] : null;
        $this->container['current_version'] = isset($data['current_version']) ? $data['current_version'] : null;
        $this->container['play_store_link'] = isset($data['play_store_link']) ? $data['play_store_link'] : null;
        $this->container['app_bundle_id'] = isset($data['app_bundle_id']) ? $data['app_bundle_id'] : null;
        $this->container['last_updated'] = isset($data['last_updated']) ? $data['last_updated'] : null;
        $this->container['notes'] = isset($data['notes']) ? $data['notes'] : null;
        $this->container['published'] = isset($data['published']) ? $data['published'] : null;
        $this->container['platform_type'] = isset($data['platform_type']) ? $data['platform_type'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getPlatformTypeAllowableValues();
        if (!is_null($this->container['platform_type']) && !in_array($this->container['platform_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'platform_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets number_download
     *
     * @return int
     */
    public function getNumberDownload()
    {
        return $this->container['number_download'];
    }

    /**
     * Sets number_download
     *
     * @param int $number_download Number Download
     *
     * @return $this
     */
    public function setNumberDownload($number_download)
    {
        $this->container['number_download'] = $number_download;

        return $this;
    }

    /**
     * Gets current_rate
     *
     * @return int
     */
    public function getCurrentRate()
    {
        return $this->container['current_rate'];
    }

    /**
     * Sets current_rate
     *
     * @param int $current_rate Current Rate
     *
     * @return $this
     */
    public function setCurrentRate($current_rate)
    {
        $this->container['current_rate'] = $current_rate;

        return $this;
    }

    /**
     * Gets current_version
     *
     * @return string
     */
    public function getCurrentVersion()
    {
        return $this->container['current_version'];
    }

    /**
     * Sets current_version
     *
     * @param string $current_version Current Version
     *
     * @return $this
     */
    public function setCurrentVersion($current_version)
    {
        $this->container['current_version'] = $current_version;

        return $this;
    }

    /**
     * Gets play_store_link
     *
     * @return string
     */
    public function getPlayStoreLink()
    {
        return $this->container['play_store_link'];
    }

    /**
     * Sets play_store_link
     *
     * @param string $play_store_link Play Store Link
     *
     * @return $this
     */
    public function setPlayStoreLink($play_store_link)
    {
        $this->container['play_store_link'] = $play_store_link;

        return $this;
    }

    /**
     * Gets app_bundle_id
     *
     * @return string
     */
    public function getAppBundleId()
    {
        return $this->container['app_bundle_id'];
    }

    /**
     * Sets app_bundle_id
     *
     * @param string $app_bundle_id App Bundle Id
     *
     * @return $this
     */
    public function setAppBundleId($app_bundle_id)
    {
        $this->container['app_bundle_id'] = $app_bundle_id;

        return $this;
    }

    /**
     * Gets last_updated
     *
     * @return \DateTime
     */
    public function getLastUpdated()
    {
        return $this->container['last_updated'];
    }

    /**
     * Sets last_updated
     *
     * @param \DateTime $last_updated Last Updated
     *
     * @return $this
     */
    public function setLastUpdated($last_updated)
    {
        $this->container['last_updated'] = $last_updated;

        return $this;
    }

    /**
     * Gets notes
     *
     * @return string
     */
    public function getNotes()
    {
        return $this->container['notes'];
    }

    /**
     * Sets notes
     *
     * @param string $notes Last Updated
     *
     * @return $this
     */
    public function setNotes($notes)
    {
        $this->container['notes'] = $notes;

        return $this;
    }

    /**
     * Gets published
     *
     * @return bool
     */
    public function getPublished()
    {
        return $this->container['published'];
    }

    /**
     * Sets published
     *
     * @param bool $published Published
     *
     * @return $this
     */
    public function setPublished($published)
    {
        $this->container['published'] = $published;

        return $this;
    }

    /**
     * Gets platform_type
     *
     * @return string
     */
    public function getPlatformType()
    {
        return $this->container['platform_type'];
    }

    /**
     * Sets platform_type
     *
     * @param string $platform_type Platform Type
     *
     * @return $this
     */
    public function setPlatformType($platform_type)
    {
        $allowedValues = $this->getPlatformTypeAllowableValues();
        if (!is_null($platform_type) && !in_array($platform_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'platform_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['platform_type'] = $platform_type;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


