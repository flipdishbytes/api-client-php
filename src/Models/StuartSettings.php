<?php
/**
 * StuartSettings
 *
 * PHP version 5
 *
 * @category Class
 * @package  Flipdish\\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Flipdish Open API v1.0
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.43
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Flipdish\\Client\Models;

use \ArrayAccess;
use \Flipdish\\Client\ObjectSerializer;

/**
 * StuartSettings Class Doc Comment
 *
 * @category Class
 * @description Stuart settings
 * @package  Flipdish\\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class StuartSettings implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'StuartSettings';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'client_id' => 'string',
        'client_secret' => 'string',
        'enabled' => 'bool',
        'webhook_url_basic_authentication' => 'string',
        'override_webhook_url' => 'bool',
        'minutes_to_pickup_before_than_delivery_time' => 'int',
        'package_type' => 'string',
        'transport_type' => 'string',
        'cancel_order_if_stuart_cancel_delivery' => 'bool',
        'transport_prices' => '\Flipdish\\Client\Models\StuartSettingsTransportPrices'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'client_id' => null,
        'client_secret' => null,
        'enabled' => null,
        'webhook_url_basic_authentication' => null,
        'override_webhook_url' => null,
        'minutes_to_pickup_before_than_delivery_time' => 'int32',
        'package_type' => null,
        'transport_type' => null,
        'cancel_order_if_stuart_cancel_delivery' => null,
        'transport_prices' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'client_id' => 'ClientId',
        'client_secret' => 'ClientSecret',
        'enabled' => 'Enabled',
        'webhook_url_basic_authentication' => 'WebhookUrlBasicAuthentication',
        'override_webhook_url' => 'OverrideWebhookUrl',
        'minutes_to_pickup_before_than_delivery_time' => 'MinutesToPickupBeforeThanDeliveryTime',
        'package_type' => 'PackageType',
        'transport_type' => 'TransportType',
        'cancel_order_if_stuart_cancel_delivery' => 'CancelOrderIfStuartCancelDelivery',
        'transport_prices' => 'TransportPrices'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'client_id' => 'setClientId',
        'client_secret' => 'setClientSecret',
        'enabled' => 'setEnabled',
        'webhook_url_basic_authentication' => 'setWebhookUrlBasicAuthentication',
        'override_webhook_url' => 'setOverrideWebhookUrl',
        'minutes_to_pickup_before_than_delivery_time' => 'setMinutesToPickupBeforeThanDeliveryTime',
        'package_type' => 'setPackageType',
        'transport_type' => 'setTransportType',
        'cancel_order_if_stuart_cancel_delivery' => 'setCancelOrderIfStuartCancelDelivery',
        'transport_prices' => 'setTransportPrices'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'client_id' => 'getClientId',
        'client_secret' => 'getClientSecret',
        'enabled' => 'getEnabled',
        'webhook_url_basic_authentication' => 'getWebhookUrlBasicAuthentication',
        'override_webhook_url' => 'getOverrideWebhookUrl',
        'minutes_to_pickup_before_than_delivery_time' => 'getMinutesToPickupBeforeThanDeliveryTime',
        'package_type' => 'getPackageType',
        'transport_type' => 'getTransportType',
        'cancel_order_if_stuart_cancel_delivery' => 'getCancelOrderIfStuartCancelDelivery',
        'transport_prices' => 'getTransportPrices'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const PACKAGE_TYPE_XSMALL = 'Xsmall';
    const PACKAGE_TYPE_SMALL = 'Small';
    const PACKAGE_TYPE_MEDIUM = 'Medium';
    const PACKAGE_TYPE_LARGE = 'Large';
    const PACKAGE_TYPE_XLARGE = 'Xlarge';
    const TRANSPORT_TYPE_BIKE = 'Bike';
    const TRANSPORT_TYPE_CARGOBIKE = 'Cargobike';
    const TRANSPORT_TYPE_CARGOBIKEXL = 'Cargobikexl';
    const TRANSPORT_TYPE_MOTORBIKE = 'Motorbike';
    const TRANSPORT_TYPE_MOTORBIKEXL = 'Motorbikexl';
    const TRANSPORT_TYPE_CAR = 'Car';
    const TRANSPORT_TYPE_VAN = 'Van';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPackageTypeAllowableValues()
    {
        return [
            self::PACKAGE_TYPE_XSMALL,
            self::PACKAGE_TYPE_SMALL,
            self::PACKAGE_TYPE_MEDIUM,
            self::PACKAGE_TYPE_LARGE,
            self::PACKAGE_TYPE_XLARGE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTransportTypeAllowableValues()
    {
        return [
            self::TRANSPORT_TYPE_BIKE,
            self::TRANSPORT_TYPE_CARGOBIKE,
            self::TRANSPORT_TYPE_CARGOBIKEXL,
            self::TRANSPORT_TYPE_MOTORBIKE,
            self::TRANSPORT_TYPE_MOTORBIKEXL,
            self::TRANSPORT_TYPE_CAR,
            self::TRANSPORT_TYPE_VAN,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['client_id'] = isset($data['client_id']) ? $data['client_id'] : null;
        $this->container['client_secret'] = isset($data['client_secret']) ? $data['client_secret'] : null;
        $this->container['enabled'] = isset($data['enabled']) ? $data['enabled'] : null;
        $this->container['webhook_url_basic_authentication'] = isset($data['webhook_url_basic_authentication']) ? $data['webhook_url_basic_authentication'] : null;
        $this->container['override_webhook_url'] = isset($data['override_webhook_url']) ? $data['override_webhook_url'] : null;
        $this->container['minutes_to_pickup_before_than_delivery_time'] = isset($data['minutes_to_pickup_before_than_delivery_time']) ? $data['minutes_to_pickup_before_than_delivery_time'] : null;
        $this->container['package_type'] = isset($data['package_type']) ? $data['package_type'] : null;
        $this->container['transport_type'] = isset($data['transport_type']) ? $data['transport_type'] : null;
        $this->container['cancel_order_if_stuart_cancel_delivery'] = isset($data['cancel_order_if_stuart_cancel_delivery']) ? $data['cancel_order_if_stuart_cancel_delivery'] : null;
        $this->container['transport_prices'] = isset($data['transport_prices']) ? $data['transport_prices'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getPackageTypeAllowableValues();
        if (!is_null($this->container['package_type']) && !in_array($this->container['package_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'package_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getTransportTypeAllowableValues();
        if (!is_null($this->container['transport_type']) && !in_array($this->container['transport_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'transport_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets client_id
     *
     * @return string
     */
    public function getClientId()
    {
        return $this->container['client_id'];
    }

    /**
     * Sets client_id
     *
     * @param string $client_id Client Id
     *
     * @return $this
     */
    public function setClientId($client_id)
    {
        $this->container['client_id'] = $client_id;

        return $this;
    }

    /**
     * Gets client_secret
     *
     * @return string
     */
    public function getClientSecret()
    {
        return $this->container['client_secret'];
    }

    /**
     * Sets client_secret
     *
     * @param string $client_secret Client Secret
     *
     * @return $this
     */
    public function setClientSecret($client_secret)
    {
        $this->container['client_secret'] = $client_secret;

        return $this;
    }

    /**
     * Gets enabled
     *
     * @return bool
     */
    public function getEnabled()
    {
        return $this->container['enabled'];
    }

    /**
     * Sets enabled
     *
     * @param bool $enabled Enabled
     *
     * @return $this
     */
    public function setEnabled($enabled)
    {
        $this->container['enabled'] = $enabled;

        return $this;
    }

    /**
     * Gets webhook_url_basic_authentication
     *
     * @return string
     */
    public function getWebhookUrlBasicAuthentication()
    {
        return $this->container['webhook_url_basic_authentication'];
    }

    /**
     * Sets webhook_url_basic_authentication
     *
     * @param string $webhook_url_basic_authentication Webhook url to settle in the Stuart portal
     *
     * @return $this
     */
    public function setWebhookUrlBasicAuthentication($webhook_url_basic_authentication)
    {
        $this->container['webhook_url_basic_authentication'] = $webhook_url_basic_authentication;

        return $this;
    }

    /**
     * Gets override_webhook_url
     *
     * @return bool
     */
    public function getOverrideWebhookUrl()
    {
        return $this->container['override_webhook_url'];
    }

    /**
     * Sets override_webhook_url
     *
     * @param bool $override_webhook_url Override Flipdish Webhook Url
     *
     * @return $this
     */
    public function setOverrideWebhookUrl($override_webhook_url)
    {
        $this->container['override_webhook_url'] = $override_webhook_url;

        return $this;
    }

    /**
     * Gets minutes_to_pickup_before_than_delivery_time
     *
     * @return int
     */
    public function getMinutesToPickupBeforeThanDeliveryTime()
    {
        return $this->container['minutes_to_pickup_before_than_delivery_time'];
    }

    /**
     * Sets minutes_to_pickup_before_than_delivery_time
     *
     * @param int $minutes_to_pickup_before_than_delivery_time MinutesToPickupBeforeThanDeliveryTime
     *
     * @return $this
     */
    public function setMinutesToPickupBeforeThanDeliveryTime($minutes_to_pickup_before_than_delivery_time)
    {
        $this->container['minutes_to_pickup_before_than_delivery_time'] = $minutes_to_pickup_before_than_delivery_time;

        return $this;
    }

    /**
     * Gets package_type
     *
     * @return string
     */
    public function getPackageType()
    {
        return $this->container['package_type'];
    }

    /**
     * Sets package_type
     *
     * @param string $package_type Package type
     *
     * @return $this
     */
    public function setPackageType($package_type)
    {
        $allowedValues = $this->getPackageTypeAllowableValues();
        if (!is_null($package_type) && !in_array($package_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'package_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['package_type'] = $package_type;

        return $this;
    }

    /**
     * Gets transport_type
     *
     * @return string
     */
    public function getTransportType()
    {
        return $this->container['transport_type'];
    }

    /**
     * Sets transport_type
     *
     * @param string $transport_type Transport type
     *
     * @return $this
     */
    public function setTransportType($transport_type)
    {
        $allowedValues = $this->getTransportTypeAllowableValues();
        if (!is_null($transport_type) && !in_array($transport_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'transport_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['transport_type'] = $transport_type;

        return $this;
    }

    /**
     * Gets cancel_order_if_stuart_cancel_delivery
     *
     * @return bool
     */
    public function getCancelOrderIfStuartCancelDelivery()
    {
        return $this->container['cancel_order_if_stuart_cancel_delivery'];
    }

    /**
     * Sets cancel_order_if_stuart_cancel_delivery
     *
     * @param bool $cancel_order_if_stuart_cancel_delivery Determines if Flipdish order should be cancel when Stuart cancels delivery
     *
     * @return $this
     */
    public function setCancelOrderIfStuartCancelDelivery($cancel_order_if_stuart_cancel_delivery)
    {
        $this->container['cancel_order_if_stuart_cancel_delivery'] = $cancel_order_if_stuart_cancel_delivery;

        return $this;
    }

    /**
     * Gets transport_prices
     *
     * @return \Flipdish\\Client\Models\StuartSettingsTransportPrices
     */
    public function getTransportPrices()
    {
        return $this->container['transport_prices'];
    }

    /**
     * Sets transport_prices
     *
     * @param \Flipdish\\Client\Models\StuartSettingsTransportPrices $transport_prices transport_prices
     *
     * @return $this
     */
    public function setTransportPrices($transport_prices)
    {
        $this->container['transport_prices'] = $transport_prices;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


