<?php
/**
 * PaymentAccount
 *
 * PHP version 5
 *
 * @category Class
 * @package  Flipdish\\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Flipdish Open API v1.0
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.43
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Flipdish\\Client\Models;

use \ArrayAccess;
use \Flipdish\\Client\ObjectSerializer;

/**
 * PaymentAccount Class Doc Comment
 *
 * @category Class
 * @description Payment Account information
 * @package  Flipdish\\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PaymentAccount implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'PaymentAccount';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'user_id' => 'int',
        'payment_account_id' => 'int',
        'can_remove_from_customer_view' => 'bool',
        'bin' => 'string',
        'is_default_payment_method' => 'bool',
        'is_visible_to_customer' => 'bool',
        'payment_account_type' => 'string',
        'description' => 'string',
        'customer_id' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'user_id' => 'int32',
        'payment_account_id' => 'int32',
        'can_remove_from_customer_view' => null,
        'bin' => null,
        'is_default_payment_method' => null,
        'is_visible_to_customer' => null,
        'payment_account_type' => null,
        'description' => null,
        'customer_id' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'user_id' => 'UserId',
        'payment_account_id' => 'PaymentAccountId',
        'can_remove_from_customer_view' => 'CanRemoveFromCustomerView',
        'bin' => 'Bin',
        'is_default_payment_method' => 'IsDefaultPaymentMethod',
        'is_visible_to_customer' => 'IsVisibleToCustomer',
        'payment_account_type' => 'PaymentAccountType',
        'description' => 'Description',
        'customer_id' => 'CustomerId'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'user_id' => 'setUserId',
        'payment_account_id' => 'setPaymentAccountId',
        'can_remove_from_customer_view' => 'setCanRemoveFromCustomerView',
        'bin' => 'setBin',
        'is_default_payment_method' => 'setIsDefaultPaymentMethod',
        'is_visible_to_customer' => 'setIsVisibleToCustomer',
        'payment_account_type' => 'setPaymentAccountType',
        'description' => 'setDescription',
        'customer_id' => 'setCustomerId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'user_id' => 'getUserId',
        'payment_account_id' => 'getPaymentAccountId',
        'can_remove_from_customer_view' => 'getCanRemoveFromCustomerView',
        'bin' => 'getBin',
        'is_default_payment_method' => 'getIsDefaultPaymentMethod',
        'is_visible_to_customer' => 'getIsVisibleToCustomer',
        'payment_account_type' => 'getPaymentAccountType',
        'description' => 'getDescription',
        'customer_id' => 'getCustomerId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['user_id'] = isset($data['user_id']) ? $data['user_id'] : null;
        $this->container['payment_account_id'] = isset($data['payment_account_id']) ? $data['payment_account_id'] : null;
        $this->container['can_remove_from_customer_view'] = isset($data['can_remove_from_customer_view']) ? $data['can_remove_from_customer_view'] : null;
        $this->container['bin'] = isset($data['bin']) ? $data['bin'] : null;
        $this->container['is_default_payment_method'] = isset($data['is_default_payment_method']) ? $data['is_default_payment_method'] : null;
        $this->container['is_visible_to_customer'] = isset($data['is_visible_to_customer']) ? $data['is_visible_to_customer'] : null;
        $this->container['payment_account_type'] = isset($data['payment_account_type']) ? $data['payment_account_type'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['customer_id'] = isset($data['customer_id']) ? $data['customer_id'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets user_id
     *
     * @return int
     */
    public function getUserId()
    {
        return $this->container['user_id'];
    }

    /**
     * Sets user_id
     *
     * @param int $user_id The user ID associated with the payment account.
     *
     * @return $this
     */
    public function setUserId($user_id)
    {
        $this->container['user_id'] = $user_id;

        return $this;
    }

    /**
     * Gets payment_account_id
     *
     * @return int
     */
    public function getPaymentAccountId()
    {
        return $this->container['payment_account_id'];
    }

    /**
     * Sets payment_account_id
     *
     * @param int $payment_account_id Unique identifier for the payment account.
     *
     * @return $this
     */
    public function setPaymentAccountId($payment_account_id)
    {
        $this->container['payment_account_id'] = $payment_account_id;

        return $this;
    }

    /**
     * Gets can_remove_from_customer_view
     *
     * @return bool
     */
    public function getCanRemoveFromCustomerView()
    {
        return $this->container['can_remove_from_customer_view'];
    }

    /**
     * Sets can_remove_from_customer_view
     *
     * @param bool $can_remove_from_customer_view Indicates if the payment account can be removed from the customer view.
     *
     * @return $this
     */
    public function setCanRemoveFromCustomerView($can_remove_from_customer_view)
    {
        $this->container['can_remove_from_customer_view'] = $can_remove_from_customer_view;

        return $this;
    }

    /**
     * Gets bin
     *
     * @return string
     */
    public function getBin()
    {
        return $this->container['bin'];
    }

    /**
     * Sets bin
     *
     * @param string $bin Bank Identification Number (BIN) of the payment method.
     *
     * @return $this
     */
    public function setBin($bin)
    {
        $this->container['bin'] = $bin;

        return $this;
    }

    /**
     * Gets is_default_payment_method
     *
     * @return bool
     */
    public function getIsDefaultPaymentMethod()
    {
        return $this->container['is_default_payment_method'];
    }

    /**
     * Sets is_default_payment_method
     *
     * @param bool $is_default_payment_method Indicates if this is the default payment method.
     *
     * @return $this
     */
    public function setIsDefaultPaymentMethod($is_default_payment_method)
    {
        $this->container['is_default_payment_method'] = $is_default_payment_method;

        return $this;
    }

    /**
     * Gets is_visible_to_customer
     *
     * @return bool
     */
    public function getIsVisibleToCustomer()
    {
        return $this->container['is_visible_to_customer'];
    }

    /**
     * Sets is_visible_to_customer
     *
     * @param bool $is_visible_to_customer Indicates if the payment account is visible to the customer.
     *
     * @return $this
     */
    public function setIsVisibleToCustomer($is_visible_to_customer)
    {
        $this->container['is_visible_to_customer'] = $is_visible_to_customer;

        return $this;
    }

    /**
     * Gets payment_account_type
     *
     * @return string
     */
    public function getPaymentAccountType()
    {
        return $this->container['payment_account_type'];
    }

    /**
     * Sets payment_account_type
     *
     * @param string $payment_account_type The type of payment account (e.g., card, PayPal).
     *
     * @return $this
     */
    public function setPaymentAccountType($payment_account_type)
    {
        $this->container['payment_account_type'] = $payment_account_type;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description Description of the payment account.
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets customer_id
     *
     * @return string
     */
    public function getCustomerId()
    {
        return $this->container['customer_id'];
    }

    /**
     * Sets customer_id
     *
     * @param string $customer_id The customer ID associated with the payment account.
     *
     * @return $this
     */
    public function setCustomerId($customer_id)
    {
        $this->container['customer_id'] = $customer_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


