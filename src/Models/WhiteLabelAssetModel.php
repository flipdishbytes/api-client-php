<?php
/**
 * WhiteLabelAssetModel
 *
 * PHP version 5
 *
 * @category Class
 * @package  Flipdish\\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Flipdish Open API v1.0
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.43
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Flipdish\\Client\Models;

use \ArrayAccess;
use \Flipdish\\Client\ObjectSerializer;

/**
 * WhiteLabelAssetModel Class Doc Comment
 *
 * @category Class
 * @description White label asset model
 * @package  Flipdish\\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class WhiteLabelAssetModel implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'WhiteLabelAssetModel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'white_label_asset_id' => 'int',
        'white_label_config_id' => 'int',
        'file_path' => 'string',
        'url' => 'string',
        'ts_update' => '\DateTime'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'white_label_asset_id' => 'int32',
        'white_label_config_id' => 'int32',
        'file_path' => null,
        'url' => null,
        'ts_update' => 'date-time'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'white_label_asset_id' => 'WhiteLabelAssetId',
        'white_label_config_id' => 'WhiteLabelConfigId',
        'file_path' => 'FilePath',
        'url' => 'Url',
        'ts_update' => 'TsUpdate'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'white_label_asset_id' => 'setWhiteLabelAssetId',
        'white_label_config_id' => 'setWhiteLabelConfigId',
        'file_path' => 'setFilePath',
        'url' => 'setUrl',
        'ts_update' => 'setTsUpdate'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'white_label_asset_id' => 'getWhiteLabelAssetId',
        'white_label_config_id' => 'getWhiteLabelConfigId',
        'file_path' => 'getFilePath',
        'url' => 'getUrl',
        'ts_update' => 'getTsUpdate'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['white_label_asset_id'] = isset($data['white_label_asset_id']) ? $data['white_label_asset_id'] : null;
        $this->container['white_label_config_id'] = isset($data['white_label_config_id']) ? $data['white_label_config_id'] : null;
        $this->container['file_path'] = isset($data['file_path']) ? $data['file_path'] : null;
        $this->container['url'] = isset($data['url']) ? $data['url'] : null;
        $this->container['ts_update'] = isset($data['ts_update']) ? $data['ts_update'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets white_label_asset_id
     *
     * @return int
     */
    public function getWhiteLabelAssetId()
    {
        return $this->container['white_label_asset_id'];
    }

    /**
     * Sets white_label_asset_id
     *
     * @param int $white_label_asset_id White label asset ID
     *
     * @return $this
     */
    public function setWhiteLabelAssetId($white_label_asset_id)
    {
        $this->container['white_label_asset_id'] = $white_label_asset_id;

        return $this;
    }

    /**
     * Gets white_label_config_id
     *
     * @return int
     */
    public function getWhiteLabelConfigId()
    {
        return $this->container['white_label_config_id'];
    }

    /**
     * Sets white_label_config_id
     *
     * @param int $white_label_config_id White label configuration ID
     *
     * @return $this
     */
    public function setWhiteLabelConfigId($white_label_config_id)
    {
        $this->container['white_label_config_id'] = $white_label_config_id;

        return $this;
    }

    /**
     * Gets file_path
     *
     * @return string
     */
    public function getFilePath()
    {
        return $this->container['file_path'];
    }

    /**
     * Sets file_path
     *
     * @param string $file_path File path
     *
     * @return $this
     */
    public function setFilePath($file_path)
    {
        $this->container['file_path'] = $file_path;

        return $this;
    }

    /**
     * Gets url
     *
     * @return string
     */
    public function getUrl()
    {
        return $this->container['url'];
    }

    /**
     * Sets url
     *
     * @param string $url Asset URL
     *
     * @return $this
     */
    public function setUrl($url)
    {
        $this->container['url'] = $url;

        return $this;
    }

    /**
     * Gets ts_update
     *
     * @return \DateTime
     */
    public function getTsUpdate()
    {
        return $this->container['ts_update'];
    }

    /**
     * Sets ts_update
     *
     * @param \DateTime $ts_update Timestamp update
     *
     * @return $this
     */
    public function setTsUpdate($ts_update)
    {
        $this->container['ts_update'] = $ts_update;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


