<?php
/**
 * App
 *
 * PHP version 5
 *
 * @category Class
 * @package  Flipdish\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Flipdish Open API v1.0
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.2
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Flipdish\Client\Models;

use \ArrayAccess;
use \Flipdish\Client\ObjectSerializer;

/**
 * App Class Doc Comment
 *
 * @category Class
 * @description App
 * @package  Flipdish\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class App implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'App';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'app_id' => 'string',
        'name' => 'string',
        'map_center' => '\Flipdish\Client\Models\Coordinates',
        'map_north_east' => '\Flipdish\Client\Models\Coordinates',
        'map_south_west' => '\Flipdish\Client\Models\Coordinates',
        'app_access_level' => 'string',
        'icon_url' => 'string',
        'icon_thumbnail_url' => 'string',
        'country_id' => 'string',
        'available_app_languages' => '\Flipdish\Client\Models\Language[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'app_id' => null,
        'name' => null,
        'map_center' => null,
        'map_north_east' => null,
        'map_south_west' => null,
        'app_access_level' => null,
        'icon_url' => null,
        'icon_thumbnail_url' => null,
        'country_id' => null,
        'available_app_languages' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'app_id' => 'AppId',
        'name' => 'Name',
        'map_center' => 'MapCenter',
        'map_north_east' => 'MapNorthEast',
        'map_south_west' => 'MapSouthWest',
        'app_access_level' => 'AppAccessLevel',
        'icon_url' => 'IconUrl',
        'icon_thumbnail_url' => 'IconThumbnailUrl',
        'country_id' => 'CountryId',
        'available_app_languages' => 'AvailableAppLanguages'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'app_id' => 'setAppId',
        'name' => 'setName',
        'map_center' => 'setMapCenter',
        'map_north_east' => 'setMapNorthEast',
        'map_south_west' => 'setMapSouthWest',
        'app_access_level' => 'setAppAccessLevel',
        'icon_url' => 'setIconUrl',
        'icon_thumbnail_url' => 'setIconThumbnailUrl',
        'country_id' => 'setCountryId',
        'available_app_languages' => 'setAvailableAppLanguages'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'app_id' => 'getAppId',
        'name' => 'getName',
        'map_center' => 'getMapCenter',
        'map_north_east' => 'getMapNorthEast',
        'map_south_west' => 'getMapSouthWest',
        'app_access_level' => 'getAppAccessLevel',
        'icon_url' => 'getIconUrl',
        'icon_thumbnail_url' => 'getIconThumbnailUrl',
        'country_id' => 'getCountryId',
        'available_app_languages' => 'getAvailableAppLanguages'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const APP_ACCESS_LEVEL_NONE = 'None';
    const APP_ACCESS_LEVEL_OWNER = 'Owner';
    const APP_ACCESS_LEVEL_MANAGED_OWNER = 'ManagedOwner';
    const APP_ACCESS_LEVEL_STORE_MANAGER = 'StoreManager';
    const APP_ACCESS_LEVEL_STORE_STAFF = 'StoreStaff';
    const APP_ACCESS_LEVEL_STORE_READ_WRITE_ACCESS = 'StoreReadWriteAccess';
    const APP_ACCESS_LEVEL_STORE_READ_ONLY_ACCESS = 'StoreReadOnlyAccess';
    const APP_ACCESS_LEVEL_FINANCE_MANGER = 'FinanceManger';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAppAccessLevelAllowableValues()
    {
        return [
            self::APP_ACCESS_LEVEL_NONE,
            self::APP_ACCESS_LEVEL_OWNER,
            self::APP_ACCESS_LEVEL_MANAGED_OWNER,
            self::APP_ACCESS_LEVEL_STORE_MANAGER,
            self::APP_ACCESS_LEVEL_STORE_STAFF,
            self::APP_ACCESS_LEVEL_STORE_READ_WRITE_ACCESS,
            self::APP_ACCESS_LEVEL_STORE_READ_ONLY_ACCESS,
            self::APP_ACCESS_LEVEL_FINANCE_MANGER,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['app_id'] = isset($data['app_id']) ? $data['app_id'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['map_center'] = isset($data['map_center']) ? $data['map_center'] : null;
        $this->container['map_north_east'] = isset($data['map_north_east']) ? $data['map_north_east'] : null;
        $this->container['map_south_west'] = isset($data['map_south_west']) ? $data['map_south_west'] : null;
        $this->container['app_access_level'] = isset($data['app_access_level']) ? $data['app_access_level'] : null;
        $this->container['icon_url'] = isset($data['icon_url']) ? $data['icon_url'] : null;
        $this->container['icon_thumbnail_url'] = isset($data['icon_thumbnail_url']) ? $data['icon_thumbnail_url'] : null;
        $this->container['country_id'] = isset($data['country_id']) ? $data['country_id'] : null;
        $this->container['available_app_languages'] = isset($data['available_app_languages']) ? $data['available_app_languages'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getAppAccessLevelAllowableValues();
        if (!is_null($this->container['app_access_level']) && !in_array($this->container['app_access_level'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'app_access_level', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['country_id']) && (mb_strlen($this->container['country_id']) > 2)) {
            $invalidProperties[] = "invalid value for 'country_id', the character length must be smaller than or equal to 2.";
        }

        if (!is_null($this->container['country_id']) && (mb_strlen($this->container['country_id']) < 0)) {
            $invalidProperties[] = "invalid value for 'country_id', the character length must be bigger than or equal to 0.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets app_id
     *
     * @return string
     */
    public function getAppId()
    {
        return $this->container['app_id'];
    }

    /**
     * Sets app_id
     *
     * @param string $app_id App Identifier
     *
     * @return $this
     */
    public function setAppId($app_id)
    {
        $this->container['app_id'] = $app_id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name App name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets map_center
     *
     * @return \Flipdish\Client\Models\Coordinates
     */
    public function getMapCenter()
    {
        return $this->container['map_center'];
    }

    /**
     * Sets map_center
     *
     * @param \Flipdish\Client\Models\Coordinates $map_center Center of the map coordinates
     *
     * @return $this
     */
    public function setMapCenter($map_center)
    {
        $this->container['map_center'] = $map_center;

        return $this;
    }

    /**
     * Gets map_north_east
     *
     * @return \Flipdish\Client\Models\Coordinates
     */
    public function getMapNorthEast()
    {
        return $this->container['map_north_east'];
    }

    /**
     * Sets map_north_east
     *
     * @param \Flipdish\Client\Models\Coordinates $map_north_east North East(Top Right) Corner of the map coordinates
     *
     * @return $this
     */
    public function setMapNorthEast($map_north_east)
    {
        $this->container['map_north_east'] = $map_north_east;

        return $this;
    }

    /**
     * Gets map_south_west
     *
     * @return \Flipdish\Client\Models\Coordinates
     */
    public function getMapSouthWest()
    {
        return $this->container['map_south_west'];
    }

    /**
     * Sets map_south_west
     *
     * @param \Flipdish\Client\Models\Coordinates $map_south_west South West (Bottom Left) Corner of the map coordinates
     *
     * @return $this
     */
    public function setMapSouthWest($map_south_west)
    {
        $this->container['map_south_west'] = $map_south_west;

        return $this;
    }

    /**
     * Gets app_access_level
     *
     * @return string
     */
    public function getAppAccessLevel()
    {
        return $this->container['app_access_level'];
    }

    /**
     * Sets app_access_level
     *
     * @param string $app_access_level App access level for the logged in user
     *
     * @return $this
     */
    public function setAppAccessLevel($app_access_level)
    {
        $allowedValues = $this->getAppAccessLevelAllowableValues();
        if (!is_null($app_access_level) && !in_array($app_access_level, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'app_access_level', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['app_access_level'] = $app_access_level;

        return $this;
    }

    /**
     * Gets icon_url
     *
     * @return string
     */
    public function getIconUrl()
    {
        return $this->container['icon_url'];
    }

    /**
     * Sets icon_url
     *
     * @param string $icon_url Icon url
     *
     * @return $this
     */
    public function setIconUrl($icon_url)
    {
        $this->container['icon_url'] = $icon_url;

        return $this;
    }

    /**
     * Gets icon_thumbnail_url
     *
     * @return string
     */
    public function getIconThumbnailUrl()
    {
        return $this->container['icon_thumbnail_url'];
    }

    /**
     * Sets icon_thumbnail_url
     *
     * @param string $icon_thumbnail_url Icon thumbnail url
     *
     * @return $this
     */
    public function setIconThumbnailUrl($icon_thumbnail_url)
    {
        $this->container['icon_thumbnail_url'] = $icon_thumbnail_url;

        return $this;
    }

    /**
     * Gets country_id
     *
     * @return string
     */
    public function getCountryId()
    {
        return $this->container['country_id'];
    }

    /**
     * Sets country_id
     *
     * @param string $country_id Country identifier
     *
     * @return $this
     */
    public function setCountryId($country_id)
    {
        if (!is_null($country_id) && (mb_strlen($country_id) > 2)) {
            throw new \InvalidArgumentException('invalid length for $country_id when calling App., must be smaller than or equal to 2.');
        }
        if (!is_null($country_id) && (mb_strlen($country_id) < 0)) {
            throw new \InvalidArgumentException('invalid length for $country_id when calling App., must be bigger than or equal to 0.');
        }

        $this->container['country_id'] = $country_id;

        return $this;
    }

    /**
     * Gets available_app_languages
     *
     * @return \Flipdish\Client\Models\Language[]
     */
    public function getAvailableAppLanguages()
    {
        return $this->container['available_app_languages'];
    }

    /**
     * Sets available_app_languages
     *
     * @param \Flipdish\Client\Models\Language[] $available_app_languages Available Languages for Apps\\Staff
     *
     * @return $this
     */
    public function setAvailableAppLanguages($available_app_languages)
    {
        $this->container['available_app_languages'] = $available_app_languages;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


