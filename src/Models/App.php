<?php
/**
 * App
 *
 * PHP version 5
 *
 * @category Class
 * @package  Flipdish\\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Flipdish Open API v1.0
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.19
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Flipdish\\Client\Models;

use \ArrayAccess;
use \Flipdish\\Client\ObjectSerializer;

/**
 * App Class Doc Comment
 *
 * @category Class
 * @description App
 * @package  Flipdish\\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class App implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'App';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'app_id' => 'string',
        'has_ios_app' => 'bool',
        'has_android_app' => 'bool',
        'country_id' => 'string',
        'logo_image_url' => 'string',
        'languages' => '\Flipdish\\Client\Models\Language[]',
        'available_app_languages' => '\Flipdish\\Client\Models\Language[]',
        'app_access_level' => 'string',
        'app_resource_set' => 'string[]',
        'features' => 'string[]',
        'map_center' => '\Flipdish\\Client\Models\Coordinates',
        'map_north_east' => '\Flipdish\\Client\Models\Coordinates',
        'map_south_west' => '\Flipdish\\Client\Models\Coordinates',
        'name' => 'string',
        'host_name' => 'string',
        'main_color' => 'string',
        'application_category' => 'string',
        'is_panacea_enabled' => 'bool',
        'cookie_consent_prompt_enabled' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'app_id' => null,
        'has_ios_app' => null,
        'has_android_app' => null,
        'country_id' => null,
        'logo_image_url' => null,
        'languages' => null,
        'available_app_languages' => null,
        'app_access_level' => null,
        'app_resource_set' => null,
        'features' => null,
        'map_center' => null,
        'map_north_east' => null,
        'map_south_west' => null,
        'name' => null,
        'host_name' => null,
        'main_color' => null,
        'application_category' => null,
        'is_panacea_enabled' => null,
        'cookie_consent_prompt_enabled' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'app_id' => 'AppId',
        'has_ios_app' => 'HasIosApp',
        'has_android_app' => 'HasAndroidApp',
        'country_id' => 'CountryId',
        'logo_image_url' => 'LogoImageUrl',
        'languages' => 'Languages',
        'available_app_languages' => 'AvailableAppLanguages',
        'app_access_level' => 'AppAccessLevel',
        'app_resource_set' => 'AppResourceSet',
        'features' => 'Features',
        'map_center' => 'MapCenter',
        'map_north_east' => 'MapNorthEast',
        'map_south_west' => 'MapSouthWest',
        'name' => 'Name',
        'host_name' => 'HostName',
        'main_color' => 'MainColor',
        'application_category' => 'ApplicationCategory',
        'is_panacea_enabled' => 'IsPanaceaEnabled',
        'cookie_consent_prompt_enabled' => 'CookieConsentPromptEnabled'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'app_id' => 'setAppId',
        'has_ios_app' => 'setHasIosApp',
        'has_android_app' => 'setHasAndroidApp',
        'country_id' => 'setCountryId',
        'logo_image_url' => 'setLogoImageUrl',
        'languages' => 'setLanguages',
        'available_app_languages' => 'setAvailableAppLanguages',
        'app_access_level' => 'setAppAccessLevel',
        'app_resource_set' => 'setAppResourceSet',
        'features' => 'setFeatures',
        'map_center' => 'setMapCenter',
        'map_north_east' => 'setMapNorthEast',
        'map_south_west' => 'setMapSouthWest',
        'name' => 'setName',
        'host_name' => 'setHostName',
        'main_color' => 'setMainColor',
        'application_category' => 'setApplicationCategory',
        'is_panacea_enabled' => 'setIsPanaceaEnabled',
        'cookie_consent_prompt_enabled' => 'setCookieConsentPromptEnabled'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'app_id' => 'getAppId',
        'has_ios_app' => 'getHasIosApp',
        'has_android_app' => 'getHasAndroidApp',
        'country_id' => 'getCountryId',
        'logo_image_url' => 'getLogoImageUrl',
        'languages' => 'getLanguages',
        'available_app_languages' => 'getAvailableAppLanguages',
        'app_access_level' => 'getAppAccessLevel',
        'app_resource_set' => 'getAppResourceSet',
        'features' => 'getFeatures',
        'map_center' => 'getMapCenter',
        'map_north_east' => 'getMapNorthEast',
        'map_south_west' => 'getMapSouthWest',
        'name' => 'getName',
        'host_name' => 'getHostName',
        'main_color' => 'getMainColor',
        'application_category' => 'getApplicationCategory',
        'is_panacea_enabled' => 'getIsPanaceaEnabled',
        'cookie_consent_prompt_enabled' => 'getCookieConsentPromptEnabled'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const APP_ACCESS_LEVEL_NONE = 'None';
    const APP_ACCESS_LEVEL_OWNER = 'Owner';
    const APP_ACCESS_LEVEL_STORE_OWNER = 'StoreOwner';
    const APP_ACCESS_LEVEL_MANAGED_OWNER = 'ManagedOwner';
    const APP_ACCESS_LEVEL_INTEGRATOR = 'Integrator';
    const APP_ACCESS_LEVEL_STORE_MANAGER = 'StoreManager';
    const APP_ACCESS_LEVEL_STORE_STAFF = 'StoreStaff';
    const APP_ACCESS_LEVEL_STORE_READ_ONLY_ACCESS = 'StoreReadOnlyAccess';
    const APP_ACCESS_LEVEL_FINANCE_MANGER = 'FinanceManger';
    const APP_ACCESS_LEVEL_SUPPORT = 'Support';
    const APP_RESOURCE_SET_VIEW_APP = 'ViewApp';
    const APP_RESOURCE_SET_CREATE_APP = 'CreateApp';
    const APP_RESOURCE_SET_UPDATE_APP = 'UpdateApp';
    const APP_RESOURCE_SET_EDIT_APP_ASSETS = 'EditAppAssets';
    const APP_RESOURCE_SET_VIEW_TEAMMATES = 'ViewTeammates';
    const APP_RESOURCE_SET_EDIT_TEAMMATES = 'EditTeammates';
    const APP_RESOURCE_SET_CREATE_TEAMMATE_OWNER = 'CreateTeammateOwner';
    const APP_RESOURCE_SET_CREATE_TEAMMATE_MANAGED_OWNER = 'CreateTeammateManagedOwner';
    const APP_RESOURCE_SET_CREATE_TEAMMATE_STORE_OWNER = 'CreateTeammateStoreOwner';
    const APP_RESOURCE_SET_CREATE_TEAMMATE_STORE_MANAGER = 'CreateTeammateStoreManager';
    const APP_RESOURCE_SET_CREATE_TEAMMATE_STORE_STAFF = 'CreateTeammateStoreStaff';
    const APP_RESOURCE_SET_CREATE_TEAMMATE_STORE_READ_ACCESS = 'CreateTeammateStoreReadAccess';
    const APP_RESOURCE_SET_CREATE_TEAMMATE_FINANCE_MANAGER = 'CreateTeammateFinanceManager';
    const APP_RESOURCE_SET_CREATE_TEAMMATE_INTEGRATOR = 'CreateTeammateIntegrator';
    const APP_RESOURCE_SET_VIEW_APM_CONFIGURATIONS = 'ViewApmConfigurations';
    const APP_RESOURCE_SET_EDIT_APM_CONFIGURATIONS = 'EditApmConfigurations';
    const APP_RESOURCE_SET_VIEW_CAMPAIGNS_CONFIGURATIONS = 'ViewCampaignsConfigurations';
    const APP_RESOURCE_SET_CREATE_CAMPAIGNS_CONFIGURATIONS = 'CreateCampaignsConfigurations';
    const APP_RESOURCE_SET_UPDATE_CAMPAIGNS_CONFIGURATIONS = 'UpdateCampaignsConfigurations';
    const APP_RESOURCE_SET_DELETE_CAMPAIGNS_CONFIGURATIONS = 'DeleteCampaignsConfigurations';
    const APP_RESOURCE_SET_VIEW_DEVELOPERS_SETTINGS = 'ViewDevelopersSettings';
    const APP_RESOURCE_SET_EDIT_DEVELOPERS_SETTINGS = 'EditDevelopersSettings';
    const APP_RESOURCE_SET_VIEW_ORDERS = 'ViewOrders';
    const APP_RESOURCE_SET_UPDATE_ORDERS_ACCEPT = 'UpdateOrdersAccept';
    const APP_RESOURCE_SET_UPDATE_ORDERS_REJECT = 'UpdateOrdersReject';
    const APP_RESOURCE_SET_UPDATE_ORDERS_REFUND = 'UpdateOrdersRefund';
    const APP_RESOURCE_SET_UPDATE_ORDERS_DISPATCH = 'UpdateOrdersDispatch';
    const APP_RESOURCE_SET_VIEW_STORES = 'ViewStores';
    const APP_RESOURCE_SET_EDIT_STORES = 'EditStores';
    const APP_RESOURCE_SET_VIEW_STORES_OPENING_HOURS = 'ViewStoresOpeningHours';
    const APP_RESOURCE_SET_UPDATE_STORES_OPEN_FOR_COLLECTION_OR_DELIVERY = 'UpdateStoresOpenForCollectionOrDelivery';
    const APP_RESOURCE_SET_UPDATE_STORES_OPENING_HOURS = 'UpdateStoresOpeningHours';
    const APP_RESOURCE_SET_VIEW_STORES_OPENING_HOURS_OVERRIDE = 'ViewStoresOpeningHoursOverride';
    const APP_RESOURCE_SET_EDIT_STORES_OPENING_HOURS_OVERRIDE = 'EditStoresOpeningHoursOverride';
    const APP_RESOURCE_SET_EDIT_STORES_OPENING_HOURS_OVERRIDE_TEMPORARY = 'EditStoresOpeningHoursOverrideTemporary';
    const APP_RESOURCE_SET_UPDATE_STORES_NAME = 'UpdateStoresName';
    const APP_RESOURCE_SET_EDIT_STORE_KIOSK_SETTINGS = 'EditStoreKioskSettings';
    const APP_RESOURCE_SET_EDIT_STORE_ORDER_CAPACITY = 'EditStoreOrderCapacity';
    const APP_RESOURCE_SET_UPDATE_PRINTER_TERMINALS_ASSIGN = 'UpdatePrinterTerminalsAssign';
    const APP_RESOURCE_SET_UPDATE_PRINTER_TERMINALS_TOGGLE = 'UpdatePrinterTerminalsToggle';
    const APP_RESOURCE_SET_EDIT_STORE_NOTIFICATIONS = 'EditStoreNotifications';
    const APP_RESOURCE_SET_VIEW_STORE_GROUPS = 'ViewStoreGroups';
    const APP_RESOURCE_SET_CREATE_STORE_GROUPS = 'CreateStoreGroups';
    const APP_RESOURCE_SET_UPDATE_STORE_GROUPS = 'UpdateStoreGroups';
    const APP_RESOURCE_SET_DELETE_STORE_GROUPS = 'DeleteStoreGroups';
    const APP_RESOURCE_SET_VIEW_DELIVERY_ZONES = 'ViewDeliveryZones';
    const APP_RESOURCE_SET_CREATE_DELIVERY_ZONES = 'CreateDeliveryZones';
    const APP_RESOURCE_SET_UPDATE_DELIVERY_ZONES = 'UpdateDeliveryZones';
    const APP_RESOURCE_SET_DELETE_DELIVERY_ZONES = 'DeleteDeliveryZones';
    const APP_RESOURCE_SET_VIEW_MENU = 'ViewMenu';
    const APP_RESOURCE_SET_CREATE_MENU = 'CreateMenu';
    const APP_RESOURCE_SET_UPDATE_MENU = 'UpdateMenu';
    const APP_RESOURCE_SET_DELETE_MENU = 'DeleteMenu';
    const APP_RESOURCE_SET_UPDATE_MENU_LOCK = 'UpdateMenuLock';
    const APP_RESOURCE_SET_UPDATE_MENU_ITEMS_HIDE_TEMPORARILY = 'UpdateMenuItemsHideTemporarily';
    const APP_RESOURCE_SET_EDIT_MENU_IMAGE = 'EditMenuImage';
    const APP_RESOURCE_SET_VIEW_VOUCHERS = 'ViewVouchers';
    const APP_RESOURCE_SET_EDIT_VOUCHERS = 'EditVouchers';
    const APP_RESOURCE_SET_UPDATE_VOUCHERS_EXTEND_DISABLE = 'UpdateVouchersExtendDisable';
    const APP_RESOURCE_SET_VIEW_WEBSITE_CONTENT = 'ViewWebsiteContent';
    const APP_RESOURCE_SET_EDIT_WEBSITE_CONTENT = 'EditWebsiteContent';
    const APP_RESOURCE_SET_VIEW_WEBSITE_DNS_VERIFIED = 'ViewWebsiteDnsVerified';
    const APP_RESOURCE_SET_VIEW_WEBSITE_CERTIFICATE_CREATED = 'ViewWebsiteCertificateCreated';
    const APP_RESOURCE_SET_VIEW_WEBSITE_CERTIFICATE_RENEWED = 'ViewWebsiteCertificateRenewed';
    const APP_RESOURCE_SET_VIEW_BANK_ACCOUNTS = 'ViewBankAccounts';
    const APP_RESOURCE_SET_CREATE_BANK_ACCOUNTS = 'CreateBankAccounts';
    const APP_RESOURCE_SET_UPDATE_BANK_ACCOUNTS = 'UpdateBankAccounts';
    const APP_RESOURCE_SET_UPDATE_BANK_ACCOUNTS_ASSIGN = 'UpdateBankAccountsAssign';
    const APP_RESOURCE_SET_VIEW_ASSIGNED_BANK_ACCOUNT = 'ViewAssignedBankAccount';
    const APP_RESOURCE_SET_VERIFY_BANK_ACCOUNTS = 'VerifyBankAccounts';
    const APP_RESOURCE_SET_VIEW_SERVICE_CHARGE_CONFIGURATIONS = 'ViewServiceChargeConfigurations';
    const APP_RESOURCE_SET_EDIT_SERVICE_CHARGE_CONFIGURATIONS = 'EditServiceChargeConfigurations';
    const APP_RESOURCE_SET_VIEW_HYDRA_CONFIG = 'ViewHydraConfig';
    const APP_RESOURCE_SET_UPDATE_HYDRA_CONFIG_MANAGE = 'UpdateHydraConfigManage';
    const APP_RESOURCE_SET_INITIATE_BLUETOOTH_PAIRING_MODE = 'InitiateBluetoothPairingMode';
    const APP_RESOURCE_SET_DELETE_TERMINAL = 'DeleteTerminal';
    const APP_RESOURCE_SET_VIEW_KIOSK_TELEMETRY = 'ViewKioskTelemetry';
    const APP_RESOURCE_SET_VIEW_CUSTOMERS = 'ViewCustomers';
    const APP_RESOURCE_SET_EDIT_CUSTOMERS = 'EditCustomers';
    const APP_RESOURCE_SET_CREATE_CATALOG_ELEMENTS = 'CreateCatalogElements';
    const APP_RESOURCE_SET_UPDATE_CATALOG_ELEMENTS = 'UpdateCatalogElements';
    const APP_RESOURCE_SET_VIEW_CATALOG_ELEMENTS = 'ViewCatalogElements';
    const APP_RESOURCE_SET_DELETE_CATALOG_ELEMENTS = 'DeleteCatalogElements';
    const APP_RESOURCE_SET_VIEW_METAFIELD_DEFINITIONS = 'ViewMetafieldDefinitions';
    const APP_RESOURCE_SET_CREATE_METAFIELD_DEFINITIONS = 'CreateMetafieldDefinitions';
    const APP_RESOURCE_SET_UPDATE_METAFIELD_DEFINITIONS = 'UpdateMetafieldDefinitions';
    const APP_RESOURCE_SET_DELETE_METAFIELD_DEFINITIONS = 'DeleteMetafieldDefinitions';
    const APP_RESOURCE_SET_UPDATE_METAFIELDS = 'UpdateMetafields';
    const APP_RESOURCE_SET_VIEW_CATALOG_MENU_CHANGES = 'ViewCatalogMenuChanges';
    const APP_RESOURCE_SET_PUBLISH_CATALOG_MENU_CHANGES = 'PublishCatalogMenuChanges';
    const APP_RESOURCE_SET_VIEW_APP_STATISTICS = 'ViewAppStatistics';
    const APP_RESOURCE_SET_VIEW_APM_STATISTICS = 'ViewApmStatistics';
    const APP_RESOURCE_SET_VIEW_CAMPAIGNS_STATISTICS = 'ViewCampaignsStatistics';
    const APP_RESOURCE_SET_VIEW_CUSTOMER_STATISTICS = 'ViewCustomerStatistics';
    const APP_RESOURCE_SET_VIEW_LIVE_STATISTICS = 'ViewLiveStatistics';
    const APP_RESOURCE_SET_VIEW_ORDER_STATISTICS = 'ViewOrderStatistics';
    const APP_RESOURCE_SET_VIEW_SALES_STATISTICS = 'ViewSalesStatistics';
    const APP_RESOURCE_SET_VIEW_SALES_END_OF_DAY_STATISTICS = 'ViewSalesEndOfDayStatistics';
    const APP_RESOURCE_SET_VIEW_VOUCHERS_STATISTICS = 'ViewVouchersStatistics';
    const APP_RESOURCE_SET_DOWNLOAD_CUSTOMER_CSV_EXPORT = 'DownloadCustomerCsvExport';
    const APP_RESOURCE_SET_VIEW_APM_AUDIT_LOGS = 'ViewApmAuditLogs';
    const APP_RESOURCE_SET_VIEW_STORE_AUDIT_LOGS = 'ViewStoreAuditLogs';
    const APP_RESOURCE_SET_VIEW_MENU_AUDIT_LOGS = 'ViewMenuAuditLogs';
    const APP_RESOURCE_SET_VIEW_BANK_ACCOUNT_AUDIT_LOGS = 'ViewBankAccountAuditLogs';
    const APP_RESOURCE_SET_VIEW_FEE_CONFIGURATIONS_AUDIT_LOGS = 'ViewFeeConfigurationsAuditLogs';
    const APP_RESOURCE_SET_VIEW_ORDERS_AUDIT_LOGS = 'ViewOrdersAuditLogs';
    const APP_RESOURCE_SET_VIEW_VOUCHERS_AUDIT_LOGS = 'ViewVouchersAuditLogs';
    const APP_RESOURCE_SET_VIEW_USER_EVENTS_AUDIT_LOGS = 'ViewUserEventsAuditLogs';
    const APP_RESOURCE_SET_VIEW_CAMPAIGNS_AUDIT_LOGS = 'ViewCampaignsAuditLogs';
    const APP_RESOURCE_SET_VIEW_TEAMMATES_AUDIT_LOGS = 'ViewTeammatesAuditLogs';
    const APP_RESOURCE_SET_VIEW_APP_AUDIT_LOGS = 'ViewAppAuditLogs';
    const APP_RESOURCE_SET_VIEW_CUSTOMER_AUDIT_LOGS = 'ViewCustomerAuditLogs';
    const APP_RESOURCE_SET_VIEW_PRINTER_AUDIT_LOGS = 'ViewPrinterAuditLogs';
    const APP_RESOURCE_SET_VIEW_HYDRA_AUDIT_LOGS = 'ViewHydraAuditLogs';
    const APP_RESOURCE_SET_VIEW_PUSH_NOTIFICATION_AUDIT_LOGS = 'ViewPushNotificationAuditLogs';
    const APP_RESOURCE_SET_VIEW_STRIPE_CUSTOM_CONNECTED_ACCOUNT_AUDIT_LOGS = 'ViewStripeCustomConnectedAccountAuditLogs';
    const APP_RESOURCE_SET_VIEW_KIOSK_BLUETOOTH_DEVICE_AUDIT_LOGS = 'ViewKioskBluetoothDeviceAuditLogs';
    const APP_RESOURCE_SET_VIEW_EXTERNAL_AUDIT_LOGS = 'ViewExternalAuditLogs';
    const APP_RESOURCE_SET_CREATE_EXTERNAL_AUDIT_LOG_EVENTS = 'CreateExternalAuditLogEvents';
    const APP_RESOURCE_SET_VIEW_CATALOG_AUDIT_LOGS = 'ViewCatalogAuditLogs';
    const APP_RESOURCE_SET_VIEW_ORDER_FULFILLMENT_AUDIT_LOGS = 'ViewOrderFulfillmentAuditLogs';
    const APP_RESOURCE_SET_SEND_PUSH_NOTIFICATION_TO_CUSTOMER = 'SendPushNotificationToCustomer';
    const APP_RESOURCE_SET_INVITE_DRIVER_TO_APP = 'InviteDriverToApp';
    const APP_RESOURCE_SET_GET_DRIVER_FOR_APP = 'GetDriverForApp';
    const APP_RESOURCE_SET_REMOVE_DRIVER_FROM_APP = 'RemoveDriverFromApp';
    const APP_RESOURCE_SET_ASSIGN_DRIVER_TO_ORDER = 'AssignDriverToOrder';
    const APP_RESOURCE_SET_UNASSIGN_DRIVER_FROM_ORDER = 'UnassignDriverFromOrder';
    const APP_RESOURCE_SET_UPDATE_ORDERS_DELIVERY_TRACKING_STATUS = 'UpdateOrdersDeliveryTrackingStatus';
    const APP_RESOURCE_SET_UPDATE_ORDER_FULFILLMENT_STATUS = 'UpdateOrderFulfillmentStatus';
    const APP_RESOURCE_SET_VIEW_FULFILLMENT_STATES_CONFIGURATION = 'ViewFulfillmentStatesConfiguration';
    const APP_RESOURCE_SET_CREATE_FULFILLMENT_STATES_CONFIGURATION = 'CreateFulfillmentStatesConfiguration';
    const APP_RESOURCE_SET_UPDATE_FULFILLMENT_STATES_CONFIGURATION = 'UpdateFulfillmentStatesConfiguration';
    const APP_RESOURCE_SET_DELETE_FULFILLMENT_STATES_CONFIGURATION = 'DeleteFulfillmentStatesConfiguration';
    const APP_RESOURCE_SET_VIEW_PAYOUTS = 'ViewPayouts';
    const APP_RESOURCE_SET_VIEW_CHANNELS = 'ViewChannels';
    const APP_RESOURCE_SET_VIEW_ONBOARDING = 'ViewOnboarding';
    const APP_RESOURCE_SET_UPDATE_ONBOARDING = 'UpdateOnboarding';
    const APP_RESOURCE_SET_CREATE_APP_STORE_APP_CONFIGURATION = 'CreateAppStoreAppConfiguration';
    const APP_RESOURCE_SET_VIEW_APP_STORE_APP_CONFIGURATION = 'ViewAppStoreAppConfiguration';
    const APP_RESOURCE_SET_UPDATE_APP_STORE_APP_CONFIGURATION = 'UpdateAppStoreAppConfiguration';
    const APP_RESOURCE_SET_DELETE_APP_STORE_APP_CONFIGURATION = 'DeleteAppStoreAppConfiguration';
    const APP_RESOURCE_SET_VIEW_SALES_CHANNELS = 'ViewSalesChannels';
    const APP_RESOURCE_SET_EDIT_SALES_CHANNELS = 'EditSalesChannels';
    const APP_RESOURCE_SET_VIEW_PAY_GREEN_WHITE_LABEL_CONFIGURATION = 'ViewPayGreenWhiteLabelConfiguration';
    const APP_RESOURCE_SET_CREATE_PAY_GREEN_WHITE_LABEL_CONFIGURATION = 'CreatePayGreenWhiteLabelConfiguration';
    const APP_RESOURCE_SET_UPDATE_PAY_GREEN_WHITE_LABEL_CONFIGURATION = 'UpdatePayGreenWhiteLabelConfiguration';
    const APP_RESOURCE_SET_UPDATE_PAY_GREEN_STORE_CONFIGURATION = 'UpdatePayGreenStoreConfiguration';
    const APPLICATION_CATEGORY_RESTAURANT = 'Restaurant';
    const APPLICATION_CATEGORY_CAFE = 'Cafe';
    const APPLICATION_CATEGORY_CONVENIENCE = 'Convenience';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAppAccessLevelAllowableValues()
    {
        return [
            self::APP_ACCESS_LEVEL_NONE,
            self::APP_ACCESS_LEVEL_OWNER,
            self::APP_ACCESS_LEVEL_STORE_OWNER,
            self::APP_ACCESS_LEVEL_MANAGED_OWNER,
            self::APP_ACCESS_LEVEL_INTEGRATOR,
            self::APP_ACCESS_LEVEL_STORE_MANAGER,
            self::APP_ACCESS_LEVEL_STORE_STAFF,
            self::APP_ACCESS_LEVEL_STORE_READ_ONLY_ACCESS,
            self::APP_ACCESS_LEVEL_FINANCE_MANGER,
            self::APP_ACCESS_LEVEL_SUPPORT,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAppResourceSetAllowableValues()
    {
        return [
            self::APP_RESOURCE_SET_VIEW_APP,
            self::APP_RESOURCE_SET_CREATE_APP,
            self::APP_RESOURCE_SET_UPDATE_APP,
            self::APP_RESOURCE_SET_EDIT_APP_ASSETS,
            self::APP_RESOURCE_SET_VIEW_TEAMMATES,
            self::APP_RESOURCE_SET_EDIT_TEAMMATES,
            self::APP_RESOURCE_SET_CREATE_TEAMMATE_OWNER,
            self::APP_RESOURCE_SET_CREATE_TEAMMATE_MANAGED_OWNER,
            self::APP_RESOURCE_SET_CREATE_TEAMMATE_STORE_OWNER,
            self::APP_RESOURCE_SET_CREATE_TEAMMATE_STORE_MANAGER,
            self::APP_RESOURCE_SET_CREATE_TEAMMATE_STORE_STAFF,
            self::APP_RESOURCE_SET_CREATE_TEAMMATE_STORE_READ_ACCESS,
            self::APP_RESOURCE_SET_CREATE_TEAMMATE_FINANCE_MANAGER,
            self::APP_RESOURCE_SET_CREATE_TEAMMATE_INTEGRATOR,
            self::APP_RESOURCE_SET_VIEW_APM_CONFIGURATIONS,
            self::APP_RESOURCE_SET_EDIT_APM_CONFIGURATIONS,
            self::APP_RESOURCE_SET_VIEW_CAMPAIGNS_CONFIGURATIONS,
            self::APP_RESOURCE_SET_CREATE_CAMPAIGNS_CONFIGURATIONS,
            self::APP_RESOURCE_SET_UPDATE_CAMPAIGNS_CONFIGURATIONS,
            self::APP_RESOURCE_SET_DELETE_CAMPAIGNS_CONFIGURATIONS,
            self::APP_RESOURCE_SET_VIEW_DEVELOPERS_SETTINGS,
            self::APP_RESOURCE_SET_EDIT_DEVELOPERS_SETTINGS,
            self::APP_RESOURCE_SET_VIEW_ORDERS,
            self::APP_RESOURCE_SET_UPDATE_ORDERS_ACCEPT,
            self::APP_RESOURCE_SET_UPDATE_ORDERS_REJECT,
            self::APP_RESOURCE_SET_UPDATE_ORDERS_REFUND,
            self::APP_RESOURCE_SET_UPDATE_ORDERS_DISPATCH,
            self::APP_RESOURCE_SET_VIEW_STORES,
            self::APP_RESOURCE_SET_EDIT_STORES,
            self::APP_RESOURCE_SET_VIEW_STORES_OPENING_HOURS,
            self::APP_RESOURCE_SET_UPDATE_STORES_OPEN_FOR_COLLECTION_OR_DELIVERY,
            self::APP_RESOURCE_SET_UPDATE_STORES_OPENING_HOURS,
            self::APP_RESOURCE_SET_VIEW_STORES_OPENING_HOURS_OVERRIDE,
            self::APP_RESOURCE_SET_EDIT_STORES_OPENING_HOURS_OVERRIDE,
            self::APP_RESOURCE_SET_EDIT_STORES_OPENING_HOURS_OVERRIDE_TEMPORARY,
            self::APP_RESOURCE_SET_UPDATE_STORES_NAME,
            self::APP_RESOURCE_SET_EDIT_STORE_KIOSK_SETTINGS,
            self::APP_RESOURCE_SET_EDIT_STORE_ORDER_CAPACITY,
            self::APP_RESOURCE_SET_UPDATE_PRINTER_TERMINALS_ASSIGN,
            self::APP_RESOURCE_SET_UPDATE_PRINTER_TERMINALS_TOGGLE,
            self::APP_RESOURCE_SET_EDIT_STORE_NOTIFICATIONS,
            self::APP_RESOURCE_SET_VIEW_STORE_GROUPS,
            self::APP_RESOURCE_SET_CREATE_STORE_GROUPS,
            self::APP_RESOURCE_SET_UPDATE_STORE_GROUPS,
            self::APP_RESOURCE_SET_DELETE_STORE_GROUPS,
            self::APP_RESOURCE_SET_VIEW_DELIVERY_ZONES,
            self::APP_RESOURCE_SET_CREATE_DELIVERY_ZONES,
            self::APP_RESOURCE_SET_UPDATE_DELIVERY_ZONES,
            self::APP_RESOURCE_SET_DELETE_DELIVERY_ZONES,
            self::APP_RESOURCE_SET_VIEW_MENU,
            self::APP_RESOURCE_SET_CREATE_MENU,
            self::APP_RESOURCE_SET_UPDATE_MENU,
            self::APP_RESOURCE_SET_DELETE_MENU,
            self::APP_RESOURCE_SET_UPDATE_MENU_LOCK,
            self::APP_RESOURCE_SET_UPDATE_MENU_ITEMS_HIDE_TEMPORARILY,
            self::APP_RESOURCE_SET_EDIT_MENU_IMAGE,
            self::APP_RESOURCE_SET_VIEW_VOUCHERS,
            self::APP_RESOURCE_SET_EDIT_VOUCHERS,
            self::APP_RESOURCE_SET_UPDATE_VOUCHERS_EXTEND_DISABLE,
            self::APP_RESOURCE_SET_VIEW_WEBSITE_CONTENT,
            self::APP_RESOURCE_SET_EDIT_WEBSITE_CONTENT,
            self::APP_RESOURCE_SET_VIEW_WEBSITE_DNS_VERIFIED,
            self::APP_RESOURCE_SET_VIEW_WEBSITE_CERTIFICATE_CREATED,
            self::APP_RESOURCE_SET_VIEW_WEBSITE_CERTIFICATE_RENEWED,
            self::APP_RESOURCE_SET_VIEW_BANK_ACCOUNTS,
            self::APP_RESOURCE_SET_CREATE_BANK_ACCOUNTS,
            self::APP_RESOURCE_SET_UPDATE_BANK_ACCOUNTS,
            self::APP_RESOURCE_SET_UPDATE_BANK_ACCOUNTS_ASSIGN,
            self::APP_RESOURCE_SET_VIEW_ASSIGNED_BANK_ACCOUNT,
            self::APP_RESOURCE_SET_VERIFY_BANK_ACCOUNTS,
            self::APP_RESOURCE_SET_VIEW_SERVICE_CHARGE_CONFIGURATIONS,
            self::APP_RESOURCE_SET_EDIT_SERVICE_CHARGE_CONFIGURATIONS,
            self::APP_RESOURCE_SET_VIEW_HYDRA_CONFIG,
            self::APP_RESOURCE_SET_UPDATE_HYDRA_CONFIG_MANAGE,
            self::APP_RESOURCE_SET_INITIATE_BLUETOOTH_PAIRING_MODE,
            self::APP_RESOURCE_SET_DELETE_TERMINAL,
            self::APP_RESOURCE_SET_VIEW_KIOSK_TELEMETRY,
            self::APP_RESOURCE_SET_VIEW_CUSTOMERS,
            self::APP_RESOURCE_SET_EDIT_CUSTOMERS,
            self::APP_RESOURCE_SET_CREATE_CATALOG_ELEMENTS,
            self::APP_RESOURCE_SET_UPDATE_CATALOG_ELEMENTS,
            self::APP_RESOURCE_SET_VIEW_CATALOG_ELEMENTS,
            self::APP_RESOURCE_SET_DELETE_CATALOG_ELEMENTS,
            self::APP_RESOURCE_SET_VIEW_METAFIELD_DEFINITIONS,
            self::APP_RESOURCE_SET_CREATE_METAFIELD_DEFINITIONS,
            self::APP_RESOURCE_SET_UPDATE_METAFIELD_DEFINITIONS,
            self::APP_RESOURCE_SET_DELETE_METAFIELD_DEFINITIONS,
            self::APP_RESOURCE_SET_UPDATE_METAFIELDS,
            self::APP_RESOURCE_SET_VIEW_CATALOG_MENU_CHANGES,
            self::APP_RESOURCE_SET_PUBLISH_CATALOG_MENU_CHANGES,
            self::APP_RESOURCE_SET_VIEW_APP_STATISTICS,
            self::APP_RESOURCE_SET_VIEW_APM_STATISTICS,
            self::APP_RESOURCE_SET_VIEW_CAMPAIGNS_STATISTICS,
            self::APP_RESOURCE_SET_VIEW_CUSTOMER_STATISTICS,
            self::APP_RESOURCE_SET_VIEW_LIVE_STATISTICS,
            self::APP_RESOURCE_SET_VIEW_ORDER_STATISTICS,
            self::APP_RESOURCE_SET_VIEW_SALES_STATISTICS,
            self::APP_RESOURCE_SET_VIEW_SALES_END_OF_DAY_STATISTICS,
            self::APP_RESOURCE_SET_VIEW_VOUCHERS_STATISTICS,
            self::APP_RESOURCE_SET_DOWNLOAD_CUSTOMER_CSV_EXPORT,
            self::APP_RESOURCE_SET_VIEW_APM_AUDIT_LOGS,
            self::APP_RESOURCE_SET_VIEW_STORE_AUDIT_LOGS,
            self::APP_RESOURCE_SET_VIEW_MENU_AUDIT_LOGS,
            self::APP_RESOURCE_SET_VIEW_BANK_ACCOUNT_AUDIT_LOGS,
            self::APP_RESOURCE_SET_VIEW_FEE_CONFIGURATIONS_AUDIT_LOGS,
            self::APP_RESOURCE_SET_VIEW_ORDERS_AUDIT_LOGS,
            self::APP_RESOURCE_SET_VIEW_VOUCHERS_AUDIT_LOGS,
            self::APP_RESOURCE_SET_VIEW_USER_EVENTS_AUDIT_LOGS,
            self::APP_RESOURCE_SET_VIEW_CAMPAIGNS_AUDIT_LOGS,
            self::APP_RESOURCE_SET_VIEW_TEAMMATES_AUDIT_LOGS,
            self::APP_RESOURCE_SET_VIEW_APP_AUDIT_LOGS,
            self::APP_RESOURCE_SET_VIEW_CUSTOMER_AUDIT_LOGS,
            self::APP_RESOURCE_SET_VIEW_PRINTER_AUDIT_LOGS,
            self::APP_RESOURCE_SET_VIEW_HYDRA_AUDIT_LOGS,
            self::APP_RESOURCE_SET_VIEW_PUSH_NOTIFICATION_AUDIT_LOGS,
            self::APP_RESOURCE_SET_VIEW_STRIPE_CUSTOM_CONNECTED_ACCOUNT_AUDIT_LOGS,
            self::APP_RESOURCE_SET_VIEW_KIOSK_BLUETOOTH_DEVICE_AUDIT_LOGS,
            self::APP_RESOURCE_SET_VIEW_EXTERNAL_AUDIT_LOGS,
            self::APP_RESOURCE_SET_CREATE_EXTERNAL_AUDIT_LOG_EVENTS,
            self::APP_RESOURCE_SET_VIEW_CATALOG_AUDIT_LOGS,
            self::APP_RESOURCE_SET_VIEW_ORDER_FULFILLMENT_AUDIT_LOGS,
            self::APP_RESOURCE_SET_SEND_PUSH_NOTIFICATION_TO_CUSTOMER,
            self::APP_RESOURCE_SET_INVITE_DRIVER_TO_APP,
            self::APP_RESOURCE_SET_GET_DRIVER_FOR_APP,
            self::APP_RESOURCE_SET_REMOVE_DRIVER_FROM_APP,
            self::APP_RESOURCE_SET_ASSIGN_DRIVER_TO_ORDER,
            self::APP_RESOURCE_SET_UNASSIGN_DRIVER_FROM_ORDER,
            self::APP_RESOURCE_SET_UPDATE_ORDERS_DELIVERY_TRACKING_STATUS,
            self::APP_RESOURCE_SET_UPDATE_ORDER_FULFILLMENT_STATUS,
            self::APP_RESOURCE_SET_VIEW_FULFILLMENT_STATES_CONFIGURATION,
            self::APP_RESOURCE_SET_CREATE_FULFILLMENT_STATES_CONFIGURATION,
            self::APP_RESOURCE_SET_UPDATE_FULFILLMENT_STATES_CONFIGURATION,
            self::APP_RESOURCE_SET_DELETE_FULFILLMENT_STATES_CONFIGURATION,
            self::APP_RESOURCE_SET_VIEW_PAYOUTS,
            self::APP_RESOURCE_SET_VIEW_CHANNELS,
            self::APP_RESOURCE_SET_VIEW_ONBOARDING,
            self::APP_RESOURCE_SET_UPDATE_ONBOARDING,
            self::APP_RESOURCE_SET_CREATE_APP_STORE_APP_CONFIGURATION,
            self::APP_RESOURCE_SET_VIEW_APP_STORE_APP_CONFIGURATION,
            self::APP_RESOURCE_SET_UPDATE_APP_STORE_APP_CONFIGURATION,
            self::APP_RESOURCE_SET_DELETE_APP_STORE_APP_CONFIGURATION,
            self::APP_RESOURCE_SET_VIEW_SALES_CHANNELS,
            self::APP_RESOURCE_SET_EDIT_SALES_CHANNELS,
            self::APP_RESOURCE_SET_VIEW_PAY_GREEN_WHITE_LABEL_CONFIGURATION,
            self::APP_RESOURCE_SET_CREATE_PAY_GREEN_WHITE_LABEL_CONFIGURATION,
            self::APP_RESOURCE_SET_UPDATE_PAY_GREEN_WHITE_LABEL_CONFIGURATION,
            self::APP_RESOURCE_SET_UPDATE_PAY_GREEN_STORE_CONFIGURATION,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getApplicationCategoryAllowableValues()
    {
        return [
            self::APPLICATION_CATEGORY_RESTAURANT,
            self::APPLICATION_CATEGORY_CAFE,
            self::APPLICATION_CATEGORY_CONVENIENCE,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['app_id'] = isset($data['app_id']) ? $data['app_id'] : null;
        $this->container['has_ios_app'] = isset($data['has_ios_app']) ? $data['has_ios_app'] : null;
        $this->container['has_android_app'] = isset($data['has_android_app']) ? $data['has_android_app'] : null;
        $this->container['country_id'] = isset($data['country_id']) ? $data['country_id'] : null;
        $this->container['logo_image_url'] = isset($data['logo_image_url']) ? $data['logo_image_url'] : null;
        $this->container['languages'] = isset($data['languages']) ? $data['languages'] : null;
        $this->container['available_app_languages'] = isset($data['available_app_languages']) ? $data['available_app_languages'] : null;
        $this->container['app_access_level'] = isset($data['app_access_level']) ? $data['app_access_level'] : null;
        $this->container['app_resource_set'] = isset($data['app_resource_set']) ? $data['app_resource_set'] : null;
        $this->container['features'] = isset($data['features']) ? $data['features'] : null;
        $this->container['map_center'] = isset($data['map_center']) ? $data['map_center'] : null;
        $this->container['map_north_east'] = isset($data['map_north_east']) ? $data['map_north_east'] : null;
        $this->container['map_south_west'] = isset($data['map_south_west']) ? $data['map_south_west'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['host_name'] = isset($data['host_name']) ? $data['host_name'] : null;
        $this->container['main_color'] = isset($data['main_color']) ? $data['main_color'] : null;
        $this->container['application_category'] = isset($data['application_category']) ? $data['application_category'] : null;
        $this->container['is_panacea_enabled'] = isset($data['is_panacea_enabled']) ? $data['is_panacea_enabled'] : null;
        $this->container['cookie_consent_prompt_enabled'] = isset($data['cookie_consent_prompt_enabled']) ? $data['cookie_consent_prompt_enabled'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['country_id']) && (mb_strlen($this->container['country_id']) > 2)) {
            $invalidProperties[] = "invalid value for 'country_id', the character length must be smaller than or equal to 2.";
        }

        if (!is_null($this->container['country_id']) && (mb_strlen($this->container['country_id']) < 0)) {
            $invalidProperties[] = "invalid value for 'country_id', the character length must be bigger than or equal to 0.";
        }

        $allowedValues = $this->getAppAccessLevelAllowableValues();
        if (!is_null($this->container['app_access_level']) && !in_array($this->container['app_access_level'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'app_access_level', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getApplicationCategoryAllowableValues();
        if (!is_null($this->container['application_category']) && !in_array($this->container['application_category'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'application_category', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets app_id
     *
     * @return string
     */
    public function getAppId()
    {
        return $this->container['app_id'];
    }

    /**
     * Sets app_id
     *
     * @param string $app_id App Identifier
     *
     * @return $this
     */
    public function setAppId($app_id)
    {
        $this->container['app_id'] = $app_id;

        return $this;
    }

    /**
     * Gets has_ios_app
     *
     * @return bool
     */
    public function getHasIosApp()
    {
        return $this->container['has_ios_app'];
    }

    /**
     * Sets has_ios_app
     *
     * @param bool $has_ios_app Has iOS app in Apple App Store. This is readonly.
     *
     * @return $this
     */
    public function setHasIosApp($has_ios_app)
    {
        $this->container['has_ios_app'] = $has_ios_app;

        return $this;
    }

    /**
     * Gets has_android_app
     *
     * @return bool
     */
    public function getHasAndroidApp()
    {
        return $this->container['has_android_app'];
    }

    /**
     * Sets has_android_app
     *
     * @param bool $has_android_app Has Android app in Google Play Store. This is readonly.
     *
     * @return $this
     */
    public function setHasAndroidApp($has_android_app)
    {
        $this->container['has_android_app'] = $has_android_app;

        return $this;
    }

    /**
     * Gets country_id
     *
     * @return string
     */
    public function getCountryId()
    {
        return $this->container['country_id'];
    }

    /**
     * Sets country_id
     *
     * @param string $country_id Country identifier in ISO 3166-1 alpha-2 format.   This code is set automatically based on the locations of the Stores in the App.     The App Country is used    - to determine how to parse mobile phone numbers that are entered in their local numbering format   - to determine if country specific payment methods should be offered   - in various fraud checks
     *
     * @return $this
     */
    public function setCountryId($country_id)
    {
        if (!is_null($country_id) && (mb_strlen($country_id) > 2)) {
            throw new \InvalidArgumentException('invalid length for $country_id when calling App., must be smaller than or equal to 2.');
        }
        if (!is_null($country_id) && (mb_strlen($country_id) < 0)) {
            throw new \InvalidArgumentException('invalid length for $country_id when calling App., must be bigger than or equal to 0.');
        }

        $this->container['country_id'] = $country_id;

        return $this;
    }

    /**
     * Gets logo_image_url
     *
     * @return string
     */
    public function getLogoImageUrl()
    {
        return $this->container['logo_image_url'];
    }

    /**
     * Sets logo_image_url
     *
     * @param string $logo_image_url Application Logo.
     *
     * @return $this
     */
    public function setLogoImageUrl($logo_image_url)
    {
        $this->container['logo_image_url'] = $logo_image_url;

        return $this;
    }

    /**
     * Gets languages
     *
     * @return \Flipdish\\Client\Models\Language[]
     */
    public function getLanguages()
    {
        return $this->container['languages'];
    }

    /**
     * Sets languages
     *
     * @param \Flipdish\\Client\Models\Language[] $languages Languages that have been selected to be available to customers.
     *
     * @return $this
     */
    public function setLanguages($languages)
    {
        $this->container['languages'] = $languages;

        return $this;
    }

    /**
     * Gets available_app_languages
     *
     * @return \Flipdish\\Client\Models\Language[]
     */
    public function getAvailableAppLanguages()
    {
        return $this->container['available_app_languages'];
    }

    /**
     * Sets available_app_languages
     *
     * @param \Flipdish\\Client\Models\Language[] $available_app_languages Lists all languages that are supported by Flipdish.
     *
     * @return $this
     */
    public function setAvailableAppLanguages($available_app_languages)
    {
        $this->container['available_app_languages'] = $available_app_languages;

        return $this;
    }

    /**
     * Gets app_access_level
     *
     * @return string
     */
    public function getAppAccessLevel()
    {
        return $this->container['app_access_level'];
    }

    /**
     * Sets app_access_level
     *
     * @param string $app_access_level App access level for the logged in user
     *
     * @return $this
     */
    public function setAppAccessLevel($app_access_level)
    {
        $allowedValues = $this->getAppAccessLevelAllowableValues();
        if (!is_null($app_access_level) && !in_array($app_access_level, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'app_access_level', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['app_access_level'] = $app_access_level;

        return $this;
    }

    /**
     * Gets app_resource_set
     *
     * @return string[]
     */
    public function getAppResourceSet()
    {
        return $this->container['app_resource_set'];
    }

    /**
     * Sets app_resource_set
     *
     * @param string[] $app_resource_set Constitutes a list of available resources
     *
     * @return $this
     */
    public function setAppResourceSet($app_resource_set)
    {
        $allowedValues = $this->getAppResourceSetAllowableValues();
        if (!is_null($app_resource_set) && array_diff($app_resource_set, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'app_resource_set', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['app_resource_set'] = $app_resource_set;

        return $this;
    }

    /**
     * Gets features
     *
     * @return string[]
     */
    public function getFeatures()
    {
        return $this->container['features'];
    }

    /**
     * Sets features
     *
     * @param string[] $features Feature flags. These cannot be set by 3rd parties.
     *
     * @return $this
     */
    public function setFeatures($features)
    {
        $this->container['features'] = $features;

        return $this;
    }

    /**
     * Gets map_center
     *
     * @return \Flipdish\\Client\Models\Coordinates
     */
    public function getMapCenter()
    {
        return $this->container['map_center'];
    }

    /**
     * Sets map_center
     *
     * @param \Flipdish\\Client\Models\Coordinates $map_center Center of the map coordinates. This is used to center the map when the iOS and Android app first open.  This value is automatically set based on the locations of the Stores in the App.
     *
     * @return $this
     */
    public function setMapCenter($map_center)
    {
        $this->container['map_center'] = $map_center;

        return $this;
    }

    /**
     * Gets map_north_east
     *
     * @return \Flipdish\\Client\Models\Coordinates
     */
    public function getMapNorthEast()
    {
        return $this->container['map_north_east'];
    }

    /**
     * Sets map_north_east
     *
     * @param \Flipdish\\Client\Models\Coordinates $map_north_east North East(Top Right) Corner of the map coordinates. This is used to frame the map when the iOS and Android app first open.  This value is automatically set based on the locations of the Stores in the App.
     *
     * @return $this
     */
    public function setMapNorthEast($map_north_east)
    {
        $this->container['map_north_east'] = $map_north_east;

        return $this;
    }

    /**
     * Gets map_south_west
     *
     * @return \Flipdish\\Client\Models\Coordinates
     */
    public function getMapSouthWest()
    {
        return $this->container['map_south_west'];
    }

    /**
     * Sets map_south_west
     *
     * @param \Flipdish\\Client\Models\Coordinates $map_south_west South West (Bottom Left) Corner of the map coordinates. This is used to frame the map when the iOS and Android app first open.  This value is automatically set based on the locations of the Stores in the App.
     *
     * @return $this
     */
    public function setMapSouthWest($map_south_west)
    {
        $this->container['map_south_west'] = $map_south_west;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name App name.   This is used in various places on the Apple App Store, Google Play Store, mobile apps and websites.
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets host_name
     *
     * @return string
     */
    public function getHostName()
    {
        return $this->container['host_name'];
    }

    /**
     * Sets host_name
     *
     * @param string $host_name HostName on which the web-ordering system is allowed to be hosted or that a Flipdish website is hosted on.
     *
     * @return $this
     */
    public function setHostName($host_name)
    {
        $this->container['host_name'] = $host_name;

        return $this;
    }

    /**
     * Gets main_color
     *
     * @return string
     */
    public function getMainColor()
    {
        return $this->container['main_color'];
    }

    /**
     * Sets main_color
     *
     * @param string $main_color Main color of the web / Android / iOS applications
     *
     * @return $this
     */
    public function setMainColor($main_color)
    {
        $this->container['main_color'] = $main_color;

        return $this;
    }

    /**
     * Gets application_category
     *
     * @return string
     */
    public function getApplicationCategory()
    {
        return $this->container['application_category'];
    }

    /**
     * Sets application_category
     *
     * @param string $application_category Application Category
     *
     * @return $this
     */
    public function setApplicationCategory($application_category)
    {
        $allowedValues = $this->getApplicationCategoryAllowableValues();
        if (!is_null($application_category) && !in_array($application_category, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'application_category', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['application_category'] = $application_category;

        return $this;
    }

    /**
     * Gets is_panacea_enabled
     *
     * @return bool
     */
    public function getIsPanaceaEnabled()
    {
        return $this->container['is_panacea_enabled'];
    }

    /**
     * Sets is_panacea_enabled
     *
     * @param bool $is_panacea_enabled Panacea is the term used for websites that are hosted on the my.flipdish.com domain. This value is true when the App's website is hosted on this domain.  The aternative to using Panacea websites is to use a custom domain.
     *
     * @return $this
     */
    public function setIsPanaceaEnabled($is_panacea_enabled)
    {
        $this->container['is_panacea_enabled'] = $is_panacea_enabled;

        return $this;
    }

    /**
     * Gets cookie_consent_prompt_enabled
     *
     * @return bool
     */
    public function getCookieConsentPromptEnabled()
    {
        return $this->container['cookie_consent_prompt_enabled'];
    }

    /**
     * Sets cookie_consent_prompt_enabled
     *
     * @param bool $cookie_consent_prompt_enabled Cookie Consent Prompt Enabled
     *
     * @return $this
     */
    public function setCookieConsentPromptEnabled($cookie_consent_prompt_enabled)
    {
        $this->container['cookie_consent_prompt_enabled'] = $cookie_consent_prompt_enabled;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


