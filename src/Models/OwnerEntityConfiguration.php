<?php
/**
 * OwnerEntityConfiguration
 *
 * PHP version 5
 *
 * @category Class
 * @package  Flipdish\\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Flipdish Open API v1.0
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.19
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Flipdish\\Client\Models;

use \ArrayAccess;
use \Flipdish\\Client\ObjectSerializer;

/**
 * OwnerEntityConfiguration Class Doc Comment
 *
 * @category Class
 * @description OwnerEntity information to configure its {Flipdish.PublicModels.V1.Metafields.MetafieldDefinition}s
 * @package  Flipdish\\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class OwnerEntityConfiguration implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'OwnerEntityConfiguration';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'owner_entity' => 'string',
        'allowed_behaviors' => 'string[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'owner_entity' => null,
        'allowed_behaviors' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'owner_entity' => 'OwnerEntity',
        'allowed_behaviors' => 'AllowedBehaviors'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'owner_entity' => 'setOwnerEntity',
        'allowed_behaviors' => 'setAllowedBehaviors'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'owner_entity' => 'getOwnerEntity',
        'allowed_behaviors' => 'getAllowedBehaviors'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const OWNER_ENTITY_CATALOG_ITEM = 'CatalogItem';
    const OWNER_ENTITY_CATALOG_GROUP = 'CatalogGroup';
    const OWNER_ENTITY_MENU = 'Menu';
    const ALLOWED_BEHAVIORS_SEND_TO_ORDER = 'SendToOrder';
    const ALLOWED_BEHAVIORS_SEND_TO_MENU = 'SendToMenu';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getOwnerEntityAllowableValues()
    {
        return [
            self::OWNER_ENTITY_CATALOG_ITEM,
            self::OWNER_ENTITY_CATALOG_GROUP,
            self::OWNER_ENTITY_MENU,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAllowedBehaviorsAllowableValues()
    {
        return [
            self::ALLOWED_BEHAVIORS_SEND_TO_ORDER,
            self::ALLOWED_BEHAVIORS_SEND_TO_MENU,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['owner_entity'] = isset($data['owner_entity']) ? $data['owner_entity'] : null;
        $this->container['allowed_behaviors'] = isset($data['allowed_behaviors']) ? $data['allowed_behaviors'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getOwnerEntityAllowableValues();
        if (!is_null($this->container['owner_entity']) && !in_array($this->container['owner_entity'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'owner_entity', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets owner_entity
     *
     * @return string
     */
    public function getOwnerEntity()
    {
        return $this->container['owner_entity'];
    }

    /**
     * Sets owner_entity
     *
     * @param string $owner_entity Owner Entity
     *
     * @return $this
     */
    public function setOwnerEntity($owner_entity)
    {
        $allowedValues = $this->getOwnerEntityAllowableValues();
        if (!is_null($owner_entity) && !in_array($owner_entity, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'owner_entity', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['owner_entity'] = $owner_entity;

        return $this;
    }

    /**
     * Gets allowed_behaviors
     *
     * @return string[]
     */
    public function getAllowedBehaviors()
    {
        return $this->container['allowed_behaviors'];
    }

    /**
     * Sets allowed_behaviors
     *
     * @param string[] $allowed_behaviors 
     *
     * @return $this
     */
    public function setAllowedBehaviors($allowed_behaviors)
    {
        $allowedValues = $this->getAllowedBehaviorsAllowableValues();
        if (!is_null($allowed_behaviors) && array_diff($allowed_behaviors, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'allowed_behaviors', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['allowed_behaviors'] = $allowed_behaviors;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


