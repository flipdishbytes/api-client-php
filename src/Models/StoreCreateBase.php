<?php
/**
 * StoreCreateBase
 *
 * PHP version 5
 *
 * @category Class
 * @package  Flipdish\\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Flipdish Open API v1.0
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.43
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Flipdish\\Client\Models;

use \ArrayAccess;
use \Flipdish\\Client\ObjectSerializer;

/**
 * StoreCreateBase Class Doc Comment
 *
 * @category Class
 * @description Store Create Base
 * @package  Flipdish\\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class StoreCreateBase implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'StoreCreateBase';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'name' => 'string',
        'email_address' => 'string',
        'staff_language' => 'string',
        'sales_channel_type' => 'string',
        'phone_number' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'name' => null,
        'email_address' => null,
        'staff_language' => null,
        'sales_channel_type' => null,
        'phone_number' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'Name',
        'email_address' => 'EmailAddress',
        'staff_language' => 'StaffLanguage',
        'sales_channel_type' => 'SalesChannelType',
        'phone_number' => 'PhoneNumber'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
        'email_address' => 'setEmailAddress',
        'staff_language' => 'setStaffLanguage',
        'sales_channel_type' => 'setSalesChannelType',
        'phone_number' => 'setPhoneNumber'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
        'email_address' => 'getEmailAddress',
        'staff_language' => 'getStaffLanguage',
        'sales_channel_type' => 'getSalesChannelType',
        'phone_number' => 'getPhoneNumber'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const SALES_CHANNEL_TYPE_WEB = 'Web';
    const SALES_CHANNEL_TYPE_APP = 'App';
    const SALES_CHANNEL_TYPE_KIOSK = 'Kiosk';
    const SALES_CHANNEL_TYPE_POS = 'Pos';
    const SALES_CHANNEL_TYPE_NONE = 'None';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSalesChannelTypeAllowableValues()
    {
        return [
            self::SALES_CHANNEL_TYPE_WEB,
            self::SALES_CHANNEL_TYPE_APP,
            self::SALES_CHANNEL_TYPE_KIOSK,
            self::SALES_CHANNEL_TYPE_POS,
            self::SALES_CHANNEL_TYPE_NONE,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['email_address'] = isset($data['email_address']) ? $data['email_address'] : null;
        $this->container['staff_language'] = isset($data['staff_language']) ? $data['staff_language'] : null;
        $this->container['sales_channel_type'] = isset($data['sales_channel_type']) ? $data['sales_channel_type'] : null;
        $this->container['phone_number'] = isset($data['phone_number']) ? $data['phone_number'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['email_address']) && (mb_strlen($this->container['email_address']) > 100)) {
            $invalidProperties[] = "invalid value for 'email_address', the character length must be smaller than or equal to 100.";
        }

        if (!is_null($this->container['email_address']) && (mb_strlen($this->container['email_address']) < 0)) {
            $invalidProperties[] = "invalid value for 'email_address', the character length must be bigger than or equal to 0.";
        }

        $allowedValues = $this->getSalesChannelTypeAllowableValues();
        if (!is_null($this->container['sales_channel_type']) && !in_array($this->container['sales_channel_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'sales_channel_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name Name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets email_address
     *
     * @return string
     */
    public function getEmailAddress()
    {
        return $this->container['email_address'];
    }

    /**
     * Sets email_address
     *
     * @param string $email_address Email address (visible to customers)
     *
     * @return $this
     */
    public function setEmailAddress($email_address)
    {
        if (!is_null($email_address) && (mb_strlen($email_address) > 100)) {
            throw new \InvalidArgumentException('invalid length for $email_address when calling StoreCreateBase., must be smaller than or equal to 100.');
        }
        if (!is_null($email_address) && (mb_strlen($email_address) < 0)) {
            throw new \InvalidArgumentException('invalid length for $email_address when calling StoreCreateBase., must be bigger than or equal to 0.');
        }

        $this->container['email_address'] = $email_address;

        return $this;
    }

    /**
     * Gets staff_language
     *
     * @return string
     */
    public function getStaffLanguage()
    {
        return $this->container['staff_language'];
    }

    /**
     * Sets staff_language
     *
     * @param string $staff_language Staff Language (used for communication with the staff)  Emails, Printouts etc
     *
     * @return $this
     */
    public function setStaffLanguage($staff_language)
    {
        $this->container['staff_language'] = $staff_language;

        return $this;
    }

    /**
     * Gets sales_channel_type
     *
     * @return string
     */
    public function getSalesChannelType()
    {
        return $this->container['sales_channel_type'];
    }

    /**
     * Sets sales_channel_type
     *
     * @param string $sales_channel_type Sales Channel Type
     *
     * @return $this
     */
    public function setSalesChannelType($sales_channel_type)
    {
        $allowedValues = $this->getSalesChannelTypeAllowableValues();
        if (!is_null($sales_channel_type) && !in_array($sales_channel_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'sales_channel_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['sales_channel_type'] = $sales_channel_type;

        return $this;
    }

    /**
     * Gets phone_number
     *
     * @return string
     */
    public function getPhoneNumber()
    {
        return $this->container['phone_number'];
    }

    /**
     * Sets phone_number
     *
     * @param string $phone_number Phone Number
     *
     * @return $this
     */
    public function setPhoneNumber($phone_number)
    {
        $this->container['phone_number'] = $phone_number;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


