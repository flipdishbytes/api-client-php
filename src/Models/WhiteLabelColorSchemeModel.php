<?php
/**
 * WhiteLabelColorSchemeModel
 *
 * PHP version 5
 *
 * @category Class
 * @package  Flipdish\\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Flipdish Open API v1.0
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.43
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Flipdish\\Client\Models;

use \ArrayAccess;
use \Flipdish\\Client\ObjectSerializer;

/**
 * WhiteLabelColorSchemeModel Class Doc Comment
 *
 * @category Class
 * @description White label color scheme model
 * @package  Flipdish\\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class WhiteLabelColorSchemeModel implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'WhiteLabelColorSchemeModel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'white_label_color_scheme_id' => 'int',
        'font' => 'string',
        'color' => 'string',
        'color2' => 'string',
        'color3' => 'string',
        'color4' => 'string',
        'color5' => 'string',
        'color6' => 'string',
        'color7' => 'string',
        'color8' => 'string',
        'color9' => 'string',
        'color10' => 'string',
        'color11' => 'string',
        'color12' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'white_label_color_scheme_id' => 'int32',
        'font' => null,
        'color' => null,
        'color2' => null,
        'color3' => null,
        'color4' => null,
        'color5' => null,
        'color6' => null,
        'color7' => null,
        'color8' => null,
        'color9' => null,
        'color10' => null,
        'color11' => null,
        'color12' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'white_label_color_scheme_id' => 'WhiteLabelColorSchemeId',
        'font' => 'Font',
        'color' => 'Color',
        'color2' => 'Color2',
        'color3' => 'Color3',
        'color4' => 'Color4',
        'color5' => 'Color5',
        'color6' => 'Color6',
        'color7' => 'Color7',
        'color8' => 'Color8',
        'color9' => 'Color9',
        'color10' => 'Color10',
        'color11' => 'Color11',
        'color12' => 'Color12'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'white_label_color_scheme_id' => 'setWhiteLabelColorSchemeId',
        'font' => 'setFont',
        'color' => 'setColor',
        'color2' => 'setColor2',
        'color3' => 'setColor3',
        'color4' => 'setColor4',
        'color5' => 'setColor5',
        'color6' => 'setColor6',
        'color7' => 'setColor7',
        'color8' => 'setColor8',
        'color9' => 'setColor9',
        'color10' => 'setColor10',
        'color11' => 'setColor11',
        'color12' => 'setColor12'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'white_label_color_scheme_id' => 'getWhiteLabelColorSchemeId',
        'font' => 'getFont',
        'color' => 'getColor',
        'color2' => 'getColor2',
        'color3' => 'getColor3',
        'color4' => 'getColor4',
        'color5' => 'getColor5',
        'color6' => 'getColor6',
        'color7' => 'getColor7',
        'color8' => 'getColor8',
        'color9' => 'getColor9',
        'color10' => 'getColor10',
        'color11' => 'getColor11',
        'color12' => 'getColor12'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['white_label_color_scheme_id'] = isset($data['white_label_color_scheme_id']) ? $data['white_label_color_scheme_id'] : null;
        $this->container['font'] = isset($data['font']) ? $data['font'] : null;
        $this->container['color'] = isset($data['color']) ? $data['color'] : null;
        $this->container['color2'] = isset($data['color2']) ? $data['color2'] : null;
        $this->container['color3'] = isset($data['color3']) ? $data['color3'] : null;
        $this->container['color4'] = isset($data['color4']) ? $data['color4'] : null;
        $this->container['color5'] = isset($data['color5']) ? $data['color5'] : null;
        $this->container['color6'] = isset($data['color6']) ? $data['color6'] : null;
        $this->container['color7'] = isset($data['color7']) ? $data['color7'] : null;
        $this->container['color8'] = isset($data['color8']) ? $data['color8'] : null;
        $this->container['color9'] = isset($data['color9']) ? $data['color9'] : null;
        $this->container['color10'] = isset($data['color10']) ? $data['color10'] : null;
        $this->container['color11'] = isset($data['color11']) ? $data['color11'] : null;
        $this->container['color12'] = isset($data['color12']) ? $data['color12'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets white_label_color_scheme_id
     *
     * @return int
     */
    public function getWhiteLabelColorSchemeId()
    {
        return $this->container['white_label_color_scheme_id'];
    }

    /**
     * Sets white_label_color_scheme_id
     *
     * @param int $white_label_color_scheme_id White label color scheme ID
     *
     * @return $this
     */
    public function setWhiteLabelColorSchemeId($white_label_color_scheme_id)
    {
        $this->container['white_label_color_scheme_id'] = $white_label_color_scheme_id;

        return $this;
    }

    /**
     * Gets font
     *
     * @return string
     */
    public function getFont()
    {
        return $this->container['font'];
    }

    /**
     * Sets font
     *
     * @param string $font Font
     *
     * @return $this
     */
    public function setFont($font)
    {
        $this->container['font'] = $font;

        return $this;
    }

    /**
     * Gets color
     *
     * @return string
     */
    public function getColor()
    {
        return $this->container['color'];
    }

    /**
     * Sets color
     *
     * @param string $color Color
     *
     * @return $this
     */
    public function setColor($color)
    {
        $this->container['color'] = $color;

        return $this;
    }

    /**
     * Gets color2
     *
     * @return string
     */
    public function getColor2()
    {
        return $this->container['color2'];
    }

    /**
     * Sets color2
     *
     * @param string $color2 Color 2
     *
     * @return $this
     */
    public function setColor2($color2)
    {
        $this->container['color2'] = $color2;

        return $this;
    }

    /**
     * Gets color3
     *
     * @return string
     */
    public function getColor3()
    {
        return $this->container['color3'];
    }

    /**
     * Sets color3
     *
     * @param string $color3 Color 3
     *
     * @return $this
     */
    public function setColor3($color3)
    {
        $this->container['color3'] = $color3;

        return $this;
    }

    /**
     * Gets color4
     *
     * @return string
     */
    public function getColor4()
    {
        return $this->container['color4'];
    }

    /**
     * Sets color4
     *
     * @param string $color4 Color 4
     *
     * @return $this
     */
    public function setColor4($color4)
    {
        $this->container['color4'] = $color4;

        return $this;
    }

    /**
     * Gets color5
     *
     * @return string
     */
    public function getColor5()
    {
        return $this->container['color5'];
    }

    /**
     * Sets color5
     *
     * @param string $color5 Color 5
     *
     * @return $this
     */
    public function setColor5($color5)
    {
        $this->container['color5'] = $color5;

        return $this;
    }

    /**
     * Gets color6
     *
     * @return string
     */
    public function getColor6()
    {
        return $this->container['color6'];
    }

    /**
     * Sets color6
     *
     * @param string $color6 Color 6
     *
     * @return $this
     */
    public function setColor6($color6)
    {
        $this->container['color6'] = $color6;

        return $this;
    }

    /**
     * Gets color7
     *
     * @return string
     */
    public function getColor7()
    {
        return $this->container['color7'];
    }

    /**
     * Sets color7
     *
     * @param string $color7 Color 7
     *
     * @return $this
     */
    public function setColor7($color7)
    {
        $this->container['color7'] = $color7;

        return $this;
    }

    /**
     * Gets color8
     *
     * @return string
     */
    public function getColor8()
    {
        return $this->container['color8'];
    }

    /**
     * Sets color8
     *
     * @param string $color8 Color 8
     *
     * @return $this
     */
    public function setColor8($color8)
    {
        $this->container['color8'] = $color8;

        return $this;
    }

    /**
     * Gets color9
     *
     * @return string
     */
    public function getColor9()
    {
        return $this->container['color9'];
    }

    /**
     * Sets color9
     *
     * @param string $color9 Color 9
     *
     * @return $this
     */
    public function setColor9($color9)
    {
        $this->container['color9'] = $color9;

        return $this;
    }

    /**
     * Gets color10
     *
     * @return string
     */
    public function getColor10()
    {
        return $this->container['color10'];
    }

    /**
     * Sets color10
     *
     * @param string $color10 Color 10
     *
     * @return $this
     */
    public function setColor10($color10)
    {
        $this->container['color10'] = $color10;

        return $this;
    }

    /**
     * Gets color11
     *
     * @return string
     */
    public function getColor11()
    {
        return $this->container['color11'];
    }

    /**
     * Sets color11
     *
     * @param string $color11 Color 11
     *
     * @return $this
     */
    public function setColor11($color11)
    {
        $this->container['color11'] = $color11;

        return $this;
    }

    /**
     * Gets color12
     *
     * @return string
     */
    public function getColor12()
    {
        return $this->container['color12'];
    }

    /**
     * Sets color12
     *
     * @param string $color12 Color 12 (Kiosk Primary Colour)
     *
     * @return $this
     */
    public function setColor12($color12)
    {
        $this->container['color12'] = $color12;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


