<?php
/**
 * CampaignStatistics
 *
 * PHP version 5
 *
 * @category Class
 * @package  Flipdish\\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Flipdish Open API v1.0
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.19
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Flipdish\\Client\Models;

use \ArrayAccess;
use \Flipdish\\Client\ObjectSerializer;

/**
 * CampaignStatistics Class Doc Comment
 *
 * @category Class
 * @description Campaign statistics
 * @package  Flipdish\\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CampaignStatistics implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'CampaignStatistics';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'vouchers_issued' => 'int',
        'vouchers_redeemed' => 'int',
        'conversion' => 'double',
        'sales_generated' => 'double',
        'return_of_investment' => 'double'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'vouchers_issued' => 'int32',
        'vouchers_redeemed' => 'int32',
        'conversion' => 'double',
        'sales_generated' => 'double',
        'return_of_investment' => 'double'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'vouchers_issued' => 'VouchersIssued',
        'vouchers_redeemed' => 'VouchersRedeemed',
        'conversion' => 'Conversion',
        'sales_generated' => 'SalesGenerated',
        'return_of_investment' => 'ReturnOfInvestment'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'vouchers_issued' => 'setVouchersIssued',
        'vouchers_redeemed' => 'setVouchersRedeemed',
        'conversion' => 'setConversion',
        'sales_generated' => 'setSalesGenerated',
        'return_of_investment' => 'setReturnOfInvestment'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'vouchers_issued' => 'getVouchersIssued',
        'vouchers_redeemed' => 'getVouchersRedeemed',
        'conversion' => 'getConversion',
        'sales_generated' => 'getSalesGenerated',
        'return_of_investment' => 'getReturnOfInvestment'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['vouchers_issued'] = isset($data['vouchers_issued']) ? $data['vouchers_issued'] : null;
        $this->container['vouchers_redeemed'] = isset($data['vouchers_redeemed']) ? $data['vouchers_redeemed'] : null;
        $this->container['conversion'] = isset($data['conversion']) ? $data['conversion'] : null;
        $this->container['sales_generated'] = isset($data['sales_generated']) ? $data['sales_generated'] : null;
        $this->container['return_of_investment'] = isset($data['return_of_investment']) ? $data['return_of_investment'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets vouchers_issued
     *
     * @return int
     */
    public function getVouchersIssued()
    {
        return $this->container['vouchers_issued'];
    }

    /**
     * Sets vouchers_issued
     *
     * @param int $vouchers_issued Number of issued vouchers
     *
     * @return $this
     */
    public function setVouchersIssued($vouchers_issued)
    {
        $this->container['vouchers_issued'] = $vouchers_issued;

        return $this;
    }

    /**
     * Gets vouchers_redeemed
     *
     * @return int
     */
    public function getVouchersRedeemed()
    {
        return $this->container['vouchers_redeemed'];
    }

    /**
     * Sets vouchers_redeemed
     *
     * @param int $vouchers_redeemed Number of redeemed vouchers
     *
     * @return $this
     */
    public function setVouchersRedeemed($vouchers_redeemed)
    {
        $this->container['vouchers_redeemed'] = $vouchers_redeemed;

        return $this;
    }

    /**
     * Gets conversion
     *
     * @return double
     */
    public function getConversion()
    {
        return $this->container['conversion'];
    }

    /**
     * Sets conversion
     *
     * @param double $conversion Conversion percentage of campaign (VouchersIssued / VouchersRedeemed)
     *
     * @return $this
     */
    public function setConversion($conversion)
    {
        $this->container['conversion'] = $conversion;

        return $this;
    }

    /**
     * Gets sales_generated
     *
     * @return double
     */
    public function getSalesGenerated()
    {
        return $this->container['sales_generated'];
    }

    /**
     * Sets sales_generated
     *
     * @param double $sales_generated Sales generated by campaign (TotalAmount - FeeChargedToCustomer ie. the discounted sale value)
     *
     * @return $this
     */
    public function setSalesGenerated($sales_generated)
    {
        $this->container['sales_generated'] = $sales_generated;

        return $this;
    }

    /**
     * Gets return_of_investment
     *
     * @return double
     */
    public function getReturnOfInvestment()
    {
        return $this->container['return_of_investment'];
    }

    /**
     * Sets return_of_investment
     *
     * @param double $return_of_investment Return of investment percentage of campaign (TotalAmount / DiscountAmount)
     *
     * @return $this
     */
    public function setReturnOfInvestment($return_of_investment)
    {
        $this->container['return_of_investment'] = $return_of_investment;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


