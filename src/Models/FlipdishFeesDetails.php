<?php
/**
 * FlipdishFeesDetails
 *
 * PHP version 5
 *
 * @category Class
 * @package  Flipdish\\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Flipdish Open API v1.0
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.19
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Flipdish\\Client\Models;

use \ArrayAccess;
use \Flipdish\\Client\ObjectSerializer;

/**
 * FlipdishFeesDetails Class Doc Comment
 *
 * @category Class
 * @description Fees breakdown
 * @package  Flipdish\\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class FlipdishFeesDetails implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'FlipdishFeesDetails';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'online_sales_fees' => 'double',
        'cash_sales_fees' => 'double',
        'pos_sales_fees' => 'double',
        'total_sales_fees' => 'double',
        'online_sales_refunded_fees' => 'double',
        'cash_sales_refunded_fees' => 'double',
        'pos_sales_refunded_fees' => 'double',
        'sales_fees_vat' => 'double',
        'total_fees' => 'double',
        'delivery_fees' => 'double',
        'tip_fees' => 'double'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'online_sales_fees' => 'double',
        'cash_sales_fees' => 'double',
        'pos_sales_fees' => 'double',
        'total_sales_fees' => 'double',
        'online_sales_refunded_fees' => 'double',
        'cash_sales_refunded_fees' => 'double',
        'pos_sales_refunded_fees' => 'double',
        'sales_fees_vat' => 'double',
        'total_fees' => 'double',
        'delivery_fees' => 'double',
        'tip_fees' => 'double'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'online_sales_fees' => 'OnlineSalesFees',
        'cash_sales_fees' => 'CashSalesFees',
        'pos_sales_fees' => 'PosSalesFees',
        'total_sales_fees' => 'TotalSalesFees',
        'online_sales_refunded_fees' => 'OnlineSalesRefundedFees',
        'cash_sales_refunded_fees' => 'CashSalesRefundedFees',
        'pos_sales_refunded_fees' => 'PosSalesRefundedFees',
        'sales_fees_vat' => 'SalesFeesVat',
        'total_fees' => 'TotalFees',
        'delivery_fees' => 'DeliveryFees',
        'tip_fees' => 'TipFees'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'online_sales_fees' => 'setOnlineSalesFees',
        'cash_sales_fees' => 'setCashSalesFees',
        'pos_sales_fees' => 'setPosSalesFees',
        'total_sales_fees' => 'setTotalSalesFees',
        'online_sales_refunded_fees' => 'setOnlineSalesRefundedFees',
        'cash_sales_refunded_fees' => 'setCashSalesRefundedFees',
        'pos_sales_refunded_fees' => 'setPosSalesRefundedFees',
        'sales_fees_vat' => 'setSalesFeesVat',
        'total_fees' => 'setTotalFees',
        'delivery_fees' => 'setDeliveryFees',
        'tip_fees' => 'setTipFees'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'online_sales_fees' => 'getOnlineSalesFees',
        'cash_sales_fees' => 'getCashSalesFees',
        'pos_sales_fees' => 'getPosSalesFees',
        'total_sales_fees' => 'getTotalSalesFees',
        'online_sales_refunded_fees' => 'getOnlineSalesRefundedFees',
        'cash_sales_refunded_fees' => 'getCashSalesRefundedFees',
        'pos_sales_refunded_fees' => 'getPosSalesRefundedFees',
        'sales_fees_vat' => 'getSalesFeesVat',
        'total_fees' => 'getTotalFees',
        'delivery_fees' => 'getDeliveryFees',
        'tip_fees' => 'getTipFees'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['online_sales_fees'] = isset($data['online_sales_fees']) ? $data['online_sales_fees'] : null;
        $this->container['cash_sales_fees'] = isset($data['cash_sales_fees']) ? $data['cash_sales_fees'] : null;
        $this->container['pos_sales_fees'] = isset($data['pos_sales_fees']) ? $data['pos_sales_fees'] : null;
        $this->container['total_sales_fees'] = isset($data['total_sales_fees']) ? $data['total_sales_fees'] : null;
        $this->container['online_sales_refunded_fees'] = isset($data['online_sales_refunded_fees']) ? $data['online_sales_refunded_fees'] : null;
        $this->container['cash_sales_refunded_fees'] = isset($data['cash_sales_refunded_fees']) ? $data['cash_sales_refunded_fees'] : null;
        $this->container['pos_sales_refunded_fees'] = isset($data['pos_sales_refunded_fees']) ? $data['pos_sales_refunded_fees'] : null;
        $this->container['sales_fees_vat'] = isset($data['sales_fees_vat']) ? $data['sales_fees_vat'] : null;
        $this->container['total_fees'] = isset($data['total_fees']) ? $data['total_fees'] : null;
        $this->container['delivery_fees'] = isset($data['delivery_fees']) ? $data['delivery_fees'] : null;
        $this->container['tip_fees'] = isset($data['tip_fees']) ? $data['tip_fees'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets online_sales_fees
     *
     * @return double
     */
    public function getOnlineSalesFees()
    {
        return $this->container['online_sales_fees'];
    }

    /**
     * Sets online_sales_fees
     *
     * @param double $online_sales_fees Fees on online sales
     *
     * @return $this
     */
    public function setOnlineSalesFees($online_sales_fees)
    {
        $this->container['online_sales_fees'] = $online_sales_fees;

        return $this;
    }

    /**
     * Gets cash_sales_fees
     *
     * @return double
     */
    public function getCashSalesFees()
    {
        return $this->container['cash_sales_fees'];
    }

    /**
     * Sets cash_sales_fees
     *
     * @param double $cash_sales_fees Fees on cash sales
     *
     * @return $this
     */
    public function setCashSalesFees($cash_sales_fees)
    {
        $this->container['cash_sales_fees'] = $cash_sales_fees;

        return $this;
    }

    /**
     * Gets pos_sales_fees
     *
     * @return double
     */
    public function getPosSalesFees()
    {
        return $this->container['pos_sales_fees'];
    }

    /**
     * Sets pos_sales_fees
     *
     * @param double $pos_sales_fees Fees of POS sales
     *
     * @return $this
     */
    public function setPosSalesFees($pos_sales_fees)
    {
        $this->container['pos_sales_fees'] = $pos_sales_fees;

        return $this;
    }

    /**
     * Gets total_sales_fees
     *
     * @return double
     */
    public function getTotalSalesFees()
    {
        return $this->container['total_sales_fees'];
    }

    /**
     * Sets total_sales_fees
     *
     * @param double $total_sales_fees Total online and cash sales
     *
     * @return $this
     */
    public function setTotalSalesFees($total_sales_fees)
    {
        $this->container['total_sales_fees'] = $total_sales_fees;

        return $this;
    }

    /**
     * Gets online_sales_refunded_fees
     *
     * @return double
     */
    public function getOnlineSalesRefundedFees()
    {
        return $this->container['online_sales_refunded_fees'];
    }

    /**
     * Sets online_sales_refunded_fees
     *
     * @param double $online_sales_refunded_fees Fees on refunds for online sales
     *
     * @return $this
     */
    public function setOnlineSalesRefundedFees($online_sales_refunded_fees)
    {
        $this->container['online_sales_refunded_fees'] = $online_sales_refunded_fees;

        return $this;
    }

    /**
     * Gets cash_sales_refunded_fees
     *
     * @return double
     */
    public function getCashSalesRefundedFees()
    {
        return $this->container['cash_sales_refunded_fees'];
    }

    /**
     * Sets cash_sales_refunded_fees
     *
     * @param double $cash_sales_refunded_fees Fees on refunds for cash sales
     *
     * @return $this
     */
    public function setCashSalesRefundedFees($cash_sales_refunded_fees)
    {
        $this->container['cash_sales_refunded_fees'] = $cash_sales_refunded_fees;

        return $this;
    }

    /**
     * Gets pos_sales_refunded_fees
     *
     * @return double
     */
    public function getPosSalesRefundedFees()
    {
        return $this->container['pos_sales_refunded_fees'];
    }

    /**
     * Sets pos_sales_refunded_fees
     *
     * @param double $pos_sales_refunded_fees Fees on refunds for POS sales
     *
     * @return $this
     */
    public function setPosSalesRefundedFees($pos_sales_refunded_fees)
    {
        $this->container['pos_sales_refunded_fees'] = $pos_sales_refunded_fees;

        return $this;
    }

    /**
     * Gets sales_fees_vat
     *
     * @return double
     */
    public function getSalesFeesVat()
    {
        return $this->container['sales_fees_vat'];
    }

    /**
     * Sets sales_fees_vat
     *
     * @param double $sales_fees_vat VAT on sales fees
     *
     * @return $this
     */
    public function setSalesFeesVat($sales_fees_vat)
    {
        $this->container['sales_fees_vat'] = $sales_fees_vat;

        return $this;
    }

    /**
     * Gets total_fees
     *
     * @return double
     */
    public function getTotalFees()
    {
        return $this->container['total_fees'];
    }

    /**
     * Sets total_fees
     *
     * @param double $total_fees Total fees
     *
     * @return $this
     */
    public function setTotalFees($total_fees)
    {
        $this->container['total_fees'] = $total_fees;

        return $this;
    }

    /**
     * Gets delivery_fees
     *
     * @return double
     */
    public function getDeliveryFees()
    {
        return $this->container['delivery_fees'];
    }

    /**
     * Sets delivery_fees
     *
     * @param double $delivery_fees Delivery fees
     *
     * @return $this
     */
    public function setDeliveryFees($delivery_fees)
    {
        $this->container['delivery_fees'] = $delivery_fees;

        return $this;
    }

    /**
     * Gets tip_fees
     *
     * @return double
     */
    public function getTipFees()
    {
        return $this->container['tip_fees'];
    }

    /**
     * Sets tip_fees
     *
     * @param double $tip_fees Tip fees
     *
     * @return $this
     */
    public function setTipFees($tip_fees)
    {
        $this->container['tip_fees'] = $tip_fees;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


