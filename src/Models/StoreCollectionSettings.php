<?php
/**
 * StoreCollectionSettings
 *
 * PHP version 5
 *
 * @category Class
 * @package  Flipdish\\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Flipdish Open API v1.0
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.43
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Flipdish\\Client\Models;

use \ArrayAccess;
use \Flipdish\\Client\ObjectSerializer;

/**
 * StoreCollectionSettings Class Doc Comment
 *
 * @category Class
 * @description Store Collection Settings
 * @package  Flipdish\\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class StoreCollectionSettings implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'StoreCollectionSettings';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'pickup_enabled' => 'bool',
        'minimum_pickup_order_amount' => 'double',
        'require_customer_name_for_pickup' => 'bool',
        'cash_orders_pickup_enabled' => 'bool',
        'lead_time_minutes' => 'int',
        'eta_in_pickup_confirmation_sms_enabled' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'pickup_enabled' => null,
        'minimum_pickup_order_amount' => 'double',
        'require_customer_name_for_pickup' => null,
        'cash_orders_pickup_enabled' => null,
        'lead_time_minutes' => 'int32',
        'eta_in_pickup_confirmation_sms_enabled' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'pickup_enabled' => 'PickupEnabled',
        'minimum_pickup_order_amount' => 'MinimumPickupOrderAmount',
        'require_customer_name_for_pickup' => 'RequireCustomerNameForPickup',
        'cash_orders_pickup_enabled' => 'CashOrdersPickupEnabled',
        'lead_time_minutes' => 'LeadTimeMinutes',
        'eta_in_pickup_confirmation_sms_enabled' => 'EtaInPickupConfirmationSmsEnabled'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'pickup_enabled' => 'setPickupEnabled',
        'minimum_pickup_order_amount' => 'setMinimumPickupOrderAmount',
        'require_customer_name_for_pickup' => 'setRequireCustomerNameForPickup',
        'cash_orders_pickup_enabled' => 'setCashOrdersPickupEnabled',
        'lead_time_minutes' => 'setLeadTimeMinutes',
        'eta_in_pickup_confirmation_sms_enabled' => 'setEtaInPickupConfirmationSmsEnabled'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'pickup_enabled' => 'getPickupEnabled',
        'minimum_pickup_order_amount' => 'getMinimumPickupOrderAmount',
        'require_customer_name_for_pickup' => 'getRequireCustomerNameForPickup',
        'cash_orders_pickup_enabled' => 'getCashOrdersPickupEnabled',
        'lead_time_minutes' => 'getLeadTimeMinutes',
        'eta_in_pickup_confirmation_sms_enabled' => 'getEtaInPickupConfirmationSmsEnabled'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['pickup_enabled'] = isset($data['pickup_enabled']) ? $data['pickup_enabled'] : null;
        $this->container['minimum_pickup_order_amount'] = isset($data['minimum_pickup_order_amount']) ? $data['minimum_pickup_order_amount'] : null;
        $this->container['require_customer_name_for_pickup'] = isset($data['require_customer_name_for_pickup']) ? $data['require_customer_name_for_pickup'] : null;
        $this->container['cash_orders_pickup_enabled'] = isset($data['cash_orders_pickup_enabled']) ? $data['cash_orders_pickup_enabled'] : null;
        $this->container['lead_time_minutes'] = isset($data['lead_time_minutes']) ? $data['lead_time_minutes'] : null;
        $this->container['eta_in_pickup_confirmation_sms_enabled'] = isset($data['eta_in_pickup_confirmation_sms_enabled']) ? $data['eta_in_pickup_confirmation_sms_enabled'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['pickup_enabled'] === null) {
            $invalidProperties[] = "'pickup_enabled' can't be null";
        }
        if ($this->container['minimum_pickup_order_amount'] === null) {
            $invalidProperties[] = "'minimum_pickup_order_amount' can't be null";
        }
        if ($this->container['require_customer_name_for_pickup'] === null) {
            $invalidProperties[] = "'require_customer_name_for_pickup' can't be null";
        }
        if ($this->container['cash_orders_pickup_enabled'] === null) {
            $invalidProperties[] = "'cash_orders_pickup_enabled' can't be null";
        }
        if ($this->container['lead_time_minutes'] === null) {
            $invalidProperties[] = "'lead_time_minutes' can't be null";
        }
        if ($this->container['eta_in_pickup_confirmation_sms_enabled'] === null) {
            $invalidProperties[] = "'eta_in_pickup_confirmation_sms_enabled' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets pickup_enabled
     *
     * @return bool
     */
    public function getPickupEnabled()
    {
        return $this->container['pickup_enabled'];
    }

    /**
     * Sets pickup_enabled
     *
     * @param bool $pickup_enabled True if the store accepts pickup orders
     *
     * @return $this
     */
    public function setPickupEnabled($pickup_enabled)
    {
        $this->container['pickup_enabled'] = $pickup_enabled;

        return $this;
    }

    /**
     * Gets minimum_pickup_order_amount
     *
     * @return double
     */
    public function getMinimumPickupOrderAmount()
    {
        return $this->container['minimum_pickup_order_amount'];
    }

    /**
     * Sets minimum_pickup_order_amount
     *
     * @param double $minimum_pickup_order_amount Minimum pickup order amount
     *
     * @return $this
     */
    public function setMinimumPickupOrderAmount($minimum_pickup_order_amount)
    {
        $this->container['minimum_pickup_order_amount'] = $minimum_pickup_order_amount;

        return $this;
    }

    /**
     * Gets require_customer_name_for_pickup
     *
     * @return bool
     */
    public function getRequireCustomerNameForPickup()
    {
        return $this->container['require_customer_name_for_pickup'];
    }

    /**
     * Sets require_customer_name_for_pickup
     *
     * @param bool $require_customer_name_for_pickup True if customer name required for pickup orders
     *
     * @return $this
     */
    public function setRequireCustomerNameForPickup($require_customer_name_for_pickup)
    {
        $this->container['require_customer_name_for_pickup'] = $require_customer_name_for_pickup;

        return $this;
    }

    /**
     * Gets cash_orders_pickup_enabled
     *
     * @return bool
     */
    public function getCashOrdersPickupEnabled()
    {
        return $this->container['cash_orders_pickup_enabled'];
    }

    /**
     * Sets cash_orders_pickup_enabled
     *
     * @param bool $cash_orders_pickup_enabled True if the store accepts cash payment for pickup orders
     *
     * @return $this
     */
    public function setCashOrdersPickupEnabled($cash_orders_pickup_enabled)
    {
        $this->container['cash_orders_pickup_enabled'] = $cash_orders_pickup_enabled;

        return $this;
    }

    /**
     * Gets lead_time_minutes
     *
     * @return int
     */
    public function getLeadTimeMinutes()
    {
        return $this->container['lead_time_minutes'];
    }

    /**
     * Sets lead_time_minutes
     *
     * @param int $lead_time_minutes Auto accept lead time for collection orders
     *
     * @return $this
     */
    public function setLeadTimeMinutes($lead_time_minutes)
    {
        $this->container['lead_time_minutes'] = $lead_time_minutes;

        return $this;
    }

    /**
     * Gets eta_in_pickup_confirmation_sms_enabled
     *
     * @return bool
     */
    public function getEtaInPickupConfirmationSmsEnabled()
    {
        return $this->container['eta_in_pickup_confirmation_sms_enabled'];
    }

    /**
     * Sets eta_in_pickup_confirmation_sms_enabled
     *
     * @param bool $eta_in_pickup_confirmation_sms_enabled True if order confirmation sms includes estimated time when order will be ready for collection
     *
     * @return $this
     */
    public function setEtaInPickupConfirmationSmsEnabled($eta_in_pickup_confirmation_sms_enabled)
    {
        $this->container['eta_in_pickup_confirmation_sms_enabled'] = $eta_in_pickup_confirmation_sms_enabled;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


