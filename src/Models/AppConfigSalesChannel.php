<?php
/**
 * AppConfigSalesChannel
 *
 * PHP version 5
 *
 * @category Class
 * @package  Flipdish\\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Flipdish Open API v1.0
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.19
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Flipdish\\Client\Models;

use \ArrayAccess;
use \Flipdish\\Client\ObjectSerializer;

/**
 * AppConfigSalesChannel Class Doc Comment
 *
 * @category Class
 * @description App Config Sales Channel
 * @package  Flipdish\\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class AppConfigSalesChannel implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'AppConfigSalesChannel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'email_request_mode' => 'string',
        'web_to_app_redirect' => 'string',
        'display_delivery_restaurant_list_screen' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'email_request_mode' => null,
        'web_to_app_redirect' => null,
        'display_delivery_restaurant_list_screen' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'email_request_mode' => 'EmailRequestMode',
        'web_to_app_redirect' => 'WebToAppRedirect',
        'display_delivery_restaurant_list_screen' => 'DisplayDeliveryRestaurantListScreen'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'email_request_mode' => 'setEmailRequestMode',
        'web_to_app_redirect' => 'setWebToAppRedirect',
        'display_delivery_restaurant_list_screen' => 'setDisplayDeliveryRestaurantListScreen'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'email_request_mode' => 'getEmailRequestMode',
        'web_to_app_redirect' => 'getWebToAppRedirect',
        'display_delivery_restaurant_list_screen' => 'getDisplayDeliveryRestaurantListScreen'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const EMAIL_REQUEST_MODE_DO_NOT_REQUEST = 'DoNotRequest';
    const EMAIL_REQUEST_MODE_REQUEST = 'Request';
    const EMAIL_REQUEST_MODE__REQUIRE = 'Require';
    const WEB_TO_APP_REDIRECT_NO_REDIRECT = 'NoRedirect';
    const WEB_TO_APP_REDIRECT_REDIRECT_ONCE = 'RedirectOnce';
    const WEB_TO_APP_REDIRECT_REDIRECT_ALWAYS = 'RedirectAlways';
    const WEB_TO_APP_REDIRECT_SUGGEST_PWA = 'SuggestPwa';
    const WEB_TO_APP_REDIRECT_FORCE_PWA = 'ForcePwa';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getEmailRequestModeAllowableValues()
    {
        return [
            self::EMAIL_REQUEST_MODE_DO_NOT_REQUEST,
            self::EMAIL_REQUEST_MODE_REQUEST,
            self::EMAIL_REQUEST_MODE__REQUIRE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getWebToAppRedirectAllowableValues()
    {
        return [
            self::WEB_TO_APP_REDIRECT_NO_REDIRECT,
            self::WEB_TO_APP_REDIRECT_REDIRECT_ONCE,
            self::WEB_TO_APP_REDIRECT_REDIRECT_ALWAYS,
            self::WEB_TO_APP_REDIRECT_SUGGEST_PWA,
            self::WEB_TO_APP_REDIRECT_FORCE_PWA,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['email_request_mode'] = isset($data['email_request_mode']) ? $data['email_request_mode'] : null;
        $this->container['web_to_app_redirect'] = isset($data['web_to_app_redirect']) ? $data['web_to_app_redirect'] : null;
        $this->container['display_delivery_restaurant_list_screen'] = isset($data['display_delivery_restaurant_list_screen']) ? $data['display_delivery_restaurant_list_screen'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getEmailRequestModeAllowableValues();
        if (!is_null($this->container['email_request_mode']) && !in_array($this->container['email_request_mode'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'email_request_mode', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getWebToAppRedirectAllowableValues();
        if (!is_null($this->container['web_to_app_redirect']) && !in_array($this->container['web_to_app_redirect'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'web_to_app_redirect', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets email_request_mode
     *
     * @return string
     */
    public function getEmailRequestMode()
    {
        return $this->container['email_request_mode'];
    }

    /**
     * Sets email_request_mode
     *
     * @param string $email_request_mode Display a popup to users requesting their email address
     *
     * @return $this
     */
    public function setEmailRequestMode($email_request_mode)
    {
        $allowedValues = $this->getEmailRequestModeAllowableValues();
        if (!is_null($email_request_mode) && !in_array($email_request_mode, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'email_request_mode', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['email_request_mode'] = $email_request_mode;

        return $this;
    }

    /**
     * Gets web_to_app_redirect
     *
     * @return string
     */
    public function getWebToAppRedirect()
    {
        return $this->container['web_to_app_redirect'];
    }

    /**
     * Sets web_to_app_redirect
     *
     * @param string $web_to_app_redirect Sends users to their native apps or request them to install the pwa
     *
     * @return $this
     */
    public function setWebToAppRedirect($web_to_app_redirect)
    {
        $allowedValues = $this->getWebToAppRedirectAllowableValues();
        if (!is_null($web_to_app_redirect) && !in_array($web_to_app_redirect, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'web_to_app_redirect', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['web_to_app_redirect'] = $web_to_app_redirect;

        return $this;
    }

    /**
     * Gets display_delivery_restaurant_list_screen
     *
     * @return bool
     */
    public function getDisplayDeliveryRestaurantListScreen()
    {
        return $this->container['display_delivery_restaurant_list_screen'];
    }

    /**
     * Sets display_delivery_restaurant_list_screen
     *
     * @param bool $display_delivery_restaurant_list_screen Display Pickup Restaurant List Screen
     *
     * @return $this
     */
    public function setDisplayDeliveryRestaurantListScreen($display_delivery_restaurant_list_screen)
    {
        $this->container['display_delivery_restaurant_list_screen'] = $display_delivery_restaurant_list_screen;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


