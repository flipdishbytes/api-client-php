<?php
/**
 * SupportedCountry
 *
 * PHP version 5
 *
 * @category Class
 * @package  Flipdish\\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Flipdish Open API v1.0
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.43
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Flipdish\\Client\Models;

use \ArrayAccess;
use \Flipdish\\Client\ObjectSerializer;

/**
 * SupportedCountry Class Doc Comment
 *
 * @category Class
 * @description Describes a supported country
 * @package  Flipdish\\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class SupportedCountry implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'SupportedCountry';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'country_code' => 'string',
        'name' => 'string',
        'phone_code' => 'int',
        'language_code' => 'string',
        'language_name' => 'string',
        'otp_number' => 'string',
        'support_number' => 'string',
        'address_layout' => 'string',
        'post_code_type' => 'string',
        'support_region' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'country_code' => null,
        'name' => null,
        'phone_code' => 'int32',
        'language_code' => null,
        'language_name' => null,
        'otp_number' => null,
        'support_number' => null,
        'address_layout' => null,
        'post_code_type' => null,
        'support_region' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'country_code' => 'CountryCode',
        'name' => 'Name',
        'phone_code' => 'PhoneCode',
        'language_code' => 'LanguageCode',
        'language_name' => 'LanguageName',
        'otp_number' => 'OtpNumber',
        'support_number' => 'SupportNumber',
        'address_layout' => 'AddressLayout',
        'post_code_type' => 'PostCodeType',
        'support_region' => 'SupportRegion'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'country_code' => 'setCountryCode',
        'name' => 'setName',
        'phone_code' => 'setPhoneCode',
        'language_code' => 'setLanguageCode',
        'language_name' => 'setLanguageName',
        'otp_number' => 'setOtpNumber',
        'support_number' => 'setSupportNumber',
        'address_layout' => 'setAddressLayout',
        'post_code_type' => 'setPostCodeType',
        'support_region' => 'setSupportRegion'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'country_code' => 'getCountryCode',
        'name' => 'getName',
        'phone_code' => 'getPhoneCode',
        'language_code' => 'getLanguageCode',
        'language_name' => 'getLanguageName',
        'otp_number' => 'getOtpNumber',
        'support_number' => 'getSupportNumber',
        'address_layout' => 'getAddressLayout',
        'post_code_type' => 'getPostCodeType',
        'support_region' => 'getSupportRegion'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const ADDRESS_LAYOUT_BUILDING_FIRST = 'BuildingFirst';
    const ADDRESS_LAYOUT_ADDRESS_FIRST = 'AddressFirst';
    const ADDRESS_LAYOUT_FULL_STREET_ADDRESS_FIRST = 'FullStreetAddressFirst';
    const POST_CODE_TYPE_NONE = 'None';
    const POST_CODE_TYPE_POST_CODE = 'PostCode';
    const POST_CODE_TYPE_ZIP = 'Zip';
    const SUPPORT_REGION__DEFAULT = 'Default';
    const SUPPORT_REGION_SPAIN = 'Spain';
    const SUPPORT_REGION_BENELUX = 'Benelux';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAddressLayoutAllowableValues()
    {
        return [
            self::ADDRESS_LAYOUT_BUILDING_FIRST,
            self::ADDRESS_LAYOUT_ADDRESS_FIRST,
            self::ADDRESS_LAYOUT_FULL_STREET_ADDRESS_FIRST,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPostCodeTypeAllowableValues()
    {
        return [
            self::POST_CODE_TYPE_NONE,
            self::POST_CODE_TYPE_POST_CODE,
            self::POST_CODE_TYPE_ZIP,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSupportRegionAllowableValues()
    {
        return [
            self::SUPPORT_REGION__DEFAULT,
            self::SUPPORT_REGION_SPAIN,
            self::SUPPORT_REGION_BENELUX,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['country_code'] = isset($data['country_code']) ? $data['country_code'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['phone_code'] = isset($data['phone_code']) ? $data['phone_code'] : null;
        $this->container['language_code'] = isset($data['language_code']) ? $data['language_code'] : null;
        $this->container['language_name'] = isset($data['language_name']) ? $data['language_name'] : null;
        $this->container['otp_number'] = isset($data['otp_number']) ? $data['otp_number'] : null;
        $this->container['support_number'] = isset($data['support_number']) ? $data['support_number'] : null;
        $this->container['address_layout'] = isset($data['address_layout']) ? $data['address_layout'] : null;
        $this->container['post_code_type'] = isset($data['post_code_type']) ? $data['post_code_type'] : null;
        $this->container['support_region'] = isset($data['support_region']) ? $data['support_region'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getAddressLayoutAllowableValues();
        if (!is_null($this->container['address_layout']) && !in_array($this->container['address_layout'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'address_layout', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getPostCodeTypeAllowableValues();
        if (!is_null($this->container['post_code_type']) && !in_array($this->container['post_code_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'post_code_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getSupportRegionAllowableValues();
        if (!is_null($this->container['support_region']) && !in_array($this->container['support_region'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'support_region', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets country_code
     *
     * @return string
     */
    public function getCountryCode()
    {
        return $this->container['country_code'];
    }

    /**
     * Sets country_code
     *
     * @param string $country_code Country code
     *
     * @return $this
     */
    public function setCountryCode($country_code)
    {
        $this->container['country_code'] = $country_code;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name Nice display name for a country
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets phone_code
     *
     * @return int
     */
    public function getPhoneCode()
    {
        return $this->container['phone_code'];
    }

    /**
     * Sets phone_code
     *
     * @param int $phone_code Country internatinoal phone code prefix
     *
     * @return $this
     */
    public function setPhoneCode($phone_code)
    {
        $this->container['phone_code'] = $phone_code;

        return $this;
    }

    /**
     * Gets language_code
     *
     * @return string
     */
    public function getLanguageCode()
    {
        return $this->container['language_code'];
    }

    /**
     * Sets language_code
     *
     * @param string $language_code Language code
     *
     * @return $this
     */
    public function setLanguageCode($language_code)
    {
        $this->container['language_code'] = $language_code;

        return $this;
    }

    /**
     * Gets language_name
     *
     * @return string
     */
    public function getLanguageName()
    {
        return $this->container['language_name'];
    }

    /**
     * Sets language_name
     *
     * @param string $language_name Language name
     *
     * @return $this
     */
    public function setLanguageName($language_name)
    {
        $this->container['language_name'] = $language_name;

        return $this;
    }

    /**
     * Gets otp_number
     *
     * @return string
     */
    public function getOtpNumber()
    {
        return $this->container['otp_number'];
    }

    /**
     * Sets otp_number
     *
     * @param string $otp_number The phone number provided to Store staff which, in conjunction with a one-time-code, will connect them to the customer.
     *
     * @return $this
     */
    public function setOtpNumber($otp_number)
    {
        $this->container['otp_number'] = $otp_number;

        return $this;
    }

    /**
     * Gets support_number
     *
     * @return string
     */
    public function getSupportNumber()
    {
        return $this->container['support_number'];
    }

    /**
     * Sets support_number
     *
     * @param string $support_number The store's support phone number, displayed to customers.
     *
     * @return $this
     */
    public function setSupportNumber($support_number)
    {
        $this->container['support_number'] = $support_number;

        return $this;
    }

    /**
     * Gets address_layout
     *
     * @return string
     */
    public function getAddressLayout()
    {
        return $this->container['address_layout'];
    }

    /**
     * Sets address_layout
     *
     * @param string $address_layout Address layout format. This changes the layout of address entry forms on the web app, iOS and Android app and should be set based on local custom.
     *
     * @return $this
     */
    public function setAddressLayout($address_layout)
    {
        $allowedValues = $this->getAddressLayoutAllowableValues();
        if (!is_null($address_layout) && !in_array($address_layout, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'address_layout', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['address_layout'] = $address_layout;

        return $this;
    }

    /**
     * Gets post_code_type
     *
     * @return string
     */
    public function getPostCodeType()
    {
        return $this->container['post_code_type'];
    }

    /**
     * Sets post_code_type
     *
     * @param string $post_code_type Post code type
     *
     * @return $this
     */
    public function setPostCodeType($post_code_type)
    {
        $allowedValues = $this->getPostCodeTypeAllowableValues();
        if (!is_null($post_code_type) && !in_array($post_code_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'post_code_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['post_code_type'] = $post_code_type;

        return $this;
    }

    /**
     * Gets support_region
     *
     * @return string
     */
    public function getSupportRegion()
    {
        return $this->container['support_region'];
    }

    /**
     * Sets support_region
     *
     * @param string $support_region Supported region. This is not used.
     *
     * @return $this
     */
    public function setSupportRegion($support_region)
    {
        $allowedValues = $this->getSupportRegionAllowableValues();
        if (!is_null($support_region) && !in_array($support_region, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'support_region', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['support_region'] = $support_region;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


