<?php
/**
 * TelephonyConfig
 *
 * PHP version 5
 *
 * @category Class
 * @package  Flipdish\\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Flipdish Open API v1.0
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.43
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Flipdish\\Client\Models;

use \ArrayAccess;
use \Flipdish\\Client\ObjectSerializer;

/**
 * TelephonyConfig Class Doc Comment
 *
 * @category Class
 * @description Phone call
 * @package  Flipdish\\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class TelephonyConfig implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'TelephonyConfig';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'telephony_config_id' => 'int',
        'apm_enabled' => 'bool',
        'type' => 'string',
        'consent_enabled' => 'bool',
        'phone_number' => 'string',
        'send_app_link_sms' => 'bool',
        'use_custom_app_link_sms_message' => 'bool',
        'use_custom_voice_message' => 'bool',
        'app_link_sms_message' => 'string',
        'resend_apm_message_after_days' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'telephony_config_id' => 'int32',
        'apm_enabled' => null,
        'type' => null,
        'consent_enabled' => null,
        'phone_number' => null,
        'send_app_link_sms' => null,
        'use_custom_app_link_sms_message' => null,
        'use_custom_voice_message' => null,
        'app_link_sms_message' => null,
        'resend_apm_message_after_days' => 'int32'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'telephony_config_id' => 'TelephonyConfigId',
        'apm_enabled' => 'ApmEnabled',
        'type' => 'Type',
        'consent_enabled' => 'ConsentEnabled',
        'phone_number' => 'PhoneNumber',
        'send_app_link_sms' => 'SendAppLinkSms',
        'use_custom_app_link_sms_message' => 'UseCustomAppLinkSmsMessage',
        'use_custom_voice_message' => 'UseCustomVoiceMessage',
        'app_link_sms_message' => 'AppLinkSmsMessage',
        'resend_apm_message_after_days' => 'ResendApmMessageAfterDays'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'telephony_config_id' => 'setTelephonyConfigId',
        'apm_enabled' => 'setApmEnabled',
        'type' => 'setType',
        'consent_enabled' => 'setConsentEnabled',
        'phone_number' => 'setPhoneNumber',
        'send_app_link_sms' => 'setSendAppLinkSms',
        'use_custom_app_link_sms_message' => 'setUseCustomAppLinkSmsMessage',
        'use_custom_voice_message' => 'setUseCustomVoiceMessage',
        'app_link_sms_message' => 'setAppLinkSmsMessage',
        'resend_apm_message_after_days' => 'setResendApmMessageAfterDays'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'telephony_config_id' => 'getTelephonyConfigId',
        'apm_enabled' => 'getApmEnabled',
        'type' => 'getType',
        'consent_enabled' => 'getConsentEnabled',
        'phone_number' => 'getPhoneNumber',
        'send_app_link_sms' => 'getSendAppLinkSms',
        'use_custom_app_link_sms_message' => 'getUseCustomAppLinkSmsMessage',
        'use_custom_voice_message' => 'getUseCustomVoiceMessage',
        'app_link_sms_message' => 'getAppLinkSmsMessage',
        'resend_apm_message_after_days' => 'getResendApmMessageAfterDays'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const TYPE_PRE_RECORDED = 'PreRecorded';
    const TYPE_VOICE_AI = 'VoiceAI';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_PRE_RECORDED,
            self::TYPE_VOICE_AI,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['telephony_config_id'] = isset($data['telephony_config_id']) ? $data['telephony_config_id'] : null;
        $this->container['apm_enabled'] = isset($data['apm_enabled']) ? $data['apm_enabled'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['consent_enabled'] = isset($data['consent_enabled']) ? $data['consent_enabled'] : null;
        $this->container['phone_number'] = isset($data['phone_number']) ? $data['phone_number'] : null;
        $this->container['send_app_link_sms'] = isset($data['send_app_link_sms']) ? $data['send_app_link_sms'] : null;
        $this->container['use_custom_app_link_sms_message'] = isset($data['use_custom_app_link_sms_message']) ? $data['use_custom_app_link_sms_message'] : null;
        $this->container['use_custom_voice_message'] = isset($data['use_custom_voice_message']) ? $data['use_custom_voice_message'] : null;
        $this->container['app_link_sms_message'] = isset($data['app_link_sms_message']) ? $data['app_link_sms_message'] : null;
        $this->container['resend_apm_message_after_days'] = isset($data['resend_apm_message_after_days']) ? $data['resend_apm_message_after_days'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($this->container['type']) && !in_array($this->container['type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets telephony_config_id
     *
     * @return int
     */
    public function getTelephonyConfigId()
    {
        return $this->container['telephony_config_id'];
    }

    /**
     * Sets telephony_config_id
     *
     * @param int $telephony_config_id ID of the phone call
     *
     * @return $this
     */
    public function setTelephonyConfigId($telephony_config_id)
    {
        $this->container['telephony_config_id'] = $telephony_config_id;

        return $this;
    }

    /**
     * Gets apm_enabled
     *
     * @return bool
     */
    public function getApmEnabled()
    {
        return $this->container['apm_enabled'];
    }

    /**
     * Sets apm_enabled
     *
     * @param bool $apm_enabled APM enabled flag
     *
     * @return $this
     */
    public function setApmEnabled($apm_enabled)
    {
        $this->container['apm_enabled'] = $apm_enabled;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type Type of telephony service
     *
     * @return $this
     */
    public function setType($type)
    {
        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($type) && !in_array($type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets consent_enabled
     *
     * @return bool
     */
    public function getConsentEnabled()
    {
        return $this->container['consent_enabled'];
    }

    /**
     * Sets consent_enabled
     *
     * @param bool $consent_enabled Consent enabled flag
     *
     * @return $this
     */
    public function setConsentEnabled($consent_enabled)
    {
        $this->container['consent_enabled'] = $consent_enabled;

        return $this;
    }

    /**
     * Gets phone_number
     *
     * @return string
     */
    public function getPhoneNumber()
    {
        return $this->container['phone_number'];
    }

    /**
     * Sets phone_number
     *
     * @param string $phone_number APM phone number of the store
     *
     * @return $this
     */
    public function setPhoneNumber($phone_number)
    {
        $this->container['phone_number'] = $phone_number;

        return $this;
    }

    /**
     * Gets send_app_link_sms
     *
     * @return bool
     */
    public function getSendAppLinkSms()
    {
        return $this->container['send_app_link_sms'];
    }

    /**
     * Sets send_app_link_sms
     *
     * @param bool $send_app_link_sms Send app link SMS flag
     *
     * @return $this
     */
    public function setSendAppLinkSms($send_app_link_sms)
    {
        $this->container['send_app_link_sms'] = $send_app_link_sms;

        return $this;
    }

    /**
     * Gets use_custom_app_link_sms_message
     *
     * @return bool
     */
    public function getUseCustomAppLinkSmsMessage()
    {
        return $this->container['use_custom_app_link_sms_message'];
    }

    /**
     * Sets use_custom_app_link_sms_message
     *
     * @param bool $use_custom_app_link_sms_message Use custom app link SMS message flag
     *
     * @return $this
     */
    public function setUseCustomAppLinkSmsMessage($use_custom_app_link_sms_message)
    {
        $this->container['use_custom_app_link_sms_message'] = $use_custom_app_link_sms_message;

        return $this;
    }

    /**
     * Gets use_custom_voice_message
     *
     * @return bool
     */
    public function getUseCustomVoiceMessage()
    {
        return $this->container['use_custom_voice_message'];
    }

    /**
     * Sets use_custom_voice_message
     *
     * @param bool $use_custom_voice_message Use custom voice message flag
     *
     * @return $this
     */
    public function setUseCustomVoiceMessage($use_custom_voice_message)
    {
        $this->container['use_custom_voice_message'] = $use_custom_voice_message;

        return $this;
    }

    /**
     * Gets app_link_sms_message
     *
     * @return string
     */
    public function getAppLinkSmsMessage()
    {
        return $this->container['app_link_sms_message'];
    }

    /**
     * Sets app_link_sms_message
     *
     * @param string $app_link_sms_message App link SMS message
     *
     * @return $this
     */
    public function setAppLinkSmsMessage($app_link_sms_message)
    {
        $this->container['app_link_sms_message'] = $app_link_sms_message;

        return $this;
    }

    /**
     * Gets resend_apm_message_after_days
     *
     * @return int
     */
    public function getResendApmMessageAfterDays()
    {
        return $this->container['resend_apm_message_after_days'];
    }

    /**
     * Sets resend_apm_message_after_days
     *
     * @param int $resend_apm_message_after_days Amount of days to resend APM message
     *
     * @return $this
     */
    public function setResendApmMessageAfterDays($resend_apm_message_after_days)
    {
        $this->container['resend_apm_message_after_days'] = $resend_apm_message_after_days;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


