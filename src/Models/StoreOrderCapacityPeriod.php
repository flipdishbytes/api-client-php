<?php
/**
 * StoreOrderCapacityPeriod
 *
 * PHP version 5
 *
 * @category Class
 * @package  Flipdish\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Flipdish Open API v1.0
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.19
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Flipdish\Client\Models;

use \ArrayAccess;
use \Flipdish\Client\ObjectSerializer;

/**
 * StoreOrderCapacityPeriod Class Doc Comment
 *
 * @category Class
 * @description Represents a single order capacity period
 * @package  Flipdish\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class StoreOrderCapacityPeriod implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'StoreOrderCapacityPeriod';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'max_order_number_per_store_interval' => 'int',
        'day_of_the_week' => 'string',
        'period_start_hour' => 'int',
        'period_start_minutes' => 'int',
        'period_end_hour' => 'int',
        'period_end_minutes' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'max_order_number_per_store_interval' => 'int32',
        'day_of_the_week' => null,
        'period_start_hour' => 'int32',
        'period_start_minutes' => 'int32',
        'period_end_hour' => 'int32',
        'period_end_minutes' => 'int32'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'max_order_number_per_store_interval' => 'MaxOrderNumberPerStoreInterval',
        'day_of_the_week' => 'DayOfTheWeek',
        'period_start_hour' => 'PeriodStartHour',
        'period_start_minutes' => 'PeriodStartMinutes',
        'period_end_hour' => 'PeriodEndHour',
        'period_end_minutes' => 'PeriodEndMinutes'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'max_order_number_per_store_interval' => 'setMaxOrderNumberPerStoreInterval',
        'day_of_the_week' => 'setDayOfTheWeek',
        'period_start_hour' => 'setPeriodStartHour',
        'period_start_minutes' => 'setPeriodStartMinutes',
        'period_end_hour' => 'setPeriodEndHour',
        'period_end_minutes' => 'setPeriodEndMinutes'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'max_order_number_per_store_interval' => 'getMaxOrderNumberPerStoreInterval',
        'day_of_the_week' => 'getDayOfTheWeek',
        'period_start_hour' => 'getPeriodStartHour',
        'period_start_minutes' => 'getPeriodStartMinutes',
        'period_end_hour' => 'getPeriodEndHour',
        'period_end_minutes' => 'getPeriodEndMinutes'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const DAY_OF_THE_WEEK_SUNDAY = 'Sunday';
    const DAY_OF_THE_WEEK_MONDAY = 'Monday';
    const DAY_OF_THE_WEEK_TUESDAY = 'Tuesday';
    const DAY_OF_THE_WEEK_WEDNESDAY = 'Wednesday';
    const DAY_OF_THE_WEEK_THURSDAY = 'Thursday';
    const DAY_OF_THE_WEEK_FRIDAY = 'Friday';
    const DAY_OF_THE_WEEK_SATURDAY = 'Saturday';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDayOfTheWeekAllowableValues()
    {
        return [
            self::DAY_OF_THE_WEEK_SUNDAY,
            self::DAY_OF_THE_WEEK_MONDAY,
            self::DAY_OF_THE_WEEK_TUESDAY,
            self::DAY_OF_THE_WEEK_WEDNESDAY,
            self::DAY_OF_THE_WEEK_THURSDAY,
            self::DAY_OF_THE_WEEK_FRIDAY,
            self::DAY_OF_THE_WEEK_SATURDAY,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['max_order_number_per_store_interval'] = isset($data['max_order_number_per_store_interval']) ? $data['max_order_number_per_store_interval'] : null;
        $this->container['day_of_the_week'] = isset($data['day_of_the_week']) ? $data['day_of_the_week'] : null;
        $this->container['period_start_hour'] = isset($data['period_start_hour']) ? $data['period_start_hour'] : null;
        $this->container['period_start_minutes'] = isset($data['period_start_minutes']) ? $data['period_start_minutes'] : null;
        $this->container['period_end_hour'] = isset($data['period_end_hour']) ? $data['period_end_hour'] : null;
        $this->container['period_end_minutes'] = isset($data['period_end_minutes']) ? $data['period_end_minutes'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getDayOfTheWeekAllowableValues();
        if (!is_null($this->container['day_of_the_week']) && !in_array($this->container['day_of_the_week'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'day_of_the_week', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets max_order_number_per_store_interval
     *
     * @return int
     */
    public function getMaxOrderNumberPerStoreInterval()
    {
        return $this->container['max_order_number_per_store_interval'];
    }

    /**
     * Sets max_order_number_per_store_interval
     *
     * @param int $max_order_number_per_store_interval The maximum number of orders per each store order interval in this order capacity period.  E.g. for a period from 9:00 till 11:00, if the store's interval is 10 minutes, and MaxOrderNumberPerStoreInterval is set to 5,  it means that within each 10-minute interval between 9:00 and 11:00 (i.e. 9:00-9:10, 9:10-9:20, .. , 10:50-11:00) it will be possible to  request at most 5 orders.
     *
     * @return $this
     */
    public function setMaxOrderNumberPerStoreInterval($max_order_number_per_store_interval)
    {
        $this->container['max_order_number_per_store_interval'] = $max_order_number_per_store_interval;

        return $this;
    }

    /**
     * Gets day_of_the_week
     *
     * @return string
     */
    public function getDayOfTheWeek()
    {
        return $this->container['day_of_the_week'];
    }

    /**
     * Sets day_of_the_week
     *
     * @param string $day_of_the_week Day of the week the period pertains to
     *
     * @return $this
     */
    public function setDayOfTheWeek($day_of_the_week)
    {
        $allowedValues = $this->getDayOfTheWeekAllowableValues();
        if (!is_null($day_of_the_week) && !in_array($day_of_the_week, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'day_of_the_week', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['day_of_the_week'] = $day_of_the_week;

        return $this;
    }

    /**
     * Gets period_start_hour
     *
     * @return int
     */
    public function getPeriodStartHour()
    {
        return $this->container['period_start_hour'];
    }

    /**
     * Sets period_start_hour
     *
     * @param int $period_start_hour The hour the period starts at
     *
     * @return $this
     */
    public function setPeriodStartHour($period_start_hour)
    {
        $this->container['period_start_hour'] = $period_start_hour;

        return $this;
    }

    /**
     * Gets period_start_minutes
     *
     * @return int
     */
    public function getPeriodStartMinutes()
    {
        return $this->container['period_start_minutes'];
    }

    /**
     * Sets period_start_minutes
     *
     * @param int $period_start_minutes The minutes after the hour the period starts at
     *
     * @return $this
     */
    public function setPeriodStartMinutes($period_start_minutes)
    {
        $this->container['period_start_minutes'] = $period_start_minutes;

        return $this;
    }

    /**
     * Gets period_end_hour
     *
     * @return int
     */
    public function getPeriodEndHour()
    {
        return $this->container['period_end_hour'];
    }

    /**
     * Sets period_end_hour
     *
     * @param int $period_end_hour The hour the period ends at
     *
     * @return $this
     */
    public function setPeriodEndHour($period_end_hour)
    {
        $this->container['period_end_hour'] = $period_end_hour;

        return $this;
    }

    /**
     * Gets period_end_minutes
     *
     * @return int
     */
    public function getPeriodEndMinutes()
    {
        return $this->container['period_end_minutes'];
    }

    /**
     * Sets period_end_minutes
     *
     * @param int $period_end_minutes The minutes after the hour the period ends at
     *
     * @return $this
     */
    public function setPeriodEndMinutes($period_end_minutes)
    {
        $this->container['period_end_minutes'] = $period_end_minutes;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


