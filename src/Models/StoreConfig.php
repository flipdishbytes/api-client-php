<?php
/**
 * StoreConfig
 *
 * PHP version 5
 *
 * @category Class
 * @package  Flipdish\\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Flipdish Open API v1.0
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.43
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Flipdish\\Client\Models;

use \ArrayAccess;
use \Flipdish\\Client\ObjectSerializer;

/**
 * StoreConfig Class Doc Comment
 *
 * @category Class
 * @package  Flipdish\\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class StoreConfig implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'StoreConfig';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'pickup_enabled' => 'bool',
        'bank_account_attached' => 'bool',
        'menu_assigned' => 'bool',
        'has_full_address' => 'bool',
        'pickup_hours' => 'bool',
        'is_published' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'pickup_enabled' => null,
        'bank_account_attached' => null,
        'menu_assigned' => null,
        'has_full_address' => null,
        'pickup_hours' => null,
        'is_published' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'pickup_enabled' => 'PickupEnabled',
        'bank_account_attached' => 'BankAccountAttached',
        'menu_assigned' => 'MenuAssigned',
        'has_full_address' => 'HasFullAddress',
        'pickup_hours' => 'PickupHours',
        'is_published' => 'IsPublished'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'pickup_enabled' => 'setPickupEnabled',
        'bank_account_attached' => 'setBankAccountAttached',
        'menu_assigned' => 'setMenuAssigned',
        'has_full_address' => 'setHasFullAddress',
        'pickup_hours' => 'setPickupHours',
        'is_published' => 'setIsPublished'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'pickup_enabled' => 'getPickupEnabled',
        'bank_account_attached' => 'getBankAccountAttached',
        'menu_assigned' => 'getMenuAssigned',
        'has_full_address' => 'getHasFullAddress',
        'pickup_hours' => 'getPickupHours',
        'is_published' => 'getIsPublished'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['pickup_enabled'] = isset($data['pickup_enabled']) ? $data['pickup_enabled'] : null;
        $this->container['bank_account_attached'] = isset($data['bank_account_attached']) ? $data['bank_account_attached'] : null;
        $this->container['menu_assigned'] = isset($data['menu_assigned']) ? $data['menu_assigned'] : null;
        $this->container['has_full_address'] = isset($data['has_full_address']) ? $data['has_full_address'] : null;
        $this->container['pickup_hours'] = isset($data['pickup_hours']) ? $data['pickup_hours'] : null;
        $this->container['is_published'] = isset($data['is_published']) ? $data['is_published'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets pickup_enabled
     *
     * @return bool
     */
    public function getPickupEnabled()
    {
        return $this->container['pickup_enabled'];
    }

    /**
     * Sets pickup_enabled
     *
     * @param bool $pickup_enabled True if the store accepts pickup orders
     *
     * @return $this
     */
    public function setPickupEnabled($pickup_enabled)
    {
        $this->container['pickup_enabled'] = $pickup_enabled;

        return $this;
    }

    /**
     * Gets bank_account_attached
     *
     * @return bool
     */
    public function getBankAccountAttached()
    {
        return $this->container['bank_account_attached'];
    }

    /**
     * Sets bank_account_attached
     *
     * @param bool $bank_account_attached True if the store has a Bank Account attached
     *
     * @return $this
     */
    public function setBankAccountAttached($bank_account_attached)
    {
        $this->container['bank_account_attached'] = $bank_account_attached;

        return $this;
    }

    /**
     * Gets menu_assigned
     *
     * @return bool
     */
    public function getMenuAssigned()
    {
        return $this->container['menu_assigned'];
    }

    /**
     * Sets menu_assigned
     *
     * @param bool $menu_assigned True if the store is assigned to a Menu
     *
     * @return $this
     */
    public function setMenuAssigned($menu_assigned)
    {
        $this->container['menu_assigned'] = $menu_assigned;

        return $this;
    }

    /**
     * Gets has_full_address
     *
     * @return bool
     */
    public function getHasFullAddress()
    {
        return $this->container['has_full_address'];
    }

    /**
     * Sets has_full_address
     *
     * @param bool $has_full_address True if the store has a valid Address
     *
     * @return $this
     */
    public function setHasFullAddress($has_full_address)
    {
        $this->container['has_full_address'] = $has_full_address;

        return $this;
    }

    /**
     * Gets pickup_hours
     *
     * @return bool
     */
    public function getPickupHours()
    {
        return $this->container['pickup_hours'];
    }

    /**
     * Sets pickup_hours
     *
     * @param bool $pickup_hours True if the store has Pickup hours
     *
     * @return $this
     */
    public function setPickupHours($pickup_hours)
    {
        $this->container['pickup_hours'] = $pickup_hours;

        return $this;
    }

    /**
     * Gets is_published
     *
     * @return bool
     */
    public function getIsPublished()
    {
        return $this->container['is_published'];
    }

    /**
     * Sets is_published
     *
     * @param bool $is_published Is the Store Published
     *
     * @return $this
     */
    public function setIsPublished($is_published)
    {
        $this->container['is_published'] = $is_published;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


