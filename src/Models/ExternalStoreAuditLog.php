<?php
/**
 * ExternalStoreAuditLog
 *
 * PHP version 5
 *
 * @category Class
 * @package  Flipdish\\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Flipdish Open API v1.0
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.19
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Flipdish\\Client\Models;

use \ArrayAccess;
use \Flipdish\\Client\ObjectSerializer;

/**
 * ExternalStoreAuditLog Class Doc Comment
 *
 * @category Class
 * @description External event
 * @package  Flipdish\\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ExternalStoreAuditLog implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ExternalStoreAuditLog';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'external_create_time' => '\DateTime',
        'store_id' => 'int',
        'description' => 'string',
        'source' => 'string',
        'version' => 'string',
        'description_format' => 'string',
        'description_fields' => 'string',
        'description_id' => 'string',
        'ref1' => 'string',
        'ref2' => 'string',
        'ref3' => 'string',
        'ref4' => 'string',
        'order_id' => 'int',
        'tags' => 'string[]',
        'field_changes' => '\Flipdish\\Client\Models\AuditLogFieldChangeInformation[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'external_create_time' => 'date-time',
        'store_id' => 'int32',
        'description' => null,
        'source' => null,
        'version' => null,
        'description_format' => null,
        'description_fields' => null,
        'description_id' => null,
        'ref1' => null,
        'ref2' => null,
        'ref3' => null,
        'ref4' => null,
        'order_id' => 'int32',
        'tags' => null,
        'field_changes' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'external_create_time' => 'ExternalCreateTime',
        'store_id' => 'StoreId',
        'description' => 'Description',
        'source' => 'Source',
        'version' => 'Version',
        'description_format' => 'DescriptionFormat',
        'description_fields' => 'DescriptionFields',
        'description_id' => 'DescriptionId',
        'ref1' => 'Ref1',
        'ref2' => 'Ref2',
        'ref3' => 'Ref3',
        'ref4' => 'Ref4',
        'order_id' => 'OrderId',
        'tags' => 'Tags',
        'field_changes' => 'FieldChanges'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'external_create_time' => 'setExternalCreateTime',
        'store_id' => 'setStoreId',
        'description' => 'setDescription',
        'source' => 'setSource',
        'version' => 'setVersion',
        'description_format' => 'setDescriptionFormat',
        'description_fields' => 'setDescriptionFields',
        'description_id' => 'setDescriptionId',
        'ref1' => 'setRef1',
        'ref2' => 'setRef2',
        'ref3' => 'setRef3',
        'ref4' => 'setRef4',
        'order_id' => 'setOrderId',
        'tags' => 'setTags',
        'field_changes' => 'setFieldChanges'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'external_create_time' => 'getExternalCreateTime',
        'store_id' => 'getStoreId',
        'description' => 'getDescription',
        'source' => 'getSource',
        'version' => 'getVersion',
        'description_format' => 'getDescriptionFormat',
        'description_fields' => 'getDescriptionFields',
        'description_id' => 'getDescriptionId',
        'ref1' => 'getRef1',
        'ref2' => 'getRef2',
        'ref3' => 'getRef3',
        'ref4' => 'getRef4',
        'order_id' => 'getOrderId',
        'tags' => 'getTags',
        'field_changes' => 'getFieldChanges'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['external_create_time'] = isset($data['external_create_time']) ? $data['external_create_time'] : null;
        $this->container['store_id'] = isset($data['store_id']) ? $data['store_id'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['source'] = isset($data['source']) ? $data['source'] : null;
        $this->container['version'] = isset($data['version']) ? $data['version'] : null;
        $this->container['description_format'] = isset($data['description_format']) ? $data['description_format'] : null;
        $this->container['description_fields'] = isset($data['description_fields']) ? $data['description_fields'] : null;
        $this->container['description_id'] = isset($data['description_id']) ? $data['description_id'] : null;
        $this->container['ref1'] = isset($data['ref1']) ? $data['ref1'] : null;
        $this->container['ref2'] = isset($data['ref2']) ? $data['ref2'] : null;
        $this->container['ref3'] = isset($data['ref3']) ? $data['ref3'] : null;
        $this->container['ref4'] = isset($data['ref4']) ? $data['ref4'] : null;
        $this->container['order_id'] = isset($data['order_id']) ? $data['order_id'] : null;
        $this->container['tags'] = isset($data['tags']) ? $data['tags'] : null;
        $this->container['field_changes'] = isset($data['field_changes']) ? $data['field_changes'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets external_create_time
     *
     * @return \DateTime
     */
    public function getExternalCreateTime()
    {
        return $this->container['external_create_time'];
    }

    /**
     * Sets external_create_time
     *
     * @param \DateTime $external_create_time The time of creation of the event
     *
     * @return $this
     */
    public function setExternalCreateTime($external_create_time)
    {
        $this->container['external_create_time'] = $external_create_time;

        return $this;
    }

    /**
     * Gets store_id
     *
     * @return int
     */
    public function getStoreId()
    {
        return $this->container['store_id'];
    }

    /**
     * Sets store_id
     *
     * @param int $store_id Store Id
     *
     * @return $this
     */
    public function setStoreId($store_id)
    {
        $this->container['store_id'] = $store_id;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description Description
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets source
     *
     * @return string
     */
    public function getSource()
    {
        return $this->container['source'];
    }

    /**
     * Sets source
     *
     * @param string $source Identifies the source of the log
     *
     * @return $this
     */
    public function setSource($source)
    {
        $this->container['source'] = $source;

        return $this;
    }

    /**
     * Gets version
     *
     * @return string
     */
    public function getVersion()
    {
        return $this->container['version'];
    }

    /**
     * Sets version
     *
     * @param string $version Identifies the version of the {Flipdish.PublicModels.V1.AuditLogs.ExternalStoreAuditLog.Source}
     *
     * @return $this
     */
    public function setVersion($version)
    {
        $this->container['version'] = $version;

        return $this;
    }

    /**
     * Gets description_format
     *
     * @return string
     */
    public function getDescriptionFormat()
    {
        return $this->container['description_format'];
    }

    /**
     * Sets description_format
     *
     * @param string $description_format Description with format placeholders
     *
     * @return $this
     */
    public function setDescriptionFormat($description_format)
    {
        $this->container['description_format'] = $description_format;

        return $this;
    }

    /**
     * Gets description_fields
     *
     * @return string
     */
    public function getDescriptionFields()
    {
        return $this->container['description_fields'];
    }

    /**
     * Sets description_fields
     *
     * @param string $description_fields Description with format placeholders
     *
     * @return $this
     */
    public function setDescriptionFields($description_fields)
    {
        $this->container['description_fields'] = $description_fields;

        return $this;
    }

    /**
     * Gets description_id
     *
     * @return string
     */
    public function getDescriptionId()
    {
        return $this->container['description_id'];
    }

    /**
     * Sets description_id
     *
     * @param string $description_id Description
     *
     * @return $this
     */
    public function setDescriptionId($description_id)
    {
        $this->container['description_id'] = $description_id;

        return $this;
    }

    /**
     * Gets ref1
     *
     * @return string
     */
    public function getRef1()
    {
        return $this->container['ref1'];
    }

    /**
     * Sets ref1
     *
     * @param string $ref1 Ref (reference field)
     *
     * @return $this
     */
    public function setRef1($ref1)
    {
        $this->container['ref1'] = $ref1;

        return $this;
    }

    /**
     * Gets ref2
     *
     * @return string
     */
    public function getRef2()
    {
        return $this->container['ref2'];
    }

    /**
     * Sets ref2
     *
     * @param string $ref2 Ref2 (reference field)
     *
     * @return $this
     */
    public function setRef2($ref2)
    {
        $this->container['ref2'] = $ref2;

        return $this;
    }

    /**
     * Gets ref3
     *
     * @return string
     */
    public function getRef3()
    {
        return $this->container['ref3'];
    }

    /**
     * Sets ref3
     *
     * @param string $ref3 Ref3 (reference field)
     *
     * @return $this
     */
    public function setRef3($ref3)
    {
        $this->container['ref3'] = $ref3;

        return $this;
    }

    /**
     * Gets ref4
     *
     * @return string
     */
    public function getRef4()
    {
        return $this->container['ref4'];
    }

    /**
     * Sets ref4
     *
     * @param string $ref4 Ref4 (reference field)
     *
     * @return $this
     */
    public function setRef4($ref4)
    {
        $this->container['ref4'] = $ref4;

        return $this;
    }

    /**
     * Gets order_id
     *
     * @return int
     */
    public function getOrderId()
    {
        return $this->container['order_id'];
    }

    /**
     * Sets order_id
     *
     * @param int $order_id Order Id
     *
     * @return $this
     */
    public function setOrderId($order_id)
    {
        $this->container['order_id'] = $order_id;

        return $this;
    }

    /**
     * Gets tags
     *
     * @return string[]
     */
    public function getTags()
    {
        return $this->container['tags'];
    }

    /**
     * Sets tags
     *
     * @param string[] $tags Tags
     *
     * @return $this
     */
    public function setTags($tags)
    {
        $this->container['tags'] = $tags;

        return $this;
    }

    /**
     * Gets field_changes
     *
     * @return \Flipdish\\Client\Models\AuditLogFieldChangeInformation[]
     */
    public function getFieldChanges()
    {
        return $this->container['field_changes'];
    }

    /**
     * Sets field_changes
     *
     * @param \Flipdish\\Client\Models\AuditLogFieldChangeInformation[] $field_changes Field changes list
     *
     * @return $this
     */
    public function setFieldChanges($field_changes)
    {
        $this->container['field_changes'] = $field_changes;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


