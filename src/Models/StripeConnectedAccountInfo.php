<?php
/**
 * StripeConnectedAccountInfo
 *
 * PHP version 5
 *
 * @category Class
 * @package  Flipdish\\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Flipdish Open API v1.0
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.19
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Flipdish\\Client\Models;

use \ArrayAccess;
use \Flipdish\\Client\ObjectSerializer;

/**
 * StripeConnectedAccountInfo Class Doc Comment
 *
 * @category Class
 * @description Represents information about a Stripe connected account associated with a bank account
 * @package  Flipdish\\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class StripeConnectedAccountInfo implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'StripeConnectedAccountInfo';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'account_status' => 'string',
        'stripe_id' => 'string',
        'card_payment_status' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'account_status' => null,
        'stripe_id' => null,
        'card_payment_status' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'account_status' => 'AccountStatus',
        'stripe_id' => 'StripeId',
        'card_payment_status' => 'CardPaymentStatus'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'account_status' => 'setAccountStatus',
        'stripe_id' => 'setStripeId',
        'card_payment_status' => 'setCardPaymentStatus'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'account_status' => 'getAccountStatus',
        'stripe_id' => 'getStripeId',
        'card_payment_status' => 'getCardPaymentStatus'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const ACCOUNT_STATUS_DISABLED = 'Disabled';
    const ACCOUNT_STATUS_ENABLED = 'Enabled';
    const ACCOUNT_STATUS_ADDITIONAL_INFORMATION_REQUIRED = 'AdditionalInformationRequired';
    const ACCOUNT_STATUS_PENDING_VERIFICATION = 'PendingVerification';
    const ACCOUNT_STATUS_UNVERIFIED = 'Unverified';
    const ACCOUNT_STATUS_REJECTED = 'Rejected';
    const ACCOUNT_STATUS_UPDATE_EXTERNAL_ACCOUNT = 'UpdateExternalAccount';
    const CARD_PAYMENT_STATUS_INACTIVE = 'Inactive';
    const CARD_PAYMENT_STATUS_PENDING = 'Pending';
    const CARD_PAYMENT_STATUS_ACTIVE = 'Active';
    const CARD_PAYMENT_STATUS_UNREQUESTED = 'Unrequested';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAccountStatusAllowableValues()
    {
        return [
            self::ACCOUNT_STATUS_DISABLED,
            self::ACCOUNT_STATUS_ENABLED,
            self::ACCOUNT_STATUS_ADDITIONAL_INFORMATION_REQUIRED,
            self::ACCOUNT_STATUS_PENDING_VERIFICATION,
            self::ACCOUNT_STATUS_UNVERIFIED,
            self::ACCOUNT_STATUS_REJECTED,
            self::ACCOUNT_STATUS_UPDATE_EXTERNAL_ACCOUNT,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getCardPaymentStatusAllowableValues()
    {
        return [
            self::CARD_PAYMENT_STATUS_INACTIVE,
            self::CARD_PAYMENT_STATUS_PENDING,
            self::CARD_PAYMENT_STATUS_ACTIVE,
            self::CARD_PAYMENT_STATUS_UNREQUESTED,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['account_status'] = isset($data['account_status']) ? $data['account_status'] : null;
        $this->container['stripe_id'] = isset($data['stripe_id']) ? $data['stripe_id'] : null;
        $this->container['card_payment_status'] = isset($data['card_payment_status']) ? $data['card_payment_status'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getAccountStatusAllowableValues();
        if (!is_null($this->container['account_status']) && !in_array($this->container['account_status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'account_status', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getCardPaymentStatusAllowableValues();
        if (!is_null($this->container['card_payment_status']) && !in_array($this->container['card_payment_status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'card_payment_status', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets account_status
     *
     * @return string
     */
    public function getAccountStatus()
    {
        return $this->container['account_status'];
    }

    /**
     * Sets account_status
     *
     * @param string $account_status Stripe connected account status
     *
     * @return $this
     */
    public function setAccountStatus($account_status)
    {
        $allowedValues = $this->getAccountStatusAllowableValues();
        if (!is_null($account_status) && !in_array($account_status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'account_status', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['account_status'] = $account_status;

        return $this;
    }

    /**
     * Gets stripe_id
     *
     * @return string
     */
    public function getStripeId()
    {
        return $this->container['stripe_id'];
    }

    /**
     * Sets stripe_id
     *
     * @param string $stripe_id Stripe connected account id
     *
     * @return $this
     */
    public function setStripeId($stripe_id)
    {
        $this->container['stripe_id'] = $stripe_id;

        return $this;
    }

    /**
     * Gets card_payment_status
     *
     * @return string
     */
    public function getCardPaymentStatus()
    {
        return $this->container['card_payment_status'];
    }

    /**
     * Sets card_payment_status
     *
     * @param string $card_payment_status Current status of the Card Payment capability of the account
     *
     * @return $this
     */
    public function setCardPaymentStatus($card_payment_status)
    {
        $allowedValues = $this->getCardPaymentStatusAllowableValues();
        if (!is_null($card_payment_status) && !in_array($card_payment_status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'card_payment_status', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['card_payment_status'] = $card_payment_status;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


