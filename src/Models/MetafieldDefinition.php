<?php
/**
 * MetafieldDefinition
 *
 * PHP version 5
 *
 * @category Class
 * @package  Flipdish\\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Flipdish Open API v1.0
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.43
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Flipdish\\Client\Models;

use \ArrayAccess;
use \Flipdish\\Client\ObjectSerializer;

/**
 * MetafieldDefinition Class Doc Comment
 *
 * @category Class
 * @description Metafield Definition
 * @package  Flipdish\\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class MetafieldDefinition implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'MetafieldDefinition';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'is_read_only' => 'bool',
        'owner_entity' => 'string',
        'key' => 'string',
        'value_type' => 'string',
        'name' => 'string',
        'description' => 'string',
        'behaviors' => 'string[]',
        'metafield_definition_recommendation_id' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'is_read_only' => null,
        'owner_entity' => null,
        'key' => null,
        'value_type' => null,
        'name' => null,
        'description' => null,
        'behaviors' => null,
        'metafield_definition_recommendation_id' => 'int32'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'is_read_only' => 'IsReadOnly',
        'owner_entity' => 'OwnerEntity',
        'key' => 'Key',
        'value_type' => 'ValueType',
        'name' => 'Name',
        'description' => 'Description',
        'behaviors' => 'Behaviors',
        'metafield_definition_recommendation_id' => 'MetafieldDefinitionRecommendationId'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'is_read_only' => 'setIsReadOnly',
        'owner_entity' => 'setOwnerEntity',
        'key' => 'setKey',
        'value_type' => 'setValueType',
        'name' => 'setName',
        'description' => 'setDescription',
        'behaviors' => 'setBehaviors',
        'metafield_definition_recommendation_id' => 'setMetafieldDefinitionRecommendationId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'is_read_only' => 'getIsReadOnly',
        'owner_entity' => 'getOwnerEntity',
        'key' => 'getKey',
        'value_type' => 'getValueType',
        'name' => 'getName',
        'description' => 'getDescription',
        'behaviors' => 'getBehaviors',
        'metafield_definition_recommendation_id' => 'getMetafieldDefinitionRecommendationId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const OWNER_ENTITY_CATALOG_ITEM = 'CatalogItem';
    const OWNER_ENTITY_CATALOG_GROUP = 'CatalogGroup';
    const OWNER_ENTITY_MENU = 'Menu';
    const VALUE_TYPE_BOOLEAN = 'Boolean';
    const VALUE_TYPE_JSON = 'Json';
    const VALUE_TYPE_SINGLE_LINE_STRING = 'SingleLineString';
    const VALUE_TYPE_MULTI_LINE_STRING = 'MultiLineString';
    const BEHAVIORS_SEND_TO_ORDER = 'SendToOrder';
    const BEHAVIORS_SEND_TO_MENU = 'SendToMenu';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getOwnerEntityAllowableValues()
    {
        return [
            self::OWNER_ENTITY_CATALOG_ITEM,
            self::OWNER_ENTITY_CATALOG_GROUP,
            self::OWNER_ENTITY_MENU,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getValueTypeAllowableValues()
    {
        return [
            self::VALUE_TYPE_BOOLEAN,
            self::VALUE_TYPE_JSON,
            self::VALUE_TYPE_SINGLE_LINE_STRING,
            self::VALUE_TYPE_MULTI_LINE_STRING,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getBehaviorsAllowableValues()
    {
        return [
            self::BEHAVIORS_SEND_TO_ORDER,
            self::BEHAVIORS_SEND_TO_MENU,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['is_read_only'] = isset($data['is_read_only']) ? $data['is_read_only'] : null;
        $this->container['owner_entity'] = isset($data['owner_entity']) ? $data['owner_entity'] : null;
        $this->container['key'] = isset($data['key']) ? $data['key'] : null;
        $this->container['value_type'] = isset($data['value_type']) ? $data['value_type'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['behaviors'] = isset($data['behaviors']) ? $data['behaviors'] : null;
        $this->container['metafield_definition_recommendation_id'] = isset($data['metafield_definition_recommendation_id']) ? $data['metafield_definition_recommendation_id'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getOwnerEntityAllowableValues();
        if (!is_null($this->container['owner_entity']) && !in_array($this->container['owner_entity'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'owner_entity', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['key'] === null) {
            $invalidProperties[] = "'key' can't be null";
        }
        $allowedValues = $this->getValueTypeAllowableValues();
        if (!is_null($this->container['value_type']) && !in_array($this->container['value_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'value_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets is_read_only
     *
     * @return bool
     */
    public function getIsReadOnly()
    {
        return $this->container['is_read_only'];
    }

    /**
     * Sets is_read_only
     *
     * @param bool $is_read_only Indicates if a definition can be edited or not
     *
     * @return $this
     */
    public function setIsReadOnly($is_read_only)
    {
        $this->container['is_read_only'] = $is_read_only;

        return $this;
    }

    /**
     * Gets owner_entity
     *
     * @return string
     */
    public function getOwnerEntity()
    {
        return $this->container['owner_entity'];
    }

    /**
     * Sets owner_entity
     *
     * @param string $owner_entity The Metafield will extend the specified {Flipdish.Metafields.PublicModels.V1.MetafieldDefinitionBase.OwnerEntity}
     *
     * @return $this
     */
    public function setOwnerEntity($owner_entity)
    {
        $allowedValues = $this->getOwnerEntityAllowableValues();
        if (!is_null($owner_entity) && !in_array($owner_entity, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'owner_entity', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['owner_entity'] = $owner_entity;

        return $this;
    }

    /**
     * Gets key
     *
     * @return string
     */
    public function getKey()
    {
        return $this->container['key'];
    }

    /**
     * Sets key
     *
     * @param string $key Key of the metafield.  The key must have two parts, separated by a dot. The first part acts as a category, for organizational purposes.  The parts can be composed of lowercase letters, numbers, hyphen and underscore
     *
     * @return $this
     */
    public function setKey($key)
    {
        $this->container['key'] = $key;

        return $this;
    }

    /**
     * Gets value_type
     *
     * @return string
     */
    public function getValueType()
    {
        return $this->container['value_type'];
    }

    /**
     * Sets value_type
     *
     * @param string $value_type The excepted type for the Value field
     *
     * @return $this
     */
    public function setValueType($value_type)
    {
        $allowedValues = $this->getValueTypeAllowableValues();
        if (!is_null($value_type) && !in_array($value_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'value_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['value_type'] = $value_type;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name Field Name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description Field Description
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets behaviors
     *
     * @return string[]
     */
    public function getBehaviors()
    {
        return $this->container['behaviors'];
    }

    /**
     * Sets behaviors
     *
     * @param string[] $behaviors Enable Metafield Behaviors
     *
     * @return $this
     */
    public function setBehaviors($behaviors)
    {
        $allowedValues = $this->getBehaviorsAllowableValues();
        if (!is_null($behaviors) && array_diff($behaviors, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'behaviors', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['behaviors'] = $behaviors;

        return $this;
    }

    /**
     * Gets metafield_definition_recommendation_id
     *
     * @return int
     */
    public function getMetafieldDefinitionRecommendationId()
    {
        return $this->container['metafield_definition_recommendation_id'];
    }

    /**
     * Sets metafield_definition_recommendation_id
     *
     * @param int $metafield_definition_recommendation_id Metafield Recommendation Id
     *
     * @return $this
     */
    public function setMetafieldDefinitionRecommendationId($metafield_definition_recommendation_id)
    {
        $this->container['metafield_definition_recommendation_id'] = $metafield_definition_recommendation_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


