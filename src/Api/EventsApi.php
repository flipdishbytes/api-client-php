<?php
/**
 * EventsApi
 * PHP version 5
 *
 * @category Class
 * @package  Flipdish\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Flipdish Open API v1.0
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.19
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Flipdish\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Flipdish\Client\ApiException;
use Flipdish\Client\Configuration;
use Flipdish\Client\HeaderSelector;
use Flipdish\Client\ObjectSerializer;

/**
 * EventsApi Class Doc Comment
 *
 * @category Class
 * @package  Flipdish\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class EventsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation getCustomerEvents
     *
     * Get customer events  For technical reasons, the number of records returned is limited to 100.
     *
     * @param  int $customer_id Customer identifier identifier (required)
     * @param  int $limit The maximum elements to return (optional)
     * @param  int $page The index of the page to return, starting by 1 (optional)
     * @param  \DateTime $start Start date (optional)
     * @param  \DateTime $end End date (optional)
     * @param  int $order_id Events that have Order Id (optional)
     * @param  int $store_id Events that have Store Id (optional)
     * @param  int $store_group_id Events that have Store Group Id (optional)
     * @param  int $user_id Events that have User Id (optional)
     * @param  string $user_email Events that have User Email (optional)
     * @param  string $user_name Events that have User Name (optional)
     * @param  string $voucher_code Events that have voucher code (optional)
     * @param  string[] $event_type Events that have event type\\s (optional)
     * @param  string $flipdish_event_id Unique Identifier of Event, if this is specified, all other criteria are ignored. (optional)
     *
     * @throws \Flipdish\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Flipdish\Client\Models\RestApiEventSearchPaginationResult
     */
    public function getCustomerEvents($customer_id, $limit = null, $page = null, $start = null, $end = null, $order_id = null, $store_id = null, $store_group_id = null, $user_id = null, $user_email = null, $user_name = null, $voucher_code = null, $event_type = null, $flipdish_event_id = null)
    {
        list($response) = $this->getCustomerEventsWithHttpInfo($customer_id, $limit, $page, $start, $end, $order_id, $store_id, $store_group_id, $user_id, $user_email, $user_name, $voucher_code, $event_type, $flipdish_event_id);
        return $response;
    }

    /**
     * Operation getCustomerEventsWithHttpInfo
     *
     * Get customer events  For technical reasons, the number of records returned is limited to 100.
     *
     * @param  int $customer_id Customer identifier identifier (required)
     * @param  int $limit The maximum elements to return (optional)
     * @param  int $page The index of the page to return, starting by 1 (optional)
     * @param  \DateTime $start Start date (optional)
     * @param  \DateTime $end End date (optional)
     * @param  int $order_id Events that have Order Id (optional)
     * @param  int $store_id Events that have Store Id (optional)
     * @param  int $store_group_id Events that have Store Group Id (optional)
     * @param  int $user_id Events that have User Id (optional)
     * @param  string $user_email Events that have User Email (optional)
     * @param  string $user_name Events that have User Name (optional)
     * @param  string $voucher_code Events that have voucher code (optional)
     * @param  string[] $event_type Events that have event type\\s (optional)
     * @param  string $flipdish_event_id Unique Identifier of Event, if this is specified, all other criteria are ignored. (optional)
     *
     * @throws \Flipdish\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Flipdish\Client\Models\RestApiEventSearchPaginationResult, HTTP status code, HTTP response headers (array of strings)
     */
    public function getCustomerEventsWithHttpInfo($customer_id, $limit = null, $page = null, $start = null, $end = null, $order_id = null, $store_id = null, $store_group_id = null, $user_id = null, $user_email = null, $user_name = null, $voucher_code = null, $event_type = null, $flipdish_event_id = null)
    {
        $returnType = '\Flipdish\Client\Models\RestApiEventSearchPaginationResult';
        $request = $this->getCustomerEventsRequest($customer_id, $limit, $page, $start, $end, $order_id, $store_id, $store_group_id, $user_id, $user_email, $user_name, $voucher_code, $event_type, $flipdish_event_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Flipdish\Client\Models\RestApiEventSearchPaginationResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Flipdish\Client\Models\RestApiErrorResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Flipdish\Client\Models\RestApiUnauthorizedResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Flipdish\Client\Models\RestApiForbiddenResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getCustomerEventsAsync
     *
     * Get customer events  For technical reasons, the number of records returned is limited to 100.
     *
     * @param  int $customer_id Customer identifier identifier (required)
     * @param  int $limit The maximum elements to return (optional)
     * @param  int $page The index of the page to return, starting by 1 (optional)
     * @param  \DateTime $start Start date (optional)
     * @param  \DateTime $end End date (optional)
     * @param  int $order_id Events that have Order Id (optional)
     * @param  int $store_id Events that have Store Id (optional)
     * @param  int $store_group_id Events that have Store Group Id (optional)
     * @param  int $user_id Events that have User Id (optional)
     * @param  string $user_email Events that have User Email (optional)
     * @param  string $user_name Events that have User Name (optional)
     * @param  string $voucher_code Events that have voucher code (optional)
     * @param  string[] $event_type Events that have event type\\s (optional)
     * @param  string $flipdish_event_id Unique Identifier of Event, if this is specified, all other criteria are ignored. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCustomerEventsAsync($customer_id, $limit = null, $page = null, $start = null, $end = null, $order_id = null, $store_id = null, $store_group_id = null, $user_id = null, $user_email = null, $user_name = null, $voucher_code = null, $event_type = null, $flipdish_event_id = null)
    {
        return $this->getCustomerEventsAsyncWithHttpInfo($customer_id, $limit, $page, $start, $end, $order_id, $store_id, $store_group_id, $user_id, $user_email, $user_name, $voucher_code, $event_type, $flipdish_event_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getCustomerEventsAsyncWithHttpInfo
     *
     * Get customer events  For technical reasons, the number of records returned is limited to 100.
     *
     * @param  int $customer_id Customer identifier identifier (required)
     * @param  int $limit The maximum elements to return (optional)
     * @param  int $page The index of the page to return, starting by 1 (optional)
     * @param  \DateTime $start Start date (optional)
     * @param  \DateTime $end End date (optional)
     * @param  int $order_id Events that have Order Id (optional)
     * @param  int $store_id Events that have Store Id (optional)
     * @param  int $store_group_id Events that have Store Group Id (optional)
     * @param  int $user_id Events that have User Id (optional)
     * @param  string $user_email Events that have User Email (optional)
     * @param  string $user_name Events that have User Name (optional)
     * @param  string $voucher_code Events that have voucher code (optional)
     * @param  string[] $event_type Events that have event type\\s (optional)
     * @param  string $flipdish_event_id Unique Identifier of Event, if this is specified, all other criteria are ignored. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCustomerEventsAsyncWithHttpInfo($customer_id, $limit = null, $page = null, $start = null, $end = null, $order_id = null, $store_id = null, $store_group_id = null, $user_id = null, $user_email = null, $user_name = null, $voucher_code = null, $event_type = null, $flipdish_event_id = null)
    {
        $returnType = '\Flipdish\Client\Models\RestApiEventSearchPaginationResult';
        $request = $this->getCustomerEventsRequest($customer_id, $limit, $page, $start, $end, $order_id, $store_id, $store_group_id, $user_id, $user_email, $user_name, $voucher_code, $event_type, $flipdish_event_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getCustomerEvents'
     *
     * @param  int $customer_id Customer identifier identifier (required)
     * @param  int $limit The maximum elements to return (optional)
     * @param  int $page The index of the page to return, starting by 1 (optional)
     * @param  \DateTime $start Start date (optional)
     * @param  \DateTime $end End date (optional)
     * @param  int $order_id Events that have Order Id (optional)
     * @param  int $store_id Events that have Store Id (optional)
     * @param  int $store_group_id Events that have Store Group Id (optional)
     * @param  int $user_id Events that have User Id (optional)
     * @param  string $user_email Events that have User Email (optional)
     * @param  string $user_name Events that have User Name (optional)
     * @param  string $voucher_code Events that have voucher code (optional)
     * @param  string[] $event_type Events that have event type\\s (optional)
     * @param  string $flipdish_event_id Unique Identifier of Event, if this is specified, all other criteria are ignored. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getCustomerEventsRequest($customer_id, $limit = null, $page = null, $start = null, $end = null, $order_id = null, $store_id = null, $store_group_id = null, $user_id = null, $user_email = null, $user_name = null, $voucher_code = null, $event_type = null, $flipdish_event_id = null)
    {
        // verify the required parameter 'customer_id' is set
        if ($customer_id === null || (is_array($customer_id) && count($customer_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $customer_id when calling getCustomerEvents'
            );
        }

        $resourcePath = '/api/v1.0/events/customer/{customerId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($limit !== null) {
            $queryParams['limit'] = ObjectSerializer::toQueryValue($limit);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = ObjectSerializer::toQueryValue($page);
        }
        // query params
        if ($start !== null) {
            $queryParams['start'] = ObjectSerializer::toQueryValue($start);
        }
        // query params
        if ($end !== null) {
            $queryParams['end'] = ObjectSerializer::toQueryValue($end);
        }
        // query params
        if ($order_id !== null) {
            $queryParams['orderId'] = ObjectSerializer::toQueryValue($order_id);
        }
        // query params
        if ($store_id !== null) {
            $queryParams['storeId'] = ObjectSerializer::toQueryValue($store_id);
        }
        // query params
        if ($store_group_id !== null) {
            $queryParams['storeGroupId'] = ObjectSerializer::toQueryValue($store_group_id);
        }
        // query params
        if ($user_id !== null) {
            $queryParams['userId'] = ObjectSerializer::toQueryValue($user_id);
        }
        // query params
        if ($user_email !== null) {
            $queryParams['userEmail'] = ObjectSerializer::toQueryValue($user_email);
        }
        // query params
        if ($user_name !== null) {
            $queryParams['userName'] = ObjectSerializer::toQueryValue($user_name);
        }
        // query params
        if ($voucher_code !== null) {
            $queryParams['voucherCode'] = ObjectSerializer::toQueryValue($voucher_code);
        }
        // query params
        if (is_array($event_type)) {
            $queryParams['eventType'] = $event_type;
        } else
        if ($event_type !== null) {
            $queryParams['eventType'] = ObjectSerializer::toQueryValue($event_type);
        }
        // query params
        if ($flipdish_event_id !== null) {
            $queryParams['flipdishEventId'] = ObjectSerializer::toQueryValue($flipdish_event_id);
        }

        // path params
        if ($customer_id !== null) {
            $resourcePath = str_replace(
                '{' . 'customerId' . '}',
                ObjectSerializer::toPathValue($customer_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getEvents
     *
     * Get events  For technical reasons, the number of records returned is limited to 100.
     *
     * @param  int $white_label_id White Label Id (optional)
     * @param  int $customer_id Customer Id (optional)
     * @param  int $limit The maximum elements to return (optional)
     * @param  int $page The index of the page to return, starting by 1 (optional)
     * @param  \DateTime $start Start date (optional)
     * @param  \DateTime $end End date (optional)
     * @param  int $order_id Events that have Order Id (optional)
     * @param  int $store_id Events that have Store Id (optional)
     * @param  int $store_group_id Events that have Store Group Id (optional)
     * @param  int $user_id Events that have User Id (optional)
     * @param  string $user_email Events that have User Email (optional)
     * @param  string $user_name Events that have User Name (optional)
     * @param  string $voucher_code Events that have voucher code (optional)
     * @param  string[] $event_type Events that have event type\\s (optional)
     * @param  string $flipdish_event_id Unique Identifier of Event, if this is specified, all other criteria are ignored. (optional)
     *
     * @throws \Flipdish\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Flipdish\Client\Models\RestApiEventSearchPaginationResult
     */
    public function getEvents($white_label_id = null, $customer_id = null, $limit = null, $page = null, $start = null, $end = null, $order_id = null, $store_id = null, $store_group_id = null, $user_id = null, $user_email = null, $user_name = null, $voucher_code = null, $event_type = null, $flipdish_event_id = null)
    {
        list($response) = $this->getEventsWithHttpInfo($white_label_id, $customer_id, $limit, $page, $start, $end, $order_id, $store_id, $store_group_id, $user_id, $user_email, $user_name, $voucher_code, $event_type, $flipdish_event_id);
        return $response;
    }

    /**
     * Operation getEventsWithHttpInfo
     *
     * Get events  For technical reasons, the number of records returned is limited to 100.
     *
     * @param  int $white_label_id White Label Id (optional)
     * @param  int $customer_id Customer Id (optional)
     * @param  int $limit The maximum elements to return (optional)
     * @param  int $page The index of the page to return, starting by 1 (optional)
     * @param  \DateTime $start Start date (optional)
     * @param  \DateTime $end End date (optional)
     * @param  int $order_id Events that have Order Id (optional)
     * @param  int $store_id Events that have Store Id (optional)
     * @param  int $store_group_id Events that have Store Group Id (optional)
     * @param  int $user_id Events that have User Id (optional)
     * @param  string $user_email Events that have User Email (optional)
     * @param  string $user_name Events that have User Name (optional)
     * @param  string $voucher_code Events that have voucher code (optional)
     * @param  string[] $event_type Events that have event type\\s (optional)
     * @param  string $flipdish_event_id Unique Identifier of Event, if this is specified, all other criteria are ignored. (optional)
     *
     * @throws \Flipdish\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Flipdish\Client\Models\RestApiEventSearchPaginationResult, HTTP status code, HTTP response headers (array of strings)
     */
    public function getEventsWithHttpInfo($white_label_id = null, $customer_id = null, $limit = null, $page = null, $start = null, $end = null, $order_id = null, $store_id = null, $store_group_id = null, $user_id = null, $user_email = null, $user_name = null, $voucher_code = null, $event_type = null, $flipdish_event_id = null)
    {
        $returnType = '\Flipdish\Client\Models\RestApiEventSearchPaginationResult';
        $request = $this->getEventsRequest($white_label_id, $customer_id, $limit, $page, $start, $end, $order_id, $store_id, $store_group_id, $user_id, $user_email, $user_name, $voucher_code, $event_type, $flipdish_event_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Flipdish\Client\Models\RestApiEventSearchPaginationResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Flipdish\Client\Models\RestApiErrorResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Flipdish\Client\Models\RestApiUnauthorizedResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Flipdish\Client\Models\RestApiForbiddenResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getEventsAsync
     *
     * Get events  For technical reasons, the number of records returned is limited to 100.
     *
     * @param  int $white_label_id White Label Id (optional)
     * @param  int $customer_id Customer Id (optional)
     * @param  int $limit The maximum elements to return (optional)
     * @param  int $page The index of the page to return, starting by 1 (optional)
     * @param  \DateTime $start Start date (optional)
     * @param  \DateTime $end End date (optional)
     * @param  int $order_id Events that have Order Id (optional)
     * @param  int $store_id Events that have Store Id (optional)
     * @param  int $store_group_id Events that have Store Group Id (optional)
     * @param  int $user_id Events that have User Id (optional)
     * @param  string $user_email Events that have User Email (optional)
     * @param  string $user_name Events that have User Name (optional)
     * @param  string $voucher_code Events that have voucher code (optional)
     * @param  string[] $event_type Events that have event type\\s (optional)
     * @param  string $flipdish_event_id Unique Identifier of Event, if this is specified, all other criteria are ignored. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEventsAsync($white_label_id = null, $customer_id = null, $limit = null, $page = null, $start = null, $end = null, $order_id = null, $store_id = null, $store_group_id = null, $user_id = null, $user_email = null, $user_name = null, $voucher_code = null, $event_type = null, $flipdish_event_id = null)
    {
        return $this->getEventsAsyncWithHttpInfo($white_label_id, $customer_id, $limit, $page, $start, $end, $order_id, $store_id, $store_group_id, $user_id, $user_email, $user_name, $voucher_code, $event_type, $flipdish_event_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getEventsAsyncWithHttpInfo
     *
     * Get events  For technical reasons, the number of records returned is limited to 100.
     *
     * @param  int $white_label_id White Label Id (optional)
     * @param  int $customer_id Customer Id (optional)
     * @param  int $limit The maximum elements to return (optional)
     * @param  int $page The index of the page to return, starting by 1 (optional)
     * @param  \DateTime $start Start date (optional)
     * @param  \DateTime $end End date (optional)
     * @param  int $order_id Events that have Order Id (optional)
     * @param  int $store_id Events that have Store Id (optional)
     * @param  int $store_group_id Events that have Store Group Id (optional)
     * @param  int $user_id Events that have User Id (optional)
     * @param  string $user_email Events that have User Email (optional)
     * @param  string $user_name Events that have User Name (optional)
     * @param  string $voucher_code Events that have voucher code (optional)
     * @param  string[] $event_type Events that have event type\\s (optional)
     * @param  string $flipdish_event_id Unique Identifier of Event, if this is specified, all other criteria are ignored. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEventsAsyncWithHttpInfo($white_label_id = null, $customer_id = null, $limit = null, $page = null, $start = null, $end = null, $order_id = null, $store_id = null, $store_group_id = null, $user_id = null, $user_email = null, $user_name = null, $voucher_code = null, $event_type = null, $flipdish_event_id = null)
    {
        $returnType = '\Flipdish\Client\Models\RestApiEventSearchPaginationResult';
        $request = $this->getEventsRequest($white_label_id, $customer_id, $limit, $page, $start, $end, $order_id, $store_id, $store_group_id, $user_id, $user_email, $user_name, $voucher_code, $event_type, $flipdish_event_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getEvents'
     *
     * @param  int $white_label_id White Label Id (optional)
     * @param  int $customer_id Customer Id (optional)
     * @param  int $limit The maximum elements to return (optional)
     * @param  int $page The index of the page to return, starting by 1 (optional)
     * @param  \DateTime $start Start date (optional)
     * @param  \DateTime $end End date (optional)
     * @param  int $order_id Events that have Order Id (optional)
     * @param  int $store_id Events that have Store Id (optional)
     * @param  int $store_group_id Events that have Store Group Id (optional)
     * @param  int $user_id Events that have User Id (optional)
     * @param  string $user_email Events that have User Email (optional)
     * @param  string $user_name Events that have User Name (optional)
     * @param  string $voucher_code Events that have voucher code (optional)
     * @param  string[] $event_type Events that have event type\\s (optional)
     * @param  string $flipdish_event_id Unique Identifier of Event, if this is specified, all other criteria are ignored. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getEventsRequest($white_label_id = null, $customer_id = null, $limit = null, $page = null, $start = null, $end = null, $order_id = null, $store_id = null, $store_group_id = null, $user_id = null, $user_email = null, $user_name = null, $voucher_code = null, $event_type = null, $flipdish_event_id = null)
    {

        $resourcePath = '/api/v1.0/events';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($white_label_id !== null) {
            $queryParams['whiteLabelId'] = ObjectSerializer::toQueryValue($white_label_id);
        }
        // query params
        if ($customer_id !== null) {
            $queryParams['customerId'] = ObjectSerializer::toQueryValue($customer_id);
        }
        // query params
        if ($limit !== null) {
            $queryParams['limit'] = ObjectSerializer::toQueryValue($limit);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = ObjectSerializer::toQueryValue($page);
        }
        // query params
        if ($start !== null) {
            $queryParams['start'] = ObjectSerializer::toQueryValue($start);
        }
        // query params
        if ($end !== null) {
            $queryParams['end'] = ObjectSerializer::toQueryValue($end);
        }
        // query params
        if ($order_id !== null) {
            $queryParams['orderId'] = ObjectSerializer::toQueryValue($order_id);
        }
        // query params
        if ($store_id !== null) {
            $queryParams['storeId'] = ObjectSerializer::toQueryValue($store_id);
        }
        // query params
        if ($store_group_id !== null) {
            $queryParams['storeGroupId'] = ObjectSerializer::toQueryValue($store_group_id);
        }
        // query params
        if ($user_id !== null) {
            $queryParams['userId'] = ObjectSerializer::toQueryValue($user_id);
        }
        // query params
        if ($user_email !== null) {
            $queryParams['userEmail'] = ObjectSerializer::toQueryValue($user_email);
        }
        // query params
        if ($user_name !== null) {
            $queryParams['userName'] = ObjectSerializer::toQueryValue($user_name);
        }
        // query params
        if ($voucher_code !== null) {
            $queryParams['voucherCode'] = ObjectSerializer::toQueryValue($voucher_code);
        }
        // query params
        if (is_array($event_type)) {
            $queryParams['eventType'] = $event_type;
        } else
        if ($event_type !== null) {
            $queryParams['eventType'] = ObjectSerializer::toQueryValue($event_type);
        }
        // query params
        if ($flipdish_event_id !== null) {
            $queryParams['flipdishEventId'] = ObjectSerializer::toQueryValue($flipdish_event_id);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getEventsById
     *
     * Get event by Id  For technical reasons, the number of records returned is limited to 100.
     *
     * @param  string $event_id Event identifier (Guid) (required)
     *
     * @throws \Flipdish\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Flipdish\Client\Models\EventSearchResult
     */
    public function getEventsById($event_id)
    {
        list($response) = $this->getEventsByIdWithHttpInfo($event_id);
        return $response;
    }

    /**
     * Operation getEventsByIdWithHttpInfo
     *
     * Get event by Id  For technical reasons, the number of records returned is limited to 100.
     *
     * @param  string $event_id Event identifier (Guid) (required)
     *
     * @throws \Flipdish\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Flipdish\Client\Models\EventSearchResult, HTTP status code, HTTP response headers (array of strings)
     */
    public function getEventsByIdWithHttpInfo($event_id)
    {
        $returnType = '\Flipdish\Client\Models\EventSearchResult';
        $request = $this->getEventsByIdRequest($event_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Flipdish\Client\Models\EventSearchResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Flipdish\Client\Models\RestApiErrorResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Flipdish\Client\Models\RestApiUnauthorizedResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Flipdish\Client\Models\RestApiForbiddenResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getEventsByIdAsync
     *
     * Get event by Id  For technical reasons, the number of records returned is limited to 100.
     *
     * @param  string $event_id Event identifier (Guid) (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEventsByIdAsync($event_id)
    {
        return $this->getEventsByIdAsyncWithHttpInfo($event_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getEventsByIdAsyncWithHttpInfo
     *
     * Get event by Id  For technical reasons, the number of records returned is limited to 100.
     *
     * @param  string $event_id Event identifier (Guid) (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEventsByIdAsyncWithHttpInfo($event_id)
    {
        $returnType = '\Flipdish\Client\Models\EventSearchResult';
        $request = $this->getEventsByIdRequest($event_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getEventsById'
     *
     * @param  string $event_id Event identifier (Guid) (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getEventsByIdRequest($event_id)
    {
        // verify the required parameter 'event_id' is set
        if ($event_id === null || (is_array($event_id) && count($event_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $event_id when calling getEventsById'
            );
        }

        $resourcePath = '/api/v1.0/events/{eventId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($event_id !== null) {
            $resourcePath = str_replace(
                '{' . 'eventId' . '}',
                ObjectSerializer::toPathValue($event_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getMenuEvents
     *
     * Get menu events  For technical reasons, the number of records returned is limited to 100.
     *
     * @param  int $menu_id Menu Identifier (required)
     * @param  int $limit The maximum elements to return (optional)
     * @param  int $page The index of the page to return, starting by 1 (optional)
     * @param  \DateTime $start Start date (optional)
     * @param  \DateTime $end End date (optional)
     * @param  int $order_id Events that have Order Id (optional)
     * @param  int $store_id Events that have Store Id (optional)
     * @param  int $store_group_id Events that have Store Group Id (optional)
     * @param  int $user_id Events that have User Id (optional)
     * @param  string $user_email Events that have User Email (optional)
     * @param  string $user_name Events that have User Name (optional)
     * @param  string $voucher_code Events that have voucher code (optional)
     * @param  string[] $event_type Events that have event type\\s (optional)
     * @param  string $flipdish_event_id Unique Identifier of Event, if this is specified, all other criteria are ignored. (optional)
     *
     * @throws \Flipdish\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Flipdish\Client\Models\RestApiEventSearchPaginationResult
     */
    public function getMenuEvents($menu_id, $limit = null, $page = null, $start = null, $end = null, $order_id = null, $store_id = null, $store_group_id = null, $user_id = null, $user_email = null, $user_name = null, $voucher_code = null, $event_type = null, $flipdish_event_id = null)
    {
        list($response) = $this->getMenuEventsWithHttpInfo($menu_id, $limit, $page, $start, $end, $order_id, $store_id, $store_group_id, $user_id, $user_email, $user_name, $voucher_code, $event_type, $flipdish_event_id);
        return $response;
    }

    /**
     * Operation getMenuEventsWithHttpInfo
     *
     * Get menu events  For technical reasons, the number of records returned is limited to 100.
     *
     * @param  int $menu_id Menu Identifier (required)
     * @param  int $limit The maximum elements to return (optional)
     * @param  int $page The index of the page to return, starting by 1 (optional)
     * @param  \DateTime $start Start date (optional)
     * @param  \DateTime $end End date (optional)
     * @param  int $order_id Events that have Order Id (optional)
     * @param  int $store_id Events that have Store Id (optional)
     * @param  int $store_group_id Events that have Store Group Id (optional)
     * @param  int $user_id Events that have User Id (optional)
     * @param  string $user_email Events that have User Email (optional)
     * @param  string $user_name Events that have User Name (optional)
     * @param  string $voucher_code Events that have voucher code (optional)
     * @param  string[] $event_type Events that have event type\\s (optional)
     * @param  string $flipdish_event_id Unique Identifier of Event, if this is specified, all other criteria are ignored. (optional)
     *
     * @throws \Flipdish\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Flipdish\Client\Models\RestApiEventSearchPaginationResult, HTTP status code, HTTP response headers (array of strings)
     */
    public function getMenuEventsWithHttpInfo($menu_id, $limit = null, $page = null, $start = null, $end = null, $order_id = null, $store_id = null, $store_group_id = null, $user_id = null, $user_email = null, $user_name = null, $voucher_code = null, $event_type = null, $flipdish_event_id = null)
    {
        $returnType = '\Flipdish\Client\Models\RestApiEventSearchPaginationResult';
        $request = $this->getMenuEventsRequest($menu_id, $limit, $page, $start, $end, $order_id, $store_id, $store_group_id, $user_id, $user_email, $user_name, $voucher_code, $event_type, $flipdish_event_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Flipdish\Client\Models\RestApiEventSearchPaginationResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Flipdish\Client\Models\RestApiErrorResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Flipdish\Client\Models\RestApiUnauthorizedResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Flipdish\Client\Models\RestApiForbiddenResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getMenuEventsAsync
     *
     * Get menu events  For technical reasons, the number of records returned is limited to 100.
     *
     * @param  int $menu_id Menu Identifier (required)
     * @param  int $limit The maximum elements to return (optional)
     * @param  int $page The index of the page to return, starting by 1 (optional)
     * @param  \DateTime $start Start date (optional)
     * @param  \DateTime $end End date (optional)
     * @param  int $order_id Events that have Order Id (optional)
     * @param  int $store_id Events that have Store Id (optional)
     * @param  int $store_group_id Events that have Store Group Id (optional)
     * @param  int $user_id Events that have User Id (optional)
     * @param  string $user_email Events that have User Email (optional)
     * @param  string $user_name Events that have User Name (optional)
     * @param  string $voucher_code Events that have voucher code (optional)
     * @param  string[] $event_type Events that have event type\\s (optional)
     * @param  string $flipdish_event_id Unique Identifier of Event, if this is specified, all other criteria are ignored. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getMenuEventsAsync($menu_id, $limit = null, $page = null, $start = null, $end = null, $order_id = null, $store_id = null, $store_group_id = null, $user_id = null, $user_email = null, $user_name = null, $voucher_code = null, $event_type = null, $flipdish_event_id = null)
    {
        return $this->getMenuEventsAsyncWithHttpInfo($menu_id, $limit, $page, $start, $end, $order_id, $store_id, $store_group_id, $user_id, $user_email, $user_name, $voucher_code, $event_type, $flipdish_event_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getMenuEventsAsyncWithHttpInfo
     *
     * Get menu events  For technical reasons, the number of records returned is limited to 100.
     *
     * @param  int $menu_id Menu Identifier (required)
     * @param  int $limit The maximum elements to return (optional)
     * @param  int $page The index of the page to return, starting by 1 (optional)
     * @param  \DateTime $start Start date (optional)
     * @param  \DateTime $end End date (optional)
     * @param  int $order_id Events that have Order Id (optional)
     * @param  int $store_id Events that have Store Id (optional)
     * @param  int $store_group_id Events that have Store Group Id (optional)
     * @param  int $user_id Events that have User Id (optional)
     * @param  string $user_email Events that have User Email (optional)
     * @param  string $user_name Events that have User Name (optional)
     * @param  string $voucher_code Events that have voucher code (optional)
     * @param  string[] $event_type Events that have event type\\s (optional)
     * @param  string $flipdish_event_id Unique Identifier of Event, if this is specified, all other criteria are ignored. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getMenuEventsAsyncWithHttpInfo($menu_id, $limit = null, $page = null, $start = null, $end = null, $order_id = null, $store_id = null, $store_group_id = null, $user_id = null, $user_email = null, $user_name = null, $voucher_code = null, $event_type = null, $flipdish_event_id = null)
    {
        $returnType = '\Flipdish\Client\Models\RestApiEventSearchPaginationResult';
        $request = $this->getMenuEventsRequest($menu_id, $limit, $page, $start, $end, $order_id, $store_id, $store_group_id, $user_id, $user_email, $user_name, $voucher_code, $event_type, $flipdish_event_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getMenuEvents'
     *
     * @param  int $menu_id Menu Identifier (required)
     * @param  int $limit The maximum elements to return (optional)
     * @param  int $page The index of the page to return, starting by 1 (optional)
     * @param  \DateTime $start Start date (optional)
     * @param  \DateTime $end End date (optional)
     * @param  int $order_id Events that have Order Id (optional)
     * @param  int $store_id Events that have Store Id (optional)
     * @param  int $store_group_id Events that have Store Group Id (optional)
     * @param  int $user_id Events that have User Id (optional)
     * @param  string $user_email Events that have User Email (optional)
     * @param  string $user_name Events that have User Name (optional)
     * @param  string $voucher_code Events that have voucher code (optional)
     * @param  string[] $event_type Events that have event type\\s (optional)
     * @param  string $flipdish_event_id Unique Identifier of Event, if this is specified, all other criteria are ignored. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getMenuEventsRequest($menu_id, $limit = null, $page = null, $start = null, $end = null, $order_id = null, $store_id = null, $store_group_id = null, $user_id = null, $user_email = null, $user_name = null, $voucher_code = null, $event_type = null, $flipdish_event_id = null)
    {
        // verify the required parameter 'menu_id' is set
        if ($menu_id === null || (is_array($menu_id) && count($menu_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $menu_id when calling getMenuEvents'
            );
        }

        $resourcePath = '/api/v1.0/events/menu/{menuId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($limit !== null) {
            $queryParams['limit'] = ObjectSerializer::toQueryValue($limit);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = ObjectSerializer::toQueryValue($page);
        }
        // query params
        if ($start !== null) {
            $queryParams['start'] = ObjectSerializer::toQueryValue($start);
        }
        // query params
        if ($end !== null) {
            $queryParams['end'] = ObjectSerializer::toQueryValue($end);
        }
        // query params
        if ($order_id !== null) {
            $queryParams['orderId'] = ObjectSerializer::toQueryValue($order_id);
        }
        // query params
        if ($store_id !== null) {
            $queryParams['storeId'] = ObjectSerializer::toQueryValue($store_id);
        }
        // query params
        if ($store_group_id !== null) {
            $queryParams['storeGroupId'] = ObjectSerializer::toQueryValue($store_group_id);
        }
        // query params
        if ($user_id !== null) {
            $queryParams['userId'] = ObjectSerializer::toQueryValue($user_id);
        }
        // query params
        if ($user_email !== null) {
            $queryParams['userEmail'] = ObjectSerializer::toQueryValue($user_email);
        }
        // query params
        if ($user_name !== null) {
            $queryParams['userName'] = ObjectSerializer::toQueryValue($user_name);
        }
        // query params
        if ($voucher_code !== null) {
            $queryParams['voucherCode'] = ObjectSerializer::toQueryValue($voucher_code);
        }
        // query params
        if (is_array($event_type)) {
            $queryParams['eventType'] = $event_type;
        } else
        if ($event_type !== null) {
            $queryParams['eventType'] = ObjectSerializer::toQueryValue($event_type);
        }
        // query params
        if ($flipdish_event_id !== null) {
            $queryParams['flipdishEventId'] = ObjectSerializer::toQueryValue($flipdish_event_id);
        }

        // path params
        if ($menu_id !== null) {
            $resourcePath = str_replace(
                '{' . 'menuId' . '}',
                ObjectSerializer::toPathValue($menu_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getOrderEvents
     *
     * Get order events  For technical reasons, the number of records returned is limited to 100.
     *
     * @param  int $order_id Order identifier (required)
     * @param  int $limit The maximum elements to return (optional)
     * @param  int $page The index of the page to return, starting by 1 (optional)
     * @param  \DateTime $start Start date (optional)
     * @param  \DateTime $end End date (optional)
     * @param  int $order_id2 Events that have Order Id (optional)
     * @param  int $store_id Events that have Store Id (optional)
     * @param  int $store_group_id Events that have Store Group Id (optional)
     * @param  int $user_id Events that have User Id (optional)
     * @param  string $user_email Events that have User Email (optional)
     * @param  string $user_name Events that have User Name (optional)
     * @param  string $voucher_code Events that have voucher code (optional)
     * @param  string[] $event_type Events that have event type\\s (optional)
     * @param  string $flipdish_event_id Unique Identifier of Event, if this is specified, all other criteria are ignored. (optional)
     *
     * @throws \Flipdish\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Flipdish\Client\Models\RestApiEventSearchPaginationResult
     */
    public function getOrderEvents($order_id, $limit = null, $page = null, $start = null, $end = null, $order_id2 = null, $store_id = null, $store_group_id = null, $user_id = null, $user_email = null, $user_name = null, $voucher_code = null, $event_type = null, $flipdish_event_id = null)
    {
        list($response) = $this->getOrderEventsWithHttpInfo($order_id, $limit, $page, $start, $end, $order_id2, $store_id, $store_group_id, $user_id, $user_email, $user_name, $voucher_code, $event_type, $flipdish_event_id);
        return $response;
    }

    /**
     * Operation getOrderEventsWithHttpInfo
     *
     * Get order events  For technical reasons, the number of records returned is limited to 100.
     *
     * @param  int $order_id Order identifier (required)
     * @param  int $limit The maximum elements to return (optional)
     * @param  int $page The index of the page to return, starting by 1 (optional)
     * @param  \DateTime $start Start date (optional)
     * @param  \DateTime $end End date (optional)
     * @param  int $order_id2 Events that have Order Id (optional)
     * @param  int $store_id Events that have Store Id (optional)
     * @param  int $store_group_id Events that have Store Group Id (optional)
     * @param  int $user_id Events that have User Id (optional)
     * @param  string $user_email Events that have User Email (optional)
     * @param  string $user_name Events that have User Name (optional)
     * @param  string $voucher_code Events that have voucher code (optional)
     * @param  string[] $event_type Events that have event type\\s (optional)
     * @param  string $flipdish_event_id Unique Identifier of Event, if this is specified, all other criteria are ignored. (optional)
     *
     * @throws \Flipdish\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Flipdish\Client\Models\RestApiEventSearchPaginationResult, HTTP status code, HTTP response headers (array of strings)
     */
    public function getOrderEventsWithHttpInfo($order_id, $limit = null, $page = null, $start = null, $end = null, $order_id2 = null, $store_id = null, $store_group_id = null, $user_id = null, $user_email = null, $user_name = null, $voucher_code = null, $event_type = null, $flipdish_event_id = null)
    {
        $returnType = '\Flipdish\Client\Models\RestApiEventSearchPaginationResult';
        $request = $this->getOrderEventsRequest($order_id, $limit, $page, $start, $end, $order_id2, $store_id, $store_group_id, $user_id, $user_email, $user_name, $voucher_code, $event_type, $flipdish_event_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Flipdish\Client\Models\RestApiEventSearchPaginationResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Flipdish\Client\Models\RestApiErrorResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Flipdish\Client\Models\RestApiUnauthorizedResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Flipdish\Client\Models\RestApiForbiddenResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getOrderEventsAsync
     *
     * Get order events  For technical reasons, the number of records returned is limited to 100.
     *
     * @param  int $order_id Order identifier (required)
     * @param  int $limit The maximum elements to return (optional)
     * @param  int $page The index of the page to return, starting by 1 (optional)
     * @param  \DateTime $start Start date (optional)
     * @param  \DateTime $end End date (optional)
     * @param  int $order_id2 Events that have Order Id (optional)
     * @param  int $store_id Events that have Store Id (optional)
     * @param  int $store_group_id Events that have Store Group Id (optional)
     * @param  int $user_id Events that have User Id (optional)
     * @param  string $user_email Events that have User Email (optional)
     * @param  string $user_name Events that have User Name (optional)
     * @param  string $voucher_code Events that have voucher code (optional)
     * @param  string[] $event_type Events that have event type\\s (optional)
     * @param  string $flipdish_event_id Unique Identifier of Event, if this is specified, all other criteria are ignored. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getOrderEventsAsync($order_id, $limit = null, $page = null, $start = null, $end = null, $order_id2 = null, $store_id = null, $store_group_id = null, $user_id = null, $user_email = null, $user_name = null, $voucher_code = null, $event_type = null, $flipdish_event_id = null)
    {
        return $this->getOrderEventsAsyncWithHttpInfo($order_id, $limit, $page, $start, $end, $order_id2, $store_id, $store_group_id, $user_id, $user_email, $user_name, $voucher_code, $event_type, $flipdish_event_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getOrderEventsAsyncWithHttpInfo
     *
     * Get order events  For technical reasons, the number of records returned is limited to 100.
     *
     * @param  int $order_id Order identifier (required)
     * @param  int $limit The maximum elements to return (optional)
     * @param  int $page The index of the page to return, starting by 1 (optional)
     * @param  \DateTime $start Start date (optional)
     * @param  \DateTime $end End date (optional)
     * @param  int $order_id2 Events that have Order Id (optional)
     * @param  int $store_id Events that have Store Id (optional)
     * @param  int $store_group_id Events that have Store Group Id (optional)
     * @param  int $user_id Events that have User Id (optional)
     * @param  string $user_email Events that have User Email (optional)
     * @param  string $user_name Events that have User Name (optional)
     * @param  string $voucher_code Events that have voucher code (optional)
     * @param  string[] $event_type Events that have event type\\s (optional)
     * @param  string $flipdish_event_id Unique Identifier of Event, if this is specified, all other criteria are ignored. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getOrderEventsAsyncWithHttpInfo($order_id, $limit = null, $page = null, $start = null, $end = null, $order_id2 = null, $store_id = null, $store_group_id = null, $user_id = null, $user_email = null, $user_name = null, $voucher_code = null, $event_type = null, $flipdish_event_id = null)
    {
        $returnType = '\Flipdish\Client\Models\RestApiEventSearchPaginationResult';
        $request = $this->getOrderEventsRequest($order_id, $limit, $page, $start, $end, $order_id2, $store_id, $store_group_id, $user_id, $user_email, $user_name, $voucher_code, $event_type, $flipdish_event_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getOrderEvents'
     *
     * @param  int $order_id Order identifier (required)
     * @param  int $limit The maximum elements to return (optional)
     * @param  int $page The index of the page to return, starting by 1 (optional)
     * @param  \DateTime $start Start date (optional)
     * @param  \DateTime $end End date (optional)
     * @param  int $order_id2 Events that have Order Id (optional)
     * @param  int $store_id Events that have Store Id (optional)
     * @param  int $store_group_id Events that have Store Group Id (optional)
     * @param  int $user_id Events that have User Id (optional)
     * @param  string $user_email Events that have User Email (optional)
     * @param  string $user_name Events that have User Name (optional)
     * @param  string $voucher_code Events that have voucher code (optional)
     * @param  string[] $event_type Events that have event type\\s (optional)
     * @param  string $flipdish_event_id Unique Identifier of Event, if this is specified, all other criteria are ignored. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getOrderEventsRequest($order_id, $limit = null, $page = null, $start = null, $end = null, $order_id2 = null, $store_id = null, $store_group_id = null, $user_id = null, $user_email = null, $user_name = null, $voucher_code = null, $event_type = null, $flipdish_event_id = null)
    {
        // verify the required parameter 'order_id' is set
        if ($order_id === null || (is_array($order_id) && count($order_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $order_id when calling getOrderEvents'
            );
        }

        $resourcePath = '/api/v1.0/events/order/{orderId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($limit !== null) {
            $queryParams['limit'] = ObjectSerializer::toQueryValue($limit);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = ObjectSerializer::toQueryValue($page);
        }
        // query params
        if ($start !== null) {
            $queryParams['start'] = ObjectSerializer::toQueryValue($start);
        }
        // query params
        if ($end !== null) {
            $queryParams['end'] = ObjectSerializer::toQueryValue($end);
        }
        // query params
        if ($order_id2 !== null) {
            $queryParams['orderId'] = ObjectSerializer::toQueryValue($order_id2);
        }
        // query params
        if ($store_id !== null) {
            $queryParams['storeId'] = ObjectSerializer::toQueryValue($store_id);
        }
        // query params
        if ($store_group_id !== null) {
            $queryParams['storeGroupId'] = ObjectSerializer::toQueryValue($store_group_id);
        }
        // query params
        if ($user_id !== null) {
            $queryParams['userId'] = ObjectSerializer::toQueryValue($user_id);
        }
        // query params
        if ($user_email !== null) {
            $queryParams['userEmail'] = ObjectSerializer::toQueryValue($user_email);
        }
        // query params
        if ($user_name !== null) {
            $queryParams['userName'] = ObjectSerializer::toQueryValue($user_name);
        }
        // query params
        if ($voucher_code !== null) {
            $queryParams['voucherCode'] = ObjectSerializer::toQueryValue($voucher_code);
        }
        // query params
        if (is_array($event_type)) {
            $queryParams['eventType'] = $event_type;
        } else
        if ($event_type !== null) {
            $queryParams['eventType'] = ObjectSerializer::toQueryValue($event_type);
        }
        // query params
        if ($flipdish_event_id !== null) {
            $queryParams['flipdishEventId'] = ObjectSerializer::toQueryValue($flipdish_event_id);
        }

        // path params
        if ($order_id !== null) {
            $resourcePath = str_replace(
                '{' . 'orderId' . '}',
                ObjectSerializer::toPathValue($order_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getOrderEventsByCustomer
     *
     * Get order events by customer  For technical reasons, the number of records returned is limited to 100.
     *
     * @param  int $customer_id Customer identifier (required)
     * @param  int $limit The maximum elements to return (optional)
     * @param  int $page The index of the page to return, starting by 1 (optional)
     * @param  \DateTime $start Start date (optional)
     * @param  \DateTime $end End date (optional)
     * @param  int $order_id Events that have Order Id (optional)
     * @param  int $store_id Events that have Store Id (optional)
     * @param  int $store_group_id Events that have Store Group Id (optional)
     * @param  int $user_id Events that have User Id (optional)
     * @param  string $user_email Events that have User Email (optional)
     * @param  string $user_name Events that have User Name (optional)
     * @param  string $voucher_code Events that have voucher code (optional)
     * @param  string[] $event_type Events that have event type\\s (optional)
     * @param  string $flipdish_event_id Unique Identifier of Event, if this is specified, all other criteria are ignored. (optional)
     *
     * @throws \Flipdish\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Flipdish\Client\Models\RestApiEventSearchPaginationResult
     */
    public function getOrderEventsByCustomer($customer_id, $limit = null, $page = null, $start = null, $end = null, $order_id = null, $store_id = null, $store_group_id = null, $user_id = null, $user_email = null, $user_name = null, $voucher_code = null, $event_type = null, $flipdish_event_id = null)
    {
        list($response) = $this->getOrderEventsByCustomerWithHttpInfo($customer_id, $limit, $page, $start, $end, $order_id, $store_id, $store_group_id, $user_id, $user_email, $user_name, $voucher_code, $event_type, $flipdish_event_id);
        return $response;
    }

    /**
     * Operation getOrderEventsByCustomerWithHttpInfo
     *
     * Get order events by customer  For technical reasons, the number of records returned is limited to 100.
     *
     * @param  int $customer_id Customer identifier (required)
     * @param  int $limit The maximum elements to return (optional)
     * @param  int $page The index of the page to return, starting by 1 (optional)
     * @param  \DateTime $start Start date (optional)
     * @param  \DateTime $end End date (optional)
     * @param  int $order_id Events that have Order Id (optional)
     * @param  int $store_id Events that have Store Id (optional)
     * @param  int $store_group_id Events that have Store Group Id (optional)
     * @param  int $user_id Events that have User Id (optional)
     * @param  string $user_email Events that have User Email (optional)
     * @param  string $user_name Events that have User Name (optional)
     * @param  string $voucher_code Events that have voucher code (optional)
     * @param  string[] $event_type Events that have event type\\s (optional)
     * @param  string $flipdish_event_id Unique Identifier of Event, if this is specified, all other criteria are ignored. (optional)
     *
     * @throws \Flipdish\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Flipdish\Client\Models\RestApiEventSearchPaginationResult, HTTP status code, HTTP response headers (array of strings)
     */
    public function getOrderEventsByCustomerWithHttpInfo($customer_id, $limit = null, $page = null, $start = null, $end = null, $order_id = null, $store_id = null, $store_group_id = null, $user_id = null, $user_email = null, $user_name = null, $voucher_code = null, $event_type = null, $flipdish_event_id = null)
    {
        $returnType = '\Flipdish\Client\Models\RestApiEventSearchPaginationResult';
        $request = $this->getOrderEventsByCustomerRequest($customer_id, $limit, $page, $start, $end, $order_id, $store_id, $store_group_id, $user_id, $user_email, $user_name, $voucher_code, $event_type, $flipdish_event_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Flipdish\Client\Models\RestApiEventSearchPaginationResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Flipdish\Client\Models\RestApiErrorResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Flipdish\Client\Models\RestApiUnauthorizedResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Flipdish\Client\Models\RestApiForbiddenResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getOrderEventsByCustomerAsync
     *
     * Get order events by customer  For technical reasons, the number of records returned is limited to 100.
     *
     * @param  int $customer_id Customer identifier (required)
     * @param  int $limit The maximum elements to return (optional)
     * @param  int $page The index of the page to return, starting by 1 (optional)
     * @param  \DateTime $start Start date (optional)
     * @param  \DateTime $end End date (optional)
     * @param  int $order_id Events that have Order Id (optional)
     * @param  int $store_id Events that have Store Id (optional)
     * @param  int $store_group_id Events that have Store Group Id (optional)
     * @param  int $user_id Events that have User Id (optional)
     * @param  string $user_email Events that have User Email (optional)
     * @param  string $user_name Events that have User Name (optional)
     * @param  string $voucher_code Events that have voucher code (optional)
     * @param  string[] $event_type Events that have event type\\s (optional)
     * @param  string $flipdish_event_id Unique Identifier of Event, if this is specified, all other criteria are ignored. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getOrderEventsByCustomerAsync($customer_id, $limit = null, $page = null, $start = null, $end = null, $order_id = null, $store_id = null, $store_group_id = null, $user_id = null, $user_email = null, $user_name = null, $voucher_code = null, $event_type = null, $flipdish_event_id = null)
    {
        return $this->getOrderEventsByCustomerAsyncWithHttpInfo($customer_id, $limit, $page, $start, $end, $order_id, $store_id, $store_group_id, $user_id, $user_email, $user_name, $voucher_code, $event_type, $flipdish_event_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getOrderEventsByCustomerAsyncWithHttpInfo
     *
     * Get order events by customer  For technical reasons, the number of records returned is limited to 100.
     *
     * @param  int $customer_id Customer identifier (required)
     * @param  int $limit The maximum elements to return (optional)
     * @param  int $page The index of the page to return, starting by 1 (optional)
     * @param  \DateTime $start Start date (optional)
     * @param  \DateTime $end End date (optional)
     * @param  int $order_id Events that have Order Id (optional)
     * @param  int $store_id Events that have Store Id (optional)
     * @param  int $store_group_id Events that have Store Group Id (optional)
     * @param  int $user_id Events that have User Id (optional)
     * @param  string $user_email Events that have User Email (optional)
     * @param  string $user_name Events that have User Name (optional)
     * @param  string $voucher_code Events that have voucher code (optional)
     * @param  string[] $event_type Events that have event type\\s (optional)
     * @param  string $flipdish_event_id Unique Identifier of Event, if this is specified, all other criteria are ignored. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getOrderEventsByCustomerAsyncWithHttpInfo($customer_id, $limit = null, $page = null, $start = null, $end = null, $order_id = null, $store_id = null, $store_group_id = null, $user_id = null, $user_email = null, $user_name = null, $voucher_code = null, $event_type = null, $flipdish_event_id = null)
    {
        $returnType = '\Flipdish\Client\Models\RestApiEventSearchPaginationResult';
        $request = $this->getOrderEventsByCustomerRequest($customer_id, $limit, $page, $start, $end, $order_id, $store_id, $store_group_id, $user_id, $user_email, $user_name, $voucher_code, $event_type, $flipdish_event_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getOrderEventsByCustomer'
     *
     * @param  int $customer_id Customer identifier (required)
     * @param  int $limit The maximum elements to return (optional)
     * @param  int $page The index of the page to return, starting by 1 (optional)
     * @param  \DateTime $start Start date (optional)
     * @param  \DateTime $end End date (optional)
     * @param  int $order_id Events that have Order Id (optional)
     * @param  int $store_id Events that have Store Id (optional)
     * @param  int $store_group_id Events that have Store Group Id (optional)
     * @param  int $user_id Events that have User Id (optional)
     * @param  string $user_email Events that have User Email (optional)
     * @param  string $user_name Events that have User Name (optional)
     * @param  string $voucher_code Events that have voucher code (optional)
     * @param  string[] $event_type Events that have event type\\s (optional)
     * @param  string $flipdish_event_id Unique Identifier of Event, if this is specified, all other criteria are ignored. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getOrderEventsByCustomerRequest($customer_id, $limit = null, $page = null, $start = null, $end = null, $order_id = null, $store_id = null, $store_group_id = null, $user_id = null, $user_email = null, $user_name = null, $voucher_code = null, $event_type = null, $flipdish_event_id = null)
    {
        // verify the required parameter 'customer_id' is set
        if ($customer_id === null || (is_array($customer_id) && count($customer_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $customer_id when calling getOrderEventsByCustomer'
            );
        }

        $resourcePath = '/api/v1.0/events/order';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($customer_id !== null) {
            $queryParams['customerId'] = ObjectSerializer::toQueryValue($customer_id);
        }
        // query params
        if ($limit !== null) {
            $queryParams['limit'] = ObjectSerializer::toQueryValue($limit);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = ObjectSerializer::toQueryValue($page);
        }
        // query params
        if ($start !== null) {
            $queryParams['start'] = ObjectSerializer::toQueryValue($start);
        }
        // query params
        if ($end !== null) {
            $queryParams['end'] = ObjectSerializer::toQueryValue($end);
        }
        // query params
        if ($order_id !== null) {
            $queryParams['orderId'] = ObjectSerializer::toQueryValue($order_id);
        }
        // query params
        if ($store_id !== null) {
            $queryParams['storeId'] = ObjectSerializer::toQueryValue($store_id);
        }
        // query params
        if ($store_group_id !== null) {
            $queryParams['storeGroupId'] = ObjectSerializer::toQueryValue($store_group_id);
        }
        // query params
        if ($user_id !== null) {
            $queryParams['userId'] = ObjectSerializer::toQueryValue($user_id);
        }
        // query params
        if ($user_email !== null) {
            $queryParams['userEmail'] = ObjectSerializer::toQueryValue($user_email);
        }
        // query params
        if ($user_name !== null) {
            $queryParams['userName'] = ObjectSerializer::toQueryValue($user_name);
        }
        // query params
        if ($voucher_code !== null) {
            $queryParams['voucherCode'] = ObjectSerializer::toQueryValue($voucher_code);
        }
        // query params
        if (is_array($event_type)) {
            $queryParams['eventType'] = $event_type;
        } else
        if ($event_type !== null) {
            $queryParams['eventType'] = ObjectSerializer::toQueryValue($event_type);
        }
        // query params
        if ($flipdish_event_id !== null) {
            $queryParams['flipdishEventId'] = ObjectSerializer::toQueryValue($flipdish_event_id);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getStoreEvents
     *
     * Get store events  For technical reasons, the number of records returned is limited to 100.
     *
     * @param  int $store_id Id of the store (required)
     * @param  int $limit The maximum elements to return (optional)
     * @param  int $page The index of the page to return, starting by 1 (optional)
     * @param  \DateTime $start Start date (optional)
     * @param  \DateTime $end End date (optional)
     * @param  int $order_id Events that have Order Id (optional)
     * @param  int $store_id2 Events that have Store Id (optional)
     * @param  int $store_group_id Events that have Store Group Id (optional)
     * @param  int $user_id Events that have User Id (optional)
     * @param  string $user_email Events that have User Email (optional)
     * @param  string $user_name Events that have User Name (optional)
     * @param  string $voucher_code Events that have voucher code (optional)
     * @param  string[] $event_type Events that have event type\\s (optional)
     * @param  string $flipdish_event_id Unique Identifier of Event, if this is specified, all other criteria are ignored. (optional)
     *
     * @throws \Flipdish\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Flipdish\Client\Models\RestApiEventSearchPaginationResult
     */
    public function getStoreEvents($store_id, $limit = null, $page = null, $start = null, $end = null, $order_id = null, $store_id2 = null, $store_group_id = null, $user_id = null, $user_email = null, $user_name = null, $voucher_code = null, $event_type = null, $flipdish_event_id = null)
    {
        list($response) = $this->getStoreEventsWithHttpInfo($store_id, $limit, $page, $start, $end, $order_id, $store_id2, $store_group_id, $user_id, $user_email, $user_name, $voucher_code, $event_type, $flipdish_event_id);
        return $response;
    }

    /**
     * Operation getStoreEventsWithHttpInfo
     *
     * Get store events  For technical reasons, the number of records returned is limited to 100.
     *
     * @param  int $store_id Id of the store (required)
     * @param  int $limit The maximum elements to return (optional)
     * @param  int $page The index of the page to return, starting by 1 (optional)
     * @param  \DateTime $start Start date (optional)
     * @param  \DateTime $end End date (optional)
     * @param  int $order_id Events that have Order Id (optional)
     * @param  int $store_id2 Events that have Store Id (optional)
     * @param  int $store_group_id Events that have Store Group Id (optional)
     * @param  int $user_id Events that have User Id (optional)
     * @param  string $user_email Events that have User Email (optional)
     * @param  string $user_name Events that have User Name (optional)
     * @param  string $voucher_code Events that have voucher code (optional)
     * @param  string[] $event_type Events that have event type\\s (optional)
     * @param  string $flipdish_event_id Unique Identifier of Event, if this is specified, all other criteria are ignored. (optional)
     *
     * @throws \Flipdish\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Flipdish\Client\Models\RestApiEventSearchPaginationResult, HTTP status code, HTTP response headers (array of strings)
     */
    public function getStoreEventsWithHttpInfo($store_id, $limit = null, $page = null, $start = null, $end = null, $order_id = null, $store_id2 = null, $store_group_id = null, $user_id = null, $user_email = null, $user_name = null, $voucher_code = null, $event_type = null, $flipdish_event_id = null)
    {
        $returnType = '\Flipdish\Client\Models\RestApiEventSearchPaginationResult';
        $request = $this->getStoreEventsRequest($store_id, $limit, $page, $start, $end, $order_id, $store_id2, $store_group_id, $user_id, $user_email, $user_name, $voucher_code, $event_type, $flipdish_event_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Flipdish\Client\Models\RestApiEventSearchPaginationResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Flipdish\Client\Models\RestApiErrorResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Flipdish\Client\Models\RestApiUnauthorizedResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Flipdish\Client\Models\RestApiForbiddenResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getStoreEventsAsync
     *
     * Get store events  For technical reasons, the number of records returned is limited to 100.
     *
     * @param  int $store_id Id of the store (required)
     * @param  int $limit The maximum elements to return (optional)
     * @param  int $page The index of the page to return, starting by 1 (optional)
     * @param  \DateTime $start Start date (optional)
     * @param  \DateTime $end End date (optional)
     * @param  int $order_id Events that have Order Id (optional)
     * @param  int $store_id2 Events that have Store Id (optional)
     * @param  int $store_group_id Events that have Store Group Id (optional)
     * @param  int $user_id Events that have User Id (optional)
     * @param  string $user_email Events that have User Email (optional)
     * @param  string $user_name Events that have User Name (optional)
     * @param  string $voucher_code Events that have voucher code (optional)
     * @param  string[] $event_type Events that have event type\\s (optional)
     * @param  string $flipdish_event_id Unique Identifier of Event, if this is specified, all other criteria are ignored. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getStoreEventsAsync($store_id, $limit = null, $page = null, $start = null, $end = null, $order_id = null, $store_id2 = null, $store_group_id = null, $user_id = null, $user_email = null, $user_name = null, $voucher_code = null, $event_type = null, $flipdish_event_id = null)
    {
        return $this->getStoreEventsAsyncWithHttpInfo($store_id, $limit, $page, $start, $end, $order_id, $store_id2, $store_group_id, $user_id, $user_email, $user_name, $voucher_code, $event_type, $flipdish_event_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getStoreEventsAsyncWithHttpInfo
     *
     * Get store events  For technical reasons, the number of records returned is limited to 100.
     *
     * @param  int $store_id Id of the store (required)
     * @param  int $limit The maximum elements to return (optional)
     * @param  int $page The index of the page to return, starting by 1 (optional)
     * @param  \DateTime $start Start date (optional)
     * @param  \DateTime $end End date (optional)
     * @param  int $order_id Events that have Order Id (optional)
     * @param  int $store_id2 Events that have Store Id (optional)
     * @param  int $store_group_id Events that have Store Group Id (optional)
     * @param  int $user_id Events that have User Id (optional)
     * @param  string $user_email Events that have User Email (optional)
     * @param  string $user_name Events that have User Name (optional)
     * @param  string $voucher_code Events that have voucher code (optional)
     * @param  string[] $event_type Events that have event type\\s (optional)
     * @param  string $flipdish_event_id Unique Identifier of Event, if this is specified, all other criteria are ignored. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getStoreEventsAsyncWithHttpInfo($store_id, $limit = null, $page = null, $start = null, $end = null, $order_id = null, $store_id2 = null, $store_group_id = null, $user_id = null, $user_email = null, $user_name = null, $voucher_code = null, $event_type = null, $flipdish_event_id = null)
    {
        $returnType = '\Flipdish\Client\Models\RestApiEventSearchPaginationResult';
        $request = $this->getStoreEventsRequest($store_id, $limit, $page, $start, $end, $order_id, $store_id2, $store_group_id, $user_id, $user_email, $user_name, $voucher_code, $event_type, $flipdish_event_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getStoreEvents'
     *
     * @param  int $store_id Id of the store (required)
     * @param  int $limit The maximum elements to return (optional)
     * @param  int $page The index of the page to return, starting by 1 (optional)
     * @param  \DateTime $start Start date (optional)
     * @param  \DateTime $end End date (optional)
     * @param  int $order_id Events that have Order Id (optional)
     * @param  int $store_id2 Events that have Store Id (optional)
     * @param  int $store_group_id Events that have Store Group Id (optional)
     * @param  int $user_id Events that have User Id (optional)
     * @param  string $user_email Events that have User Email (optional)
     * @param  string $user_name Events that have User Name (optional)
     * @param  string $voucher_code Events that have voucher code (optional)
     * @param  string[] $event_type Events that have event type\\s (optional)
     * @param  string $flipdish_event_id Unique Identifier of Event, if this is specified, all other criteria are ignored. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getStoreEventsRequest($store_id, $limit = null, $page = null, $start = null, $end = null, $order_id = null, $store_id2 = null, $store_group_id = null, $user_id = null, $user_email = null, $user_name = null, $voucher_code = null, $event_type = null, $flipdish_event_id = null)
    {
        // verify the required parameter 'store_id' is set
        if ($store_id === null || (is_array($store_id) && count($store_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $store_id when calling getStoreEvents'
            );
        }

        $resourcePath = '/api/v1.0/events/store/{storeId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($limit !== null) {
            $queryParams['limit'] = ObjectSerializer::toQueryValue($limit);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = ObjectSerializer::toQueryValue($page);
        }
        // query params
        if ($start !== null) {
            $queryParams['start'] = ObjectSerializer::toQueryValue($start);
        }
        // query params
        if ($end !== null) {
            $queryParams['end'] = ObjectSerializer::toQueryValue($end);
        }
        // query params
        if ($order_id !== null) {
            $queryParams['orderId'] = ObjectSerializer::toQueryValue($order_id);
        }
        // query params
        if ($store_id2 !== null) {
            $queryParams['storeId'] = ObjectSerializer::toQueryValue($store_id2);
        }
        // query params
        if ($store_group_id !== null) {
            $queryParams['storeGroupId'] = ObjectSerializer::toQueryValue($store_group_id);
        }
        // query params
        if ($user_id !== null) {
            $queryParams['userId'] = ObjectSerializer::toQueryValue($user_id);
        }
        // query params
        if ($user_email !== null) {
            $queryParams['userEmail'] = ObjectSerializer::toQueryValue($user_email);
        }
        // query params
        if ($user_name !== null) {
            $queryParams['userName'] = ObjectSerializer::toQueryValue($user_name);
        }
        // query params
        if ($voucher_code !== null) {
            $queryParams['voucherCode'] = ObjectSerializer::toQueryValue($voucher_code);
        }
        // query params
        if (is_array($event_type)) {
            $queryParams['eventType'] = $event_type;
        } else
        if ($event_type !== null) {
            $queryParams['eventType'] = ObjectSerializer::toQueryValue($event_type);
        }
        // query params
        if ($flipdish_event_id !== null) {
            $queryParams['flipdishEventId'] = ObjectSerializer::toQueryValue($flipdish_event_id);
        }

        // path params
        if ($store_id !== null) {
            $resourcePath = str_replace(
                '{' . 'storeId' . '}',
                ObjectSerializer::toPathValue($store_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getUserEvents
     *
     * Get user events  For technical reasons, the number of records returned is limited to 100.
     *
     * @param  int $user_id User identifier (required)
     * @param  int $limit The maximum elements to return (optional)
     * @param  int $page The index of the page to return, starting by 1 (optional)
     * @param  \DateTime $start Start date (optional)
     * @param  \DateTime $end End date (optional)
     * @param  int $order_id Events that have Order Id (optional)
     * @param  int $store_id Events that have Store Id (optional)
     * @param  int $store_group_id Events that have Store Group Id (optional)
     * @param  int $user_id2 Events that have User Id (optional)
     * @param  string $user_email Events that have User Email (optional)
     * @param  string $user_name Events that have User Name (optional)
     * @param  string $voucher_code Events that have voucher code (optional)
     * @param  string[] $event_type Events that have event type\\s (optional)
     * @param  string $flipdish_event_id Unique Identifier of Event, if this is specified, all other criteria are ignored. (optional)
     *
     * @throws \Flipdish\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Flipdish\Client\Models\RestApiEventSearchPaginationResult
     */
    public function getUserEvents($user_id, $limit = null, $page = null, $start = null, $end = null, $order_id = null, $store_id = null, $store_group_id = null, $user_id2 = null, $user_email = null, $user_name = null, $voucher_code = null, $event_type = null, $flipdish_event_id = null)
    {
        list($response) = $this->getUserEventsWithHttpInfo($user_id, $limit, $page, $start, $end, $order_id, $store_id, $store_group_id, $user_id2, $user_email, $user_name, $voucher_code, $event_type, $flipdish_event_id);
        return $response;
    }

    /**
     * Operation getUserEventsWithHttpInfo
     *
     * Get user events  For technical reasons, the number of records returned is limited to 100.
     *
     * @param  int $user_id User identifier (required)
     * @param  int $limit The maximum elements to return (optional)
     * @param  int $page The index of the page to return, starting by 1 (optional)
     * @param  \DateTime $start Start date (optional)
     * @param  \DateTime $end End date (optional)
     * @param  int $order_id Events that have Order Id (optional)
     * @param  int $store_id Events that have Store Id (optional)
     * @param  int $store_group_id Events that have Store Group Id (optional)
     * @param  int $user_id2 Events that have User Id (optional)
     * @param  string $user_email Events that have User Email (optional)
     * @param  string $user_name Events that have User Name (optional)
     * @param  string $voucher_code Events that have voucher code (optional)
     * @param  string[] $event_type Events that have event type\\s (optional)
     * @param  string $flipdish_event_id Unique Identifier of Event, if this is specified, all other criteria are ignored. (optional)
     *
     * @throws \Flipdish\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Flipdish\Client\Models\RestApiEventSearchPaginationResult, HTTP status code, HTTP response headers (array of strings)
     */
    public function getUserEventsWithHttpInfo($user_id, $limit = null, $page = null, $start = null, $end = null, $order_id = null, $store_id = null, $store_group_id = null, $user_id2 = null, $user_email = null, $user_name = null, $voucher_code = null, $event_type = null, $flipdish_event_id = null)
    {
        $returnType = '\Flipdish\Client\Models\RestApiEventSearchPaginationResult';
        $request = $this->getUserEventsRequest($user_id, $limit, $page, $start, $end, $order_id, $store_id, $store_group_id, $user_id2, $user_email, $user_name, $voucher_code, $event_type, $flipdish_event_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Flipdish\Client\Models\RestApiEventSearchPaginationResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Flipdish\Client\Models\RestApiErrorResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Flipdish\Client\Models\RestApiUnauthorizedResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Flipdish\Client\Models\RestApiForbiddenResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getUserEventsAsync
     *
     * Get user events  For technical reasons, the number of records returned is limited to 100.
     *
     * @param  int $user_id User identifier (required)
     * @param  int $limit The maximum elements to return (optional)
     * @param  int $page The index of the page to return, starting by 1 (optional)
     * @param  \DateTime $start Start date (optional)
     * @param  \DateTime $end End date (optional)
     * @param  int $order_id Events that have Order Id (optional)
     * @param  int $store_id Events that have Store Id (optional)
     * @param  int $store_group_id Events that have Store Group Id (optional)
     * @param  int $user_id2 Events that have User Id (optional)
     * @param  string $user_email Events that have User Email (optional)
     * @param  string $user_name Events that have User Name (optional)
     * @param  string $voucher_code Events that have voucher code (optional)
     * @param  string[] $event_type Events that have event type\\s (optional)
     * @param  string $flipdish_event_id Unique Identifier of Event, if this is specified, all other criteria are ignored. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getUserEventsAsync($user_id, $limit = null, $page = null, $start = null, $end = null, $order_id = null, $store_id = null, $store_group_id = null, $user_id2 = null, $user_email = null, $user_name = null, $voucher_code = null, $event_type = null, $flipdish_event_id = null)
    {
        return $this->getUserEventsAsyncWithHttpInfo($user_id, $limit, $page, $start, $end, $order_id, $store_id, $store_group_id, $user_id2, $user_email, $user_name, $voucher_code, $event_type, $flipdish_event_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getUserEventsAsyncWithHttpInfo
     *
     * Get user events  For technical reasons, the number of records returned is limited to 100.
     *
     * @param  int $user_id User identifier (required)
     * @param  int $limit The maximum elements to return (optional)
     * @param  int $page The index of the page to return, starting by 1 (optional)
     * @param  \DateTime $start Start date (optional)
     * @param  \DateTime $end End date (optional)
     * @param  int $order_id Events that have Order Id (optional)
     * @param  int $store_id Events that have Store Id (optional)
     * @param  int $store_group_id Events that have Store Group Id (optional)
     * @param  int $user_id2 Events that have User Id (optional)
     * @param  string $user_email Events that have User Email (optional)
     * @param  string $user_name Events that have User Name (optional)
     * @param  string $voucher_code Events that have voucher code (optional)
     * @param  string[] $event_type Events that have event type\\s (optional)
     * @param  string $flipdish_event_id Unique Identifier of Event, if this is specified, all other criteria are ignored. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getUserEventsAsyncWithHttpInfo($user_id, $limit = null, $page = null, $start = null, $end = null, $order_id = null, $store_id = null, $store_group_id = null, $user_id2 = null, $user_email = null, $user_name = null, $voucher_code = null, $event_type = null, $flipdish_event_id = null)
    {
        $returnType = '\Flipdish\Client\Models\RestApiEventSearchPaginationResult';
        $request = $this->getUserEventsRequest($user_id, $limit, $page, $start, $end, $order_id, $store_id, $store_group_id, $user_id2, $user_email, $user_name, $voucher_code, $event_type, $flipdish_event_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getUserEvents'
     *
     * @param  int $user_id User identifier (required)
     * @param  int $limit The maximum elements to return (optional)
     * @param  int $page The index of the page to return, starting by 1 (optional)
     * @param  \DateTime $start Start date (optional)
     * @param  \DateTime $end End date (optional)
     * @param  int $order_id Events that have Order Id (optional)
     * @param  int $store_id Events that have Store Id (optional)
     * @param  int $store_group_id Events that have Store Group Id (optional)
     * @param  int $user_id2 Events that have User Id (optional)
     * @param  string $user_email Events that have User Email (optional)
     * @param  string $user_name Events that have User Name (optional)
     * @param  string $voucher_code Events that have voucher code (optional)
     * @param  string[] $event_type Events that have event type\\s (optional)
     * @param  string $flipdish_event_id Unique Identifier of Event, if this is specified, all other criteria are ignored. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getUserEventsRequest($user_id, $limit = null, $page = null, $start = null, $end = null, $order_id = null, $store_id = null, $store_group_id = null, $user_id2 = null, $user_email = null, $user_name = null, $voucher_code = null, $event_type = null, $flipdish_event_id = null)
    {
        // verify the required parameter 'user_id' is set
        if ($user_id === null || (is_array($user_id) && count($user_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $user_id when calling getUserEvents'
            );
        }

        $resourcePath = '/api/v1.0/events/user/{userId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($limit !== null) {
            $queryParams['limit'] = ObjectSerializer::toQueryValue($limit);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = ObjectSerializer::toQueryValue($page);
        }
        // query params
        if ($start !== null) {
            $queryParams['start'] = ObjectSerializer::toQueryValue($start);
        }
        // query params
        if ($end !== null) {
            $queryParams['end'] = ObjectSerializer::toQueryValue($end);
        }
        // query params
        if ($order_id !== null) {
            $queryParams['orderId'] = ObjectSerializer::toQueryValue($order_id);
        }
        // query params
        if ($store_id !== null) {
            $queryParams['storeId'] = ObjectSerializer::toQueryValue($store_id);
        }
        // query params
        if ($store_group_id !== null) {
            $queryParams['storeGroupId'] = ObjectSerializer::toQueryValue($store_group_id);
        }
        // query params
        if ($user_id2 !== null) {
            $queryParams['userId'] = ObjectSerializer::toQueryValue($user_id2);
        }
        // query params
        if ($user_email !== null) {
            $queryParams['userEmail'] = ObjectSerializer::toQueryValue($user_email);
        }
        // query params
        if ($user_name !== null) {
            $queryParams['userName'] = ObjectSerializer::toQueryValue($user_name);
        }
        // query params
        if ($voucher_code !== null) {
            $queryParams['voucherCode'] = ObjectSerializer::toQueryValue($voucher_code);
        }
        // query params
        if (is_array($event_type)) {
            $queryParams['eventType'] = $event_type;
        } else
        if ($event_type !== null) {
            $queryParams['eventType'] = ObjectSerializer::toQueryValue($event_type);
        }
        // query params
        if ($flipdish_event_id !== null) {
            $queryParams['flipdishEventId'] = ObjectSerializer::toQueryValue($flipdish_event_id);
        }

        // path params
        if ($user_id !== null) {
            $resourcePath = str_replace(
                '{' . 'userId' . '}',
                ObjectSerializer::toPathValue($user_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getWhiteLabelEvents
     *
     * Get WhiteLabel events  For technical reasons, the number of records returned is limited to 100.
     *
     * @param  int $whitelabel_id White Label Identifier (required)
     * @param  int $limit The maximum elements to return (optional)
     * @param  int $page The index of the page to return, starting by 1 (optional)
     * @param  \DateTime $start Start date (optional)
     * @param  \DateTime $end End date (optional)
     * @param  int $order_id Events that have Order Id (optional)
     * @param  int $store_id Events that have Store Id (optional)
     * @param  int $store_group_id Events that have Store Group Id (optional)
     * @param  int $user_id Events that have User Id (optional)
     * @param  string $user_email Events that have User Email (optional)
     * @param  string $user_name Events that have User Name (optional)
     * @param  string $voucher_code Events that have voucher code (optional)
     * @param  string[] $event_type Events that have event type\\s (optional)
     * @param  string $flipdish_event_id Unique Identifier of Event, if this is specified, all other criteria are ignored. (optional)
     *
     * @throws \Flipdish\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Flipdish\Client\Models\RestApiEventSearchPaginationResult
     */
    public function getWhiteLabelEvents($whitelabel_id, $limit = null, $page = null, $start = null, $end = null, $order_id = null, $store_id = null, $store_group_id = null, $user_id = null, $user_email = null, $user_name = null, $voucher_code = null, $event_type = null, $flipdish_event_id = null)
    {
        list($response) = $this->getWhiteLabelEventsWithHttpInfo($whitelabel_id, $limit, $page, $start, $end, $order_id, $store_id, $store_group_id, $user_id, $user_email, $user_name, $voucher_code, $event_type, $flipdish_event_id);
        return $response;
    }

    /**
     * Operation getWhiteLabelEventsWithHttpInfo
     *
     * Get WhiteLabel events  For technical reasons, the number of records returned is limited to 100.
     *
     * @param  int $whitelabel_id White Label Identifier (required)
     * @param  int $limit The maximum elements to return (optional)
     * @param  int $page The index of the page to return, starting by 1 (optional)
     * @param  \DateTime $start Start date (optional)
     * @param  \DateTime $end End date (optional)
     * @param  int $order_id Events that have Order Id (optional)
     * @param  int $store_id Events that have Store Id (optional)
     * @param  int $store_group_id Events that have Store Group Id (optional)
     * @param  int $user_id Events that have User Id (optional)
     * @param  string $user_email Events that have User Email (optional)
     * @param  string $user_name Events that have User Name (optional)
     * @param  string $voucher_code Events that have voucher code (optional)
     * @param  string[] $event_type Events that have event type\\s (optional)
     * @param  string $flipdish_event_id Unique Identifier of Event, if this is specified, all other criteria are ignored. (optional)
     *
     * @throws \Flipdish\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Flipdish\Client\Models\RestApiEventSearchPaginationResult, HTTP status code, HTTP response headers (array of strings)
     */
    public function getWhiteLabelEventsWithHttpInfo($whitelabel_id, $limit = null, $page = null, $start = null, $end = null, $order_id = null, $store_id = null, $store_group_id = null, $user_id = null, $user_email = null, $user_name = null, $voucher_code = null, $event_type = null, $flipdish_event_id = null)
    {
        $returnType = '\Flipdish\Client\Models\RestApiEventSearchPaginationResult';
        $request = $this->getWhiteLabelEventsRequest($whitelabel_id, $limit, $page, $start, $end, $order_id, $store_id, $store_group_id, $user_id, $user_email, $user_name, $voucher_code, $event_type, $flipdish_event_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Flipdish\Client\Models\RestApiEventSearchPaginationResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Flipdish\Client\Models\RestApiErrorResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Flipdish\Client\Models\RestApiUnauthorizedResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Flipdish\Client\Models\RestApiForbiddenResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getWhiteLabelEventsAsync
     *
     * Get WhiteLabel events  For technical reasons, the number of records returned is limited to 100.
     *
     * @param  int $whitelabel_id White Label Identifier (required)
     * @param  int $limit The maximum elements to return (optional)
     * @param  int $page The index of the page to return, starting by 1 (optional)
     * @param  \DateTime $start Start date (optional)
     * @param  \DateTime $end End date (optional)
     * @param  int $order_id Events that have Order Id (optional)
     * @param  int $store_id Events that have Store Id (optional)
     * @param  int $store_group_id Events that have Store Group Id (optional)
     * @param  int $user_id Events that have User Id (optional)
     * @param  string $user_email Events that have User Email (optional)
     * @param  string $user_name Events that have User Name (optional)
     * @param  string $voucher_code Events that have voucher code (optional)
     * @param  string[] $event_type Events that have event type\\s (optional)
     * @param  string $flipdish_event_id Unique Identifier of Event, if this is specified, all other criteria are ignored. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getWhiteLabelEventsAsync($whitelabel_id, $limit = null, $page = null, $start = null, $end = null, $order_id = null, $store_id = null, $store_group_id = null, $user_id = null, $user_email = null, $user_name = null, $voucher_code = null, $event_type = null, $flipdish_event_id = null)
    {
        return $this->getWhiteLabelEventsAsyncWithHttpInfo($whitelabel_id, $limit, $page, $start, $end, $order_id, $store_id, $store_group_id, $user_id, $user_email, $user_name, $voucher_code, $event_type, $flipdish_event_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getWhiteLabelEventsAsyncWithHttpInfo
     *
     * Get WhiteLabel events  For technical reasons, the number of records returned is limited to 100.
     *
     * @param  int $whitelabel_id White Label Identifier (required)
     * @param  int $limit The maximum elements to return (optional)
     * @param  int $page The index of the page to return, starting by 1 (optional)
     * @param  \DateTime $start Start date (optional)
     * @param  \DateTime $end End date (optional)
     * @param  int $order_id Events that have Order Id (optional)
     * @param  int $store_id Events that have Store Id (optional)
     * @param  int $store_group_id Events that have Store Group Id (optional)
     * @param  int $user_id Events that have User Id (optional)
     * @param  string $user_email Events that have User Email (optional)
     * @param  string $user_name Events that have User Name (optional)
     * @param  string $voucher_code Events that have voucher code (optional)
     * @param  string[] $event_type Events that have event type\\s (optional)
     * @param  string $flipdish_event_id Unique Identifier of Event, if this is specified, all other criteria are ignored. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getWhiteLabelEventsAsyncWithHttpInfo($whitelabel_id, $limit = null, $page = null, $start = null, $end = null, $order_id = null, $store_id = null, $store_group_id = null, $user_id = null, $user_email = null, $user_name = null, $voucher_code = null, $event_type = null, $flipdish_event_id = null)
    {
        $returnType = '\Flipdish\Client\Models\RestApiEventSearchPaginationResult';
        $request = $this->getWhiteLabelEventsRequest($whitelabel_id, $limit, $page, $start, $end, $order_id, $store_id, $store_group_id, $user_id, $user_email, $user_name, $voucher_code, $event_type, $flipdish_event_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getWhiteLabelEvents'
     *
     * @param  int $whitelabel_id White Label Identifier (required)
     * @param  int $limit The maximum elements to return (optional)
     * @param  int $page The index of the page to return, starting by 1 (optional)
     * @param  \DateTime $start Start date (optional)
     * @param  \DateTime $end End date (optional)
     * @param  int $order_id Events that have Order Id (optional)
     * @param  int $store_id Events that have Store Id (optional)
     * @param  int $store_group_id Events that have Store Group Id (optional)
     * @param  int $user_id Events that have User Id (optional)
     * @param  string $user_email Events that have User Email (optional)
     * @param  string $user_name Events that have User Name (optional)
     * @param  string $voucher_code Events that have voucher code (optional)
     * @param  string[] $event_type Events that have event type\\s (optional)
     * @param  string $flipdish_event_id Unique Identifier of Event, if this is specified, all other criteria are ignored. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getWhiteLabelEventsRequest($whitelabel_id, $limit = null, $page = null, $start = null, $end = null, $order_id = null, $store_id = null, $store_group_id = null, $user_id = null, $user_email = null, $user_name = null, $voucher_code = null, $event_type = null, $flipdish_event_id = null)
    {
        // verify the required parameter 'whitelabel_id' is set
        if ($whitelabel_id === null || (is_array($whitelabel_id) && count($whitelabel_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $whitelabel_id when calling getWhiteLabelEvents'
            );
        }

        $resourcePath = '/api/v1.0/events/whitelabel/{whitelabelId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($limit !== null) {
            $queryParams['limit'] = ObjectSerializer::toQueryValue($limit);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = ObjectSerializer::toQueryValue($page);
        }
        // query params
        if ($start !== null) {
            $queryParams['start'] = ObjectSerializer::toQueryValue($start);
        }
        // query params
        if ($end !== null) {
            $queryParams['end'] = ObjectSerializer::toQueryValue($end);
        }
        // query params
        if ($order_id !== null) {
            $queryParams['orderId'] = ObjectSerializer::toQueryValue($order_id);
        }
        // query params
        if ($store_id !== null) {
            $queryParams['storeId'] = ObjectSerializer::toQueryValue($store_id);
        }
        // query params
        if ($store_group_id !== null) {
            $queryParams['storeGroupId'] = ObjectSerializer::toQueryValue($store_group_id);
        }
        // query params
        if ($user_id !== null) {
            $queryParams['userId'] = ObjectSerializer::toQueryValue($user_id);
        }
        // query params
        if ($user_email !== null) {
            $queryParams['userEmail'] = ObjectSerializer::toQueryValue($user_email);
        }
        // query params
        if ($user_name !== null) {
            $queryParams['userName'] = ObjectSerializer::toQueryValue($user_name);
        }
        // query params
        if ($voucher_code !== null) {
            $queryParams['voucherCode'] = ObjectSerializer::toQueryValue($voucher_code);
        }
        // query params
        if (is_array($event_type)) {
            $queryParams['eventType'] = $event_type;
        } else
        if ($event_type !== null) {
            $queryParams['eventType'] = ObjectSerializer::toQueryValue($event_type);
        }
        // query params
        if ($flipdish_event_id !== null) {
            $queryParams['flipdishEventId'] = ObjectSerializer::toQueryValue($flipdish_event_id);
        }

        // path params
        if ($whitelabel_id !== null) {
            $resourcePath = str_replace(
                '{' . 'whitelabelId' . '}',
                ObjectSerializer::toPathValue($whitelabel_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
