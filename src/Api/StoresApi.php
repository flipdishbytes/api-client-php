<?php
/**
 * StoresApi
 * PHP version 5
 *
 * @category Class
 * @package  Flipdish\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Flipdish Open API v1.0
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.19
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Flipdish\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Flipdish\Client\ApiException;
use Flipdish\Client\Configuration;
use Flipdish\Client\HeaderSelector;
use Flipdish\Client\ObjectSerializer;

/**
 * StoresApi Class Doc Comment
 *
 * @category Class
 * @package  Flipdish\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class StoresApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation archiveStore
     *
     * Archive store
     *
     * @param  int $store_id Store identifier (required)
     *
     * @throws \Flipdish\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function archiveStore($store_id)
    {
        $this->archiveStoreWithHttpInfo($store_id);
    }

    /**
     * Operation archiveStoreWithHttpInfo
     *
     * Archive store
     *
     * @param  int $store_id Store identifier (required)
     *
     * @throws \Flipdish\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function archiveStoreWithHttpInfo($store_id)
    {
        $returnType = '';
        $request = $this->archiveStoreRequest($store_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Flipdish\Client\Models\RestApiErrorResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Flipdish\Client\Models\RestApiUnauthorizedResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Flipdish\Client\Models\RestApiForbiddenResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation archiveStoreAsync
     *
     * Archive store
     *
     * @param  int $store_id Store identifier (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function archiveStoreAsync($store_id)
    {
        return $this->archiveStoreAsyncWithHttpInfo($store_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation archiveStoreAsyncWithHttpInfo
     *
     * Archive store
     *
     * @param  int $store_id Store identifier (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function archiveStoreAsyncWithHttpInfo($store_id)
    {
        $returnType = '';
        $request = $this->archiveStoreRequest($store_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'archiveStore'
     *
     * @param  int $store_id Store identifier (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function archiveStoreRequest($store_id)
    {
        // verify the required parameter 'store_id' is set
        if ($store_id === null || (is_array($store_id) && count($store_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $store_id when calling archiveStore'
            );
        }

        $resourcePath = '/api/v1.0/stores/{storeId}/archive';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($store_id !== null) {
            $resourcePath = str_replace(
                '{' . 'storeId' . '}',
                ObjectSerializer::toPathValue($store_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation assignMenu
     *
     * Assign Menu to Store
     *
     * @param  int $store_id Store identifier (required)
     * @param  int $menu_id Id of Menu to assign to store (required)
     *
     * @throws \Flipdish\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Flipdish\Client\Models\RestApiArrayResultRestApiDefaultResponse
     */
    public function assignMenu($store_id, $menu_id)
    {
        list($response) = $this->assignMenuWithHttpInfo($store_id, $menu_id);
        return $response;
    }

    /**
     * Operation assignMenuWithHttpInfo
     *
     * Assign Menu to Store
     *
     * @param  int $store_id Store identifier (required)
     * @param  int $menu_id Id of Menu to assign to store (required)
     *
     * @throws \Flipdish\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Flipdish\Client\Models\RestApiArrayResultRestApiDefaultResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function assignMenuWithHttpInfo($store_id, $menu_id)
    {
        $returnType = '\Flipdish\Client\Models\RestApiArrayResultRestApiDefaultResponse';
        $request = $this->assignMenuRequest($store_id, $menu_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Flipdish\Client\Models\RestApiArrayResultRestApiDefaultResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Flipdish\Client\Models\RestApiErrorResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Flipdish\Client\Models\RestApiUnauthorizedResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Flipdish\Client\Models\RestApiForbiddenResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation assignMenuAsync
     *
     * Assign Menu to Store
     *
     * @param  int $store_id Store identifier (required)
     * @param  int $menu_id Id of Menu to assign to store (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function assignMenuAsync($store_id, $menu_id)
    {
        return $this->assignMenuAsyncWithHttpInfo($store_id, $menu_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation assignMenuAsyncWithHttpInfo
     *
     * Assign Menu to Store
     *
     * @param  int $store_id Store identifier (required)
     * @param  int $menu_id Id of Menu to assign to store (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function assignMenuAsyncWithHttpInfo($store_id, $menu_id)
    {
        $returnType = '\Flipdish\Client\Models\RestApiArrayResultRestApiDefaultResponse';
        $request = $this->assignMenuRequest($store_id, $menu_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'assignMenu'
     *
     * @param  int $store_id Store identifier (required)
     * @param  int $menu_id Id of Menu to assign to store (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function assignMenuRequest($store_id, $menu_id)
    {
        // verify the required parameter 'store_id' is set
        if ($store_id === null || (is_array($store_id) && count($store_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $store_id when calling assignMenu'
            );
        }
        // verify the required parameter 'menu_id' is set
        if ($menu_id === null || (is_array($menu_id) && count($menu_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $menu_id when calling assignMenu'
            );
        }

        $resourcePath = '/api/v1.0/stores/{storeId}/menu/{menuId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($store_id !== null) {
            $resourcePath = str_replace(
                '{' . 'storeId' . '}',
                ObjectSerializer::toPathValue($store_id),
                $resourcePath
            );
        }
        // path params
        if ($menu_id !== null) {
            $resourcePath = str_replace(
                '{' . 'menuId' . '}',
                ObjectSerializer::toPathValue($menu_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cloneStore
     *
     * Clone store with store clone settings
     *
     * @param  int $store_id Store identifier (required)
     * @param  \Flipdish\Client\Models\StoreCloneSettings $settings Settings for cloning the store (required)
     *
     * @throws \Flipdish\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Flipdish\Client\Models\RestApiResultStore
     */
    public function cloneStore($store_id, $settings)
    {
        list($response) = $this->cloneStoreWithHttpInfo($store_id, $settings);
        return $response;
    }

    /**
     * Operation cloneStoreWithHttpInfo
     *
     * Clone store with store clone settings
     *
     * @param  int $store_id Store identifier (required)
     * @param  \Flipdish\Client\Models\StoreCloneSettings $settings Settings for cloning the store (required)
     *
     * @throws \Flipdish\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Flipdish\Client\Models\RestApiResultStore, HTTP status code, HTTP response headers (array of strings)
     */
    public function cloneStoreWithHttpInfo($store_id, $settings)
    {
        $returnType = '\Flipdish\Client\Models\RestApiResultStore';
        $request = $this->cloneStoreRequest($store_id, $settings);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Flipdish\Client\Models\RestApiResultStore',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Flipdish\Client\Models\RestApiErrorResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Flipdish\Client\Models\RestApiUnauthorizedResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Flipdish\Client\Models\RestApiForbiddenResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cloneStoreAsync
     *
     * Clone store with store clone settings
     *
     * @param  int $store_id Store identifier (required)
     * @param  \Flipdish\Client\Models\StoreCloneSettings $settings Settings for cloning the store (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cloneStoreAsync($store_id, $settings)
    {
        return $this->cloneStoreAsyncWithHttpInfo($store_id, $settings)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cloneStoreAsyncWithHttpInfo
     *
     * Clone store with store clone settings
     *
     * @param  int $store_id Store identifier (required)
     * @param  \Flipdish\Client\Models\StoreCloneSettings $settings Settings for cloning the store (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cloneStoreAsyncWithHttpInfo($store_id, $settings)
    {
        $returnType = '\Flipdish\Client\Models\RestApiResultStore';
        $request = $this->cloneStoreRequest($store_id, $settings);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cloneStore'
     *
     * @param  int $store_id Store identifier (required)
     * @param  \Flipdish\Client\Models\StoreCloneSettings $settings Settings for cloning the store (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function cloneStoreRequest($store_id, $settings)
    {
        // verify the required parameter 'store_id' is set
        if ($store_id === null || (is_array($store_id) && count($store_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $store_id when calling cloneStore'
            );
        }
        // verify the required parameter 'settings' is set
        if ($settings === null || (is_array($settings) && count($settings) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $settings when calling cloneStore'
            );
        }

        $resourcePath = '/api/v1.0/stores/{storeId}/clone';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($store_id !== null) {
            $resourcePath = str_replace(
                '{' . 'storeId' . '}',
                ObjectSerializer::toPathValue($store_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($settings)) {
            $_tempBody = $settings;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml'],
                ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createBusinessHoursOverrideByStoreId
     *
     * Create Business Hours Override for a store
     *
     * @param  int $store_id Store identifier (required)
     * @param  \Flipdish\Client\Models\BusinessHoursOverrideBase $business_hours_override Business Hours Override (required)
     *
     * @throws \Flipdish\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Flipdish\Client\Models\RestApiResultBusinessHoursOverride
     */
    public function createBusinessHoursOverrideByStoreId($store_id, $business_hours_override)
    {
        list($response) = $this->createBusinessHoursOverrideByStoreIdWithHttpInfo($store_id, $business_hours_override);
        return $response;
    }

    /**
     * Operation createBusinessHoursOverrideByStoreIdWithHttpInfo
     *
     * Create Business Hours Override for a store
     *
     * @param  int $store_id Store identifier (required)
     * @param  \Flipdish\Client\Models\BusinessHoursOverrideBase $business_hours_override Business Hours Override (required)
     *
     * @throws \Flipdish\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Flipdish\Client\Models\RestApiResultBusinessHoursOverride, HTTP status code, HTTP response headers (array of strings)
     */
    public function createBusinessHoursOverrideByStoreIdWithHttpInfo($store_id, $business_hours_override)
    {
        $returnType = '\Flipdish\Client\Models\RestApiResultBusinessHoursOverride';
        $request = $this->createBusinessHoursOverrideByStoreIdRequest($store_id, $business_hours_override);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Flipdish\Client\Models\RestApiResultBusinessHoursOverride',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Flipdish\Client\Models\RestApiErrorResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Flipdish\Client\Models\RestApiUnauthorizedResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Flipdish\Client\Models\RestApiForbiddenResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createBusinessHoursOverrideByStoreIdAsync
     *
     * Create Business Hours Override for a store
     *
     * @param  int $store_id Store identifier (required)
     * @param  \Flipdish\Client\Models\BusinessHoursOverrideBase $business_hours_override Business Hours Override (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createBusinessHoursOverrideByStoreIdAsync($store_id, $business_hours_override)
    {
        return $this->createBusinessHoursOverrideByStoreIdAsyncWithHttpInfo($store_id, $business_hours_override)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createBusinessHoursOverrideByStoreIdAsyncWithHttpInfo
     *
     * Create Business Hours Override for a store
     *
     * @param  int $store_id Store identifier (required)
     * @param  \Flipdish\Client\Models\BusinessHoursOverrideBase $business_hours_override Business Hours Override (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createBusinessHoursOverrideByStoreIdAsyncWithHttpInfo($store_id, $business_hours_override)
    {
        $returnType = '\Flipdish\Client\Models\RestApiResultBusinessHoursOverride';
        $request = $this->createBusinessHoursOverrideByStoreIdRequest($store_id, $business_hours_override);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createBusinessHoursOverrideByStoreId'
     *
     * @param  int $store_id Store identifier (required)
     * @param  \Flipdish\Client\Models\BusinessHoursOverrideBase $business_hours_override Business Hours Override (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function createBusinessHoursOverrideByStoreIdRequest($store_id, $business_hours_override)
    {
        // verify the required parameter 'store_id' is set
        if ($store_id === null || (is_array($store_id) && count($store_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $store_id when calling createBusinessHoursOverrideByStoreId'
            );
        }
        // verify the required parameter 'business_hours_override' is set
        if ($business_hours_override === null || (is_array($business_hours_override) && count($business_hours_override) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $business_hours_override when calling createBusinessHoursOverrideByStoreId'
            );
        }

        $resourcePath = '/api/v1.0/stores/{storeId}/businesshoursoverrides';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($store_id !== null) {
            $resourcePath = str_replace(
                '{' . 'storeId' . '}',
                ObjectSerializer::toPathValue($store_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($business_hours_override)) {
            $_tempBody = $business_hours_override;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml'],
                ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createStore
     *
     * Create store with Store Group identifier
     *
     * @param  int $store_group_id Store Group identifier (required)
     * @param  \Flipdish\Client\Models\StoreCreateBase $store Store (required)
     *
     * @throws \Flipdish\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Flipdish\Client\Models\RestApiResultStore
     */
    public function createStore($store_group_id, $store)
    {
        list($response) = $this->createStoreWithHttpInfo($store_group_id, $store);
        return $response;
    }

    /**
     * Operation createStoreWithHttpInfo
     *
     * Create store with Store Group identifier
     *
     * @param  int $store_group_id Store Group identifier (required)
     * @param  \Flipdish\Client\Models\StoreCreateBase $store Store (required)
     *
     * @throws \Flipdish\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Flipdish\Client\Models\RestApiResultStore, HTTP status code, HTTP response headers (array of strings)
     */
    public function createStoreWithHttpInfo($store_group_id, $store)
    {
        $returnType = '\Flipdish\Client\Models\RestApiResultStore';
        $request = $this->createStoreRequest($store_group_id, $store);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Flipdish\Client\Models\RestApiResultStore',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Flipdish\Client\Models\RestApiErrorResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Flipdish\Client\Models\RestApiUnauthorizedResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Flipdish\Client\Models\RestApiForbiddenResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createStoreAsync
     *
     * Create store with Store Group identifier
     *
     * @param  int $store_group_id Store Group identifier (required)
     * @param  \Flipdish\Client\Models\StoreCreateBase $store Store (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createStoreAsync($store_group_id, $store)
    {
        return $this->createStoreAsyncWithHttpInfo($store_group_id, $store)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createStoreAsyncWithHttpInfo
     *
     * Create store with Store Group identifier
     *
     * @param  int $store_group_id Store Group identifier (required)
     * @param  \Flipdish\Client\Models\StoreCreateBase $store Store (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createStoreAsyncWithHttpInfo($store_group_id, $store)
    {
        $returnType = '\Flipdish\Client\Models\RestApiResultStore';
        $request = $this->createStoreRequest($store_group_id, $store);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createStore'
     *
     * @param  int $store_group_id Store Group identifier (required)
     * @param  \Flipdish\Client\Models\StoreCreateBase $store Store (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function createStoreRequest($store_group_id, $store)
    {
        // verify the required parameter 'store_group_id' is set
        if ($store_group_id === null || (is_array($store_group_id) && count($store_group_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $store_group_id when calling createStore'
            );
        }
        // verify the required parameter 'store' is set
        if ($store === null || (is_array($store) && count($store) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $store when calling createStore'
            );
        }

        $resourcePath = '/api/v1.0/stores';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($store_group_id !== null) {
            $queryParams['storeGroupId'] = ObjectSerializer::toQueryValue($store_group_id);
        }


        // body params
        $_tempBody = null;
        if (isset($store)) {
            $_tempBody = $store;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml'],
                ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteBusinessHoursOverride
     *
     * Delete Business Hours Override for a store
     *
     * @param  int $store_id  (required)
     * @param  int $business_hours_override_id  (required)
     *
     * @throws \Flipdish\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Flipdish\Client\Models\RestApiArrayResultRestApiDefaultResponse
     */
    public function deleteBusinessHoursOverride($store_id, $business_hours_override_id)
    {
        list($response) = $this->deleteBusinessHoursOverrideWithHttpInfo($store_id, $business_hours_override_id);
        return $response;
    }

    /**
     * Operation deleteBusinessHoursOverrideWithHttpInfo
     *
     * Delete Business Hours Override for a store
     *
     * @param  int $store_id  (required)
     * @param  int $business_hours_override_id  (required)
     *
     * @throws \Flipdish\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Flipdish\Client\Models\RestApiArrayResultRestApiDefaultResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteBusinessHoursOverrideWithHttpInfo($store_id, $business_hours_override_id)
    {
        $returnType = '\Flipdish\Client\Models\RestApiArrayResultRestApiDefaultResponse';
        $request = $this->deleteBusinessHoursOverrideRequest($store_id, $business_hours_override_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Flipdish\Client\Models\RestApiArrayResultRestApiDefaultResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Flipdish\Client\Models\RestApiErrorResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Flipdish\Client\Models\RestApiUnauthorizedResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Flipdish\Client\Models\RestApiForbiddenResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteBusinessHoursOverrideAsync
     *
     * Delete Business Hours Override for a store
     *
     * @param  int $store_id  (required)
     * @param  int $business_hours_override_id  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteBusinessHoursOverrideAsync($store_id, $business_hours_override_id)
    {
        return $this->deleteBusinessHoursOverrideAsyncWithHttpInfo($store_id, $business_hours_override_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteBusinessHoursOverrideAsyncWithHttpInfo
     *
     * Delete Business Hours Override for a store
     *
     * @param  int $store_id  (required)
     * @param  int $business_hours_override_id  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteBusinessHoursOverrideAsyncWithHttpInfo($store_id, $business_hours_override_id)
    {
        $returnType = '\Flipdish\Client\Models\RestApiArrayResultRestApiDefaultResponse';
        $request = $this->deleteBusinessHoursOverrideRequest($store_id, $business_hours_override_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteBusinessHoursOverride'
     *
     * @param  int $store_id  (required)
     * @param  int $business_hours_override_id  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteBusinessHoursOverrideRequest($store_id, $business_hours_override_id)
    {
        // verify the required parameter 'store_id' is set
        if ($store_id === null || (is_array($store_id) && count($store_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $store_id when calling deleteBusinessHoursOverride'
            );
        }
        // verify the required parameter 'business_hours_override_id' is set
        if ($business_hours_override_id === null || (is_array($business_hours_override_id) && count($business_hours_override_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $business_hours_override_id when calling deleteBusinessHoursOverride'
            );
        }

        $resourcePath = '/api/v1.0/stores/{storeId}/businesshoursoverrides/{businessHoursOverrideId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($store_id !== null) {
            $resourcePath = str_replace(
                '{' . 'storeId' . '}',
                ObjectSerializer::toPathValue($store_id),
                $resourcePath
            );
        }
        // path params
        if ($business_hours_override_id !== null) {
            $resourcePath = str_replace(
                '{' . 'businessHoursOverrideId' . '}',
                ObjectSerializer::toPathValue($business_hours_override_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getBankAccountForStore
     *
     * Get Stores Bank Account Id
     *
     * @param  int $store_id Store identifier (required)
     *
     * @throws \Flipdish\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Flipdish\Client\Models\RestApiResultAssignedBankAccount
     */
    public function getBankAccountForStore($store_id)
    {
        list($response) = $this->getBankAccountForStoreWithHttpInfo($store_id);
        return $response;
    }

    /**
     * Operation getBankAccountForStoreWithHttpInfo
     *
     * Get Stores Bank Account Id
     *
     * @param  int $store_id Store identifier (required)
     *
     * @throws \Flipdish\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Flipdish\Client\Models\RestApiResultAssignedBankAccount, HTTP status code, HTTP response headers (array of strings)
     */
    public function getBankAccountForStoreWithHttpInfo($store_id)
    {
        $returnType = '\Flipdish\Client\Models\RestApiResultAssignedBankAccount';
        $request = $this->getBankAccountForStoreRequest($store_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Flipdish\Client\Models\RestApiResultAssignedBankAccount',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Flipdish\Client\Models\RestApiErrorResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Flipdish\Client\Models\RestApiUnauthorizedResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Flipdish\Client\Models\RestApiForbiddenResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getBankAccountForStoreAsync
     *
     * Get Stores Bank Account Id
     *
     * @param  int $store_id Store identifier (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getBankAccountForStoreAsync($store_id)
    {
        return $this->getBankAccountForStoreAsyncWithHttpInfo($store_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getBankAccountForStoreAsyncWithHttpInfo
     *
     * Get Stores Bank Account Id
     *
     * @param  int $store_id Store identifier (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getBankAccountForStoreAsyncWithHttpInfo($store_id)
    {
        $returnType = '\Flipdish\Client\Models\RestApiResultAssignedBankAccount';
        $request = $this->getBankAccountForStoreRequest($store_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getBankAccountForStore'
     *
     * @param  int $store_id Store identifier (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getBankAccountForStoreRequest($store_id)
    {
        // verify the required parameter 'store_id' is set
        if ($store_id === null || (is_array($store_id) && count($store_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $store_id when calling getBankAccountForStore'
            );
        }

        $resourcePath = '/api/v1.0/stores/{storeId}/bankaccount';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($store_id !== null) {
            $resourcePath = str_replace(
                '{' . 'storeId' . '}',
                ObjectSerializer::toPathValue($store_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getBusinessHours
     *
     * Get Business hours
     *
     * @param  int $store_id Store identifier (required)
     * @param  string $delivery_type Delivery type (required)
     *
     * @throws \Flipdish\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Flipdish\Client\Models\RestApiArrayResultBusinessHoursPeriod
     */
    public function getBusinessHours($store_id, $delivery_type)
    {
        list($response) = $this->getBusinessHoursWithHttpInfo($store_id, $delivery_type);
        return $response;
    }

    /**
     * Operation getBusinessHoursWithHttpInfo
     *
     * Get Business hours
     *
     * @param  int $store_id Store identifier (required)
     * @param  string $delivery_type Delivery type (required)
     *
     * @throws \Flipdish\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Flipdish\Client\Models\RestApiArrayResultBusinessHoursPeriod, HTTP status code, HTTP response headers (array of strings)
     */
    public function getBusinessHoursWithHttpInfo($store_id, $delivery_type)
    {
        $returnType = '\Flipdish\Client\Models\RestApiArrayResultBusinessHoursPeriod';
        $request = $this->getBusinessHoursRequest($store_id, $delivery_type);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Flipdish\Client\Models\RestApiArrayResultBusinessHoursPeriod',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Flipdish\Client\Models\RestApiErrorResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Flipdish\Client\Models\RestApiUnauthorizedResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Flipdish\Client\Models\RestApiForbiddenResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getBusinessHoursAsync
     *
     * Get Business hours
     *
     * @param  int $store_id Store identifier (required)
     * @param  string $delivery_type Delivery type (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getBusinessHoursAsync($store_id, $delivery_type)
    {
        return $this->getBusinessHoursAsyncWithHttpInfo($store_id, $delivery_type)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getBusinessHoursAsyncWithHttpInfo
     *
     * Get Business hours
     *
     * @param  int $store_id Store identifier (required)
     * @param  string $delivery_type Delivery type (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getBusinessHoursAsyncWithHttpInfo($store_id, $delivery_type)
    {
        $returnType = '\Flipdish\Client\Models\RestApiArrayResultBusinessHoursPeriod';
        $request = $this->getBusinessHoursRequest($store_id, $delivery_type);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getBusinessHours'
     *
     * @param  int $store_id Store identifier (required)
     * @param  string $delivery_type Delivery type (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getBusinessHoursRequest($store_id, $delivery_type)
    {
        // verify the required parameter 'store_id' is set
        if ($store_id === null || (is_array($store_id) && count($store_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $store_id when calling getBusinessHours'
            );
        }
        // verify the required parameter 'delivery_type' is set
        if ($delivery_type === null || (is_array($delivery_type) && count($delivery_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $delivery_type when calling getBusinessHours'
            );
        }

        $resourcePath = '/api/v1.0/stores/{storeId}/availability/{deliveryType}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($store_id !== null) {
            $resourcePath = str_replace(
                '{' . 'storeId' . '}',
                ObjectSerializer::toPathValue($store_id),
                $resourcePath
            );
        }
        // path params
        if ($delivery_type !== null) {
            $resourcePath = str_replace(
                '{' . 'deliveryType' . '}',
                ObjectSerializer::toPathValue($delivery_type),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getBusinessHoursOverrideByStoreId
     *
     * Get business hours overrides by store identifier
     *
     * @param  int $store_id Store identifier (required)
     * @param  \DateTime $after Return results that ended after this datetime. Default value is the current datetime. (optional)
     * @param  int $page Requested page index (optional)
     * @param  int $limit Requested page limit (optional)
     *
     * @throws \Flipdish\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Flipdish\Client\Models\RestApiPaginationResultBusinessHoursOverride
     */
    public function getBusinessHoursOverrideByStoreId($store_id, $after = null, $page = null, $limit = null)
    {
        list($response) = $this->getBusinessHoursOverrideByStoreIdWithHttpInfo($store_id, $after, $page, $limit);
        return $response;
    }

    /**
     * Operation getBusinessHoursOverrideByStoreIdWithHttpInfo
     *
     * Get business hours overrides by store identifier
     *
     * @param  int $store_id Store identifier (required)
     * @param  \DateTime $after Return results that ended after this datetime. Default value is the current datetime. (optional)
     * @param  int $page Requested page index (optional)
     * @param  int $limit Requested page limit (optional)
     *
     * @throws \Flipdish\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Flipdish\Client\Models\RestApiPaginationResultBusinessHoursOverride, HTTP status code, HTTP response headers (array of strings)
     */
    public function getBusinessHoursOverrideByStoreIdWithHttpInfo($store_id, $after = null, $page = null, $limit = null)
    {
        $returnType = '\Flipdish\Client\Models\RestApiPaginationResultBusinessHoursOverride';
        $request = $this->getBusinessHoursOverrideByStoreIdRequest($store_id, $after, $page, $limit);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Flipdish\Client\Models\RestApiPaginationResultBusinessHoursOverride',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Flipdish\Client\Models\RestApiErrorResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Flipdish\Client\Models\RestApiUnauthorizedResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Flipdish\Client\Models\RestApiForbiddenResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getBusinessHoursOverrideByStoreIdAsync
     *
     * Get business hours overrides by store identifier
     *
     * @param  int $store_id Store identifier (required)
     * @param  \DateTime $after Return results that ended after this datetime. Default value is the current datetime. (optional)
     * @param  int $page Requested page index (optional)
     * @param  int $limit Requested page limit (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getBusinessHoursOverrideByStoreIdAsync($store_id, $after = null, $page = null, $limit = null)
    {
        return $this->getBusinessHoursOverrideByStoreIdAsyncWithHttpInfo($store_id, $after, $page, $limit)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getBusinessHoursOverrideByStoreIdAsyncWithHttpInfo
     *
     * Get business hours overrides by store identifier
     *
     * @param  int $store_id Store identifier (required)
     * @param  \DateTime $after Return results that ended after this datetime. Default value is the current datetime. (optional)
     * @param  int $page Requested page index (optional)
     * @param  int $limit Requested page limit (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getBusinessHoursOverrideByStoreIdAsyncWithHttpInfo($store_id, $after = null, $page = null, $limit = null)
    {
        $returnType = '\Flipdish\Client\Models\RestApiPaginationResultBusinessHoursOverride';
        $request = $this->getBusinessHoursOverrideByStoreIdRequest($store_id, $after, $page, $limit);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getBusinessHoursOverrideByStoreId'
     *
     * @param  int $store_id Store identifier (required)
     * @param  \DateTime $after Return results that ended after this datetime. Default value is the current datetime. (optional)
     * @param  int $page Requested page index (optional)
     * @param  int $limit Requested page limit (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getBusinessHoursOverrideByStoreIdRequest($store_id, $after = null, $page = null, $limit = null)
    {
        // verify the required parameter 'store_id' is set
        if ($store_id === null || (is_array($store_id) && count($store_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $store_id when calling getBusinessHoursOverrideByStoreId'
            );
        }

        $resourcePath = '/api/v1.0/stores/{storeId}/businesshoursoverrides';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($after !== null) {
            $queryParams['after'] = ObjectSerializer::toQueryValue($after);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = ObjectSerializer::toQueryValue($page);
        }
        // query params
        if ($limit !== null) {
            $queryParams['limit'] = ObjectSerializer::toQueryValue($limit);
        }

        // path params
        if ($store_id !== null) {
            $resourcePath = str_replace(
                '{' . 'storeId' . '}',
                ObjectSerializer::toPathValue($store_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getEndOfDayReport
     *
     * Get store end of day report
     *
     * @param  int $store_id Store identifier (required)
     * @param  \DateTime $date Store identifier (optional)
     *
     * @throws \Flipdish\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Flipdish\Client\Models\RestApiResultStoreEndOfDayReport
     */
    public function getEndOfDayReport($store_id, $date = null)
    {
        list($response) = $this->getEndOfDayReportWithHttpInfo($store_id, $date);
        return $response;
    }

    /**
     * Operation getEndOfDayReportWithHttpInfo
     *
     * Get store end of day report
     *
     * @param  int $store_id Store identifier (required)
     * @param  \DateTime $date Store identifier (optional)
     *
     * @throws \Flipdish\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Flipdish\Client\Models\RestApiResultStoreEndOfDayReport, HTTP status code, HTTP response headers (array of strings)
     */
    public function getEndOfDayReportWithHttpInfo($store_id, $date = null)
    {
        $returnType = '\Flipdish\Client\Models\RestApiResultStoreEndOfDayReport';
        $request = $this->getEndOfDayReportRequest($store_id, $date);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Flipdish\Client\Models\RestApiResultStoreEndOfDayReport',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Flipdish\Client\Models\RestApiErrorResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Flipdish\Client\Models\RestApiUnauthorizedResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Flipdish\Client\Models\RestApiForbiddenResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getEndOfDayReportAsync
     *
     * Get store end of day report
     *
     * @param  int $store_id Store identifier (required)
     * @param  \DateTime $date Store identifier (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEndOfDayReportAsync($store_id, $date = null)
    {
        return $this->getEndOfDayReportAsyncWithHttpInfo($store_id, $date)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getEndOfDayReportAsyncWithHttpInfo
     *
     * Get store end of day report
     *
     * @param  int $store_id Store identifier (required)
     * @param  \DateTime $date Store identifier (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEndOfDayReportAsyncWithHttpInfo($store_id, $date = null)
    {
        $returnType = '\Flipdish\Client\Models\RestApiResultStoreEndOfDayReport';
        $request = $this->getEndOfDayReportRequest($store_id, $date);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getEndOfDayReport'
     *
     * @param  int $store_id Store identifier (required)
     * @param  \DateTime $date Store identifier (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getEndOfDayReportRequest($store_id, $date = null)
    {
        // verify the required parameter 'store_id' is set
        if ($store_id === null || (is_array($store_id) && count($store_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $store_id when calling getEndOfDayReport'
            );
        }

        $resourcePath = '/api/v1.0/stores/{storeId}/endofdayreport';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($date !== null) {
            $queryParams['date'] = ObjectSerializer::toQueryValue($date);
        }

        // path params
        if ($store_id !== null) {
            $resourcePath = str_replace(
                '{' . 'storeId' . '}',
                ObjectSerializer::toPathValue($store_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getPreOrderConfig
     *
     * Get the pre order config for a store, by type
     *
     * @param  int $store_id Store identifier (required)
     * @param  string $delivery_type \&quot;delivery\&quot; or \&quot;pickup\&quot; (required)
     *
     * @throws \Flipdish\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Flipdish\Client\Models\RestApiResultPreOrderConfig
     */
    public function getPreOrderConfig($store_id, $delivery_type)
    {
        list($response) = $this->getPreOrderConfigWithHttpInfo($store_id, $delivery_type);
        return $response;
    }

    /**
     * Operation getPreOrderConfigWithHttpInfo
     *
     * Get the pre order config for a store, by type
     *
     * @param  int $store_id Store identifier (required)
     * @param  string $delivery_type \&quot;delivery\&quot; or \&quot;pickup\&quot; (required)
     *
     * @throws \Flipdish\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Flipdish\Client\Models\RestApiResultPreOrderConfig, HTTP status code, HTTP response headers (array of strings)
     */
    public function getPreOrderConfigWithHttpInfo($store_id, $delivery_type)
    {
        $returnType = '\Flipdish\Client\Models\RestApiResultPreOrderConfig';
        $request = $this->getPreOrderConfigRequest($store_id, $delivery_type);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Flipdish\Client\Models\RestApiResultPreOrderConfig',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Flipdish\Client\Models\RestApiErrorResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Flipdish\Client\Models\RestApiUnauthorizedResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Flipdish\Client\Models\RestApiForbiddenResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getPreOrderConfigAsync
     *
     * Get the pre order config for a store, by type
     *
     * @param  int $store_id Store identifier (required)
     * @param  string $delivery_type \&quot;delivery\&quot; or \&quot;pickup\&quot; (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPreOrderConfigAsync($store_id, $delivery_type)
    {
        return $this->getPreOrderConfigAsyncWithHttpInfo($store_id, $delivery_type)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getPreOrderConfigAsyncWithHttpInfo
     *
     * Get the pre order config for a store, by type
     *
     * @param  int $store_id Store identifier (required)
     * @param  string $delivery_type \&quot;delivery\&quot; or \&quot;pickup\&quot; (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPreOrderConfigAsyncWithHttpInfo($store_id, $delivery_type)
    {
        $returnType = '\Flipdish\Client\Models\RestApiResultPreOrderConfig';
        $request = $this->getPreOrderConfigRequest($store_id, $delivery_type);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getPreOrderConfig'
     *
     * @param  int $store_id Store identifier (required)
     * @param  string $delivery_type \&quot;delivery\&quot; or \&quot;pickup\&quot; (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getPreOrderConfigRequest($store_id, $delivery_type)
    {
        // verify the required parameter 'store_id' is set
        if ($store_id === null || (is_array($store_id) && count($store_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $store_id when calling getPreOrderConfig'
            );
        }
        // verify the required parameter 'delivery_type' is set
        if ($delivery_type === null || (is_array($delivery_type) && count($delivery_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $delivery_type when calling getPreOrderConfig'
            );
        }

        $resourcePath = '/api/v1.0/stores/{storeId}/preorderconfig/{deliveryType}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($store_id !== null) {
            $resourcePath = str_replace(
                '{' . 'storeId' . '}',
                ObjectSerializer::toPathValue($store_id),
                $resourcePath
            );
        }
        // path params
        if ($delivery_type !== null) {
            $resourcePath = str_replace(
                '{' . 'deliveryType' . '}',
                ObjectSerializer::toPathValue($delivery_type),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getPreOrderPreview
     *
     * Get the Preview times of the pre-order configuration
     *
     * @param  int $store_id Store identifier (required)
     * @param  string $delivery_type \&quot;delivery\&quot; or \&quot;pickup\&quot; (required)
     * @param  int $pre_order_config_lead_time_minutes Lead Time in Minutes (optional)
     * @param  int $pre_order_config_interval_minutes Interval in minutes (optional)
     * @param  int $pre_order_config_max_order_ahead_days Max Days to order ahead (optional)
     * @param  bool $pre_order_config_include_asap Show ASAP as option (optional)
     * @param  bool $pre_order_config_include_more_granular_initial_time Granual Init&#39; Time (optional)
     * @param  string $pre_order_config_cut_off_time_previous_day_basic Cut off time previous day (optional)
     * @param  string $pre_order_config_cut_off_time_current_day_basic Cut off time current day (optional)
     * @param  string $pre_order_config_pre_order_time_display_type Type of time displayed. (optional)
     * @param  bool $pre_order_config_always_appear_open Specifies whether a customer can pre-order outside the store opening hours or not. (optional)
     * @param  bool $pre_order_config_require_explicit_select_always Force customer to select collection time. (optional)
     *
     * @throws \Flipdish\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Flipdish\Client\Models\RestApiArrayResultPreOrderTime
     */
    public function getPreOrderPreview($store_id, $delivery_type, $pre_order_config_lead_time_minutes = null, $pre_order_config_interval_minutes = null, $pre_order_config_max_order_ahead_days = null, $pre_order_config_include_asap = null, $pre_order_config_include_more_granular_initial_time = null, $pre_order_config_cut_off_time_previous_day_basic = null, $pre_order_config_cut_off_time_current_day_basic = null, $pre_order_config_pre_order_time_display_type = null, $pre_order_config_always_appear_open = null, $pre_order_config_require_explicit_select_always = null)
    {
        list($response) = $this->getPreOrderPreviewWithHttpInfo($store_id, $delivery_type, $pre_order_config_lead_time_minutes, $pre_order_config_interval_minutes, $pre_order_config_max_order_ahead_days, $pre_order_config_include_asap, $pre_order_config_include_more_granular_initial_time, $pre_order_config_cut_off_time_previous_day_basic, $pre_order_config_cut_off_time_current_day_basic, $pre_order_config_pre_order_time_display_type, $pre_order_config_always_appear_open, $pre_order_config_require_explicit_select_always);
        return $response;
    }

    /**
     * Operation getPreOrderPreviewWithHttpInfo
     *
     * Get the Preview times of the pre-order configuration
     *
     * @param  int $store_id Store identifier (required)
     * @param  string $delivery_type \&quot;delivery\&quot; or \&quot;pickup\&quot; (required)
     * @param  int $pre_order_config_lead_time_minutes Lead Time in Minutes (optional)
     * @param  int $pre_order_config_interval_minutes Interval in minutes (optional)
     * @param  int $pre_order_config_max_order_ahead_days Max Days to order ahead (optional)
     * @param  bool $pre_order_config_include_asap Show ASAP as option (optional)
     * @param  bool $pre_order_config_include_more_granular_initial_time Granual Init&#39; Time (optional)
     * @param  string $pre_order_config_cut_off_time_previous_day_basic Cut off time previous day (optional)
     * @param  string $pre_order_config_cut_off_time_current_day_basic Cut off time current day (optional)
     * @param  string $pre_order_config_pre_order_time_display_type Type of time displayed. (optional)
     * @param  bool $pre_order_config_always_appear_open Specifies whether a customer can pre-order outside the store opening hours or not. (optional)
     * @param  bool $pre_order_config_require_explicit_select_always Force customer to select collection time. (optional)
     *
     * @throws \Flipdish\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Flipdish\Client\Models\RestApiArrayResultPreOrderTime, HTTP status code, HTTP response headers (array of strings)
     */
    public function getPreOrderPreviewWithHttpInfo($store_id, $delivery_type, $pre_order_config_lead_time_minutes = null, $pre_order_config_interval_minutes = null, $pre_order_config_max_order_ahead_days = null, $pre_order_config_include_asap = null, $pre_order_config_include_more_granular_initial_time = null, $pre_order_config_cut_off_time_previous_day_basic = null, $pre_order_config_cut_off_time_current_day_basic = null, $pre_order_config_pre_order_time_display_type = null, $pre_order_config_always_appear_open = null, $pre_order_config_require_explicit_select_always = null)
    {
        $returnType = '\Flipdish\Client\Models\RestApiArrayResultPreOrderTime';
        $request = $this->getPreOrderPreviewRequest($store_id, $delivery_type, $pre_order_config_lead_time_minutes, $pre_order_config_interval_minutes, $pre_order_config_max_order_ahead_days, $pre_order_config_include_asap, $pre_order_config_include_more_granular_initial_time, $pre_order_config_cut_off_time_previous_day_basic, $pre_order_config_cut_off_time_current_day_basic, $pre_order_config_pre_order_time_display_type, $pre_order_config_always_appear_open, $pre_order_config_require_explicit_select_always);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Flipdish\Client\Models\RestApiArrayResultPreOrderTime',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Flipdish\Client\Models\RestApiErrorResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Flipdish\Client\Models\RestApiUnauthorizedResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Flipdish\Client\Models\RestApiForbiddenResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getPreOrderPreviewAsync
     *
     * Get the Preview times of the pre-order configuration
     *
     * @param  int $store_id Store identifier (required)
     * @param  string $delivery_type \&quot;delivery\&quot; or \&quot;pickup\&quot; (required)
     * @param  int $pre_order_config_lead_time_minutes Lead Time in Minutes (optional)
     * @param  int $pre_order_config_interval_minutes Interval in minutes (optional)
     * @param  int $pre_order_config_max_order_ahead_days Max Days to order ahead (optional)
     * @param  bool $pre_order_config_include_asap Show ASAP as option (optional)
     * @param  bool $pre_order_config_include_more_granular_initial_time Granual Init&#39; Time (optional)
     * @param  string $pre_order_config_cut_off_time_previous_day_basic Cut off time previous day (optional)
     * @param  string $pre_order_config_cut_off_time_current_day_basic Cut off time current day (optional)
     * @param  string $pre_order_config_pre_order_time_display_type Type of time displayed. (optional)
     * @param  bool $pre_order_config_always_appear_open Specifies whether a customer can pre-order outside the store opening hours or not. (optional)
     * @param  bool $pre_order_config_require_explicit_select_always Force customer to select collection time. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPreOrderPreviewAsync($store_id, $delivery_type, $pre_order_config_lead_time_minutes = null, $pre_order_config_interval_minutes = null, $pre_order_config_max_order_ahead_days = null, $pre_order_config_include_asap = null, $pre_order_config_include_more_granular_initial_time = null, $pre_order_config_cut_off_time_previous_day_basic = null, $pre_order_config_cut_off_time_current_day_basic = null, $pre_order_config_pre_order_time_display_type = null, $pre_order_config_always_appear_open = null, $pre_order_config_require_explicit_select_always = null)
    {
        return $this->getPreOrderPreviewAsyncWithHttpInfo($store_id, $delivery_type, $pre_order_config_lead_time_minutes, $pre_order_config_interval_minutes, $pre_order_config_max_order_ahead_days, $pre_order_config_include_asap, $pre_order_config_include_more_granular_initial_time, $pre_order_config_cut_off_time_previous_day_basic, $pre_order_config_cut_off_time_current_day_basic, $pre_order_config_pre_order_time_display_type, $pre_order_config_always_appear_open, $pre_order_config_require_explicit_select_always)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getPreOrderPreviewAsyncWithHttpInfo
     *
     * Get the Preview times of the pre-order configuration
     *
     * @param  int $store_id Store identifier (required)
     * @param  string $delivery_type \&quot;delivery\&quot; or \&quot;pickup\&quot; (required)
     * @param  int $pre_order_config_lead_time_minutes Lead Time in Minutes (optional)
     * @param  int $pre_order_config_interval_minutes Interval in minutes (optional)
     * @param  int $pre_order_config_max_order_ahead_days Max Days to order ahead (optional)
     * @param  bool $pre_order_config_include_asap Show ASAP as option (optional)
     * @param  bool $pre_order_config_include_more_granular_initial_time Granual Init&#39; Time (optional)
     * @param  string $pre_order_config_cut_off_time_previous_day_basic Cut off time previous day (optional)
     * @param  string $pre_order_config_cut_off_time_current_day_basic Cut off time current day (optional)
     * @param  string $pre_order_config_pre_order_time_display_type Type of time displayed. (optional)
     * @param  bool $pre_order_config_always_appear_open Specifies whether a customer can pre-order outside the store opening hours or not. (optional)
     * @param  bool $pre_order_config_require_explicit_select_always Force customer to select collection time. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPreOrderPreviewAsyncWithHttpInfo($store_id, $delivery_type, $pre_order_config_lead_time_minutes = null, $pre_order_config_interval_minutes = null, $pre_order_config_max_order_ahead_days = null, $pre_order_config_include_asap = null, $pre_order_config_include_more_granular_initial_time = null, $pre_order_config_cut_off_time_previous_day_basic = null, $pre_order_config_cut_off_time_current_day_basic = null, $pre_order_config_pre_order_time_display_type = null, $pre_order_config_always_appear_open = null, $pre_order_config_require_explicit_select_always = null)
    {
        $returnType = '\Flipdish\Client\Models\RestApiArrayResultPreOrderTime';
        $request = $this->getPreOrderPreviewRequest($store_id, $delivery_type, $pre_order_config_lead_time_minutes, $pre_order_config_interval_minutes, $pre_order_config_max_order_ahead_days, $pre_order_config_include_asap, $pre_order_config_include_more_granular_initial_time, $pre_order_config_cut_off_time_previous_day_basic, $pre_order_config_cut_off_time_current_day_basic, $pre_order_config_pre_order_time_display_type, $pre_order_config_always_appear_open, $pre_order_config_require_explicit_select_always);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getPreOrderPreview'
     *
     * @param  int $store_id Store identifier (required)
     * @param  string $delivery_type \&quot;delivery\&quot; or \&quot;pickup\&quot; (required)
     * @param  int $pre_order_config_lead_time_minutes Lead Time in Minutes (optional)
     * @param  int $pre_order_config_interval_minutes Interval in minutes (optional)
     * @param  int $pre_order_config_max_order_ahead_days Max Days to order ahead (optional)
     * @param  bool $pre_order_config_include_asap Show ASAP as option (optional)
     * @param  bool $pre_order_config_include_more_granular_initial_time Granual Init&#39; Time (optional)
     * @param  string $pre_order_config_cut_off_time_previous_day_basic Cut off time previous day (optional)
     * @param  string $pre_order_config_cut_off_time_current_day_basic Cut off time current day (optional)
     * @param  string $pre_order_config_pre_order_time_display_type Type of time displayed. (optional)
     * @param  bool $pre_order_config_always_appear_open Specifies whether a customer can pre-order outside the store opening hours or not. (optional)
     * @param  bool $pre_order_config_require_explicit_select_always Force customer to select collection time. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getPreOrderPreviewRequest($store_id, $delivery_type, $pre_order_config_lead_time_minutes = null, $pre_order_config_interval_minutes = null, $pre_order_config_max_order_ahead_days = null, $pre_order_config_include_asap = null, $pre_order_config_include_more_granular_initial_time = null, $pre_order_config_cut_off_time_previous_day_basic = null, $pre_order_config_cut_off_time_current_day_basic = null, $pre_order_config_pre_order_time_display_type = null, $pre_order_config_always_appear_open = null, $pre_order_config_require_explicit_select_always = null)
    {
        // verify the required parameter 'store_id' is set
        if ($store_id === null || (is_array($store_id) && count($store_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $store_id when calling getPreOrderPreview'
            );
        }
        // verify the required parameter 'delivery_type' is set
        if ($delivery_type === null || (is_array($delivery_type) && count($delivery_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $delivery_type when calling getPreOrderPreview'
            );
        }

        $resourcePath = '/api/v1.0/stores/{storeId}/preorderconfig/{deliveryType}/preview';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($pre_order_config_lead_time_minutes !== null) {
            $queryParams['preOrderConfig.leadTimeMinutes'] = ObjectSerializer::toQueryValue($pre_order_config_lead_time_minutes);
        }
        // query params
        if ($pre_order_config_interval_minutes !== null) {
            $queryParams['preOrderConfig.intervalMinutes'] = ObjectSerializer::toQueryValue($pre_order_config_interval_minutes);
        }
        // query params
        if ($pre_order_config_max_order_ahead_days !== null) {
            $queryParams['preOrderConfig.maxOrderAheadDays'] = ObjectSerializer::toQueryValue($pre_order_config_max_order_ahead_days);
        }
        // query params
        if ($pre_order_config_include_asap !== null) {
            $queryParams['preOrderConfig.includeAsap'] = ObjectSerializer::toQueryValue($pre_order_config_include_asap);
        }
        // query params
        if ($pre_order_config_include_more_granular_initial_time !== null) {
            $queryParams['preOrderConfig.includeMoreGranularInitialTime'] = ObjectSerializer::toQueryValue($pre_order_config_include_more_granular_initial_time);
        }
        // query params
        if ($pre_order_config_cut_off_time_previous_day_basic !== null) {
            $queryParams['preOrderConfig.cutOffTimePreviousDayBasic'] = ObjectSerializer::toQueryValue($pre_order_config_cut_off_time_previous_day_basic);
        }
        // query params
        if ($pre_order_config_cut_off_time_current_day_basic !== null) {
            $queryParams['preOrderConfig.cutOffTimeCurrentDayBasic'] = ObjectSerializer::toQueryValue($pre_order_config_cut_off_time_current_day_basic);
        }
        // query params
        if ($pre_order_config_pre_order_time_display_type !== null) {
            $queryParams['preOrderConfig.preOrderTimeDisplayType'] = ObjectSerializer::toQueryValue($pre_order_config_pre_order_time_display_type);
        }
        // query params
        if ($pre_order_config_always_appear_open !== null) {
            $queryParams['preOrderConfig.alwaysAppearOpen'] = ObjectSerializer::toQueryValue($pre_order_config_always_appear_open);
        }
        // query params
        if ($pre_order_config_require_explicit_select_always !== null) {
            $queryParams['preOrderConfig.requireExplicitSelectAlways'] = ObjectSerializer::toQueryValue($pre_order_config_require_explicit_select_always);
        }

        // path params
        if ($store_id !== null) {
            $resourcePath = str_replace(
                '{' . 'storeId' . '}',
                ObjectSerializer::toPathValue($store_id),
                $resourcePath
            );
        }
        // path params
        if ($delivery_type !== null) {
            $resourcePath = str_replace(
                '{' . 'deliveryType' . '}',
                ObjectSerializer::toPathValue($delivery_type),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml'],
                ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getProcessingFeeConfigsByStoreId
     *
     * Get processing fee configs by store identifier
     *
     * @param  int $store_id Store identifier (required)
     * @param  string $app_name_id App Name Id(Not used, still here for compatability reasons) (optional)
     *
     * @throws \Flipdish\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Flipdish\Client\Models\RestApiArrayResultProcessingFeeConfig
     */
    public function getProcessingFeeConfigsByStoreId($store_id, $app_name_id = null)
    {
        list($response) = $this->getProcessingFeeConfigsByStoreIdWithHttpInfo($store_id, $app_name_id);
        return $response;
    }

    /**
     * Operation getProcessingFeeConfigsByStoreIdWithHttpInfo
     *
     * Get processing fee configs by store identifier
     *
     * @param  int $store_id Store identifier (required)
     * @param  string $app_name_id App Name Id(Not used, still here for compatability reasons) (optional)
     *
     * @throws \Flipdish\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Flipdish\Client\Models\RestApiArrayResultProcessingFeeConfig, HTTP status code, HTTP response headers (array of strings)
     */
    public function getProcessingFeeConfigsByStoreIdWithHttpInfo($store_id, $app_name_id = null)
    {
        $returnType = '\Flipdish\Client\Models\RestApiArrayResultProcessingFeeConfig';
        $request = $this->getProcessingFeeConfigsByStoreIdRequest($store_id, $app_name_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Flipdish\Client\Models\RestApiArrayResultProcessingFeeConfig',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Flipdish\Client\Models\RestApiErrorResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Flipdish\Client\Models\RestApiUnauthorizedResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Flipdish\Client\Models\RestApiForbiddenResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getProcessingFeeConfigsByStoreIdAsync
     *
     * Get processing fee configs by store identifier
     *
     * @param  int $store_id Store identifier (required)
     * @param  string $app_name_id App Name Id(Not used, still here for compatability reasons) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getProcessingFeeConfigsByStoreIdAsync($store_id, $app_name_id = null)
    {
        return $this->getProcessingFeeConfigsByStoreIdAsyncWithHttpInfo($store_id, $app_name_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getProcessingFeeConfigsByStoreIdAsyncWithHttpInfo
     *
     * Get processing fee configs by store identifier
     *
     * @param  int $store_id Store identifier (required)
     * @param  string $app_name_id App Name Id(Not used, still here for compatability reasons) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getProcessingFeeConfigsByStoreIdAsyncWithHttpInfo($store_id, $app_name_id = null)
    {
        $returnType = '\Flipdish\Client\Models\RestApiArrayResultProcessingFeeConfig';
        $request = $this->getProcessingFeeConfigsByStoreIdRequest($store_id, $app_name_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getProcessingFeeConfigsByStoreId'
     *
     * @param  int $store_id Store identifier (required)
     * @param  string $app_name_id App Name Id(Not used, still here for compatability reasons) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getProcessingFeeConfigsByStoreIdRequest($store_id, $app_name_id = null)
    {
        // verify the required parameter 'store_id' is set
        if ($store_id === null || (is_array($store_id) && count($store_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $store_id when calling getProcessingFeeConfigsByStoreId'
            );
        }

        $resourcePath = '/api/v1.0/stores/{storeId}/processingfeeconfigs';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($app_name_id !== null) {
            $queryParams['appNameId'] = ObjectSerializer::toQueryValue($app_name_id);
        }

        // path params
        if ($store_id !== null) {
            $resourcePath = str_replace(
                '{' . 'storeId' . '}',
                ObjectSerializer::toPathValue($store_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getProcessingFeeConfigsByStoreIdAndPaymentAccountType
     *
     * Get processing fee configs by store identifier
     *
     * @param  int $store_id Store identifier (required)
     * @param  string $payment_account_type  (required)
     * @param  string $app_name_id App Name Id(Not used, still here for compatability reasons) (optional)
     *
     * @throws \Flipdish\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Flipdish\Client\Models\RestApiResultProcessingFeeConfig
     */
    public function getProcessingFeeConfigsByStoreIdAndPaymentAccountType($store_id, $payment_account_type, $app_name_id = null)
    {
        list($response) = $this->getProcessingFeeConfigsByStoreIdAndPaymentAccountTypeWithHttpInfo($store_id, $payment_account_type, $app_name_id);
        return $response;
    }

    /**
     * Operation getProcessingFeeConfigsByStoreIdAndPaymentAccountTypeWithHttpInfo
     *
     * Get processing fee configs by store identifier
     *
     * @param  int $store_id Store identifier (required)
     * @param  string $payment_account_type  (required)
     * @param  string $app_name_id App Name Id(Not used, still here for compatability reasons) (optional)
     *
     * @throws \Flipdish\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Flipdish\Client\Models\RestApiResultProcessingFeeConfig, HTTP status code, HTTP response headers (array of strings)
     */
    public function getProcessingFeeConfigsByStoreIdAndPaymentAccountTypeWithHttpInfo($store_id, $payment_account_type, $app_name_id = null)
    {
        $returnType = '\Flipdish\Client\Models\RestApiResultProcessingFeeConfig';
        $request = $this->getProcessingFeeConfigsByStoreIdAndPaymentAccountTypeRequest($store_id, $payment_account_type, $app_name_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Flipdish\Client\Models\RestApiResultProcessingFeeConfig',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Flipdish\Client\Models\RestApiErrorResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Flipdish\Client\Models\RestApiUnauthorizedResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Flipdish\Client\Models\RestApiForbiddenResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getProcessingFeeConfigsByStoreIdAndPaymentAccountTypeAsync
     *
     * Get processing fee configs by store identifier
     *
     * @param  int $store_id Store identifier (required)
     * @param  string $payment_account_type  (required)
     * @param  string $app_name_id App Name Id(Not used, still here for compatability reasons) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getProcessingFeeConfigsByStoreIdAndPaymentAccountTypeAsync($store_id, $payment_account_type, $app_name_id = null)
    {
        return $this->getProcessingFeeConfigsByStoreIdAndPaymentAccountTypeAsyncWithHttpInfo($store_id, $payment_account_type, $app_name_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getProcessingFeeConfigsByStoreIdAndPaymentAccountTypeAsyncWithHttpInfo
     *
     * Get processing fee configs by store identifier
     *
     * @param  int $store_id Store identifier (required)
     * @param  string $payment_account_type  (required)
     * @param  string $app_name_id App Name Id(Not used, still here for compatability reasons) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getProcessingFeeConfigsByStoreIdAndPaymentAccountTypeAsyncWithHttpInfo($store_id, $payment_account_type, $app_name_id = null)
    {
        $returnType = '\Flipdish\Client\Models\RestApiResultProcessingFeeConfig';
        $request = $this->getProcessingFeeConfigsByStoreIdAndPaymentAccountTypeRequest($store_id, $payment_account_type, $app_name_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getProcessingFeeConfigsByStoreIdAndPaymentAccountType'
     *
     * @param  int $store_id Store identifier (required)
     * @param  string $payment_account_type  (required)
     * @param  string $app_name_id App Name Id(Not used, still here for compatability reasons) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getProcessingFeeConfigsByStoreIdAndPaymentAccountTypeRequest($store_id, $payment_account_type, $app_name_id = null)
    {
        // verify the required parameter 'store_id' is set
        if ($store_id === null || (is_array($store_id) && count($store_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $store_id when calling getProcessingFeeConfigsByStoreIdAndPaymentAccountType'
            );
        }
        // verify the required parameter 'payment_account_type' is set
        if ($payment_account_type === null || (is_array($payment_account_type) && count($payment_account_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $payment_account_type when calling getProcessingFeeConfigsByStoreIdAndPaymentAccountType'
            );
        }

        $resourcePath = '/api/v1.0/stores/{storeId}/processingfeeconfigs/{paymentAccountType}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($app_name_id !== null) {
            $queryParams['appNameId'] = ObjectSerializer::toQueryValue($app_name_id);
        }

        // path params
        if ($store_id !== null) {
            $resourcePath = str_replace(
                '{' . 'storeId' . '}',
                ObjectSerializer::toPathValue($store_id),
                $resourcePath
            );
        }
        // path params
        if ($payment_account_type !== null) {
            $resourcePath = str_replace(
                '{' . 'paymentAccountType' . '}',
                ObjectSerializer::toPathValue($payment_account_type),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getStoreById
     *
     * Get store by identifier
     *
     * @param  int $store_id Store identifier (required)
     *
     * @throws \Flipdish\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Flipdish\Client\Models\RestApiResultStore
     */
    public function getStoreById($store_id)
    {
        list($response) = $this->getStoreByIdWithHttpInfo($store_id);
        return $response;
    }

    /**
     * Operation getStoreByIdWithHttpInfo
     *
     * Get store by identifier
     *
     * @param  int $store_id Store identifier (required)
     *
     * @throws \Flipdish\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Flipdish\Client\Models\RestApiResultStore, HTTP status code, HTTP response headers (array of strings)
     */
    public function getStoreByIdWithHttpInfo($store_id)
    {
        $returnType = '\Flipdish\Client\Models\RestApiResultStore';
        $request = $this->getStoreByIdRequest($store_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Flipdish\Client\Models\RestApiResultStore',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Flipdish\Client\Models\RestApiErrorResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Flipdish\Client\Models\RestApiUnauthorizedResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Flipdish\Client\Models\RestApiForbiddenResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getStoreByIdAsync
     *
     * Get store by identifier
     *
     * @param  int $store_id Store identifier (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getStoreByIdAsync($store_id)
    {
        return $this->getStoreByIdAsyncWithHttpInfo($store_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getStoreByIdAsyncWithHttpInfo
     *
     * Get store by identifier
     *
     * @param  int $store_id Store identifier (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getStoreByIdAsyncWithHttpInfo($store_id)
    {
        $returnType = '\Flipdish\Client\Models\RestApiResultStore';
        $request = $this->getStoreByIdRequest($store_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getStoreById'
     *
     * @param  int $store_id Store identifier (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getStoreByIdRequest($store_id)
    {
        // verify the required parameter 'store_id' is set
        if ($store_id === null || (is_array($store_id) && count($store_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $store_id when calling getStoreById'
            );
        }

        $resourcePath = '/api/v1.0/stores/{storeId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($store_id !== null) {
            $resourcePath = str_replace(
                '{' . 'storeId' . '}',
                ObjectSerializer::toPathValue($store_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getStoreHeadersByAppId
     *
     * Get all stores by app name id
     *
     * @param  string $app_id App Name Id (required)
     * @param  string $store_name_query store_name_query (optional)
     * @param  int $page page (optional)
     * @param  int $limit limit (optional)
     *
     * @throws \Flipdish\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Flipdish\Client\Models\RestApiPaginationResultStoreHeader
     */
    public function getStoreHeadersByAppId($app_id, $store_name_query = null, $page = null, $limit = null)
    {
        list($response) = $this->getStoreHeadersByAppIdWithHttpInfo($app_id, $store_name_query, $page, $limit);
        return $response;
    }

    /**
     * Operation getStoreHeadersByAppIdWithHttpInfo
     *
     * Get all stores by app name id
     *
     * @param  string $app_id App Name Id (required)
     * @param  string $store_name_query (optional)
     * @param  int $page (optional)
     * @param  int $limit (optional)
     *
     * @throws \Flipdish\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Flipdish\Client\Models\RestApiPaginationResultStoreHeader, HTTP status code, HTTP response headers (array of strings)
     */
    public function getStoreHeadersByAppIdWithHttpInfo($app_id, $store_name_query = null, $page = null, $limit = null)
    {
        $returnType = '\Flipdish\Client\Models\RestApiPaginationResultStoreHeader';
        $request = $this->getStoreHeadersByAppIdRequest($app_id, $store_name_query, $page, $limit);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Flipdish\Client\Models\RestApiPaginationResultStoreHeader',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Flipdish\Client\Models\RestApiErrorResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Flipdish\Client\Models\RestApiUnauthorizedResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Flipdish\Client\Models\RestApiForbiddenResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getStoreHeadersByAppIdAsync
     *
     * Get all stores by app name id
     *
     * @param  string $app_id App Name Id (required)
     * @param  string $store_name_query (optional)
     * @param  int $page (optional)
     * @param  int $limit (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getStoreHeadersByAppIdAsync($app_id, $store_name_query = null, $page = null, $limit = null)
    {
        return $this->getStoreHeadersByAppIdAsyncWithHttpInfo($app_id, $store_name_query, $page, $limit)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getStoreHeadersByAppIdAsyncWithHttpInfo
     *
     * Get all stores by app name id
     *
     * @param  string $app_id App Name Id (required)
     * @param  string $store_name_query (optional)
     * @param  int $page (optional)
     * @param  int $limit (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getStoreHeadersByAppIdAsyncWithHttpInfo($app_id, $store_name_query = null, $page = null, $limit = null)
    {
        $returnType = '\Flipdish\Client\Models\RestApiPaginationResultStoreHeader';
        $request = $this->getStoreHeadersByAppIdRequest($app_id, $store_name_query, $page, $limit);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getStoreHeadersByAppId'
     *
     * @param  string $app_id App Name Id (required)
     * @param  string $store_name_query (optional)
     * @param  int $page (optional)
     * @param  int $limit (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getStoreHeadersByAppIdRequest($app_id, $store_name_query = null, $page = null, $limit = null)
    {
        // verify the required parameter 'app_id' is set
        if ($app_id === null || (is_array($app_id) && count($app_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $app_id when calling getStoreHeadersByAppId'
            );
        }

        $resourcePath = '/api/v1.0/{appId}/stores/header';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($store_name_query !== null) {
            $queryParams['storeNameQuery'] = ObjectSerializer::toQueryValue($store_name_query);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = ObjectSerializer::toQueryValue($page);
        }
        // query params
        if ($limit !== null) {
            $queryParams['limit'] = ObjectSerializer::toQueryValue($limit);
        }

        // path params
        if ($app_id !== null) {
            $resourcePath = str_replace(
                '{' . 'appId' . '}',
                ObjectSerializer::toPathValue($app_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getStoreNetSales
     *
     * Get stores statistics by app name id and storeIds
     *
     * @param  string $app_id App Name Id (required)
     * @param  int[] $store_id Store Ids (required)
     *
     * @throws \Flipdish\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Flipdish\Client\Models\RestApiArrayResultStoreStatistics
     */
    public function getStoreNetSales($app_id, $store_id)
    {
        list($response) = $this->getStoreNetSalesWithHttpInfo($app_id, $store_id);
        return $response;
    }

    /**
     * Operation getStoreNetSalesWithHttpInfo
     *
     * Get stores statistics by app name id and storeIds
     *
     * @param  string $app_id App Name Id (required)
     * @param  int[] $store_id Store Ids (required)
     *
     * @throws \Flipdish\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Flipdish\Client\Models\RestApiArrayResultStoreStatistics, HTTP status code, HTTP response headers (array of strings)
     */
    public function getStoreNetSalesWithHttpInfo($app_id, $store_id)
    {
        $returnType = '\Flipdish\Client\Models\RestApiArrayResultStoreStatistics';
        $request = $this->getStoreNetSalesRequest($app_id, $store_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Flipdish\Client\Models\RestApiArrayResultStoreStatistics',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Flipdish\Client\Models\RestApiErrorResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Flipdish\Client\Models\RestApiUnauthorizedResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Flipdish\Client\Models\RestApiForbiddenResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getStoreNetSalesAsync
     *
     * Get stores statistics by app name id and storeIds
     *
     * @param  string $app_id App Name Id (required)
     * @param  int[] $store_id Store Ids (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getStoreNetSalesAsync($app_id, $store_id)
    {
        return $this->getStoreNetSalesAsyncWithHttpInfo($app_id, $store_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getStoreNetSalesAsyncWithHttpInfo
     *
     * Get stores statistics by app name id and storeIds
     *
     * @param  string $app_id App Name Id (required)
     * @param  int[] $store_id Store Ids (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getStoreNetSalesAsyncWithHttpInfo($app_id, $store_id)
    {
        $returnType = '\Flipdish\Client\Models\RestApiArrayResultStoreStatistics';
        $request = $this->getStoreNetSalesRequest($app_id, $store_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getStoreNetSales'
     *
     * @param  string $app_id App Name Id (required)
     * @param  int[] $store_id Store Ids (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getStoreNetSalesRequest($app_id, $store_id)
    {
        // verify the required parameter 'app_id' is set
        if ($app_id === null || (is_array($app_id) && count($app_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $app_id when calling getStoreNetSales'
            );
        }
        // verify the required parameter 'store_id' is set
        if ($store_id === null || (is_array($store_id) && count($store_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $store_id when calling getStoreNetSales'
            );
        }

        $resourcePath = '/api/v1.0/{appId}/stores/stats';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($store_id)) {
            $queryParams['storeId'] = $store_id;
        } else
        if ($store_id !== null) {
            $queryParams['storeId'] = ObjectSerializer::toQueryValue($store_id);
        }

        // path params
        if ($app_id !== null) {
            $resourcePath = str_replace(
                '{' . 'appId' . '}',
                ObjectSerializer::toPathValue($app_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getStores
     *
     * Get all stores, excluding archived ones
     *
     * @param  string $search_query Search query (optional)
     * @param  int $page Requested page index (optional)
     * @param  int $limit Requested page limit (optional)
     * @param  int $store_group_id Store Group Id (optional)
     *
     * @throws \Flipdish\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Flipdish\Client\Models\RestApiPaginationResultStore
     */
    public function getStores($search_query = null, $page = null, $limit = null, $store_group_id = null)
    {
        list($response) = $this->getStoresWithHttpInfo($search_query, $page, $limit, $store_group_id);
        return $response;
    }

    /**
     * Operation getStoresWithHttpInfo
     *
     * Get all stores, excluding archived ones
     *
     * @param  string $search_query Search query (optional)
     * @param  int $page Requested page index (optional)
     * @param  int $limit Requested page limit (optional)
     * @param  int $store_group_id Store Group Id (optional)
     *
     * @throws \Flipdish\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Flipdish\Client\Models\RestApiPaginationResultStore, HTTP status code, HTTP response headers (array of strings)
     */
    public function getStoresWithHttpInfo($search_query = null, $page = null, $limit = null, $store_group_id = null)
    {
        $returnType = '\Flipdish\Client\Models\RestApiPaginationResultStore';
        $request = $this->getStoresRequest($search_query, $page, $limit, $store_group_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Flipdish\Client\Models\RestApiPaginationResultStore',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Flipdish\Client\Models\RestApiErrorResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Flipdish\Client\Models\RestApiUnauthorizedResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Flipdish\Client\Models\RestApiForbiddenResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getStoresAsync
     *
     * Get all stores, excluding archived ones
     *
     * @param  string $search_query Search query (optional)
     * @param  int $page Requested page index (optional)
     * @param  int $limit Requested page limit (optional)
     * @param  int $store_group_id Store Group Id (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getStoresAsync($search_query = null, $page = null, $limit = null, $store_group_id = null)
    {
        return $this->getStoresAsyncWithHttpInfo($search_query, $page, $limit, $store_group_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getStoresAsyncWithHttpInfo
     *
     * Get all stores, excluding archived ones
     *
     * @param  string $search_query Search query (optional)
     * @param  int $page Requested page index (optional)
     * @param  int $limit Requested page limit (optional)
     * @param  int $store_group_id Store Group Id (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getStoresAsyncWithHttpInfo($search_query = null, $page = null, $limit = null, $store_group_id = null)
    {
        $returnType = '\Flipdish\Client\Models\RestApiPaginationResultStore';
        $request = $this->getStoresRequest($search_query, $page, $limit, $store_group_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getStores'
     *
     * @param  string $search_query Search query (optional)
     * @param  int $page Requested page index (optional)
     * @param  int $limit Requested page limit (optional)
     * @param  int $store_group_id Store Group Id (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getStoresRequest($search_query = null, $page = null, $limit = null, $store_group_id = null)
    {

        $resourcePath = '/api/v1.0/stores';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($search_query !== null) {
            $queryParams['searchQuery'] = ObjectSerializer::toQueryValue($search_query);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = ObjectSerializer::toQueryValue($page);
        }
        // query params
        if ($limit !== null) {
            $queryParams['limit'] = ObjectSerializer::toQueryValue($limit);
        }
        // query params
        if ($store_group_id !== null) {
            $queryParams['storeGroupId'] = ObjectSerializer::toQueryValue($store_group_id);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getStoresByAppId
     *
     * Get all stores by app name id
     *
     * @param  string $app_id App Name Id (required)
     * @param  string $search_query Search query (optional)
     * @param  int $page Requested page index (optional)
     * @param  int $limit Requested page limit (optional)
     *
     * @throws \Flipdish\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Flipdish\Client\Models\RestApiPaginationResultStore
     */
    public function getStoresByAppId($app_id, $search_query = null, $page = null, $limit = null)
    {
        list($response) = $this->getStoresByAppIdWithHttpInfo($app_id, $search_query, $page, $limit);
        return $response;
    }

    /**
     * Operation getStoresByAppIdWithHttpInfo
     *
     * Get all stores by app name id
     *
     * @param  string $app_id App Name Id (required)
     * @param  string $search_query Search query (optional)
     * @param  int $page Requested page index (optional)
     * @param  int $limit Requested page limit (optional)
     *
     * @throws \Flipdish\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Flipdish\Client\Models\RestApiPaginationResultStore, HTTP status code, HTTP response headers (array of strings)
     */
    public function getStoresByAppIdWithHttpInfo($app_id, $search_query = null, $page = null, $limit = null)
    {
        $returnType = '\Flipdish\Client\Models\RestApiPaginationResultStore';
        $request = $this->getStoresByAppIdRequest($app_id, $search_query, $page, $limit);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Flipdish\Client\Models\RestApiPaginationResultStore',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Flipdish\Client\Models\RestApiErrorResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Flipdish\Client\Models\RestApiUnauthorizedResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Flipdish\Client\Models\RestApiForbiddenResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getStoresByAppIdAsync
     *
     * Get all stores by app name id
     *
     * @param  string $app_id App Name Id (required)
     * @param  string $search_query Search query (optional)
     * @param  int $page Requested page index (optional)
     * @param  int $limit Requested page limit (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getStoresByAppIdAsync($app_id, $search_query = null, $page = null, $limit = null)
    {
        return $this->getStoresByAppIdAsyncWithHttpInfo($app_id, $search_query, $page, $limit)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getStoresByAppIdAsyncWithHttpInfo
     *
     * Get all stores by app name id
     *
     * @param  string $app_id App Name Id (required)
     * @param  string $search_query Search query (optional)
     * @param  int $page Requested page index (optional)
     * @param  int $limit Requested page limit (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getStoresByAppIdAsyncWithHttpInfo($app_id, $search_query = null, $page = null, $limit = null)
    {
        $returnType = '\Flipdish\Client\Models\RestApiPaginationResultStore';
        $request = $this->getStoresByAppIdRequest($app_id, $search_query, $page, $limit);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getStoresByAppId'
     *
     * @param  string $app_id App Name Id (required)
     * @param  string $search_query Search query (optional)
     * @param  int $page Requested page index (optional)
     * @param  int $limit Requested page limit (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getStoresByAppIdRequest($app_id, $search_query = null, $page = null, $limit = null)
    {
        // verify the required parameter 'app_id' is set
        if ($app_id === null || (is_array($app_id) && count($app_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $app_id when calling getStoresByAppId'
            );
        }

        $resourcePath = '/api/v1.0/{appId}/stores';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($search_query !== null) {
            $queryParams['searchQuery'] = ObjectSerializer::toQueryValue($search_query);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = ObjectSerializer::toQueryValue($page);
        }
        // query params
        if ($limit !== null) {
            $queryParams['limit'] = ObjectSerializer::toQueryValue($limit);
        }

        // path params
        if ($app_id !== null) {
            $resourcePath = str_replace(
                '{' . 'appId' . '}',
                ObjectSerializer::toPathValue($app_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation publishStore
     *
     * Publish store
     *
     * @param  int $store_id Store identifier (required)
     *
     * @throws \Flipdish\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function publishStore($store_id)
    {
        $this->publishStoreWithHttpInfo($store_id);
    }

    /**
     * Operation publishStoreWithHttpInfo
     *
     * Publish store
     *
     * @param  int $store_id Store identifier (required)
     *
     * @throws \Flipdish\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function publishStoreWithHttpInfo($store_id)
    {
        $returnType = '';
        $request = $this->publishStoreRequest($store_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Flipdish\Client\Models\RestApiErrorResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Flipdish\Client\Models\RestApiUnauthorizedResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Flipdish\Client\Models\RestApiForbiddenResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation publishStoreAsync
     *
     * Publish store
     *
     * @param  int $store_id Store identifier (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function publishStoreAsync($store_id)
    {
        return $this->publishStoreAsyncWithHttpInfo($store_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation publishStoreAsyncWithHttpInfo
     *
     * Publish store
     *
     * @param  int $store_id Store identifier (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function publishStoreAsyncWithHttpInfo($store_id)
    {
        $returnType = '';
        $request = $this->publishStoreRequest($store_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'publishStore'
     *
     * @param  int $store_id Store identifier (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function publishStoreRequest($store_id)
    {
        // verify the required parameter 'store_id' is set
        if ($store_id === null || (is_array($store_id) && count($store_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $store_id when calling publishStore'
            );
        }

        $resourcePath = '/api/v1.0/stores/{storeId}/publish';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($store_id !== null) {
            $resourcePath = str_replace(
                '{' . 'storeId' . '}',
                ObjectSerializer::toPathValue($store_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation setBusinessHours
     *
     * Set Business hours
     *
     * @param  int $store_id Store identifier (required)
     * @param  string $delivery_type Delivery type (required)
     * @param  \Flipdish\Client\Models\BusinessHoursPeriodBase $business_hours_period Business Hours Period (required)
     *
     * @throws \Flipdish\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Flipdish\Client\Models\RestApiResultBusinessHoursPeriod
     */
    public function setBusinessHours($store_id, $delivery_type, $business_hours_period)
    {
        list($response) = $this->setBusinessHoursWithHttpInfo($store_id, $delivery_type, $business_hours_period);
        return $response;
    }

    /**
     * Operation setBusinessHoursWithHttpInfo
     *
     * Set Business hours
     *
     * @param  int $store_id Store identifier (required)
     * @param  string $delivery_type Delivery type (required)
     * @param  \Flipdish\Client\Models\BusinessHoursPeriodBase $business_hours_period Business Hours Period (required)
     *
     * @throws \Flipdish\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Flipdish\Client\Models\RestApiResultBusinessHoursPeriod, HTTP status code, HTTP response headers (array of strings)
     */
    public function setBusinessHoursWithHttpInfo($store_id, $delivery_type, $business_hours_period)
    {
        $returnType = '\Flipdish\Client\Models\RestApiResultBusinessHoursPeriod';
        $request = $this->setBusinessHoursRequest($store_id, $delivery_type, $business_hours_period);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Flipdish\Client\Models\RestApiResultBusinessHoursPeriod',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Flipdish\Client\Models\RestApiUnauthorizedResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Flipdish\Client\Models\RestApiForbiddenResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation setBusinessHoursAsync
     *
     * Set Business hours
     *
     * @param  int $store_id Store identifier (required)
     * @param  string $delivery_type Delivery type (required)
     * @param  \Flipdish\Client\Models\BusinessHoursPeriodBase $business_hours_period Business Hours Period (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function setBusinessHoursAsync($store_id, $delivery_type, $business_hours_period)
    {
        return $this->setBusinessHoursAsyncWithHttpInfo($store_id, $delivery_type, $business_hours_period)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation setBusinessHoursAsyncWithHttpInfo
     *
     * Set Business hours
     *
     * @param  int $store_id Store identifier (required)
     * @param  string $delivery_type Delivery type (required)
     * @param  \Flipdish\Client\Models\BusinessHoursPeriodBase $business_hours_period Business Hours Period (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function setBusinessHoursAsyncWithHttpInfo($store_id, $delivery_type, $business_hours_period)
    {
        $returnType = '\Flipdish\Client\Models\RestApiResultBusinessHoursPeriod';
        $request = $this->setBusinessHoursRequest($store_id, $delivery_type, $business_hours_period);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'setBusinessHours'
     *
     * @param  int $store_id Store identifier (required)
     * @param  string $delivery_type Delivery type (required)
     * @param  \Flipdish\Client\Models\BusinessHoursPeriodBase $business_hours_period Business Hours Period (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function setBusinessHoursRequest($store_id, $delivery_type, $business_hours_period)
    {
        // verify the required parameter 'store_id' is set
        if ($store_id === null || (is_array($store_id) && count($store_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $store_id when calling setBusinessHours'
            );
        }
        // verify the required parameter 'delivery_type' is set
        if ($delivery_type === null || (is_array($delivery_type) && count($delivery_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $delivery_type when calling setBusinessHours'
            );
        }
        // verify the required parameter 'business_hours_period' is set
        if ($business_hours_period === null || (is_array($business_hours_period) && count($business_hours_period) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $business_hours_period when calling setBusinessHours'
            );
        }

        $resourcePath = '/api/v1.0/stores/{storeId}/availability/{deliveryType}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($store_id !== null) {
            $resourcePath = str_replace(
                '{' . 'storeId' . '}',
                ObjectSerializer::toPathValue($store_id),
                $resourcePath
            );
        }
        // path params
        if ($delivery_type !== null) {
            $resourcePath = str_replace(
                '{' . 'deliveryType' . '}',
                ObjectSerializer::toPathValue($delivery_type),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($business_hours_period)) {
            $_tempBody = $business_hours_period;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml'],
                ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation setPreOrdeEnabled
     *
     * UPDATE pre order config for a store, by type
     *
     * @param  int $store_id Store identifier (required)
     * @param  string $delivery_type \&quot;delivery\&quot; or \&quot;pickup\&quot; (required)
     * @param  bool $enabled Update pre order config values (required)
     *
     * @throws \Flipdish\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Flipdish\Client\Models\RestApiArrayResultRestApiDefaultResponse
     */
    public function setPreOrdeEnabled($store_id, $delivery_type, $enabled)
    {
        list($response) = $this->setPreOrdeEnabledWithHttpInfo($store_id, $delivery_type, $enabled);
        return $response;
    }

    /**
     * Operation setPreOrdeEnabledWithHttpInfo
     *
     * UPDATE pre order config for a store, by type
     *
     * @param  int $store_id Store identifier (required)
     * @param  string $delivery_type \&quot;delivery\&quot; or \&quot;pickup\&quot; (required)
     * @param  bool $enabled Update pre order config values (required)
     *
     * @throws \Flipdish\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Flipdish\Client\Models\RestApiArrayResultRestApiDefaultResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function setPreOrdeEnabledWithHttpInfo($store_id, $delivery_type, $enabled)
    {
        $returnType = '\Flipdish\Client\Models\RestApiArrayResultRestApiDefaultResponse';
        $request = $this->setPreOrdeEnabledRequest($store_id, $delivery_type, $enabled);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Flipdish\Client\Models\RestApiArrayResultRestApiDefaultResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Flipdish\Client\Models\RestApiErrorResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Flipdish\Client\Models\RestApiUnauthorizedResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Flipdish\Client\Models\RestApiForbiddenResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation setPreOrdeEnabledAsync
     *
     * UPDATE pre order config for a store, by type
     *
     * @param  int $store_id Store identifier (required)
     * @param  string $delivery_type \&quot;delivery\&quot; or \&quot;pickup\&quot; (required)
     * @param  bool $enabled Update pre order config values (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function setPreOrdeEnabledAsync($store_id, $delivery_type, $enabled)
    {
        return $this->setPreOrdeEnabledAsyncWithHttpInfo($store_id, $delivery_type, $enabled)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation setPreOrdeEnabledAsyncWithHttpInfo
     *
     * UPDATE pre order config for a store, by type
     *
     * @param  int $store_id Store identifier (required)
     * @param  string $delivery_type \&quot;delivery\&quot; or \&quot;pickup\&quot; (required)
     * @param  bool $enabled Update pre order config values (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function setPreOrdeEnabledAsyncWithHttpInfo($store_id, $delivery_type, $enabled)
    {
        $returnType = '\Flipdish\Client\Models\RestApiArrayResultRestApiDefaultResponse';
        $request = $this->setPreOrdeEnabledRequest($store_id, $delivery_type, $enabled);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'setPreOrdeEnabled'
     *
     * @param  int $store_id Store identifier (required)
     * @param  string $delivery_type \&quot;delivery\&quot; or \&quot;pickup\&quot; (required)
     * @param  bool $enabled Update pre order config values (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function setPreOrdeEnabledRequest($store_id, $delivery_type, $enabled)
    {
        // verify the required parameter 'store_id' is set
        if ($store_id === null || (is_array($store_id) && count($store_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $store_id when calling setPreOrdeEnabled'
            );
        }
        // verify the required parameter 'delivery_type' is set
        if ($delivery_type === null || (is_array($delivery_type) && count($delivery_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $delivery_type when calling setPreOrdeEnabled'
            );
        }
        // verify the required parameter 'enabled' is set
        if ($enabled === null || (is_array($enabled) && count($enabled) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $enabled when calling setPreOrdeEnabled'
            );
        }

        $resourcePath = '/api/v1.0/stores/{storeId}/preorderconfig/{deliveryType}/enabled';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($enabled !== null) {
            $queryParams['enabled'] = ObjectSerializer::toQueryValue($enabled);
        }

        // path params
        if ($store_id !== null) {
            $resourcePath = str_replace(
                '{' . 'storeId' . '}',
                ObjectSerializer::toPathValue($store_id),
                $resourcePath
            );
        }
        // path params
        if ($delivery_type !== null) {
            $resourcePath = str_replace(
                '{' . 'deliveryType' . '}',
                ObjectSerializer::toPathValue($delivery_type),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation unpublishStore
     *
     * Unpublish store
     *
     * @param  int $store_id Store identifier (required)
     *
     * @throws \Flipdish\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function unpublishStore($store_id)
    {
        $this->unpublishStoreWithHttpInfo($store_id);
    }

    /**
     * Operation unpublishStoreWithHttpInfo
     *
     * Unpublish store
     *
     * @param  int $store_id Store identifier (required)
     *
     * @throws \Flipdish\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function unpublishStoreWithHttpInfo($store_id)
    {
        $returnType = '';
        $request = $this->unpublishStoreRequest($store_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Flipdish\Client\Models\RestApiErrorResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Flipdish\Client\Models\RestApiUnauthorizedResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Flipdish\Client\Models\RestApiForbiddenResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation unpublishStoreAsync
     *
     * Unpublish store
     *
     * @param  int $store_id Store identifier (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function unpublishStoreAsync($store_id)
    {
        return $this->unpublishStoreAsyncWithHttpInfo($store_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation unpublishStoreAsyncWithHttpInfo
     *
     * Unpublish store
     *
     * @param  int $store_id Store identifier (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function unpublishStoreAsyncWithHttpInfo($store_id)
    {
        $returnType = '';
        $request = $this->unpublishStoreRequest($store_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'unpublishStore'
     *
     * @param  int $store_id Store identifier (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function unpublishStoreRequest($store_id)
    {
        // verify the required parameter 'store_id' is set
        if ($store_id === null || (is_array($store_id) && count($store_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $store_id when calling unpublishStore'
            );
        }

        $resourcePath = '/api/v1.0/stores/{storeId}/unpublish';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($store_id !== null) {
            $resourcePath = str_replace(
                '{' . 'storeId' . '}',
                ObjectSerializer::toPathValue($store_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updatePreOrderConfig
     *
     * UPDATE pre order config for a store, by type
     *
     * @param  int $store_id Store identifier (required)
     * @param  string $delivery_type \&quot;delivery\&quot; or \&quot;pickup\&quot; (required)
     * @param  \Flipdish\Client\Models\PreOrderConfig $pre_order_config Update pre order config values (required)
     *
     * @throws \Flipdish\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Flipdish\Client\Models\RestApiArrayResultRestApiDefaultResponse
     */
    public function updatePreOrderConfig($store_id, $delivery_type, $pre_order_config)
    {
        list($response) = $this->updatePreOrderConfigWithHttpInfo($store_id, $delivery_type, $pre_order_config);
        return $response;
    }

    /**
     * Operation updatePreOrderConfigWithHttpInfo
     *
     * UPDATE pre order config for a store, by type
     *
     * @param  int $store_id Store identifier (required)
     * @param  string $delivery_type \&quot;delivery\&quot; or \&quot;pickup\&quot; (required)
     * @param  \Flipdish\Client\Models\PreOrderConfig $pre_order_config Update pre order config values (required)
     *
     * @throws \Flipdish\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Flipdish\Client\Models\RestApiArrayResultRestApiDefaultResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updatePreOrderConfigWithHttpInfo($store_id, $delivery_type, $pre_order_config)
    {
        $returnType = '\Flipdish\Client\Models\RestApiArrayResultRestApiDefaultResponse';
        $request = $this->updatePreOrderConfigRequest($store_id, $delivery_type, $pre_order_config);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Flipdish\Client\Models\RestApiArrayResultRestApiDefaultResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Flipdish\Client\Models\RestApiErrorResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Flipdish\Client\Models\RestApiUnauthorizedResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Flipdish\Client\Models\RestApiForbiddenResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updatePreOrderConfigAsync
     *
     * UPDATE pre order config for a store, by type
     *
     * @param  int $store_id Store identifier (required)
     * @param  string $delivery_type \&quot;delivery\&quot; or \&quot;pickup\&quot; (required)
     * @param  \Flipdish\Client\Models\PreOrderConfig $pre_order_config Update pre order config values (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updatePreOrderConfigAsync($store_id, $delivery_type, $pre_order_config)
    {
        return $this->updatePreOrderConfigAsyncWithHttpInfo($store_id, $delivery_type, $pre_order_config)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updatePreOrderConfigAsyncWithHttpInfo
     *
     * UPDATE pre order config for a store, by type
     *
     * @param  int $store_id Store identifier (required)
     * @param  string $delivery_type \&quot;delivery\&quot; or \&quot;pickup\&quot; (required)
     * @param  \Flipdish\Client\Models\PreOrderConfig $pre_order_config Update pre order config values (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updatePreOrderConfigAsyncWithHttpInfo($store_id, $delivery_type, $pre_order_config)
    {
        $returnType = '\Flipdish\Client\Models\RestApiArrayResultRestApiDefaultResponse';
        $request = $this->updatePreOrderConfigRequest($store_id, $delivery_type, $pre_order_config);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updatePreOrderConfig'
     *
     * @param  int $store_id Store identifier (required)
     * @param  string $delivery_type \&quot;delivery\&quot; or \&quot;pickup\&quot; (required)
     * @param  \Flipdish\Client\Models\PreOrderConfig $pre_order_config Update pre order config values (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updatePreOrderConfigRequest($store_id, $delivery_type, $pre_order_config)
    {
        // verify the required parameter 'store_id' is set
        if ($store_id === null || (is_array($store_id) && count($store_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $store_id when calling updatePreOrderConfig'
            );
        }
        // verify the required parameter 'delivery_type' is set
        if ($delivery_type === null || (is_array($delivery_type) && count($delivery_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $delivery_type when calling updatePreOrderConfig'
            );
        }
        // verify the required parameter 'pre_order_config' is set
        if ($pre_order_config === null || (is_array($pre_order_config) && count($pre_order_config) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $pre_order_config when calling updatePreOrderConfig'
            );
        }

        $resourcePath = '/api/v1.0/stores/{storeId}/preorderconfig/{deliveryType}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($store_id !== null) {
            $resourcePath = str_replace(
                '{' . 'storeId' . '}',
                ObjectSerializer::toPathValue($store_id),
                $resourcePath
            );
        }
        // path params
        if ($delivery_type !== null) {
            $resourcePath = str_replace(
                '{' . 'deliveryType' . '}',
                ObjectSerializer::toPathValue($delivery_type),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($pre_order_config)) {
            $_tempBody = $pre_order_config;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml'],
                ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateStore
     *
     * Update store by identifier
     *
     * @param  int $store_id Store Group identifier (required)
     * @param  \Flipdish\Client\Models\StoreBase $store Store (required)
     *
     * @throws \Flipdish\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Flipdish\Client\Models\RestApiResultStore
     */
    public function updateStore($store_id, $store)
    {
        list($response) = $this->updateStoreWithHttpInfo($store_id, $store);
        return $response;
    }

    /**
     * Operation updateStoreWithHttpInfo
     *
     * Update store by identifier
     *
     * @param  int $store_id Store Group identifier (required)
     * @param  \Flipdish\Client\Models\StoreBase $store Store (required)
     *
     * @throws \Flipdish\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Flipdish\Client\Models\RestApiResultStore, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateStoreWithHttpInfo($store_id, $store)
    {
        $returnType = '\Flipdish\Client\Models\RestApiResultStore';
        $request = $this->updateStoreRequest($store_id, $store);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Flipdish\Client\Models\RestApiResultStore',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Flipdish\Client\Models\RestApiErrorResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Flipdish\Client\Models\RestApiUnauthorizedResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Flipdish\Client\Models\RestApiForbiddenResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateStoreAsync
     *
     * Update store by identifier
     *
     * @param  int $store_id Store Group identifier (required)
     * @param  \Flipdish\Client\Models\StoreBase $store Store (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateStoreAsync($store_id, $store)
    {
        return $this->updateStoreAsyncWithHttpInfo($store_id, $store)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateStoreAsyncWithHttpInfo
     *
     * Update store by identifier
     *
     * @param  int $store_id Store Group identifier (required)
     * @param  \Flipdish\Client\Models\StoreBase $store Store (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateStoreAsyncWithHttpInfo($store_id, $store)
    {
        $returnType = '\Flipdish\Client\Models\RestApiResultStore';
        $request = $this->updateStoreRequest($store_id, $store);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateStore'
     *
     * @param  int $store_id Store Group identifier (required)
     * @param  \Flipdish\Client\Models\StoreBase $store Store (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateStoreRequest($store_id, $store)
    {
        // verify the required parameter 'store_id' is set
        if ($store_id === null || (is_array($store_id) && count($store_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $store_id when calling updateStore'
            );
        }
        // verify the required parameter 'store' is set
        if ($store === null || (is_array($store) && count($store) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $store when calling updateStore'
            );
        }

        $resourcePath = '/api/v1.0/stores/{storeId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($store_id !== null) {
            $resourcePath = str_replace(
                '{' . 'storeId' . '}',
                ObjectSerializer::toPathValue($store_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($store)) {
            $_tempBody = $store;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml'],
                ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateStoreAddress
     *
     * Update store address
     *
     * @param  int $store_id Store identifier (required)
     * @param  \Flipdish\Client\Models\StoreAddressBase $store_address Store address (required)
     *
     * @throws \Flipdish\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Flipdish\Client\Models\RestApiResultStoreAddress
     */
    public function updateStoreAddress($store_id, $store_address)
    {
        list($response) = $this->updateStoreAddressWithHttpInfo($store_id, $store_address);
        return $response;
    }

    /**
     * Operation updateStoreAddressWithHttpInfo
     *
     * Update store address
     *
     * @param  int $store_id Store identifier (required)
     * @param  \Flipdish\Client\Models\StoreAddressBase $store_address Store address (required)
     *
     * @throws \Flipdish\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Flipdish\Client\Models\RestApiResultStoreAddress, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateStoreAddressWithHttpInfo($store_id, $store_address)
    {
        $returnType = '\Flipdish\Client\Models\RestApiResultStoreAddress';
        $request = $this->updateStoreAddressRequest($store_id, $store_address);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Flipdish\Client\Models\RestApiResultStoreAddress',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Flipdish\Client\Models\RestApiErrorResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Flipdish\Client\Models\RestApiUnauthorizedResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Flipdish\Client\Models\RestApiForbiddenResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateStoreAddressAsync
     *
     * Update store address
     *
     * @param  int $store_id Store identifier (required)
     * @param  \Flipdish\Client\Models\StoreAddressBase $store_address Store address (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateStoreAddressAsync($store_id, $store_address)
    {
        return $this->updateStoreAddressAsyncWithHttpInfo($store_id, $store_address)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateStoreAddressAsyncWithHttpInfo
     *
     * Update store address
     *
     * @param  int $store_id Store identifier (required)
     * @param  \Flipdish\Client\Models\StoreAddressBase $store_address Store address (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateStoreAddressAsyncWithHttpInfo($store_id, $store_address)
    {
        $returnType = '\Flipdish\Client\Models\RestApiResultStoreAddress';
        $request = $this->updateStoreAddressRequest($store_id, $store_address);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateStoreAddress'
     *
     * @param  int $store_id Store identifier (required)
     * @param  \Flipdish\Client\Models\StoreAddressBase $store_address Store address (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateStoreAddressRequest($store_id, $store_address)
    {
        // verify the required parameter 'store_id' is set
        if ($store_id === null || (is_array($store_id) && count($store_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $store_id when calling updateStoreAddress'
            );
        }
        // verify the required parameter 'store_address' is set
        if ($store_address === null || (is_array($store_address) && count($store_address) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $store_address when calling updateStoreAddress'
            );
        }

        $resourcePath = '/api/v1.0/stores/{storeId}/address';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($store_id !== null) {
            $resourcePath = str_replace(
                '{' . 'storeId' . '}',
                ObjectSerializer::toPathValue($store_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($store_address)) {
            $_tempBody = $store_address;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml'],
                ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateStoreAddressCoordinates
     *
     * Update store address coordinates
     *
     * @param  int $store_id Store identifier (required)
     * @param  \Flipdish\Client\Models\Coordinates $coordinates Store address coordinates (required)
     * @param  string $app_name_id App Name Id(Not used, still here for compatability reasons) (optional)
     *
     * @throws \Flipdish\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Flipdish\Client\Models\RestApiResultCoordinates
     */
    public function updateStoreAddressCoordinates($store_id, $coordinates, $app_name_id = null)
    {
        list($response) = $this->updateStoreAddressCoordinatesWithHttpInfo($store_id, $coordinates, $app_name_id);
        return $response;
    }

    /**
     * Operation updateStoreAddressCoordinatesWithHttpInfo
     *
     * Update store address coordinates
     *
     * @param  int $store_id Store identifier (required)
     * @param  \Flipdish\Client\Models\Coordinates $coordinates Store address coordinates (required)
     * @param  string $app_name_id App Name Id(Not used, still here for compatability reasons) (optional)
     *
     * @throws \Flipdish\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Flipdish\Client\Models\RestApiResultCoordinates, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateStoreAddressCoordinatesWithHttpInfo($store_id, $coordinates, $app_name_id = null)
    {
        $returnType = '\Flipdish\Client\Models\RestApiResultCoordinates';
        $request = $this->updateStoreAddressCoordinatesRequest($store_id, $coordinates, $app_name_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Flipdish\Client\Models\RestApiResultCoordinates',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Flipdish\Client\Models\RestApiErrorResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Flipdish\Client\Models\RestApiUnauthorizedResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Flipdish\Client\Models\RestApiForbiddenResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateStoreAddressCoordinatesAsync
     *
     * Update store address coordinates
     *
     * @param  int $store_id Store identifier (required)
     * @param  \Flipdish\Client\Models\Coordinates $coordinates Store address coordinates (required)
     * @param  string $app_name_id App Name Id(Not used, still here for compatability reasons) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateStoreAddressCoordinatesAsync($store_id, $coordinates, $app_name_id = null)
    {
        return $this->updateStoreAddressCoordinatesAsyncWithHttpInfo($store_id, $coordinates, $app_name_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateStoreAddressCoordinatesAsyncWithHttpInfo
     *
     * Update store address coordinates
     *
     * @param  int $store_id Store identifier (required)
     * @param  \Flipdish\Client\Models\Coordinates $coordinates Store address coordinates (required)
     * @param  string $app_name_id App Name Id(Not used, still here for compatability reasons) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateStoreAddressCoordinatesAsyncWithHttpInfo($store_id, $coordinates, $app_name_id = null)
    {
        $returnType = '\Flipdish\Client\Models\RestApiResultCoordinates';
        $request = $this->updateStoreAddressCoordinatesRequest($store_id, $coordinates, $app_name_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateStoreAddressCoordinates'
     *
     * @param  int $store_id Store identifier (required)
     * @param  \Flipdish\Client\Models\Coordinates $coordinates Store address coordinates (required)
     * @param  string $app_name_id App Name Id(Not used, still here for compatability reasons) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateStoreAddressCoordinatesRequest($store_id, $coordinates, $app_name_id = null)
    {
        // verify the required parameter 'store_id' is set
        if ($store_id === null || (is_array($store_id) && count($store_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $store_id when calling updateStoreAddressCoordinates'
            );
        }
        // verify the required parameter 'coordinates' is set
        if ($coordinates === null || (is_array($coordinates) && count($coordinates) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $coordinates when calling updateStoreAddressCoordinates'
            );
        }

        $resourcePath = '/api/v1.0/stores/{storeId}/address/coordinates';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($app_name_id !== null) {
            $queryParams['appNameId'] = ObjectSerializer::toQueryValue($app_name_id);
        }

        // path params
        if ($store_id !== null) {
            $resourcePath = str_replace(
                '{' . 'storeId' . '}',
                ObjectSerializer::toPathValue($store_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($coordinates)) {
            $_tempBody = $coordinates;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml'],
                ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
