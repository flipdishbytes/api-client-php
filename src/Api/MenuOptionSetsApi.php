<?php
/**
 * MenuOptionSetsApi
 * PHP version 5
 *
 * @category Class
 * @package  Flipdish\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Flipdish Open API v1.0
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.19
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Flipdish\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Flipdish\Client\ApiException;
use Flipdish\Client\Configuration;
use Flipdish\Client\HeaderSelector;
use Flipdish\Client\ObjectSerializer;

/**
 * MenuOptionSetsApi Class Doc Comment
 *
 * @category Class
 * @package  Flipdish\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class MenuOptionSetsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation createMenuItemOptionSet
     *
     * Create menu item option set
     *
     * @param  int $menu_id Menu identifier (required)
     * @param  int $menu_section_id Menu section identifier (required)
     * @param  int $menu_section_item_id Menu section item identifier (required)
     * @param  \Flipdish\Client\Models\MenuItemOptionSetBase $menu_item_option_set Menu item option set (required)
     *
     * @throws \Flipdish\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object
     */
    public function createMenuItemOptionSet($menu_id, $menu_section_id, $menu_section_item_id, $menu_item_option_set)
    {
        list($response) = $this->createMenuItemOptionSetWithHttpInfo($menu_id, $menu_section_id, $menu_section_item_id, $menu_item_option_set);
        return $response;
    }

    /**
     * Operation createMenuItemOptionSetWithHttpInfo
     *
     * Create menu item option set
     *
     * @param  int $menu_id Menu identifier (required)
     * @param  int $menu_section_id Menu section identifier (required)
     * @param  int $menu_section_item_id Menu section item identifier (required)
     * @param  \Flipdish\Client\Models\MenuItemOptionSetBase $menu_item_option_set Menu item option set (required)
     *
     * @throws \Flipdish\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function createMenuItemOptionSetWithHttpInfo($menu_id, $menu_section_id, $menu_section_item_id, $menu_item_option_set)
    {
        $returnType = 'object';
        $request = $this->createMenuItemOptionSetRequest($menu_id, $menu_section_id, $menu_section_item_id, $menu_item_option_set);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Flipdish\Client\Models\RestApiResultMenuItemOptionSet',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Flipdish\Client\Models\RestApiErrorResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Flipdish\Client\Models\RestApiUnauthorizedResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Flipdish\Client\Models\RestApiForbiddenResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createMenuItemOptionSetAsync
     *
     * Create menu item option set
     *
     * @param  int $menu_id Menu identifier (required)
     * @param  int $menu_section_id Menu section identifier (required)
     * @param  int $menu_section_item_id Menu section item identifier (required)
     * @param  \Flipdish\Client\Models\MenuItemOptionSetBase $menu_item_option_set Menu item option set (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createMenuItemOptionSetAsync($menu_id, $menu_section_id, $menu_section_item_id, $menu_item_option_set)
    {
        return $this->createMenuItemOptionSetAsyncWithHttpInfo($menu_id, $menu_section_id, $menu_section_item_id, $menu_item_option_set)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createMenuItemOptionSetAsyncWithHttpInfo
     *
     * Create menu item option set
     *
     * @param  int $menu_id Menu identifier (required)
     * @param  int $menu_section_id Menu section identifier (required)
     * @param  int $menu_section_item_id Menu section item identifier (required)
     * @param  \Flipdish\Client\Models\MenuItemOptionSetBase $menu_item_option_set Menu item option set (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createMenuItemOptionSetAsyncWithHttpInfo($menu_id, $menu_section_id, $menu_section_item_id, $menu_item_option_set)
    {
        $returnType = 'object';
        $request = $this->createMenuItemOptionSetRequest($menu_id, $menu_section_id, $menu_section_item_id, $menu_item_option_set);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createMenuItemOptionSet'
     *
     * @param  int $menu_id Menu identifier (required)
     * @param  int $menu_section_id Menu section identifier (required)
     * @param  int $menu_section_item_id Menu section item identifier (required)
     * @param  \Flipdish\Client\Models\MenuItemOptionSetBase $menu_item_option_set Menu item option set (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function createMenuItemOptionSetRequest($menu_id, $menu_section_id, $menu_section_item_id, $menu_item_option_set)
    {
        // verify the required parameter 'menu_id' is set
        if ($menu_id === null || (is_array($menu_id) && count($menu_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $menu_id when calling createMenuItemOptionSet'
            );
        }
        // verify the required parameter 'menu_section_id' is set
        if ($menu_section_id === null || (is_array($menu_section_id) && count($menu_section_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $menu_section_id when calling createMenuItemOptionSet'
            );
        }
        // verify the required parameter 'menu_section_item_id' is set
        if ($menu_section_item_id === null || (is_array($menu_section_item_id) && count($menu_section_item_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $menu_section_item_id when calling createMenuItemOptionSet'
            );
        }
        // verify the required parameter 'menu_item_option_set' is set
        if ($menu_item_option_set === null || (is_array($menu_item_option_set) && count($menu_item_option_set) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $menu_item_option_set when calling createMenuItemOptionSet'
            );
        }

        $resourcePath = '/api/v1.0/menus/{menuId}/sections/{menuSectionId}/sectionitems/{menuSectionItemId}/optionsets';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($menu_id !== null) {
            $resourcePath = str_replace(
                '{' . 'menuId' . '}',
                ObjectSerializer::toPathValue($menu_id),
                $resourcePath
            );
        }
        // path params
        if ($menu_section_id !== null) {
            $resourcePath = str_replace(
                '{' . 'menuSectionId' . '}',
                ObjectSerializer::toPathValue($menu_section_id),
                $resourcePath
            );
        }
        // path params
        if ($menu_section_item_id !== null) {
            $resourcePath = str_replace(
                '{' . 'menuSectionItemId' . '}',
                ObjectSerializer::toPathValue($menu_section_item_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($menu_item_option_set)) {
            $_tempBody = $menu_item_option_set;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml'],
                ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteMenuItemOptionSet
     *
     * Delete menu item option set
     *
     * @param  int $menu_id Menu identifier (required)
     * @param  int $menu_section_item_id Menu section item identifier (required)
     * @param  int $menu_section_id Menu section identifier (required)
     * @param  int $option_set_id Option set identifier (required)
     *
     * @throws \Flipdish\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteMenuItemOptionSet($menu_id, $menu_section_item_id, $menu_section_id, $option_set_id)
    {
        $this->deleteMenuItemOptionSetWithHttpInfo($menu_id, $menu_section_item_id, $menu_section_id, $option_set_id);
    }

    /**
     * Operation deleteMenuItemOptionSetWithHttpInfo
     *
     * Delete menu item option set
     *
     * @param  int $menu_id Menu identifier (required)
     * @param  int $menu_section_item_id Menu section item identifier (required)
     * @param  int $menu_section_id Menu section identifier (required)
     * @param  int $option_set_id Option set identifier (required)
     *
     * @throws \Flipdish\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteMenuItemOptionSetWithHttpInfo($menu_id, $menu_section_item_id, $menu_section_id, $option_set_id)
    {
        $returnType = '';
        $request = $this->deleteMenuItemOptionSetRequest($menu_id, $menu_section_item_id, $menu_section_id, $option_set_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Flipdish\Client\Models\RestApiErrorResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Flipdish\Client\Models\RestApiUnauthorizedResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Flipdish\Client\Models\RestApiForbiddenResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteMenuItemOptionSetAsync
     *
     * Delete menu item option set
     *
     * @param  int $menu_id Menu identifier (required)
     * @param  int $menu_section_item_id Menu section item identifier (required)
     * @param  int $menu_section_id Menu section identifier (required)
     * @param  int $option_set_id Option set identifier (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteMenuItemOptionSetAsync($menu_id, $menu_section_item_id, $menu_section_id, $option_set_id)
    {
        return $this->deleteMenuItemOptionSetAsyncWithHttpInfo($menu_id, $menu_section_item_id, $menu_section_id, $option_set_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteMenuItemOptionSetAsyncWithHttpInfo
     *
     * Delete menu item option set
     *
     * @param  int $menu_id Menu identifier (required)
     * @param  int $menu_section_item_id Menu section item identifier (required)
     * @param  int $menu_section_id Menu section identifier (required)
     * @param  int $option_set_id Option set identifier (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteMenuItemOptionSetAsyncWithHttpInfo($menu_id, $menu_section_item_id, $menu_section_id, $option_set_id)
    {
        $returnType = '';
        $request = $this->deleteMenuItemOptionSetRequest($menu_id, $menu_section_item_id, $menu_section_id, $option_set_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteMenuItemOptionSet'
     *
     * @param  int $menu_id Menu identifier (required)
     * @param  int $menu_section_item_id Menu section item identifier (required)
     * @param  int $menu_section_id Menu section identifier (required)
     * @param  int $option_set_id Option set identifier (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteMenuItemOptionSetRequest($menu_id, $menu_section_item_id, $menu_section_id, $option_set_id)
    {
        // verify the required parameter 'menu_id' is set
        if ($menu_id === null || (is_array($menu_id) && count($menu_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $menu_id when calling deleteMenuItemOptionSet'
            );
        }
        // verify the required parameter 'menu_section_item_id' is set
        if ($menu_section_item_id === null || (is_array($menu_section_item_id) && count($menu_section_item_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $menu_section_item_id when calling deleteMenuItemOptionSet'
            );
        }
        // verify the required parameter 'menu_section_id' is set
        if ($menu_section_id === null || (is_array($menu_section_id) && count($menu_section_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $menu_section_id when calling deleteMenuItemOptionSet'
            );
        }
        // verify the required parameter 'option_set_id' is set
        if ($option_set_id === null || (is_array($option_set_id) && count($option_set_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $option_set_id when calling deleteMenuItemOptionSet'
            );
        }

        $resourcePath = '/api/v1.0/menus/{menuId}/sections/{menuSectionId}/sectionitems/{menuSectionItemId}/optionsets/{optionSetId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($menu_id !== null) {
            $resourcePath = str_replace(
                '{' . 'menuId' . '}',
                ObjectSerializer::toPathValue($menu_id),
                $resourcePath
            );
        }
        // path params
        if ($menu_section_item_id !== null) {
            $resourcePath = str_replace(
                '{' . 'menuSectionItemId' . '}',
                ObjectSerializer::toPathValue($menu_section_item_id),
                $resourcePath
            );
        }
        // path params
        if ($menu_section_id !== null) {
            $resourcePath = str_replace(
                '{' . 'menuSectionId' . '}',
                ObjectSerializer::toPathValue($menu_section_id),
                $resourcePath
            );
        }
        // path params
        if ($option_set_id !== null) {
            $resourcePath = str_replace(
                '{' . 'optionSetId' . '}',
                ObjectSerializer::toPathValue($option_set_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteOptionSetImage
     *
     * Delete option set image
     *
     * @param  int $menu_id Menu identifier (required)
     * @param  int $menu_section_id Menu section identifier (required)
     * @param  int $menu_section_item_id Menu section item identifier (required)
     * @param  int $option_set_id Option set identifier (required)
     *
     * @throws \Flipdish\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteOptionSetImage($menu_id, $menu_section_id, $menu_section_item_id, $option_set_id)
    {
        $this->deleteOptionSetImageWithHttpInfo($menu_id, $menu_section_id, $menu_section_item_id, $option_set_id);
    }

    /**
     * Operation deleteOptionSetImageWithHttpInfo
     *
     * Delete option set image
     *
     * @param  int $menu_id Menu identifier (required)
     * @param  int $menu_section_id Menu section identifier (required)
     * @param  int $menu_section_item_id Menu section item identifier (required)
     * @param  int $option_set_id Option set identifier (required)
     *
     * @throws \Flipdish\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteOptionSetImageWithHttpInfo($menu_id, $menu_section_id, $menu_section_item_id, $option_set_id)
    {
        $returnType = '';
        $request = $this->deleteOptionSetImageRequest($menu_id, $menu_section_id, $menu_section_item_id, $option_set_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Flipdish\Client\Models\RestApiErrorResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Flipdish\Client\Models\RestApiUnauthorizedResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Flipdish\Client\Models\RestApiForbiddenResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteOptionSetImageAsync
     *
     * Delete option set image
     *
     * @param  int $menu_id Menu identifier (required)
     * @param  int $menu_section_id Menu section identifier (required)
     * @param  int $menu_section_item_id Menu section item identifier (required)
     * @param  int $option_set_id Option set identifier (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteOptionSetImageAsync($menu_id, $menu_section_id, $menu_section_item_id, $option_set_id)
    {
        return $this->deleteOptionSetImageAsyncWithHttpInfo($menu_id, $menu_section_id, $menu_section_item_id, $option_set_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteOptionSetImageAsyncWithHttpInfo
     *
     * Delete option set image
     *
     * @param  int $menu_id Menu identifier (required)
     * @param  int $menu_section_id Menu section identifier (required)
     * @param  int $menu_section_item_id Menu section item identifier (required)
     * @param  int $option_set_id Option set identifier (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteOptionSetImageAsyncWithHttpInfo($menu_id, $menu_section_id, $menu_section_item_id, $option_set_id)
    {
        $returnType = '';
        $request = $this->deleteOptionSetImageRequest($menu_id, $menu_section_id, $menu_section_item_id, $option_set_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteOptionSetImage'
     *
     * @param  int $menu_id Menu identifier (required)
     * @param  int $menu_section_id Menu section identifier (required)
     * @param  int $menu_section_item_id Menu section item identifier (required)
     * @param  int $option_set_id Option set identifier (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteOptionSetImageRequest($menu_id, $menu_section_id, $menu_section_item_id, $option_set_id)
    {
        // verify the required parameter 'menu_id' is set
        if ($menu_id === null || (is_array($menu_id) && count($menu_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $menu_id when calling deleteOptionSetImage'
            );
        }
        // verify the required parameter 'menu_section_id' is set
        if ($menu_section_id === null || (is_array($menu_section_id) && count($menu_section_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $menu_section_id when calling deleteOptionSetImage'
            );
        }
        // verify the required parameter 'menu_section_item_id' is set
        if ($menu_section_item_id === null || (is_array($menu_section_item_id) && count($menu_section_item_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $menu_section_item_id when calling deleteOptionSetImage'
            );
        }
        // verify the required parameter 'option_set_id' is set
        if ($option_set_id === null || (is_array($option_set_id) && count($option_set_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $option_set_id when calling deleteOptionSetImage'
            );
        }

        $resourcePath = '/api/v1.0/menus/{menuId}/sections/{menuSectionId}/sectionitems/{menuSectionItemId}/optionsets/{optionSetId}/image';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($menu_id !== null) {
            $resourcePath = str_replace(
                '{' . 'menuId' . '}',
                ObjectSerializer::toPathValue($menu_id),
                $resourcePath
            );
        }
        // path params
        if ($menu_section_id !== null) {
            $resourcePath = str_replace(
                '{' . 'menuSectionId' . '}',
                ObjectSerializer::toPathValue($menu_section_id),
                $resourcePath
            );
        }
        // path params
        if ($menu_section_item_id !== null) {
            $resourcePath = str_replace(
                '{' . 'menuSectionItemId' . '}',
                ObjectSerializer::toPathValue($menu_section_item_id),
                $resourcePath
            );
        }
        // path params
        if ($option_set_id !== null) {
            $resourcePath = str_replace(
                '{' . 'optionSetId' . '}',
                ObjectSerializer::toPathValue($option_set_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getMenuItemOptionSetById
     *
     * Get menu item option set by identifier
     *
     * @param  int $menu_id Menu identifier (required)
     * @param  int $menu_section_id Menu section identifier (required)
     * @param  int $menu_section_item_id Menu section item identifier (required)
     * @param  int $option_set_id Menu item option set identifier (required)
     *
     * @throws \Flipdish\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Flipdish\Client\Models\RestApiResultMenuItemOptionSet
     */
    public function getMenuItemOptionSetById($menu_id, $menu_section_id, $menu_section_item_id, $option_set_id)
    {
        list($response) = $this->getMenuItemOptionSetByIdWithHttpInfo($menu_id, $menu_section_id, $menu_section_item_id, $option_set_id);
        return $response;
    }

    /**
     * Operation getMenuItemOptionSetByIdWithHttpInfo
     *
     * Get menu item option set by identifier
     *
     * @param  int $menu_id Menu identifier (required)
     * @param  int $menu_section_id Menu section identifier (required)
     * @param  int $menu_section_item_id Menu section item identifier (required)
     * @param  int $option_set_id Menu item option set identifier (required)
     *
     * @throws \Flipdish\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Flipdish\Client\Models\RestApiResultMenuItemOptionSet, HTTP status code, HTTP response headers (array of strings)
     */
    public function getMenuItemOptionSetByIdWithHttpInfo($menu_id, $menu_section_id, $menu_section_item_id, $option_set_id)
    {
        $returnType = '\Flipdish\Client\Models\RestApiResultMenuItemOptionSet';
        $request = $this->getMenuItemOptionSetByIdRequest($menu_id, $menu_section_id, $menu_section_item_id, $option_set_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Flipdish\Client\Models\RestApiResultMenuItemOptionSet',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Flipdish\Client\Models\RestApiErrorResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Flipdish\Client\Models\RestApiUnauthorizedResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Flipdish\Client\Models\RestApiForbiddenResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getMenuItemOptionSetByIdAsync
     *
     * Get menu item option set by identifier
     *
     * @param  int $menu_id Menu identifier (required)
     * @param  int $menu_section_id Menu section identifier (required)
     * @param  int $menu_section_item_id Menu section item identifier (required)
     * @param  int $option_set_id Menu item option set identifier (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getMenuItemOptionSetByIdAsync($menu_id, $menu_section_id, $menu_section_item_id, $option_set_id)
    {
        return $this->getMenuItemOptionSetByIdAsyncWithHttpInfo($menu_id, $menu_section_id, $menu_section_item_id, $option_set_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getMenuItemOptionSetByIdAsyncWithHttpInfo
     *
     * Get menu item option set by identifier
     *
     * @param  int $menu_id Menu identifier (required)
     * @param  int $menu_section_id Menu section identifier (required)
     * @param  int $menu_section_item_id Menu section item identifier (required)
     * @param  int $option_set_id Menu item option set identifier (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getMenuItemOptionSetByIdAsyncWithHttpInfo($menu_id, $menu_section_id, $menu_section_item_id, $option_set_id)
    {
        $returnType = '\Flipdish\Client\Models\RestApiResultMenuItemOptionSet';
        $request = $this->getMenuItemOptionSetByIdRequest($menu_id, $menu_section_id, $menu_section_item_id, $option_set_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getMenuItemOptionSetById'
     *
     * @param  int $menu_id Menu identifier (required)
     * @param  int $menu_section_id Menu section identifier (required)
     * @param  int $menu_section_item_id Menu section item identifier (required)
     * @param  int $option_set_id Menu item option set identifier (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getMenuItemOptionSetByIdRequest($menu_id, $menu_section_id, $menu_section_item_id, $option_set_id)
    {
        // verify the required parameter 'menu_id' is set
        if ($menu_id === null || (is_array($menu_id) && count($menu_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $menu_id when calling getMenuItemOptionSetById'
            );
        }
        // verify the required parameter 'menu_section_id' is set
        if ($menu_section_id === null || (is_array($menu_section_id) && count($menu_section_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $menu_section_id when calling getMenuItemOptionSetById'
            );
        }
        // verify the required parameter 'menu_section_item_id' is set
        if ($menu_section_item_id === null || (is_array($menu_section_item_id) && count($menu_section_item_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $menu_section_item_id when calling getMenuItemOptionSetById'
            );
        }
        // verify the required parameter 'option_set_id' is set
        if ($option_set_id === null || (is_array($option_set_id) && count($option_set_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $option_set_id when calling getMenuItemOptionSetById'
            );
        }

        $resourcePath = '/api/v1.0/menus/{menuId}/sections/{menuSectionId}/sectionitems/{menuSectionItemId}/optionsets/{optionSetId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($menu_id !== null) {
            $resourcePath = str_replace(
                '{' . 'menuId' . '}',
                ObjectSerializer::toPathValue($menu_id),
                $resourcePath
            );
        }
        // path params
        if ($menu_section_id !== null) {
            $resourcePath = str_replace(
                '{' . 'menuSectionId' . '}',
                ObjectSerializer::toPathValue($menu_section_id),
                $resourcePath
            );
        }
        // path params
        if ($menu_section_item_id !== null) {
            $resourcePath = str_replace(
                '{' . 'menuSectionItemId' . '}',
                ObjectSerializer::toPathValue($menu_section_item_id),
                $resourcePath
            );
        }
        // path params
        if ($option_set_id !== null) {
            $resourcePath = str_replace(
                '{' . 'optionSetId' . '}',
                ObjectSerializer::toPathValue($option_set_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getMenuItemOptionSets
     *
     * Get menu item option sets
     *
     * @param  int $menu_id Menu identifier (required)
     * @param  int $menu_section_id Menu section identifier (required)
     * @param  int $menu_section_item_id Menu section item identifier (required)
     *
     * @throws \Flipdish\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Flipdish\Client\Models\RestApiArrayResultMenuItemOptionSet
     */
    public function getMenuItemOptionSets($menu_id, $menu_section_id, $menu_section_item_id)
    {
        list($response) = $this->getMenuItemOptionSetsWithHttpInfo($menu_id, $menu_section_id, $menu_section_item_id);
        return $response;
    }

    /**
     * Operation getMenuItemOptionSetsWithHttpInfo
     *
     * Get menu item option sets
     *
     * @param  int $menu_id Menu identifier (required)
     * @param  int $menu_section_id Menu section identifier (required)
     * @param  int $menu_section_item_id Menu section item identifier (required)
     *
     * @throws \Flipdish\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Flipdish\Client\Models\RestApiArrayResultMenuItemOptionSet, HTTP status code, HTTP response headers (array of strings)
     */
    public function getMenuItemOptionSetsWithHttpInfo($menu_id, $menu_section_id, $menu_section_item_id)
    {
        $returnType = '\Flipdish\Client\Models\RestApiArrayResultMenuItemOptionSet';
        $request = $this->getMenuItemOptionSetsRequest($menu_id, $menu_section_id, $menu_section_item_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Flipdish\Client\Models\RestApiArrayResultMenuItemOptionSet',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Flipdish\Client\Models\RestApiErrorResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Flipdish\Client\Models\RestApiUnauthorizedResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Flipdish\Client\Models\RestApiForbiddenResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getMenuItemOptionSetsAsync
     *
     * Get menu item option sets
     *
     * @param  int $menu_id Menu identifier (required)
     * @param  int $menu_section_id Menu section identifier (required)
     * @param  int $menu_section_item_id Menu section item identifier (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getMenuItemOptionSetsAsync($menu_id, $menu_section_id, $menu_section_item_id)
    {
        return $this->getMenuItemOptionSetsAsyncWithHttpInfo($menu_id, $menu_section_id, $menu_section_item_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getMenuItemOptionSetsAsyncWithHttpInfo
     *
     * Get menu item option sets
     *
     * @param  int $menu_id Menu identifier (required)
     * @param  int $menu_section_id Menu section identifier (required)
     * @param  int $menu_section_item_id Menu section item identifier (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getMenuItemOptionSetsAsyncWithHttpInfo($menu_id, $menu_section_id, $menu_section_item_id)
    {
        $returnType = '\Flipdish\Client\Models\RestApiArrayResultMenuItemOptionSet';
        $request = $this->getMenuItemOptionSetsRequest($menu_id, $menu_section_id, $menu_section_item_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getMenuItemOptionSets'
     *
     * @param  int $menu_id Menu identifier (required)
     * @param  int $menu_section_id Menu section identifier (required)
     * @param  int $menu_section_item_id Menu section item identifier (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getMenuItemOptionSetsRequest($menu_id, $menu_section_id, $menu_section_item_id)
    {
        // verify the required parameter 'menu_id' is set
        if ($menu_id === null || (is_array($menu_id) && count($menu_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $menu_id when calling getMenuItemOptionSets'
            );
        }
        // verify the required parameter 'menu_section_id' is set
        if ($menu_section_id === null || (is_array($menu_section_id) && count($menu_section_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $menu_section_id when calling getMenuItemOptionSets'
            );
        }
        // verify the required parameter 'menu_section_item_id' is set
        if ($menu_section_item_id === null || (is_array($menu_section_item_id) && count($menu_section_item_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $menu_section_item_id when calling getMenuItemOptionSets'
            );
        }

        $resourcePath = '/api/v1.0/menus/{menuId}/sections/{menuSectionId}/sectionitems/{menuSectionItemId}/optionsets';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($menu_id !== null) {
            $resourcePath = str_replace(
                '{' . 'menuId' . '}',
                ObjectSerializer::toPathValue($menu_id),
                $resourcePath
            );
        }
        // path params
        if ($menu_section_id !== null) {
            $resourcePath = str_replace(
                '{' . 'menuSectionId' . '}',
                ObjectSerializer::toPathValue($menu_section_id),
                $resourcePath
            );
        }
        // path params
        if ($menu_section_item_id !== null) {
            $resourcePath = str_replace(
                '{' . 'menuSectionItemId' . '}',
                ObjectSerializer::toPathValue($menu_section_item_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateMenuItemOptionSet
     *
     * Update menu item option set
     *
     * @param  int $menu_id Menu identifier (required)
     * @param  int $menu_section_id Menu section identifier (required)
     * @param  int $menu_section_item_id Menu section item identifier (required)
     * @param  int $option_set_id Option set identifier (required)
     * @param  \Flipdish\Client\Models\MenuItemOptionSetBase $menu_item_option_set Menu item option set (delta) (required)
     *
     * @throws \Flipdish\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function updateMenuItemOptionSet($menu_id, $menu_section_id, $menu_section_item_id, $option_set_id, $menu_item_option_set)
    {
        $this->updateMenuItemOptionSetWithHttpInfo($menu_id, $menu_section_id, $menu_section_item_id, $option_set_id, $menu_item_option_set);
    }

    /**
     * Operation updateMenuItemOptionSetWithHttpInfo
     *
     * Update menu item option set
     *
     * @param  int $menu_id Menu identifier (required)
     * @param  int $menu_section_id Menu section identifier (required)
     * @param  int $menu_section_item_id Menu section item identifier (required)
     * @param  int $option_set_id Option set identifier (required)
     * @param  \Flipdish\Client\Models\MenuItemOptionSetBase $menu_item_option_set Menu item option set (delta) (required)
     *
     * @throws \Flipdish\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateMenuItemOptionSetWithHttpInfo($menu_id, $menu_section_id, $menu_section_item_id, $option_set_id, $menu_item_option_set)
    {
        $returnType = '';
        $request = $this->updateMenuItemOptionSetRequest($menu_id, $menu_section_id, $menu_section_item_id, $option_set_id, $menu_item_option_set);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Flipdish\Client\Models\RestApiErrorResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Flipdish\Client\Models\RestApiUnauthorizedResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Flipdish\Client\Models\RestApiForbiddenResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateMenuItemOptionSetAsync
     *
     * Update menu item option set
     *
     * @param  int $menu_id Menu identifier (required)
     * @param  int $menu_section_id Menu section identifier (required)
     * @param  int $menu_section_item_id Menu section item identifier (required)
     * @param  int $option_set_id Option set identifier (required)
     * @param  \Flipdish\Client\Models\MenuItemOptionSetBase $menu_item_option_set Menu item option set (delta) (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateMenuItemOptionSetAsync($menu_id, $menu_section_id, $menu_section_item_id, $option_set_id, $menu_item_option_set)
    {
        return $this->updateMenuItemOptionSetAsyncWithHttpInfo($menu_id, $menu_section_id, $menu_section_item_id, $option_set_id, $menu_item_option_set)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateMenuItemOptionSetAsyncWithHttpInfo
     *
     * Update menu item option set
     *
     * @param  int $menu_id Menu identifier (required)
     * @param  int $menu_section_id Menu section identifier (required)
     * @param  int $menu_section_item_id Menu section item identifier (required)
     * @param  int $option_set_id Option set identifier (required)
     * @param  \Flipdish\Client\Models\MenuItemOptionSetBase $menu_item_option_set Menu item option set (delta) (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateMenuItemOptionSetAsyncWithHttpInfo($menu_id, $menu_section_id, $menu_section_item_id, $option_set_id, $menu_item_option_set)
    {
        $returnType = '';
        $request = $this->updateMenuItemOptionSetRequest($menu_id, $menu_section_id, $menu_section_item_id, $option_set_id, $menu_item_option_set);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateMenuItemOptionSet'
     *
     * @param  int $menu_id Menu identifier (required)
     * @param  int $menu_section_id Menu section identifier (required)
     * @param  int $menu_section_item_id Menu section item identifier (required)
     * @param  int $option_set_id Option set identifier (required)
     * @param  \Flipdish\Client\Models\MenuItemOptionSetBase $menu_item_option_set Menu item option set (delta) (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateMenuItemOptionSetRequest($menu_id, $menu_section_id, $menu_section_item_id, $option_set_id, $menu_item_option_set)
    {
        // verify the required parameter 'menu_id' is set
        if ($menu_id === null || (is_array($menu_id) && count($menu_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $menu_id when calling updateMenuItemOptionSet'
            );
        }
        // verify the required parameter 'menu_section_id' is set
        if ($menu_section_id === null || (is_array($menu_section_id) && count($menu_section_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $menu_section_id when calling updateMenuItemOptionSet'
            );
        }
        // verify the required parameter 'menu_section_item_id' is set
        if ($menu_section_item_id === null || (is_array($menu_section_item_id) && count($menu_section_item_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $menu_section_item_id when calling updateMenuItemOptionSet'
            );
        }
        // verify the required parameter 'option_set_id' is set
        if ($option_set_id === null || (is_array($option_set_id) && count($option_set_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $option_set_id when calling updateMenuItemOptionSet'
            );
        }
        // verify the required parameter 'menu_item_option_set' is set
        if ($menu_item_option_set === null || (is_array($menu_item_option_set) && count($menu_item_option_set) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $menu_item_option_set when calling updateMenuItemOptionSet'
            );
        }

        $resourcePath = '/api/v1.0/menus/{menuId}/sections/{menuSectionId}/sectionitems/{menuSectionItemId}/optionsets/{optionSetId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($menu_id !== null) {
            $resourcePath = str_replace(
                '{' . 'menuId' . '}',
                ObjectSerializer::toPathValue($menu_id),
                $resourcePath
            );
        }
        // path params
        if ($menu_section_id !== null) {
            $resourcePath = str_replace(
                '{' . 'menuSectionId' . '}',
                ObjectSerializer::toPathValue($menu_section_id),
                $resourcePath
            );
        }
        // path params
        if ($menu_section_item_id !== null) {
            $resourcePath = str_replace(
                '{' . 'menuSectionItemId' . '}',
                ObjectSerializer::toPathValue($menu_section_item_id),
                $resourcePath
            );
        }
        // path params
        if ($option_set_id !== null) {
            $resourcePath = str_replace(
                '{' . 'optionSetId' . '}',
                ObjectSerializer::toPathValue($option_set_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($menu_item_option_set)) {
            $_tempBody = $menu_item_option_set;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml'],
                ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation uploadOptionSetImage
     *
     * Upload menu item option set image
     *
     * @param  int $menu_id Menu identifier (required)
     * @param  int $menu_section_id Menu section identifier (required)
     * @param  int $menu_section_item_id Menu section item identifier (required)
     * @param  int $option_set_id Option set identifier (required)
     * @param  \SplFileObject $image Option set image (required)
     *
     * @throws \Flipdish\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Flipdish\Client\Models\RestApiStringResult
     */
    public function uploadOptionSetImage($menu_id, $menu_section_id, $menu_section_item_id, $option_set_id, $image)
    {
        list($response) = $this->uploadOptionSetImageWithHttpInfo($menu_id, $menu_section_id, $menu_section_item_id, $option_set_id, $image);
        return $response;
    }

    /**
     * Operation uploadOptionSetImageWithHttpInfo
     *
     * Upload menu item option set image
     *
     * @param  int $menu_id Menu identifier (required)
     * @param  int $menu_section_id Menu section identifier (required)
     * @param  int $menu_section_item_id Menu section item identifier (required)
     * @param  int $option_set_id Option set identifier (required)
     * @param  \SplFileObject $image Option set image (required)
     *
     * @throws \Flipdish\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Flipdish\Client\Models\RestApiStringResult, HTTP status code, HTTP response headers (array of strings)
     */
    public function uploadOptionSetImageWithHttpInfo($menu_id, $menu_section_id, $menu_section_item_id, $option_set_id, $image)
    {
        $returnType = '\Flipdish\Client\Models\RestApiStringResult';
        $request = $this->uploadOptionSetImageRequest($menu_id, $menu_section_id, $menu_section_item_id, $option_set_id, $image);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Flipdish\Client\Models\RestApiStringResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Flipdish\Client\Models\RestApiErrorResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Flipdish\Client\Models\RestApiUnauthorizedResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Flipdish\Client\Models\RestApiForbiddenResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation uploadOptionSetImageAsync
     *
     * Upload menu item option set image
     *
     * @param  int $menu_id Menu identifier (required)
     * @param  int $menu_section_id Menu section identifier (required)
     * @param  int $menu_section_item_id Menu section item identifier (required)
     * @param  int $option_set_id Option set identifier (required)
     * @param  \SplFileObject $image Option set image (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function uploadOptionSetImageAsync($menu_id, $menu_section_id, $menu_section_item_id, $option_set_id, $image)
    {
        return $this->uploadOptionSetImageAsyncWithHttpInfo($menu_id, $menu_section_id, $menu_section_item_id, $option_set_id, $image)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation uploadOptionSetImageAsyncWithHttpInfo
     *
     * Upload menu item option set image
     *
     * @param  int $menu_id Menu identifier (required)
     * @param  int $menu_section_id Menu section identifier (required)
     * @param  int $menu_section_item_id Menu section item identifier (required)
     * @param  int $option_set_id Option set identifier (required)
     * @param  \SplFileObject $image Option set image (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function uploadOptionSetImageAsyncWithHttpInfo($menu_id, $menu_section_id, $menu_section_item_id, $option_set_id, $image)
    {
        $returnType = '\Flipdish\Client\Models\RestApiStringResult';
        $request = $this->uploadOptionSetImageRequest($menu_id, $menu_section_id, $menu_section_item_id, $option_set_id, $image);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'uploadOptionSetImage'
     *
     * @param  int $menu_id Menu identifier (required)
     * @param  int $menu_section_id Menu section identifier (required)
     * @param  int $menu_section_item_id Menu section item identifier (required)
     * @param  int $option_set_id Option set identifier (required)
     * @param  \SplFileObject $image Option set image (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function uploadOptionSetImageRequest($menu_id, $menu_section_id, $menu_section_item_id, $option_set_id, $image)
    {
        // verify the required parameter 'menu_id' is set
        if ($menu_id === null || (is_array($menu_id) && count($menu_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $menu_id when calling uploadOptionSetImage'
            );
        }
        // verify the required parameter 'menu_section_id' is set
        if ($menu_section_id === null || (is_array($menu_section_id) && count($menu_section_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $menu_section_id when calling uploadOptionSetImage'
            );
        }
        // verify the required parameter 'menu_section_item_id' is set
        if ($menu_section_item_id === null || (is_array($menu_section_item_id) && count($menu_section_item_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $menu_section_item_id when calling uploadOptionSetImage'
            );
        }
        // verify the required parameter 'option_set_id' is set
        if ($option_set_id === null || (is_array($option_set_id) && count($option_set_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $option_set_id when calling uploadOptionSetImage'
            );
        }
        // verify the required parameter 'image' is set
        if ($image === null || (is_array($image) && count($image) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $image when calling uploadOptionSetImage'
            );
        }

        $resourcePath = '/api/v1.0/menus/{menuId}/sections/{menuSectionId}/sectionitems/{menuSectionItemId}/optionsets/{optionSetId}/image';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($menu_id !== null) {
            $resourcePath = str_replace(
                '{' . 'menuId' . '}',
                ObjectSerializer::toPathValue($menu_id),
                $resourcePath
            );
        }
        // path params
        if ($menu_section_id !== null) {
            $resourcePath = str_replace(
                '{' . 'menuSectionId' . '}',
                ObjectSerializer::toPathValue($menu_section_id),
                $resourcePath
            );
        }
        // path params
        if ($menu_section_item_id !== null) {
            $resourcePath = str_replace(
                '{' . 'menuSectionItemId' . '}',
                ObjectSerializer::toPathValue($menu_section_item_id),
                $resourcePath
            );
        }
        // path params
        if ($option_set_id !== null) {
            $resourcePath = str_replace(
                '{' . 'optionSetId' . '}',
                ObjectSerializer::toPathValue($option_set_id),
                $resourcePath
            );
        }

        // form params
        if ($image !== null) {
            $multipart = true;
            $formParams['Image'] = \GuzzleHttp\Psr7\try_fopen(ObjectSerializer::toFormValue($image), 'rb');
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml'],
                ['multipart/form-data']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
