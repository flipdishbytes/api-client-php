<?php
/**
 * StripeCustomConnectApi
 * PHP version 5
 *
 * @category Class
 * @package  Flipdish\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Flipdish Open API v1.0
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.19
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Flipdish\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Flipdish\Client\ApiException;
use Flipdish\Client\Configuration;
use Flipdish\Client\HeaderSelector;
use Flipdish\Client\ObjectSerializer;

/**
 * StripeCustomConnectApi Class Doc Comment
 *
 * @category Class
 * @package  Flipdish\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class StripeCustomConnectApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation createBankAccountAndConnectedAccount
     *
     * Create a new Bank Account and Stripe connected account
     *
     * @param  string $app_id App Name (required)
     * @param  \Flipdish\Client\Models\BankAccountCreate $account Account to be created (required)
     *
     * @throws \Flipdish\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Flipdish\Client\Models\RestApiResultBankAccountDetail
     */
    public function createBankAccountAndConnectedAccount($app_id, $account)
    {
        list($response) = $this->createBankAccountAndConnectedAccountWithHttpInfo($app_id, $account);
        return $response;
    }

    /**
     * Operation createBankAccountAndConnectedAccountWithHttpInfo
     *
     * Create a new Bank Account and Stripe connected account
     *
     * @param  string $app_id App Name (required)
     * @param  \Flipdish\Client\Models\BankAccountCreate $account Account to be created (required)
     *
     * @throws \Flipdish\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Flipdish\Client\Models\RestApiResultBankAccountDetail, HTTP status code, HTTP response headers (array of strings)
     */
    public function createBankAccountAndConnectedAccountWithHttpInfo($app_id, $account)
    {
        $returnType = '\Flipdish\Client\Models\RestApiResultBankAccountDetail';
        $request = $this->createBankAccountAndConnectedAccountRequest($app_id, $account);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Flipdish\Client\Models\RestApiResultBankAccountDetail',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Flipdish\Client\Models\RestApiErrorResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Flipdish\Client\Models\RestApiUnauthorizedResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Flipdish\Client\Models\RestApiForbiddenResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createBankAccountAndConnectedAccountAsync
     *
     * Create a new Bank Account and Stripe connected account
     *
     * @param  string $app_id App Name (required)
     * @param  \Flipdish\Client\Models\BankAccountCreate $account Account to be created (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createBankAccountAndConnectedAccountAsync($app_id, $account)
    {
        return $this->createBankAccountAndConnectedAccountAsyncWithHttpInfo($app_id, $account)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createBankAccountAndConnectedAccountAsyncWithHttpInfo
     *
     * Create a new Bank Account and Stripe connected account
     *
     * @param  string $app_id App Name (required)
     * @param  \Flipdish\Client\Models\BankAccountCreate $account Account to be created (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createBankAccountAndConnectedAccountAsyncWithHttpInfo($app_id, $account)
    {
        $returnType = '\Flipdish\Client\Models\RestApiResultBankAccountDetail';
        $request = $this->createBankAccountAndConnectedAccountRequest($app_id, $account);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createBankAccountAndConnectedAccount'
     *
     * @param  string $app_id App Name (required)
     * @param  \Flipdish\Client\Models\BankAccountCreate $account Account to be created (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function createBankAccountAndConnectedAccountRequest($app_id, $account)
    {
        // verify the required parameter 'app_id' is set
        if ($app_id === null || (is_array($app_id) && count($app_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $app_id when calling createBankAccountAndConnectedAccount'
            );
        }
        // verify the required parameter 'account' is set
        if ($account === null || (is_array($account) && count($account) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $account when calling createBankAccountAndConnectedAccount'
            );
        }

        $resourcePath = '/api/v1.0/{appId}/customconnect/bank-account';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($app_id !== null) {
            $resourcePath = str_replace(
                '{' . 'appId' . '}',
                ObjectSerializer::toPathValue($app_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($account)) {
            $_tempBody = $account;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml'],
                ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createStripeConnectedAccount
     *
     * Create or update a Stripe connected account associated with the bank account of bankAccountId
     *
     * @param  string $app_id App Name Id (required)
     * @param  int $bank_account_id Bank Account Id (required)
     *
     * @throws \Flipdish\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Flipdish\Client\Models\RestApiResultStripeConnectedAccount
     */
    public function createStripeConnectedAccount($app_id, $bank_account_id)
    {
        list($response) = $this->createStripeConnectedAccountWithHttpInfo($app_id, $bank_account_id);
        return $response;
    }

    /**
     * Operation createStripeConnectedAccountWithHttpInfo
     *
     * Create or update a Stripe connected account associated with the bank account of bankAccountId
     *
     * @param  string $app_id App Name Id (required)
     * @param  int $bank_account_id Bank Account Id (required)
     *
     * @throws \Flipdish\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Flipdish\Client\Models\RestApiResultStripeConnectedAccount, HTTP status code, HTTP response headers (array of strings)
     */
    public function createStripeConnectedAccountWithHttpInfo($app_id, $bank_account_id)
    {
        $returnType = '\Flipdish\Client\Models\RestApiResultStripeConnectedAccount';
        $request = $this->createStripeConnectedAccountRequest($app_id, $bank_account_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Flipdish\Client\Models\RestApiResultStripeConnectedAccount',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Flipdish\Client\Models\RestApiErrorResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Flipdish\Client\Models\RestApiUnauthorizedResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Flipdish\Client\Models\RestApiForbiddenResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createStripeConnectedAccountAsync
     *
     * Create or update a Stripe connected account associated with the bank account of bankAccountId
     *
     * @param  string $app_id App Name Id (required)
     * @param  int $bank_account_id Bank Account Id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createStripeConnectedAccountAsync($app_id, $bank_account_id)
    {
        return $this->createStripeConnectedAccountAsyncWithHttpInfo($app_id, $bank_account_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createStripeConnectedAccountAsyncWithHttpInfo
     *
     * Create or update a Stripe connected account associated with the bank account of bankAccountId
     *
     * @param  string $app_id App Name Id (required)
     * @param  int $bank_account_id Bank Account Id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createStripeConnectedAccountAsyncWithHttpInfo($app_id, $bank_account_id)
    {
        $returnType = '\Flipdish\Client\Models\RestApiResultStripeConnectedAccount';
        $request = $this->createStripeConnectedAccountRequest($app_id, $bank_account_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createStripeConnectedAccount'
     *
     * @param  string $app_id App Name Id (required)
     * @param  int $bank_account_id Bank Account Id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function createStripeConnectedAccountRequest($app_id, $bank_account_id)
    {
        // verify the required parameter 'app_id' is set
        if ($app_id === null || (is_array($app_id) && count($app_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $app_id when calling createStripeConnectedAccount'
            );
        }
        // verify the required parameter 'bank_account_id' is set
        if ($bank_account_id === null || (is_array($bank_account_id) && count($bank_account_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $bank_account_id when calling createStripeConnectedAccount'
            );
        }

        $resourcePath = '/api/v1.0/{appId}/customconnect/{bankAccountId}/create-update-account';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($app_id !== null) {
            $resourcePath = str_replace(
                '{' . 'appId' . '}',
                ObjectSerializer::toPathValue($app_id),
                $resourcePath
            );
        }
        // path params
        if ($bank_account_id !== null) {
            $resourcePath = str_replace(
                '{' . 'bankAccountId' . '}',
                ObjectSerializer::toPathValue($bank_account_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createStripeConnectedAccountLink
     *
     * Gets a single-use Stripe URL for the given account
     *
     * @param  string $app_id App Name (required)
     * @param  string $stripe_connected_account_id Stripe Connected Account Id (required)
     * @param  \Flipdish\Client\Models\StripeAccountLinkRequest $stripe_account_link_request  (required)
     *
     * @throws \Flipdish\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Flipdish\Client\Models\RestApiResultStripeConnectedAccount
     */
    public function createStripeConnectedAccountLink($app_id, $stripe_connected_account_id, $stripe_account_link_request)
    {
        list($response) = $this->createStripeConnectedAccountLinkWithHttpInfo($app_id, $stripe_connected_account_id, $stripe_account_link_request);
        return $response;
    }

    /**
     * Operation createStripeConnectedAccountLinkWithHttpInfo
     *
     * Gets a single-use Stripe URL for the given account
     *
     * @param  string $app_id App Name (required)
     * @param  string $stripe_connected_account_id Stripe Connected Account Id (required)
     * @param  \Flipdish\Client\Models\StripeAccountLinkRequest $stripe_account_link_request  (required)
     *
     * @throws \Flipdish\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Flipdish\Client\Models\RestApiResultStripeConnectedAccount, HTTP status code, HTTP response headers (array of strings)
     */
    public function createStripeConnectedAccountLinkWithHttpInfo($app_id, $stripe_connected_account_id, $stripe_account_link_request)
    {
        $returnType = '\Flipdish\Client\Models\RestApiResultStripeConnectedAccount';
        $request = $this->createStripeConnectedAccountLinkRequest($app_id, $stripe_connected_account_id, $stripe_account_link_request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Flipdish\Client\Models\RestApiResultStripeConnectedAccount',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Flipdish\Client\Models\RestApiErrorResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Flipdish\Client\Models\RestApiUnauthorizedResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Flipdish\Client\Models\RestApiForbiddenResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createStripeConnectedAccountLinkAsync
     *
     * Gets a single-use Stripe URL for the given account
     *
     * @param  string $app_id App Name (required)
     * @param  string $stripe_connected_account_id Stripe Connected Account Id (required)
     * @param  \Flipdish\Client\Models\StripeAccountLinkRequest $stripe_account_link_request  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createStripeConnectedAccountLinkAsync($app_id, $stripe_connected_account_id, $stripe_account_link_request)
    {
        return $this->createStripeConnectedAccountLinkAsyncWithHttpInfo($app_id, $stripe_connected_account_id, $stripe_account_link_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createStripeConnectedAccountLinkAsyncWithHttpInfo
     *
     * Gets a single-use Stripe URL for the given account
     *
     * @param  string $app_id App Name (required)
     * @param  string $stripe_connected_account_id Stripe Connected Account Id (required)
     * @param  \Flipdish\Client\Models\StripeAccountLinkRequest $stripe_account_link_request  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createStripeConnectedAccountLinkAsyncWithHttpInfo($app_id, $stripe_connected_account_id, $stripe_account_link_request)
    {
        $returnType = '\Flipdish\Client\Models\RestApiResultStripeConnectedAccount';
        $request = $this->createStripeConnectedAccountLinkRequest($app_id, $stripe_connected_account_id, $stripe_account_link_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createStripeConnectedAccountLink'
     *
     * @param  string $app_id App Name (required)
     * @param  string $stripe_connected_account_id Stripe Connected Account Id (required)
     * @param  \Flipdish\Client\Models\StripeAccountLinkRequest $stripe_account_link_request  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function createStripeConnectedAccountLinkRequest($app_id, $stripe_connected_account_id, $stripe_account_link_request)
    {
        // verify the required parameter 'app_id' is set
        if ($app_id === null || (is_array($app_id) && count($app_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $app_id when calling createStripeConnectedAccountLink'
            );
        }
        // verify the required parameter 'stripe_connected_account_id' is set
        if ($stripe_connected_account_id === null || (is_array($stripe_connected_account_id) && count($stripe_connected_account_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $stripe_connected_account_id when calling createStripeConnectedAccountLink'
            );
        }
        // verify the required parameter 'stripe_account_link_request' is set
        if ($stripe_account_link_request === null || (is_array($stripe_account_link_request) && count($stripe_account_link_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $stripe_account_link_request when calling createStripeConnectedAccountLink'
            );
        }

        $resourcePath = '/api/v1.0/{appId}/customconnect/{stripeConnectedAccountId}/create-account-link';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($app_id !== null) {
            $resourcePath = str_replace(
                '{' . 'appId' . '}',
                ObjectSerializer::toPathValue($app_id),
                $resourcePath
            );
        }
        // path params
        if ($stripe_connected_account_id !== null) {
            $resourcePath = str_replace(
                '{' . 'stripeConnectedAccountId' . '}',
                ObjectSerializer::toPathValue($stripe_connected_account_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($stripe_account_link_request)) {
            $_tempBody = $stripe_account_link_request;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml'],
                ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getVerificationStatus
     *
     * Gets the current verification status of the given connected account
     *
     * @param  string $app_id  (required)
     * @param  string $stripe_connected_account_id  (required)
     *
     * @throws \Flipdish\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Flipdish\Client\Models\RestApiResultStripeConnectedAccount
     */
    public function getVerificationStatus($app_id, $stripe_connected_account_id)
    {
        list($response) = $this->getVerificationStatusWithHttpInfo($app_id, $stripe_connected_account_id);
        return $response;
    }

    /**
     * Operation getVerificationStatusWithHttpInfo
     *
     * Gets the current verification status of the given connected account
     *
     * @param  string $app_id  (required)
     * @param  string $stripe_connected_account_id  (required)
     *
     * @throws \Flipdish\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Flipdish\Client\Models\RestApiResultStripeConnectedAccount, HTTP status code, HTTP response headers (array of strings)
     */
    public function getVerificationStatusWithHttpInfo($app_id, $stripe_connected_account_id)
    {
        $returnType = '\Flipdish\Client\Models\RestApiResultStripeConnectedAccount';
        $request = $this->getVerificationStatusRequest($app_id, $stripe_connected_account_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Flipdish\Client\Models\RestApiResultStripeConnectedAccount',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Flipdish\Client\Models\RestApiErrorResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Flipdish\Client\Models\RestApiUnauthorizedResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Flipdish\Client\Models\RestApiForbiddenResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getVerificationStatusAsync
     *
     * Gets the current verification status of the given connected account
     *
     * @param  string $app_id  (required)
     * @param  string $stripe_connected_account_id  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getVerificationStatusAsync($app_id, $stripe_connected_account_id)
    {
        return $this->getVerificationStatusAsyncWithHttpInfo($app_id, $stripe_connected_account_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getVerificationStatusAsyncWithHttpInfo
     *
     * Gets the current verification status of the given connected account
     *
     * @param  string $app_id  (required)
     * @param  string $stripe_connected_account_id  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getVerificationStatusAsyncWithHttpInfo($app_id, $stripe_connected_account_id)
    {
        $returnType = '\Flipdish\Client\Models\RestApiResultStripeConnectedAccount';
        $request = $this->getVerificationStatusRequest($app_id, $stripe_connected_account_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getVerificationStatus'
     *
     * @param  string $app_id  (required)
     * @param  string $stripe_connected_account_id  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getVerificationStatusRequest($app_id, $stripe_connected_account_id)
    {
        // verify the required parameter 'app_id' is set
        if ($app_id === null || (is_array($app_id) && count($app_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $app_id when calling getVerificationStatus'
            );
        }
        // verify the required parameter 'stripe_connected_account_id' is set
        if ($stripe_connected_account_id === null || (is_array($stripe_connected_account_id) && count($stripe_connected_account_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $stripe_connected_account_id when calling getVerificationStatus'
            );
        }

        $resourcePath = '/api/v1.0/{appId}/customconnect/verification-status';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($stripe_connected_account_id !== null) {
            $queryParams['stripeConnectedAccountId'] = ObjectSerializer::toQueryValue($stripe_connected_account_id);
        }

        // path params
        if ($app_id !== null) {
            $resourcePath = str_replace(
                '{' . 'appId' . '}',
                ObjectSerializer::toPathValue($app_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation setBankAccountBusinessType
     *
     * Update bank account's BusinessType and create a Stripe Connected Account
     *
     * @param  string $app_id App Name (required)
     * @param  int $bank_account_id Bank Account Id (required)
     * @param  string $business_type Bank Account business type (required)
     *
     * @throws \Flipdish\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Flipdish\Client\Models\RestApiResultBankAccountDetail
     */
    public function setBankAccountBusinessType($app_id, $bank_account_id, $business_type)
    {
        list($response) = $this->setBankAccountBusinessTypeWithHttpInfo($app_id, $bank_account_id, $business_type);
        return $response;
    }

    /**
     * Operation setBankAccountBusinessTypeWithHttpInfo
     *
     * Update bank account's BusinessType and create a Stripe Connected Account
     *
     * @param  string $app_id App Name (required)
     * @param  int $bank_account_id Bank Account Id (required)
     * @param  string $business_type Bank Account business type (required)
     *
     * @throws \Flipdish\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Flipdish\Client\Models\RestApiResultBankAccountDetail, HTTP status code, HTTP response headers (array of strings)
     */
    public function setBankAccountBusinessTypeWithHttpInfo($app_id, $bank_account_id, $business_type)
    {
        $returnType = '\Flipdish\Client\Models\RestApiResultBankAccountDetail';
        $request = $this->setBankAccountBusinessTypeRequest($app_id, $bank_account_id, $business_type);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Flipdish\Client\Models\RestApiResultBankAccountDetail',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Flipdish\Client\Models\RestApiErrorResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Flipdish\Client\Models\RestApiUnauthorizedResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Flipdish\Client\Models\RestApiForbiddenResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation setBankAccountBusinessTypeAsync
     *
     * Update bank account's BusinessType and create a Stripe Connected Account
     *
     * @param  string $app_id App Name (required)
     * @param  int $bank_account_id Bank Account Id (required)
     * @param  string $business_type Bank Account business type (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function setBankAccountBusinessTypeAsync($app_id, $bank_account_id, $business_type)
    {
        return $this->setBankAccountBusinessTypeAsyncWithHttpInfo($app_id, $bank_account_id, $business_type)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation setBankAccountBusinessTypeAsyncWithHttpInfo
     *
     * Update bank account's BusinessType and create a Stripe Connected Account
     *
     * @param  string $app_id App Name (required)
     * @param  int $bank_account_id Bank Account Id (required)
     * @param  string $business_type Bank Account business type (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function setBankAccountBusinessTypeAsyncWithHttpInfo($app_id, $bank_account_id, $business_type)
    {
        $returnType = '\Flipdish\Client\Models\RestApiResultBankAccountDetail';
        $request = $this->setBankAccountBusinessTypeRequest($app_id, $bank_account_id, $business_type);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'setBankAccountBusinessType'
     *
     * @param  string $app_id App Name (required)
     * @param  int $bank_account_id Bank Account Id (required)
     * @param  string $business_type Bank Account business type (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function setBankAccountBusinessTypeRequest($app_id, $bank_account_id, $business_type)
    {
        // verify the required parameter 'app_id' is set
        if ($app_id === null || (is_array($app_id) && count($app_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $app_id when calling setBankAccountBusinessType'
            );
        }
        // verify the required parameter 'bank_account_id' is set
        if ($bank_account_id === null || (is_array($bank_account_id) && count($bank_account_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $bank_account_id when calling setBankAccountBusinessType'
            );
        }
        // verify the required parameter 'business_type' is set
        if ($business_type === null || (is_array($business_type) && count($business_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $business_type when calling setBankAccountBusinessType'
            );
        }

        $resourcePath = '/api/v1.0/{appId}/customconnect/bank-account/{bankAccountId}/businesstype';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($app_id !== null) {
            $resourcePath = str_replace(
                '{' . 'appId' . '}',
                ObjectSerializer::toPathValue($app_id),
                $resourcePath
            );
        }
        // path params
        if ($bank_account_id !== null) {
            $resourcePath = str_replace(
                '{' . 'bankAccountId' . '}',
                ObjectSerializer::toPathValue($bank_account_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($business_type)) {
            $_tempBody = $business_type;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml'],
                ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation stripeCustomConnectRefresh
     *
     * @param  int $link_request_id link_request_id (required)
     * @param  string $app_id app_id (required)
     *
     * @throws \Flipdish\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object
     */
    public function stripeCustomConnectRefresh($link_request_id, $app_id)
    {
        list($response) = $this->stripeCustomConnectRefreshWithHttpInfo($link_request_id, $app_id);
        return $response;
    }

    /**
     * Operation stripeCustomConnectRefreshWithHttpInfo
     *
     * @param  int $link_request_id (required)
     * @param  string $app_id (required)
     *
     * @throws \Flipdish\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function stripeCustomConnectRefreshWithHttpInfo($link_request_id, $app_id)
    {
        $returnType = 'object';
        $request = $this->stripeCustomConnectRefreshRequest($link_request_id, $app_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Flipdish\Client\Models\RestApiErrorResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Flipdish\Client\Models\RestApiUnauthorizedResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Flipdish\Client\Models\RestApiForbiddenResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation stripeCustomConnectRefreshAsync
     *
     * 
     *
     * @param  int $link_request_id (required)
     * @param  string $app_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function stripeCustomConnectRefreshAsync($link_request_id, $app_id)
    {
        return $this->stripeCustomConnectRefreshAsyncWithHttpInfo($link_request_id, $app_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation stripeCustomConnectRefreshAsyncWithHttpInfo
     *
     * 
     *
     * @param  int $link_request_id (required)
     * @param  string $app_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function stripeCustomConnectRefreshAsyncWithHttpInfo($link_request_id, $app_id)
    {
        $returnType = 'object';
        $request = $this->stripeCustomConnectRefreshRequest($link_request_id, $app_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'stripeCustomConnectRefresh'
     *
     * @param  int $link_request_id (required)
     * @param  string $app_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function stripeCustomConnectRefreshRequest($link_request_id, $app_id)
    {
        // verify the required parameter 'link_request_id' is set
        if ($link_request_id === null || (is_array($link_request_id) && count($link_request_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $link_request_id when calling stripeCustomConnectRefresh'
            );
        }
        // verify the required parameter 'app_id' is set
        if ($app_id === null || (is_array($app_id) && count($app_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $app_id when calling stripeCustomConnectRefresh'
            );
        }

        $resourcePath = '/api/v1.0/{appId}/customconnect/refresh-link';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($link_request_id !== null) {
            $queryParams['linkRequestId'] = ObjectSerializer::toQueryValue($link_request_id);
        }

        // path params
        if ($app_id !== null) {
            $resourcePath = str_replace(
                '{' . 'appId' . '}',
                ObjectSerializer::toPathValue($app_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateBankAccountDetails
     *
     * Update bank account details
     *
     * @param  string $app_id App Name Id (required)
     * @param  int $bank_account_id Bank Account Id (required)
     * @param  \Flipdish\Client\Models\BankAccountDetailsUpdateRequest $update_request fields to be updated (required)
     *
     * @throws \Flipdish\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Flipdish\Client\Models\RestApiResultStripeConnectedAccount
     */
    public function updateBankAccountDetails($app_id, $bank_account_id, $update_request)
    {
        list($response) = $this->updateBankAccountDetailsWithHttpInfo($app_id, $bank_account_id, $update_request);
        return $response;
    }

    /**
     * Operation updateBankAccountDetailsWithHttpInfo
     *
     * Update bank account details
     *
     * @param  string $app_id App Name Id (required)
     * @param  int $bank_account_id Bank Account Id (required)
     * @param  \Flipdish\Client\Models\BankAccountDetailsUpdateRequest $update_request fields to be updated (required)
     *
     * @throws \Flipdish\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Flipdish\Client\Models\RestApiResultStripeConnectedAccount, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateBankAccountDetailsWithHttpInfo($app_id, $bank_account_id, $update_request)
    {
        $returnType = '\Flipdish\Client\Models\RestApiResultStripeConnectedAccount';
        $request = $this->updateBankAccountDetailsRequest($app_id, $bank_account_id, $update_request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Flipdish\Client\Models\RestApiResultStripeConnectedAccount',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Flipdish\Client\Models\RestApiErrorResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Flipdish\Client\Models\RestApiUnauthorizedResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Flipdish\Client\Models\RestApiForbiddenResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateBankAccountDetailsAsync
     *
     * Update bank account details
     *
     * @param  string $app_id App Name Id (required)
     * @param  int $bank_account_id Bank Account Id (required)
     * @param  \Flipdish\Client\Models\BankAccountDetailsUpdateRequest $update_request fields to be updated (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateBankAccountDetailsAsync($app_id, $bank_account_id, $update_request)
    {
        return $this->updateBankAccountDetailsAsyncWithHttpInfo($app_id, $bank_account_id, $update_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateBankAccountDetailsAsyncWithHttpInfo
     *
     * Update bank account details
     *
     * @param  string $app_id App Name Id (required)
     * @param  int $bank_account_id Bank Account Id (required)
     * @param  \Flipdish\Client\Models\BankAccountDetailsUpdateRequest $update_request fields to be updated (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateBankAccountDetailsAsyncWithHttpInfo($app_id, $bank_account_id, $update_request)
    {
        $returnType = '\Flipdish\Client\Models\RestApiResultStripeConnectedAccount';
        $request = $this->updateBankAccountDetailsRequest($app_id, $bank_account_id, $update_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateBankAccountDetails'
     *
     * @param  string $app_id App Name Id (required)
     * @param  int $bank_account_id Bank Account Id (required)
     * @param  \Flipdish\Client\Models\BankAccountDetailsUpdateRequest $update_request fields to be updated (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateBankAccountDetailsRequest($app_id, $bank_account_id, $update_request)
    {
        // verify the required parameter 'app_id' is set
        if ($app_id === null || (is_array($app_id) && count($app_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $app_id when calling updateBankAccountDetails'
            );
        }
        // verify the required parameter 'bank_account_id' is set
        if ($bank_account_id === null || (is_array($bank_account_id) && count($bank_account_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $bank_account_id when calling updateBankAccountDetails'
            );
        }
        // verify the required parameter 'update_request' is set
        if ($update_request === null || (is_array($update_request) && count($update_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $update_request when calling updateBankAccountDetails'
            );
        }

        $resourcePath = '/api/v1.0/{appId}/customconnect/{bankAccountId}/update-bank-account-details';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($app_id !== null) {
            $resourcePath = str_replace(
                '{' . 'appId' . '}',
                ObjectSerializer::toPathValue($app_id),
                $resourcePath
            );
        }
        // path params
        if ($bank_account_id !== null) {
            $resourcePath = str_replace(
                '{' . 'bankAccountId' . '}',
                ObjectSerializer::toPathValue($bank_account_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($update_request)) {
            $_tempBody = $update_request;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml'],
                ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
