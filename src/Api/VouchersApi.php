<?php
/**
 * VouchersApi
 * PHP version 5
 *
 * @category Class
 * @package  Flipdish\\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Flipdish Open API v1.0
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.19
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Flipdish\\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Flipdish\\Client\ApiException;
use Flipdish\\Client\Configuration;
use Flipdish\\Client\HeaderSelector;
use Flipdish\\Client\ObjectSerializer;

/**
 * VouchersApi Class Doc Comment
 *
 * @category Class
 * @package  Flipdish\\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class VouchersApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation createVoucher
     *
     * [PRIVATE API] Create voucher
     *
     * @param  string $app_id App Name Id (required)
     * @param  \Flipdish\\Client\Models\CreateVoucher $voucher Voucher Details (required)
     *
     * @throws \Flipdish\\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Flipdish\\Client\Models\RestApiResultVoucherWithStats
     */
    public function createVoucher($app_id, $voucher)
    {
        list($response) = $this->createVoucherWithHttpInfo($app_id, $voucher);
        return $response;
    }

    /**
     * Operation createVoucherWithHttpInfo
     *
     * [PRIVATE API] Create voucher
     *
     * @param  string $app_id App Name Id (required)
     * @param  \Flipdish\\Client\Models\CreateVoucher $voucher Voucher Details (required)
     *
     * @throws \Flipdish\\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Flipdish\\Client\Models\RestApiResultVoucherWithStats, HTTP status code, HTTP response headers (array of strings)
     */
    public function createVoucherWithHttpInfo($app_id, $voucher)
    {
        $returnType = '\Flipdish\\Client\Models\RestApiResultVoucherWithStats';
        $request = $this->createVoucherRequest($app_id, $voucher);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Flipdish\\Client\Models\RestApiResultVoucherWithStats',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Flipdish\\Client\Models\RestApiErrorResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Flipdish\\Client\Models\RestApiUnauthorizedResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Flipdish\\Client\Models\RestApiForbiddenResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Flipdish\\Client\Models\RestApiErrorResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createVoucherAsync
     *
     * [PRIVATE API] Create voucher
     *
     * @param  string $app_id App Name Id (required)
     * @param  \Flipdish\\Client\Models\CreateVoucher $voucher Voucher Details (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createVoucherAsync($app_id, $voucher)
    {
        return $this->createVoucherAsyncWithHttpInfo($app_id, $voucher)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createVoucherAsyncWithHttpInfo
     *
     * [PRIVATE API] Create voucher
     *
     * @param  string $app_id App Name Id (required)
     * @param  \Flipdish\\Client\Models\CreateVoucher $voucher Voucher Details (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createVoucherAsyncWithHttpInfo($app_id, $voucher)
    {
        $returnType = '\Flipdish\\Client\Models\RestApiResultVoucherWithStats';
        $request = $this->createVoucherRequest($app_id, $voucher);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createVoucher'
     *
     * @param  string $app_id App Name Id (required)
     * @param  \Flipdish\\Client\Models\CreateVoucher $voucher Voucher Details (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function createVoucherRequest($app_id, $voucher)
    {
        // verify the required parameter 'app_id' is set
        if ($app_id === null || (is_array($app_id) && count($app_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $app_id when calling createVoucher'
            );
        }
        // verify the required parameter 'voucher' is set
        if ($voucher === null || (is_array($voucher) && count($voucher) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $voucher when calling createVoucher'
            );
        }

        $resourcePath = '/api/v1.0/vouchers/{appId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($app_id !== null) {
            $resourcePath = str_replace(
                '{' . 'appId' . '}',
                ObjectSerializer::toPathValue($app_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($voucher)) {
            $_tempBody = $voucher;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml'],
                ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getVoucherById
     *
     * [PRIVATE API] Get voucher by identifier
     *
     * @param  int $voucher_id Id of the voucher (required)
     *
     * @throws \Flipdish\\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Flipdish\\Client\Models\RestApiResultVoucherWithStats
     */
    public function getVoucherById($voucher_id)
    {
        list($response) = $this->getVoucherByIdWithHttpInfo($voucher_id);
        return $response;
    }

    /**
     * Operation getVoucherByIdWithHttpInfo
     *
     * [PRIVATE API] Get voucher by identifier
     *
     * @param  int $voucher_id Id of the voucher (required)
     *
     * @throws \Flipdish\\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Flipdish\\Client\Models\RestApiResultVoucherWithStats, HTTP status code, HTTP response headers (array of strings)
     */
    public function getVoucherByIdWithHttpInfo($voucher_id)
    {
        $returnType = '\Flipdish\\Client\Models\RestApiResultVoucherWithStats';
        $request = $this->getVoucherByIdRequest($voucher_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Flipdish\\Client\Models\RestApiResultVoucherWithStats',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Flipdish\\Client\Models\RestApiErrorResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Flipdish\\Client\Models\RestApiUnauthorizedResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Flipdish\\Client\Models\RestApiForbiddenResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Flipdish\\Client\Models\RestApiErrorResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getVoucherByIdAsync
     *
     * [PRIVATE API] Get voucher by identifier
     *
     * @param  int $voucher_id Id of the voucher (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getVoucherByIdAsync($voucher_id)
    {
        return $this->getVoucherByIdAsyncWithHttpInfo($voucher_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getVoucherByIdAsyncWithHttpInfo
     *
     * [PRIVATE API] Get voucher by identifier
     *
     * @param  int $voucher_id Id of the voucher (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getVoucherByIdAsyncWithHttpInfo($voucher_id)
    {
        $returnType = '\Flipdish\\Client\Models\RestApiResultVoucherWithStats';
        $request = $this->getVoucherByIdRequest($voucher_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getVoucherById'
     *
     * @param  int $voucher_id Id of the voucher (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getVoucherByIdRequest($voucher_id)
    {
        // verify the required parameter 'voucher_id' is set
        if ($voucher_id === null || (is_array($voucher_id) && count($voucher_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $voucher_id when calling getVoucherById'
            );
        }

        $resourcePath = '/api/v1.0/vouchers/{voucherId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($voucher_id !== null) {
            $resourcePath = str_replace(
                '{' . 'voucherId' . '}',
                ObjectSerializer::toPathValue($voucher_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getVoucherStatsById
     *
     * [PRIVATE API] Get voucher stats by identifier
     *
     * @param  int $voucher_id Id of the voucher (required)
     * @param  string $aggregate_data_by Aggregate data by day \\ week \\ month (required)
     * @param  int $data_point_limit Amount of data points per request (optional)
     *
     * @throws \Flipdish\\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Flipdish\\Client\Models\RestApiArrayResultVoucherDataPoint
     */
    public function getVoucherStatsById($voucher_id, $aggregate_data_by, $data_point_limit = null)
    {
        list($response) = $this->getVoucherStatsByIdWithHttpInfo($voucher_id, $aggregate_data_by, $data_point_limit);
        return $response;
    }

    /**
     * Operation getVoucherStatsByIdWithHttpInfo
     *
     * [PRIVATE API] Get voucher stats by identifier
     *
     * @param  int $voucher_id Id of the voucher (required)
     * @param  string $aggregate_data_by Aggregate data by day \\ week \\ month (required)
     * @param  int $data_point_limit Amount of data points per request (optional)
     *
     * @throws \Flipdish\\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Flipdish\\Client\Models\RestApiArrayResultVoucherDataPoint, HTTP status code, HTTP response headers (array of strings)
     */
    public function getVoucherStatsByIdWithHttpInfo($voucher_id, $aggregate_data_by, $data_point_limit = null)
    {
        $returnType = '\Flipdish\\Client\Models\RestApiArrayResultVoucherDataPoint';
        $request = $this->getVoucherStatsByIdRequest($voucher_id, $aggregate_data_by, $data_point_limit);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Flipdish\\Client\Models\RestApiArrayResultVoucherDataPoint',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Flipdish\\Client\Models\RestApiErrorResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Flipdish\\Client\Models\RestApiUnauthorizedResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Flipdish\\Client\Models\RestApiForbiddenResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Flipdish\\Client\Models\RestApiErrorResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getVoucherStatsByIdAsync
     *
     * [PRIVATE API] Get voucher stats by identifier
     *
     * @param  int $voucher_id Id of the voucher (required)
     * @param  string $aggregate_data_by Aggregate data by day \\ week \\ month (required)
     * @param  int $data_point_limit Amount of data points per request (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getVoucherStatsByIdAsync($voucher_id, $aggregate_data_by, $data_point_limit = null)
    {
        return $this->getVoucherStatsByIdAsyncWithHttpInfo($voucher_id, $aggregate_data_by, $data_point_limit)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getVoucherStatsByIdAsyncWithHttpInfo
     *
     * [PRIVATE API] Get voucher stats by identifier
     *
     * @param  int $voucher_id Id of the voucher (required)
     * @param  string $aggregate_data_by Aggregate data by day \\ week \\ month (required)
     * @param  int $data_point_limit Amount of data points per request (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getVoucherStatsByIdAsyncWithHttpInfo($voucher_id, $aggregate_data_by, $data_point_limit = null)
    {
        $returnType = '\Flipdish\\Client\Models\RestApiArrayResultVoucherDataPoint';
        $request = $this->getVoucherStatsByIdRequest($voucher_id, $aggregate_data_by, $data_point_limit);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getVoucherStatsById'
     *
     * @param  int $voucher_id Id of the voucher (required)
     * @param  string $aggregate_data_by Aggregate data by day \\ week \\ month (required)
     * @param  int $data_point_limit Amount of data points per request (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getVoucherStatsByIdRequest($voucher_id, $aggregate_data_by, $data_point_limit = null)
    {
        // verify the required parameter 'voucher_id' is set
        if ($voucher_id === null || (is_array($voucher_id) && count($voucher_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $voucher_id when calling getVoucherStatsById'
            );
        }
        // verify the required parameter 'aggregate_data_by' is set
        if ($aggregate_data_by === null || (is_array($aggregate_data_by) && count($aggregate_data_by) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $aggregate_data_by when calling getVoucherStatsById'
            );
        }

        $resourcePath = '/api/v1.0/vouchers/stats/{voucherId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($aggregate_data_by !== null) {
            $queryParams['aggregateDataBy'] = ObjectSerializer::toQueryValue($aggregate_data_by);
        }
        // query params
        if ($data_point_limit !== null) {
            $queryParams['dataPointLimit'] = ObjectSerializer::toQueryValue($data_point_limit);
        }

        // path params
        if ($voucher_id !== null) {
            $resourcePath = str_replace(
                '{' . 'voucherId' . '}',
                ObjectSerializer::toPathValue($voucher_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getVouchers
     *
     * [PRIVATE API] Get vouchers summaries for App Id
     *
     * @param  string $app_id Application Id (required)
     * @param  int $page_index Page Number (optional)
     * @param  int $page_size Page Size (optional)
     * @param  string[] $search_codes Search by Voucher Code\\s (optional)
     * @param  string[] $status_search Search by Status (optional)
     * @param  string[] $type_search Search by Type (optional)
     * @param  string[] $sub_type_search Search by Sub Type (optional)
     * @param  int[] $store_ids Search by Store Ids (optional)
     *
     * @throws \Flipdish\\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Flipdish\\Client\Models\RestApiPaginationResultVoucherSummary
     */
    public function getVouchers($app_id, $page_index = null, $page_size = null, $search_codes = null, $status_search = null, $type_search = null, $sub_type_search = null, $store_ids = null)
    {
        list($response) = $this->getVouchersWithHttpInfo($app_id, $page_index, $page_size, $search_codes, $status_search, $type_search, $sub_type_search, $store_ids);
        return $response;
    }

    /**
     * Operation getVouchersWithHttpInfo
     *
     * [PRIVATE API] Get vouchers summaries for App Id
     *
     * @param  string $app_id Application Id (required)
     * @param  int $page_index Page Number (optional)
     * @param  int $page_size Page Size (optional)
     * @param  string[] $search_codes Search by Voucher Code\\s (optional)
     * @param  string[] $status_search Search by Status (optional)
     * @param  string[] $type_search Search by Type (optional)
     * @param  string[] $sub_type_search Search by Sub Type (optional)
     * @param  int[] $store_ids Search by Store Ids (optional)
     *
     * @throws \Flipdish\\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Flipdish\\Client\Models\RestApiPaginationResultVoucherSummary, HTTP status code, HTTP response headers (array of strings)
     */
    public function getVouchersWithHttpInfo($app_id, $page_index = null, $page_size = null, $search_codes = null, $status_search = null, $type_search = null, $sub_type_search = null, $store_ids = null)
    {
        $returnType = '\Flipdish\\Client\Models\RestApiPaginationResultVoucherSummary';
        $request = $this->getVouchersRequest($app_id, $page_index, $page_size, $search_codes, $status_search, $type_search, $sub_type_search, $store_ids);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Flipdish\\Client\Models\RestApiPaginationResultVoucherSummary',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Flipdish\\Client\Models\RestApiErrorResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Flipdish\\Client\Models\RestApiUnauthorizedResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Flipdish\\Client\Models\RestApiForbiddenResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getVouchersAsync
     *
     * [PRIVATE API] Get vouchers summaries for App Id
     *
     * @param  string $app_id Application Id (required)
     * @param  int $page_index Page Number (optional)
     * @param  int $page_size Page Size (optional)
     * @param  string[] $search_codes Search by Voucher Code\\s (optional)
     * @param  string[] $status_search Search by Status (optional)
     * @param  string[] $type_search Search by Type (optional)
     * @param  string[] $sub_type_search Search by Sub Type (optional)
     * @param  int[] $store_ids Search by Store Ids (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getVouchersAsync($app_id, $page_index = null, $page_size = null, $search_codes = null, $status_search = null, $type_search = null, $sub_type_search = null, $store_ids = null)
    {
        return $this->getVouchersAsyncWithHttpInfo($app_id, $page_index, $page_size, $search_codes, $status_search, $type_search, $sub_type_search, $store_ids)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getVouchersAsyncWithHttpInfo
     *
     * [PRIVATE API] Get vouchers summaries for App Id
     *
     * @param  string $app_id Application Id (required)
     * @param  int $page_index Page Number (optional)
     * @param  int $page_size Page Size (optional)
     * @param  string[] $search_codes Search by Voucher Code\\s (optional)
     * @param  string[] $status_search Search by Status (optional)
     * @param  string[] $type_search Search by Type (optional)
     * @param  string[] $sub_type_search Search by Sub Type (optional)
     * @param  int[] $store_ids Search by Store Ids (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getVouchersAsyncWithHttpInfo($app_id, $page_index = null, $page_size = null, $search_codes = null, $status_search = null, $type_search = null, $sub_type_search = null, $store_ids = null)
    {
        $returnType = '\Flipdish\\Client\Models\RestApiPaginationResultVoucherSummary';
        $request = $this->getVouchersRequest($app_id, $page_index, $page_size, $search_codes, $status_search, $type_search, $sub_type_search, $store_ids);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getVouchers'
     *
     * @param  string $app_id Application Id (required)
     * @param  int $page_index Page Number (optional)
     * @param  int $page_size Page Size (optional)
     * @param  string[] $search_codes Search by Voucher Code\\s (optional)
     * @param  string[] $status_search Search by Status (optional)
     * @param  string[] $type_search Search by Type (optional)
     * @param  string[] $sub_type_search Search by Sub Type (optional)
     * @param  int[] $store_ids Search by Store Ids (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getVouchersRequest($app_id, $page_index = null, $page_size = null, $search_codes = null, $status_search = null, $type_search = null, $sub_type_search = null, $store_ids = null)
    {
        // verify the required parameter 'app_id' is set
        if ($app_id === null || (is_array($app_id) && count($app_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $app_id when calling getVouchers'
            );
        }

        $resourcePath = '/api/v1.0/{appId}/vouchers/summaries';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($page_index !== null) {
            $queryParams['pageIndex'] = ObjectSerializer::toQueryValue($page_index);
        }
        // query params
        if ($page_size !== null) {
            $queryParams['pageSize'] = ObjectSerializer::toQueryValue($page_size);
        }
        // query params
        if (is_array($search_codes)) {
            $queryParams['searchCodes'] = $search_codes;
        } else
        if ($search_codes !== null) {
            $queryParams['searchCodes'] = ObjectSerializer::toQueryValue($search_codes);
        }
        // query params
        if (is_array($status_search)) {
            $queryParams['statusSearch'] = $status_search;
        } else
        if ($status_search !== null) {
            $queryParams['statusSearch'] = ObjectSerializer::toQueryValue($status_search);
        }
        // query params
        if (is_array($type_search)) {
            $queryParams['typeSearch'] = $type_search;
        } else
        if ($type_search !== null) {
            $queryParams['typeSearch'] = ObjectSerializer::toQueryValue($type_search);
        }
        // query params
        if (is_array($sub_type_search)) {
            $queryParams['subTypeSearch'] = $sub_type_search;
        } else
        if ($sub_type_search !== null) {
            $queryParams['subTypeSearch'] = ObjectSerializer::toQueryValue($sub_type_search);
        }
        // query params
        if (is_array($store_ids)) {
            $queryParams['storeIds'] = $store_ids;
        } else
        if ($store_ids !== null) {
            $queryParams['storeIds'] = ObjectSerializer::toQueryValue($store_ids);
        }

        // path params
        if ($app_id !== null) {
            $resourcePath = str_replace(
                '{' . 'appId' . '}',
                ObjectSerializer::toPathValue($app_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateVoucher
     *
     * [PRIVATE API] Updates voucher
     *
     * @param  int $voucher_id Id of the voucher (required)
     * @param  \Flipdish\\Client\Models\VoucherBase $voucher Updated details for the voucher (required)
     * @param  int[] $store_id store_id (optional)
     * @param  int $percent_value Percent voucher value (can have 1 of 3) (optional)
     * @param  double $lump_value Lump voucher value (can have 1 of 3) (optional)
     * @param  int $free_item_id Free Item Id (can have 1 of 3) (optional)
     *
     * @throws \Flipdish\\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Flipdish\\Client\Models\RestApiResultVoucherWithStats
     */
    public function updateVoucher($voucher_id, $voucher, $store_id = null, $percent_value = null, $lump_value = null, $free_item_id = null)
    {
        list($response) = $this->updateVoucherWithHttpInfo($voucher_id, $voucher, $store_id, $percent_value, $lump_value, $free_item_id);
        return $response;
    }

    /**
     * Operation updateVoucherWithHttpInfo
     *
     * [PRIVATE API] Updates voucher
     *
     * @param  int $voucher_id Id of the voucher (required)
     * @param  \Flipdish\\Client\Models\VoucherBase $voucher Updated details for the voucher (required)
     * @param  int[] $store_id (optional)
     * @param  int $percent_value Percent voucher value (can have 1 of 3) (optional)
     * @param  double $lump_value Lump voucher value (can have 1 of 3) (optional)
     * @param  int $free_item_id Free Item Id (can have 1 of 3) (optional)
     *
     * @throws \Flipdish\\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Flipdish\\Client\Models\RestApiResultVoucherWithStats, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateVoucherWithHttpInfo($voucher_id, $voucher, $store_id = null, $percent_value = null, $lump_value = null, $free_item_id = null)
    {
        $returnType = '\Flipdish\\Client\Models\RestApiResultVoucherWithStats';
        $request = $this->updateVoucherRequest($voucher_id, $voucher, $store_id, $percent_value, $lump_value, $free_item_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Flipdish\\Client\Models\RestApiResultVoucherWithStats',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Flipdish\\Client\Models\RestApiErrorResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Flipdish\\Client\Models\RestApiUnauthorizedResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Flipdish\\Client\Models\RestApiForbiddenResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Flipdish\\Client\Models\RestApiErrorResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateVoucherAsync
     *
     * [PRIVATE API] Updates voucher
     *
     * @param  int $voucher_id Id of the voucher (required)
     * @param  \Flipdish\\Client\Models\VoucherBase $voucher Updated details for the voucher (required)
     * @param  int[] $store_id (optional)
     * @param  int $percent_value Percent voucher value (can have 1 of 3) (optional)
     * @param  double $lump_value Lump voucher value (can have 1 of 3) (optional)
     * @param  int $free_item_id Free Item Id (can have 1 of 3) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateVoucherAsync($voucher_id, $voucher, $store_id = null, $percent_value = null, $lump_value = null, $free_item_id = null)
    {
        return $this->updateVoucherAsyncWithHttpInfo($voucher_id, $voucher, $store_id, $percent_value, $lump_value, $free_item_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateVoucherAsyncWithHttpInfo
     *
     * [PRIVATE API] Updates voucher
     *
     * @param  int $voucher_id Id of the voucher (required)
     * @param  \Flipdish\\Client\Models\VoucherBase $voucher Updated details for the voucher (required)
     * @param  int[] $store_id (optional)
     * @param  int $percent_value Percent voucher value (can have 1 of 3) (optional)
     * @param  double $lump_value Lump voucher value (can have 1 of 3) (optional)
     * @param  int $free_item_id Free Item Id (can have 1 of 3) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateVoucherAsyncWithHttpInfo($voucher_id, $voucher, $store_id = null, $percent_value = null, $lump_value = null, $free_item_id = null)
    {
        $returnType = '\Flipdish\\Client\Models\RestApiResultVoucherWithStats';
        $request = $this->updateVoucherRequest($voucher_id, $voucher, $store_id, $percent_value, $lump_value, $free_item_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateVoucher'
     *
     * @param  int $voucher_id Id of the voucher (required)
     * @param  \Flipdish\\Client\Models\VoucherBase $voucher Updated details for the voucher (required)
     * @param  int[] $store_id (optional)
     * @param  int $percent_value Percent voucher value (can have 1 of 3) (optional)
     * @param  double $lump_value Lump voucher value (can have 1 of 3) (optional)
     * @param  int $free_item_id Free Item Id (can have 1 of 3) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateVoucherRequest($voucher_id, $voucher, $store_id = null, $percent_value = null, $lump_value = null, $free_item_id = null)
    {
        // verify the required parameter 'voucher_id' is set
        if ($voucher_id === null || (is_array($voucher_id) && count($voucher_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $voucher_id when calling updateVoucher'
            );
        }
        // verify the required parameter 'voucher' is set
        if ($voucher === null || (is_array($voucher) && count($voucher) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $voucher when calling updateVoucher'
            );
        }

        $resourcePath = '/api/v1.0/vouchers/{voucherId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($store_id)) {
            $queryParams['storeId'] = $store_id;
        } else
        if ($store_id !== null) {
            $queryParams['storeId'] = ObjectSerializer::toQueryValue($store_id);
        }
        // query params
        if ($percent_value !== null) {
            $queryParams['percentValue'] = ObjectSerializer::toQueryValue($percent_value);
        }
        // query params
        if ($lump_value !== null) {
            $queryParams['lumpValue'] = ObjectSerializer::toQueryValue($lump_value);
        }
        // query params
        if ($free_item_id !== null) {
            $queryParams['freeItemId'] = ObjectSerializer::toQueryValue($free_item_id);
        }

        // path params
        if ($voucher_id !== null) {
            $resourcePath = str_replace(
                '{' . 'voucherId' . '}',
                ObjectSerializer::toPathValue($voucher_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($voucher)) {
            $_tempBody = $voucher;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml'],
                ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
