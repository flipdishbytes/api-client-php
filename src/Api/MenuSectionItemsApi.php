<?php
/**
 * MenuSectionItemsApi
 * PHP version 5
 *
 * @category Class
 * @package  Flipdish\\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Flipdish Open API v1.0
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.19
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Flipdish\\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Flipdish\\Client\ApiException;
use Flipdish\\Client\Configuration;
use Flipdish\\Client\HeaderSelector;
use Flipdish\\Client\ObjectSerializer;

/**
 * MenuSectionItemsApi Class Doc Comment
 *
 * @category Class
 * @package  Flipdish\\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class MenuSectionItemsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation cloneMenuSectionItem
     *
     * Clone menu section item
     *
     * @param  int $menu_id Menu identifier (required)
     * @param  int $menu_section_id Menu section identifier (required)
     * @param  int $menu_section_item_id Menu section item identifier (required)
     *
     * @throws \Flipdish\\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Flipdish\\Client\Models\RestApiResultMenuSectionItem
     */
    public function cloneMenuSectionItem($menu_id, $menu_section_id, $menu_section_item_id)
    {
        list($response) = $this->cloneMenuSectionItemWithHttpInfo($menu_id, $menu_section_id, $menu_section_item_id);
        return $response;
    }

    /**
     * Operation cloneMenuSectionItemWithHttpInfo
     *
     * Clone menu section item
     *
     * @param  int $menu_id Menu identifier (required)
     * @param  int $menu_section_id Menu section identifier (required)
     * @param  int $menu_section_item_id Menu section item identifier (required)
     *
     * @throws \Flipdish\\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Flipdish\\Client\Models\RestApiResultMenuSectionItem, HTTP status code, HTTP response headers (array of strings)
     */
    public function cloneMenuSectionItemWithHttpInfo($menu_id, $menu_section_id, $menu_section_item_id)
    {
        $returnType = '\Flipdish\\Client\Models\RestApiResultMenuSectionItem';
        $request = $this->cloneMenuSectionItemRequest($menu_id, $menu_section_id, $menu_section_item_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Flipdish\\Client\Models\RestApiResultMenuSectionItem',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Flipdish\\Client\Models\RestApiErrorResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Flipdish\\Client\Models\RestApiUnauthorizedResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Flipdish\\Client\Models\RestApiForbiddenResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cloneMenuSectionItemAsync
     *
     * Clone menu section item
     *
     * @param  int $menu_id Menu identifier (required)
     * @param  int $menu_section_id Menu section identifier (required)
     * @param  int $menu_section_item_id Menu section item identifier (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cloneMenuSectionItemAsync($menu_id, $menu_section_id, $menu_section_item_id)
    {
        return $this->cloneMenuSectionItemAsyncWithHttpInfo($menu_id, $menu_section_id, $menu_section_item_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cloneMenuSectionItemAsyncWithHttpInfo
     *
     * Clone menu section item
     *
     * @param  int $menu_id Menu identifier (required)
     * @param  int $menu_section_id Menu section identifier (required)
     * @param  int $menu_section_item_id Menu section item identifier (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cloneMenuSectionItemAsyncWithHttpInfo($menu_id, $menu_section_id, $menu_section_item_id)
    {
        $returnType = '\Flipdish\\Client\Models\RestApiResultMenuSectionItem';
        $request = $this->cloneMenuSectionItemRequest($menu_id, $menu_section_id, $menu_section_item_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cloneMenuSectionItem'
     *
     * @param  int $menu_id Menu identifier (required)
     * @param  int $menu_section_id Menu section identifier (required)
     * @param  int $menu_section_item_id Menu section item identifier (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function cloneMenuSectionItemRequest($menu_id, $menu_section_id, $menu_section_item_id)
    {
        // verify the required parameter 'menu_id' is set
        if ($menu_id === null || (is_array($menu_id) && count($menu_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $menu_id when calling cloneMenuSectionItem'
            );
        }
        // verify the required parameter 'menu_section_id' is set
        if ($menu_section_id === null || (is_array($menu_section_id) && count($menu_section_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $menu_section_id when calling cloneMenuSectionItem'
            );
        }
        // verify the required parameter 'menu_section_item_id' is set
        if ($menu_section_item_id === null || (is_array($menu_section_item_id) && count($menu_section_item_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $menu_section_item_id when calling cloneMenuSectionItem'
            );
        }

        $resourcePath = '/api/v1.0/menus/{menuId}/sections/{menuSectionId}/sectionitems/{menuSectionItemId}/clone';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($menu_id !== null) {
            $resourcePath = str_replace(
                '{' . 'menuId' . '}',
                ObjectSerializer::toPathValue($menu_id),
                $resourcePath
            );
        }
        // path params
        if ($menu_section_id !== null) {
            $resourcePath = str_replace(
                '{' . 'menuSectionId' . '}',
                ObjectSerializer::toPathValue($menu_section_id),
                $resourcePath
            );
        }
        // path params
        if ($menu_section_item_id !== null) {
            $resourcePath = str_replace(
                '{' . 'menuSectionItemId' . '}',
                ObjectSerializer::toPathValue($menu_section_item_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createMenuSectionItem
     *
     * Create menu section item
     *
     * @param  int $menu_id Menu identifier (required)
     * @param  int $menu_section_id Menu section identifier (required)
     * @param  \Flipdish\\Client\Models\MenuSectionItemBase $menu_section_item Menu section item (required)
     *
     * @throws \Flipdish\\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object
     */
    public function createMenuSectionItem($menu_id, $menu_section_id, $menu_section_item)
    {
        list($response) = $this->createMenuSectionItemWithHttpInfo($menu_id, $menu_section_id, $menu_section_item);
        return $response;
    }

    /**
     * Operation createMenuSectionItemWithHttpInfo
     *
     * Create menu section item
     *
     * @param  int $menu_id Menu identifier (required)
     * @param  int $menu_section_id Menu section identifier (required)
     * @param  \Flipdish\\Client\Models\MenuSectionItemBase $menu_section_item Menu section item (required)
     *
     * @throws \Flipdish\\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function createMenuSectionItemWithHttpInfo($menu_id, $menu_section_id, $menu_section_item)
    {
        $returnType = 'object';
        $request = $this->createMenuSectionItemRequest($menu_id, $menu_section_id, $menu_section_item);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Flipdish\\Client\Models\RestApiResultMenuSectionItem',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Flipdish\\Client\Models\RestApiErrorResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Flipdish\\Client\Models\RestApiUnauthorizedResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Flipdish\\Client\Models\RestApiForbiddenResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createMenuSectionItemAsync
     *
     * Create menu section item
     *
     * @param  int $menu_id Menu identifier (required)
     * @param  int $menu_section_id Menu section identifier (required)
     * @param  \Flipdish\\Client\Models\MenuSectionItemBase $menu_section_item Menu section item (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createMenuSectionItemAsync($menu_id, $menu_section_id, $menu_section_item)
    {
        return $this->createMenuSectionItemAsyncWithHttpInfo($menu_id, $menu_section_id, $menu_section_item)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createMenuSectionItemAsyncWithHttpInfo
     *
     * Create menu section item
     *
     * @param  int $menu_id Menu identifier (required)
     * @param  int $menu_section_id Menu section identifier (required)
     * @param  \Flipdish\\Client\Models\MenuSectionItemBase $menu_section_item Menu section item (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createMenuSectionItemAsyncWithHttpInfo($menu_id, $menu_section_id, $menu_section_item)
    {
        $returnType = 'object';
        $request = $this->createMenuSectionItemRequest($menu_id, $menu_section_id, $menu_section_item);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createMenuSectionItem'
     *
     * @param  int $menu_id Menu identifier (required)
     * @param  int $menu_section_id Menu section identifier (required)
     * @param  \Flipdish\\Client\Models\MenuSectionItemBase $menu_section_item Menu section item (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function createMenuSectionItemRequest($menu_id, $menu_section_id, $menu_section_item)
    {
        // verify the required parameter 'menu_id' is set
        if ($menu_id === null || (is_array($menu_id) && count($menu_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $menu_id when calling createMenuSectionItem'
            );
        }
        // verify the required parameter 'menu_section_id' is set
        if ($menu_section_id === null || (is_array($menu_section_id) && count($menu_section_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $menu_section_id when calling createMenuSectionItem'
            );
        }
        // verify the required parameter 'menu_section_item' is set
        if ($menu_section_item === null || (is_array($menu_section_item) && count($menu_section_item) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $menu_section_item when calling createMenuSectionItem'
            );
        }

        $resourcePath = '/api/v1.0/menus/{menuId}/sections/{menuSectionId}/sectionitems';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($menu_id !== null) {
            $resourcePath = str_replace(
                '{' . 'menuId' . '}',
                ObjectSerializer::toPathValue($menu_id),
                $resourcePath
            );
        }
        // path params
        if ($menu_section_id !== null) {
            $resourcePath = str_replace(
                '{' . 'menuSectionId' . '}',
                ObjectSerializer::toPathValue($menu_section_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($menu_section_item)) {
            $_tempBody = $menu_section_item;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml'],
                ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createMenuSectionItemFromCatalogItems
     *
     * Create menu section items from a list of Catalog Items
     *
     * @param  int $menu_id Menu identifier (required)
     * @param  int $menu_section_id Menu section identifier (required)
     * @param  \Flipdish\\Client\Models\CreateMenuSectionItemFromCatalogItems $create_from_catalog_items Information to create the new MenuSectionItems (required)
     *
     * @throws \Flipdish\\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object
     */
    public function createMenuSectionItemFromCatalogItems($menu_id, $menu_section_id, $create_from_catalog_items)
    {
        list($response) = $this->createMenuSectionItemFromCatalogItemsWithHttpInfo($menu_id, $menu_section_id, $create_from_catalog_items);
        return $response;
    }

    /**
     * Operation createMenuSectionItemFromCatalogItemsWithHttpInfo
     *
     * Create menu section items from a list of Catalog Items
     *
     * @param  int $menu_id Menu identifier (required)
     * @param  int $menu_section_id Menu section identifier (required)
     * @param  \Flipdish\\Client\Models\CreateMenuSectionItemFromCatalogItems $create_from_catalog_items Information to create the new MenuSectionItems (required)
     *
     * @throws \Flipdish\\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function createMenuSectionItemFromCatalogItemsWithHttpInfo($menu_id, $menu_section_id, $create_from_catalog_items)
    {
        $returnType = 'object';
        $request = $this->createMenuSectionItemFromCatalogItemsRequest($menu_id, $menu_section_id, $create_from_catalog_items);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Flipdish\\Client\Models\RestApiResultCreatedMenuSectionItems',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Flipdish\\Client\Models\RestApiErrorResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Flipdish\\Client\Models\RestApiUnauthorizedResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Flipdish\\Client\Models\RestApiForbiddenResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createMenuSectionItemFromCatalogItemsAsync
     *
     * Create menu section items from a list of Catalog Items
     *
     * @param  int $menu_id Menu identifier (required)
     * @param  int $menu_section_id Menu section identifier (required)
     * @param  \Flipdish\\Client\Models\CreateMenuSectionItemFromCatalogItems $create_from_catalog_items Information to create the new MenuSectionItems (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createMenuSectionItemFromCatalogItemsAsync($menu_id, $menu_section_id, $create_from_catalog_items)
    {
        return $this->createMenuSectionItemFromCatalogItemsAsyncWithHttpInfo($menu_id, $menu_section_id, $create_from_catalog_items)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createMenuSectionItemFromCatalogItemsAsyncWithHttpInfo
     *
     * Create menu section items from a list of Catalog Items
     *
     * @param  int $menu_id Menu identifier (required)
     * @param  int $menu_section_id Menu section identifier (required)
     * @param  \Flipdish\\Client\Models\CreateMenuSectionItemFromCatalogItems $create_from_catalog_items Information to create the new MenuSectionItems (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createMenuSectionItemFromCatalogItemsAsyncWithHttpInfo($menu_id, $menu_section_id, $create_from_catalog_items)
    {
        $returnType = 'object';
        $request = $this->createMenuSectionItemFromCatalogItemsRequest($menu_id, $menu_section_id, $create_from_catalog_items);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createMenuSectionItemFromCatalogItems'
     *
     * @param  int $menu_id Menu identifier (required)
     * @param  int $menu_section_id Menu section identifier (required)
     * @param  \Flipdish\\Client\Models\CreateMenuSectionItemFromCatalogItems $create_from_catalog_items Information to create the new MenuSectionItems (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function createMenuSectionItemFromCatalogItemsRequest($menu_id, $menu_section_id, $create_from_catalog_items)
    {
        // verify the required parameter 'menu_id' is set
        if ($menu_id === null || (is_array($menu_id) && count($menu_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $menu_id when calling createMenuSectionItemFromCatalogItems'
            );
        }
        // verify the required parameter 'menu_section_id' is set
        if ($menu_section_id === null || (is_array($menu_section_id) && count($menu_section_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $menu_section_id when calling createMenuSectionItemFromCatalogItems'
            );
        }
        // verify the required parameter 'create_from_catalog_items' is set
        if ($create_from_catalog_items === null || (is_array($create_from_catalog_items) && count($create_from_catalog_items) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $create_from_catalog_items when calling createMenuSectionItemFromCatalogItems'
            );
        }

        $resourcePath = '/api/v1.0/menus/{menuId}/sections/{menuSectionId}/sectionitems/add-catalogitems';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($menu_id !== null) {
            $resourcePath = str_replace(
                '{' . 'menuId' . '}',
                ObjectSerializer::toPathValue($menu_id),
                $resourcePath
            );
        }
        // path params
        if ($menu_section_id !== null) {
            $resourcePath = str_replace(
                '{' . 'menuSectionId' . '}',
                ObjectSerializer::toPathValue($menu_section_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($create_from_catalog_items)) {
            $_tempBody = $create_from_catalog_items;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml'],
                ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteMenuSectionItem
     *
     * Delete menu section item
     *
     * @param  int $menu_id Menu identifier (required)
     * @param  int $menu_section_id Menu section identifier (required)
     * @param  int $menu_section_item_id Menu section item identifier (required)
     *
     * @throws \Flipdish\\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteMenuSectionItem($menu_id, $menu_section_id, $menu_section_item_id)
    {
        $this->deleteMenuSectionItemWithHttpInfo($menu_id, $menu_section_id, $menu_section_item_id);
    }

    /**
     * Operation deleteMenuSectionItemWithHttpInfo
     *
     * Delete menu section item
     *
     * @param  int $menu_id Menu identifier (required)
     * @param  int $menu_section_id Menu section identifier (required)
     * @param  int $menu_section_item_id Menu section item identifier (required)
     *
     * @throws \Flipdish\\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteMenuSectionItemWithHttpInfo($menu_id, $menu_section_id, $menu_section_item_id)
    {
        $returnType = '';
        $request = $this->deleteMenuSectionItemRequest($menu_id, $menu_section_id, $menu_section_item_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Flipdish\\Client\Models\RestApiErrorResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Flipdish\\Client\Models\RestApiUnauthorizedResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Flipdish\\Client\Models\RestApiForbiddenResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteMenuSectionItemAsync
     *
     * Delete menu section item
     *
     * @param  int $menu_id Menu identifier (required)
     * @param  int $menu_section_id Menu section identifier (required)
     * @param  int $menu_section_item_id Menu section item identifier (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteMenuSectionItemAsync($menu_id, $menu_section_id, $menu_section_item_id)
    {
        return $this->deleteMenuSectionItemAsyncWithHttpInfo($menu_id, $menu_section_id, $menu_section_item_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteMenuSectionItemAsyncWithHttpInfo
     *
     * Delete menu section item
     *
     * @param  int $menu_id Menu identifier (required)
     * @param  int $menu_section_id Menu section identifier (required)
     * @param  int $menu_section_item_id Menu section item identifier (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteMenuSectionItemAsyncWithHttpInfo($menu_id, $menu_section_id, $menu_section_item_id)
    {
        $returnType = '';
        $request = $this->deleteMenuSectionItemRequest($menu_id, $menu_section_id, $menu_section_item_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteMenuSectionItem'
     *
     * @param  int $menu_id Menu identifier (required)
     * @param  int $menu_section_id Menu section identifier (required)
     * @param  int $menu_section_item_id Menu section item identifier (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteMenuSectionItemRequest($menu_id, $menu_section_id, $menu_section_item_id)
    {
        // verify the required parameter 'menu_id' is set
        if ($menu_id === null || (is_array($menu_id) && count($menu_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $menu_id when calling deleteMenuSectionItem'
            );
        }
        // verify the required parameter 'menu_section_id' is set
        if ($menu_section_id === null || (is_array($menu_section_id) && count($menu_section_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $menu_section_id when calling deleteMenuSectionItem'
            );
        }
        // verify the required parameter 'menu_section_item_id' is set
        if ($menu_section_item_id === null || (is_array($menu_section_item_id) && count($menu_section_item_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $menu_section_item_id when calling deleteMenuSectionItem'
            );
        }

        $resourcePath = '/api/v1.0/menus/{menuId}/sections/{menuSectionId}/sectionitems/{menuSectionItemId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($menu_id !== null) {
            $resourcePath = str_replace(
                '{' . 'menuId' . '}',
                ObjectSerializer::toPathValue($menu_id),
                $resourcePath
            );
        }
        // path params
        if ($menu_section_id !== null) {
            $resourcePath = str_replace(
                '{' . 'menuSectionId' . '}',
                ObjectSerializer::toPathValue($menu_section_id),
                $resourcePath
            );
        }
        // path params
        if ($menu_section_item_id !== null) {
            $resourcePath = str_replace(
                '{' . 'menuSectionItemId' . '}',
                ObjectSerializer::toPathValue($menu_section_item_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteMenuSectionItemImage
     *
     * Delete menu section item image
     *
     * @param  int $menu_id Menu identifier (required)
     * @param  int $menu_section_id Menu section identifier (required)
     * @param  int $menu_section_item_id Menu section item identifier (required)
     *
     * @throws \Flipdish\\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteMenuSectionItemImage($menu_id, $menu_section_id, $menu_section_item_id)
    {
        $this->deleteMenuSectionItemImageWithHttpInfo($menu_id, $menu_section_id, $menu_section_item_id);
    }

    /**
     * Operation deleteMenuSectionItemImageWithHttpInfo
     *
     * Delete menu section item image
     *
     * @param  int $menu_id Menu identifier (required)
     * @param  int $menu_section_id Menu section identifier (required)
     * @param  int $menu_section_item_id Menu section item identifier (required)
     *
     * @throws \Flipdish\\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteMenuSectionItemImageWithHttpInfo($menu_id, $menu_section_id, $menu_section_item_id)
    {
        $returnType = '';
        $request = $this->deleteMenuSectionItemImageRequest($menu_id, $menu_section_id, $menu_section_item_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Flipdish\\Client\Models\RestApiErrorResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Flipdish\\Client\Models\RestApiUnauthorizedResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Flipdish\\Client\Models\RestApiForbiddenResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteMenuSectionItemImageAsync
     *
     * Delete menu section item image
     *
     * @param  int $menu_id Menu identifier (required)
     * @param  int $menu_section_id Menu section identifier (required)
     * @param  int $menu_section_item_id Menu section item identifier (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteMenuSectionItemImageAsync($menu_id, $menu_section_id, $menu_section_item_id)
    {
        return $this->deleteMenuSectionItemImageAsyncWithHttpInfo($menu_id, $menu_section_id, $menu_section_item_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteMenuSectionItemImageAsyncWithHttpInfo
     *
     * Delete menu section item image
     *
     * @param  int $menu_id Menu identifier (required)
     * @param  int $menu_section_id Menu section identifier (required)
     * @param  int $menu_section_item_id Menu section item identifier (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteMenuSectionItemImageAsyncWithHttpInfo($menu_id, $menu_section_id, $menu_section_item_id)
    {
        $returnType = '';
        $request = $this->deleteMenuSectionItemImageRequest($menu_id, $menu_section_id, $menu_section_item_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteMenuSectionItemImage'
     *
     * @param  int $menu_id Menu identifier (required)
     * @param  int $menu_section_id Menu section identifier (required)
     * @param  int $menu_section_item_id Menu section item identifier (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteMenuSectionItemImageRequest($menu_id, $menu_section_id, $menu_section_item_id)
    {
        // verify the required parameter 'menu_id' is set
        if ($menu_id === null || (is_array($menu_id) && count($menu_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $menu_id when calling deleteMenuSectionItemImage'
            );
        }
        // verify the required parameter 'menu_section_id' is set
        if ($menu_section_id === null || (is_array($menu_section_id) && count($menu_section_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $menu_section_id when calling deleteMenuSectionItemImage'
            );
        }
        // verify the required parameter 'menu_section_item_id' is set
        if ($menu_section_item_id === null || (is_array($menu_section_item_id) && count($menu_section_item_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $menu_section_item_id when calling deleteMenuSectionItemImage'
            );
        }

        $resourcePath = '/api/v1.0/menus/{menuId}/sections/{menuSectionId}/sectionitems/{menuSectionItemId}/image';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($menu_id !== null) {
            $resourcePath = str_replace(
                '{' . 'menuId' . '}',
                ObjectSerializer::toPathValue($menu_id),
                $resourcePath
            );
        }
        // path params
        if ($menu_section_id !== null) {
            $resourcePath = str_replace(
                '{' . 'menuSectionId' . '}',
                ObjectSerializer::toPathValue($menu_section_id),
                $resourcePath
            );
        }
        // path params
        if ($menu_section_item_id !== null) {
            $resourcePath = str_replace(
                '{' . 'menuSectionItemId' . '}',
                ObjectSerializer::toPathValue($menu_section_item_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getMenuItemById
     *
     * Get menu item by identifier
     *
     * @param  int $menu_id Menu identifier (required)
     * @param  int $menu_section_id Menu section identifier (required)
     * @param  int $menu_section_item_id Menu item identifier (required)
     *
     * @throws \Flipdish\\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Flipdish\\Client\Models\RestApiResultMenuSectionItem
     */
    public function getMenuItemById($menu_id, $menu_section_id, $menu_section_item_id)
    {
        list($response) = $this->getMenuItemByIdWithHttpInfo($menu_id, $menu_section_id, $menu_section_item_id);
        return $response;
    }

    /**
     * Operation getMenuItemByIdWithHttpInfo
     *
     * Get menu item by identifier
     *
     * @param  int $menu_id Menu identifier (required)
     * @param  int $menu_section_id Menu section identifier (required)
     * @param  int $menu_section_item_id Menu item identifier (required)
     *
     * @throws \Flipdish\\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Flipdish\\Client\Models\RestApiResultMenuSectionItem, HTTP status code, HTTP response headers (array of strings)
     */
    public function getMenuItemByIdWithHttpInfo($menu_id, $menu_section_id, $menu_section_item_id)
    {
        $returnType = '\Flipdish\\Client\Models\RestApiResultMenuSectionItem';
        $request = $this->getMenuItemByIdRequest($menu_id, $menu_section_id, $menu_section_item_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Flipdish\\Client\Models\RestApiResultMenuSectionItem',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Flipdish\\Client\Models\RestApiErrorResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Flipdish\\Client\Models\RestApiUnauthorizedResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Flipdish\\Client\Models\RestApiForbiddenResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getMenuItemByIdAsync
     *
     * Get menu item by identifier
     *
     * @param  int $menu_id Menu identifier (required)
     * @param  int $menu_section_id Menu section identifier (required)
     * @param  int $menu_section_item_id Menu item identifier (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getMenuItemByIdAsync($menu_id, $menu_section_id, $menu_section_item_id)
    {
        return $this->getMenuItemByIdAsyncWithHttpInfo($menu_id, $menu_section_id, $menu_section_item_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getMenuItemByIdAsyncWithHttpInfo
     *
     * Get menu item by identifier
     *
     * @param  int $menu_id Menu identifier (required)
     * @param  int $menu_section_id Menu section identifier (required)
     * @param  int $menu_section_item_id Menu item identifier (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getMenuItemByIdAsyncWithHttpInfo($menu_id, $menu_section_id, $menu_section_item_id)
    {
        $returnType = '\Flipdish\\Client\Models\RestApiResultMenuSectionItem';
        $request = $this->getMenuItemByIdRequest($menu_id, $menu_section_id, $menu_section_item_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getMenuItemById'
     *
     * @param  int $menu_id Menu identifier (required)
     * @param  int $menu_section_id Menu section identifier (required)
     * @param  int $menu_section_item_id Menu item identifier (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getMenuItemByIdRequest($menu_id, $menu_section_id, $menu_section_item_id)
    {
        // verify the required parameter 'menu_id' is set
        if ($menu_id === null || (is_array($menu_id) && count($menu_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $menu_id when calling getMenuItemById'
            );
        }
        // verify the required parameter 'menu_section_id' is set
        if ($menu_section_id === null || (is_array($menu_section_id) && count($menu_section_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $menu_section_id when calling getMenuItemById'
            );
        }
        // verify the required parameter 'menu_section_item_id' is set
        if ($menu_section_item_id === null || (is_array($menu_section_item_id) && count($menu_section_item_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $menu_section_item_id when calling getMenuItemById'
            );
        }

        $resourcePath = '/api/v1.0/menus/{menuId}/sections/{menuSectionId}/sectionitems/{menuSectionItemId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($menu_id !== null) {
            $resourcePath = str_replace(
                '{' . 'menuId' . '}',
                ObjectSerializer::toPathValue($menu_id),
                $resourcePath
            );
        }
        // path params
        if ($menu_section_id !== null) {
            $resourcePath = str_replace(
                '{' . 'menuSectionId' . '}',
                ObjectSerializer::toPathValue($menu_section_id),
                $resourcePath
            );
        }
        // path params
        if ($menu_section_item_id !== null) {
            $resourcePath = str_replace(
                '{' . 'menuSectionItemId' . '}',
                ObjectSerializer::toPathValue($menu_section_item_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getMenuItems
     *
     * Get menu items
     *
     * @param  int $menu_id Menu identifier (required)
     * @param  int $menu_section_id Menu section identifier (required)
     *
     * @throws \Flipdish\\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Flipdish\\Client\Models\RestApiArrayResultMenuSectionItem
     */
    public function getMenuItems($menu_id, $menu_section_id)
    {
        list($response) = $this->getMenuItemsWithHttpInfo($menu_id, $menu_section_id);
        return $response;
    }

    /**
     * Operation getMenuItemsWithHttpInfo
     *
     * Get menu items
     *
     * @param  int $menu_id Menu identifier (required)
     * @param  int $menu_section_id Menu section identifier (required)
     *
     * @throws \Flipdish\\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Flipdish\\Client\Models\RestApiArrayResultMenuSectionItem, HTTP status code, HTTP response headers (array of strings)
     */
    public function getMenuItemsWithHttpInfo($menu_id, $menu_section_id)
    {
        $returnType = '\Flipdish\\Client\Models\RestApiArrayResultMenuSectionItem';
        $request = $this->getMenuItemsRequest($menu_id, $menu_section_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Flipdish\\Client\Models\RestApiArrayResultMenuSectionItem',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Flipdish\\Client\Models\RestApiErrorResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Flipdish\\Client\Models\RestApiUnauthorizedResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Flipdish\\Client\Models\RestApiForbiddenResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getMenuItemsAsync
     *
     * Get menu items
     *
     * @param  int $menu_id Menu identifier (required)
     * @param  int $menu_section_id Menu section identifier (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getMenuItemsAsync($menu_id, $menu_section_id)
    {
        return $this->getMenuItemsAsyncWithHttpInfo($menu_id, $menu_section_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getMenuItemsAsyncWithHttpInfo
     *
     * Get menu items
     *
     * @param  int $menu_id Menu identifier (required)
     * @param  int $menu_section_id Menu section identifier (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getMenuItemsAsyncWithHttpInfo($menu_id, $menu_section_id)
    {
        $returnType = '\Flipdish\\Client\Models\RestApiArrayResultMenuSectionItem';
        $request = $this->getMenuItemsRequest($menu_id, $menu_section_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getMenuItems'
     *
     * @param  int $menu_id Menu identifier (required)
     * @param  int $menu_section_id Menu section identifier (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getMenuItemsRequest($menu_id, $menu_section_id)
    {
        // verify the required parameter 'menu_id' is set
        if ($menu_id === null || (is_array($menu_id) && count($menu_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $menu_id when calling getMenuItems'
            );
        }
        // verify the required parameter 'menu_section_id' is set
        if ($menu_section_id === null || (is_array($menu_section_id) && count($menu_section_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $menu_section_id when calling getMenuItems'
            );
        }

        $resourcePath = '/api/v1.0/menus/{menuId}/sections/{menuSectionId}/sectionitems';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($menu_id !== null) {
            $resourcePath = str_replace(
                '{' . 'menuId' . '}',
                ObjectSerializer::toPathValue($menu_id),
                $resourcePath
            );
        }
        // path params
        if ($menu_section_id !== null) {
            $resourcePath = str_replace(
                '{' . 'menuSectionId' . '}',
                ObjectSerializer::toPathValue($menu_section_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation moveMenuItem
     *
     * [PRIVATE API]Move an Item within a menu
     *
     * @param  int $menu_id Menu identifier (required)
     * @param  int $menu_section_id Section to put item in (will usually be original section) (required)
     * @param  int $menu_section_item_id ID of Item to be moved (required)
     * @param  int $destination_display_order New Display Order of item (required)
     *
     * @throws \Flipdish\\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function moveMenuItem($menu_id, $menu_section_id, $menu_section_item_id, $destination_display_order)
    {
        $this->moveMenuItemWithHttpInfo($menu_id, $menu_section_id, $menu_section_item_id, $destination_display_order);
    }

    /**
     * Operation moveMenuItemWithHttpInfo
     *
     * [PRIVATE API]Move an Item within a menu
     *
     * @param  int $menu_id Menu identifier (required)
     * @param  int $menu_section_id Section to put item in (will usually be original section) (required)
     * @param  int $menu_section_item_id ID of Item to be moved (required)
     * @param  int $destination_display_order New Display Order of item (required)
     *
     * @throws \Flipdish\\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function moveMenuItemWithHttpInfo($menu_id, $menu_section_id, $menu_section_item_id, $destination_display_order)
    {
        $returnType = '';
        $request = $this->moveMenuItemRequest($menu_id, $menu_section_id, $menu_section_item_id, $destination_display_order);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Flipdish\\Client\Models\RestApiErrorResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Flipdish\\Client\Models\RestApiUnauthorizedResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Flipdish\\Client\Models\RestApiForbiddenResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation moveMenuItemAsync
     *
     * [PRIVATE API]Move an Item within a menu
     *
     * @param  int $menu_id Menu identifier (required)
     * @param  int $menu_section_id Section to put item in (will usually be original section) (required)
     * @param  int $menu_section_item_id ID of Item to be moved (required)
     * @param  int $destination_display_order New Display Order of item (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function moveMenuItemAsync($menu_id, $menu_section_id, $menu_section_item_id, $destination_display_order)
    {
        return $this->moveMenuItemAsyncWithHttpInfo($menu_id, $menu_section_id, $menu_section_item_id, $destination_display_order)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation moveMenuItemAsyncWithHttpInfo
     *
     * [PRIVATE API]Move an Item within a menu
     *
     * @param  int $menu_id Menu identifier (required)
     * @param  int $menu_section_id Section to put item in (will usually be original section) (required)
     * @param  int $menu_section_item_id ID of Item to be moved (required)
     * @param  int $destination_display_order New Display Order of item (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function moveMenuItemAsyncWithHttpInfo($menu_id, $menu_section_id, $menu_section_item_id, $destination_display_order)
    {
        $returnType = '';
        $request = $this->moveMenuItemRequest($menu_id, $menu_section_id, $menu_section_item_id, $destination_display_order);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'moveMenuItem'
     *
     * @param  int $menu_id Menu identifier (required)
     * @param  int $menu_section_id Section to put item in (will usually be original section) (required)
     * @param  int $menu_section_item_id ID of Item to be moved (required)
     * @param  int $destination_display_order New Display Order of item (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function moveMenuItemRequest($menu_id, $menu_section_id, $menu_section_item_id, $destination_display_order)
    {
        // verify the required parameter 'menu_id' is set
        if ($menu_id === null || (is_array($menu_id) && count($menu_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $menu_id when calling moveMenuItem'
            );
        }
        // verify the required parameter 'menu_section_id' is set
        if ($menu_section_id === null || (is_array($menu_section_id) && count($menu_section_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $menu_section_id when calling moveMenuItem'
            );
        }
        // verify the required parameter 'menu_section_item_id' is set
        if ($menu_section_item_id === null || (is_array($menu_section_item_id) && count($menu_section_item_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $menu_section_item_id when calling moveMenuItem'
            );
        }
        // verify the required parameter 'destination_display_order' is set
        if ($destination_display_order === null || (is_array($destination_display_order) && count($destination_display_order) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $destination_display_order when calling moveMenuItem'
            );
        }

        $resourcePath = '/api/v1.0/menus/{menuId}/sections/{menuSectionId}/sectionitems/{menuSectionItemId}/setorder/{destinationDisplayOrder}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($menu_id !== null) {
            $resourcePath = str_replace(
                '{' . 'menuId' . '}',
                ObjectSerializer::toPathValue($menu_id),
                $resourcePath
            );
        }
        // path params
        if ($menu_section_id !== null) {
            $resourcePath = str_replace(
                '{' . 'menuSectionId' . '}',
                ObjectSerializer::toPathValue($menu_section_id),
                $resourcePath
            );
        }
        // path params
        if ($menu_section_item_id !== null) {
            $resourcePath = str_replace(
                '{' . 'menuSectionItemId' . '}',
                ObjectSerializer::toPathValue($menu_section_item_id),
                $resourcePath
            );
        }
        // path params
        if ($destination_display_order !== null) {
            $resourcePath = str_replace(
                '{' . 'destinationDisplayOrder' . '}',
                ObjectSerializer::toPathValue($destination_display_order),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation setSectionItemTax
     *
     * [PRIVATE API]Move an Item within a menu
     *
     * @param  int $menu_id Menu identifier (required)
     * @param  int $menu_section_id Section to put item in (will usually be original section) (required)
     * @param  int $menu_section_item_id ID of Item to be moved (required)
     * @param  int $tax_rate_id tax rate to be set against item (required)
     *
     * @throws \Flipdish\\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function setSectionItemTax($menu_id, $menu_section_id, $menu_section_item_id, $tax_rate_id)
    {
        $this->setSectionItemTaxWithHttpInfo($menu_id, $menu_section_id, $menu_section_item_id, $tax_rate_id);
    }

    /**
     * Operation setSectionItemTaxWithHttpInfo
     *
     * [PRIVATE API]Move an Item within a menu
     *
     * @param  int $menu_id Menu identifier (required)
     * @param  int $menu_section_id Section to put item in (will usually be original section) (required)
     * @param  int $menu_section_item_id ID of Item to be moved (required)
     * @param  int $tax_rate_id tax rate to be set against item (required)
     *
     * @throws \Flipdish\\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function setSectionItemTaxWithHttpInfo($menu_id, $menu_section_id, $menu_section_item_id, $tax_rate_id)
    {
        $returnType = '';
        $request = $this->setSectionItemTaxRequest($menu_id, $menu_section_id, $menu_section_item_id, $tax_rate_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Flipdish\\Client\Models\RestApiErrorResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Flipdish\\Client\Models\RestApiUnauthorizedResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Flipdish\\Client\Models\RestApiForbiddenResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation setSectionItemTaxAsync
     *
     * [PRIVATE API]Move an Item within a menu
     *
     * @param  int $menu_id Menu identifier (required)
     * @param  int $menu_section_id Section to put item in (will usually be original section) (required)
     * @param  int $menu_section_item_id ID of Item to be moved (required)
     * @param  int $tax_rate_id tax rate to be set against item (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function setSectionItemTaxAsync($menu_id, $menu_section_id, $menu_section_item_id, $tax_rate_id)
    {
        return $this->setSectionItemTaxAsyncWithHttpInfo($menu_id, $menu_section_id, $menu_section_item_id, $tax_rate_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation setSectionItemTaxAsyncWithHttpInfo
     *
     * [PRIVATE API]Move an Item within a menu
     *
     * @param  int $menu_id Menu identifier (required)
     * @param  int $menu_section_id Section to put item in (will usually be original section) (required)
     * @param  int $menu_section_item_id ID of Item to be moved (required)
     * @param  int $tax_rate_id tax rate to be set against item (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function setSectionItemTaxAsyncWithHttpInfo($menu_id, $menu_section_id, $menu_section_item_id, $tax_rate_id)
    {
        $returnType = '';
        $request = $this->setSectionItemTaxRequest($menu_id, $menu_section_id, $menu_section_item_id, $tax_rate_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'setSectionItemTax'
     *
     * @param  int $menu_id Menu identifier (required)
     * @param  int $menu_section_id Section to put item in (will usually be original section) (required)
     * @param  int $menu_section_item_id ID of Item to be moved (required)
     * @param  int $tax_rate_id tax rate to be set against item (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function setSectionItemTaxRequest($menu_id, $menu_section_id, $menu_section_item_id, $tax_rate_id)
    {
        // verify the required parameter 'menu_id' is set
        if ($menu_id === null || (is_array($menu_id) && count($menu_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $menu_id when calling setSectionItemTax'
            );
        }
        // verify the required parameter 'menu_section_id' is set
        if ($menu_section_id === null || (is_array($menu_section_id) && count($menu_section_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $menu_section_id when calling setSectionItemTax'
            );
        }
        // verify the required parameter 'menu_section_item_id' is set
        if ($menu_section_item_id === null || (is_array($menu_section_item_id) && count($menu_section_item_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $menu_section_item_id when calling setSectionItemTax'
            );
        }
        // verify the required parameter 'tax_rate_id' is set
        if ($tax_rate_id === null || (is_array($tax_rate_id) && count($tax_rate_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tax_rate_id when calling setSectionItemTax'
            );
        }

        $resourcePath = '/api/v1.0/menus/{menuId}/sections/{menuSectionId}/sectionitems/{menuSectionItemId}/taxrate/{taxRateId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($menu_id !== null) {
            $resourcePath = str_replace(
                '{' . 'menuId' . '}',
                ObjectSerializer::toPathValue($menu_id),
                $resourcePath
            );
        }
        // path params
        if ($menu_section_id !== null) {
            $resourcePath = str_replace(
                '{' . 'menuSectionId' . '}',
                ObjectSerializer::toPathValue($menu_section_id),
                $resourcePath
            );
        }
        // path params
        if ($menu_section_item_id !== null) {
            $resourcePath = str_replace(
                '{' . 'menuSectionItemId' . '}',
                ObjectSerializer::toPathValue($menu_section_item_id),
                $resourcePath
            );
        }
        // path params
        if ($tax_rate_id !== null) {
            $resourcePath = str_replace(
                '{' . 'taxRateId' . '}',
                ObjectSerializer::toPathValue($tax_rate_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateMenuSectionItem
     *
     * Update menu section item
     *
     * @param  int $menu_id Menu identifier (required)
     * @param  int $menu_section_id Menu section identifier (required)
     * @param  int $menu_section_item_id Menu section item identifier (required)
     * @param  \Flipdish\\Client\Models\MenuSectionItemBase $menu_section_item Menu section item (delta) (required)
     * @param  double $undo_after An optional time period, in hours, after which the hide-section operaton will be undone. (optional)
     *
     * @throws \Flipdish\\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function updateMenuSectionItem($menu_id, $menu_section_id, $menu_section_item_id, $menu_section_item, $undo_after = null)
    {
        $this->updateMenuSectionItemWithHttpInfo($menu_id, $menu_section_id, $menu_section_item_id, $menu_section_item, $undo_after);
    }

    /**
     * Operation updateMenuSectionItemWithHttpInfo
     *
     * Update menu section item
     *
     * @param  int $menu_id Menu identifier (required)
     * @param  int $menu_section_id Menu section identifier (required)
     * @param  int $menu_section_item_id Menu section item identifier (required)
     * @param  \Flipdish\\Client\Models\MenuSectionItemBase $menu_section_item Menu section item (delta) (required)
     * @param  double $undo_after An optional time period, in hours, after which the hide-section operaton will be undone. (optional)
     *
     * @throws \Flipdish\\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateMenuSectionItemWithHttpInfo($menu_id, $menu_section_id, $menu_section_item_id, $menu_section_item, $undo_after = null)
    {
        $returnType = '';
        $request = $this->updateMenuSectionItemRequest($menu_id, $menu_section_id, $menu_section_item_id, $menu_section_item, $undo_after);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Flipdish\\Client\Models\RestApiErrorResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Flipdish\\Client\Models\RestApiUnauthorizedResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Flipdish\\Client\Models\RestApiForbiddenResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateMenuSectionItemAsync
     *
     * Update menu section item
     *
     * @param  int $menu_id Menu identifier (required)
     * @param  int $menu_section_id Menu section identifier (required)
     * @param  int $menu_section_item_id Menu section item identifier (required)
     * @param  \Flipdish\\Client\Models\MenuSectionItemBase $menu_section_item Menu section item (delta) (required)
     * @param  double $undo_after An optional time period, in hours, after which the hide-section operaton will be undone. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateMenuSectionItemAsync($menu_id, $menu_section_id, $menu_section_item_id, $menu_section_item, $undo_after = null)
    {
        return $this->updateMenuSectionItemAsyncWithHttpInfo($menu_id, $menu_section_id, $menu_section_item_id, $menu_section_item, $undo_after)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateMenuSectionItemAsyncWithHttpInfo
     *
     * Update menu section item
     *
     * @param  int $menu_id Menu identifier (required)
     * @param  int $menu_section_id Menu section identifier (required)
     * @param  int $menu_section_item_id Menu section item identifier (required)
     * @param  \Flipdish\\Client\Models\MenuSectionItemBase $menu_section_item Menu section item (delta) (required)
     * @param  double $undo_after An optional time period, in hours, after which the hide-section operaton will be undone. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateMenuSectionItemAsyncWithHttpInfo($menu_id, $menu_section_id, $menu_section_item_id, $menu_section_item, $undo_after = null)
    {
        $returnType = '';
        $request = $this->updateMenuSectionItemRequest($menu_id, $menu_section_id, $menu_section_item_id, $menu_section_item, $undo_after);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateMenuSectionItem'
     *
     * @param  int $menu_id Menu identifier (required)
     * @param  int $menu_section_id Menu section identifier (required)
     * @param  int $menu_section_item_id Menu section item identifier (required)
     * @param  \Flipdish\\Client\Models\MenuSectionItemBase $menu_section_item Menu section item (delta) (required)
     * @param  double $undo_after An optional time period, in hours, after which the hide-section operaton will be undone. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateMenuSectionItemRequest($menu_id, $menu_section_id, $menu_section_item_id, $menu_section_item, $undo_after = null)
    {
        // verify the required parameter 'menu_id' is set
        if ($menu_id === null || (is_array($menu_id) && count($menu_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $menu_id when calling updateMenuSectionItem'
            );
        }
        // verify the required parameter 'menu_section_id' is set
        if ($menu_section_id === null || (is_array($menu_section_id) && count($menu_section_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $menu_section_id when calling updateMenuSectionItem'
            );
        }
        // verify the required parameter 'menu_section_item_id' is set
        if ($menu_section_item_id === null || (is_array($menu_section_item_id) && count($menu_section_item_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $menu_section_item_id when calling updateMenuSectionItem'
            );
        }
        // verify the required parameter 'menu_section_item' is set
        if ($menu_section_item === null || (is_array($menu_section_item) && count($menu_section_item) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $menu_section_item when calling updateMenuSectionItem'
            );
        }

        $resourcePath = '/api/v1.0/menus/{menuId}/sections/{menuSectionId}/sectionitems/{menuSectionItemId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($undo_after !== null) {
            $queryParams['undoAfter'] = ObjectSerializer::toQueryValue($undo_after);
        }

        // path params
        if ($menu_id !== null) {
            $resourcePath = str_replace(
                '{' . 'menuId' . '}',
                ObjectSerializer::toPathValue($menu_id),
                $resourcePath
            );
        }
        // path params
        if ($menu_section_id !== null) {
            $resourcePath = str_replace(
                '{' . 'menuSectionId' . '}',
                ObjectSerializer::toPathValue($menu_section_id),
                $resourcePath
            );
        }
        // path params
        if ($menu_section_item_id !== null) {
            $resourcePath = str_replace(
                '{' . 'menuSectionItemId' . '}',
                ObjectSerializer::toPathValue($menu_section_item_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($menu_section_item)) {
            $_tempBody = $menu_section_item;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml'],
                ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation uploadMenuSectionItemImage
     *
     * Upload menu section item image
     *
     * @param  int $menu_id Menu identifier (required)
     * @param  int $menu_section_id Menu section identifier (required)
     * @param  int $menu_section_item_id Menu section item identifier (required)
     * @param  \SplFileObject $image Menu section item image (required)
     *
     * @throws \Flipdish\\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Flipdish\\Client\Models\RestApiStringResult
     */
    public function uploadMenuSectionItemImage($menu_id, $menu_section_id, $menu_section_item_id, $image)
    {
        list($response) = $this->uploadMenuSectionItemImageWithHttpInfo($menu_id, $menu_section_id, $menu_section_item_id, $image);
        return $response;
    }

    /**
     * Operation uploadMenuSectionItemImageWithHttpInfo
     *
     * Upload menu section item image
     *
     * @param  int $menu_id Menu identifier (required)
     * @param  int $menu_section_id Menu section identifier (required)
     * @param  int $menu_section_item_id Menu section item identifier (required)
     * @param  \SplFileObject $image Menu section item image (required)
     *
     * @throws \Flipdish\\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Flipdish\\Client\Models\RestApiStringResult, HTTP status code, HTTP response headers (array of strings)
     */
    public function uploadMenuSectionItemImageWithHttpInfo($menu_id, $menu_section_id, $menu_section_item_id, $image)
    {
        $returnType = '\Flipdish\\Client\Models\RestApiStringResult';
        $request = $this->uploadMenuSectionItemImageRequest($menu_id, $menu_section_id, $menu_section_item_id, $image);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Flipdish\\Client\Models\RestApiStringResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Flipdish\\Client\Models\RestApiErrorResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Flipdish\\Client\Models\RestApiUnauthorizedResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Flipdish\\Client\Models\RestApiForbiddenResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation uploadMenuSectionItemImageAsync
     *
     * Upload menu section item image
     *
     * @param  int $menu_id Menu identifier (required)
     * @param  int $menu_section_id Menu section identifier (required)
     * @param  int $menu_section_item_id Menu section item identifier (required)
     * @param  \SplFileObject $image Menu section item image (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function uploadMenuSectionItemImageAsync($menu_id, $menu_section_id, $menu_section_item_id, $image)
    {
        return $this->uploadMenuSectionItemImageAsyncWithHttpInfo($menu_id, $menu_section_id, $menu_section_item_id, $image)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation uploadMenuSectionItemImageAsyncWithHttpInfo
     *
     * Upload menu section item image
     *
     * @param  int $menu_id Menu identifier (required)
     * @param  int $menu_section_id Menu section identifier (required)
     * @param  int $menu_section_item_id Menu section item identifier (required)
     * @param  \SplFileObject $image Menu section item image (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function uploadMenuSectionItemImageAsyncWithHttpInfo($menu_id, $menu_section_id, $menu_section_item_id, $image)
    {
        $returnType = '\Flipdish\\Client\Models\RestApiStringResult';
        $request = $this->uploadMenuSectionItemImageRequest($menu_id, $menu_section_id, $menu_section_item_id, $image);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'uploadMenuSectionItemImage'
     *
     * @param  int $menu_id Menu identifier (required)
     * @param  int $menu_section_id Menu section identifier (required)
     * @param  int $menu_section_item_id Menu section item identifier (required)
     * @param  \SplFileObject $image Menu section item image (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function uploadMenuSectionItemImageRequest($menu_id, $menu_section_id, $menu_section_item_id, $image)
    {
        // verify the required parameter 'menu_id' is set
        if ($menu_id === null || (is_array($menu_id) && count($menu_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $menu_id when calling uploadMenuSectionItemImage'
            );
        }
        // verify the required parameter 'menu_section_id' is set
        if ($menu_section_id === null || (is_array($menu_section_id) && count($menu_section_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $menu_section_id when calling uploadMenuSectionItemImage'
            );
        }
        // verify the required parameter 'menu_section_item_id' is set
        if ($menu_section_item_id === null || (is_array($menu_section_item_id) && count($menu_section_item_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $menu_section_item_id when calling uploadMenuSectionItemImage'
            );
        }
        // verify the required parameter 'image' is set
        if ($image === null || (is_array($image) && count($image) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $image when calling uploadMenuSectionItemImage'
            );
        }

        $resourcePath = '/api/v1.0/menus/{menuId}/sections/{menuSectionId}/sectionitems/{menuSectionItemId}/image';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($menu_id !== null) {
            $resourcePath = str_replace(
                '{' . 'menuId' . '}',
                ObjectSerializer::toPathValue($menu_id),
                $resourcePath
            );
        }
        // path params
        if ($menu_section_id !== null) {
            $resourcePath = str_replace(
                '{' . 'menuSectionId' . '}',
                ObjectSerializer::toPathValue($menu_section_id),
                $resourcePath
            );
        }
        // path params
        if ($menu_section_item_id !== null) {
            $resourcePath = str_replace(
                '{' . 'menuSectionItemId' . '}',
                ObjectSerializer::toPathValue($menu_section_item_id),
                $resourcePath
            );
        }

        // form params
        if ($image !== null) {
            $multipart = true;
            $formParams['Image'] = \GuzzleHttp\Psr7\try_fopen(ObjectSerializer::toFormValue($image), 'rb');
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml'],
                ['multipart/form-data']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
