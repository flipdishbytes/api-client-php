<?php
/**
 * MenuOptionSetItemsApi
 * PHP version 5
 *
 * @category Class
 * @package  Flipdish\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Flipdish Open API v1.0
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.2
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Flipdish\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Flipdish\Client\ApiException;
use Flipdish\Client\Configuration;
use Flipdish\Client\HeaderSelector;
use Flipdish\Client\ObjectSerializer;

/**
 * MenuOptionSetItemsApi Class Doc Comment
 *
 * @category Class
 * @package  Flipdish\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class MenuOptionSetItemsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation addMenuItemOptionSetItem
     *
     * Create menu item option set item
     *
     * @param  int $menu_id Menu identifier (required)
     * @param  int $menu_section_id Menu section identifier (required)
     * @param  int $menu_section_item_id Menu section item identifier (required)
     * @param  int $option_set_id Option set identifier (required)
     * @param  \Flipdish\Client\Models\MenuItemOptionSetItemBase $menu_item_option_set_item Option set item (required)
     *
     * @throws \Flipdish\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object
     */
    public function addMenuItemOptionSetItem($menu_id, $menu_section_id, $menu_section_item_id, $option_set_id, $menu_item_option_set_item)
    {
        list($response) = $this->addMenuItemOptionSetItemWithHttpInfo($menu_id, $menu_section_id, $menu_section_item_id, $option_set_id, $menu_item_option_set_item);
        return $response;
    }

    /**
     * Operation addMenuItemOptionSetItemWithHttpInfo
     *
     * Create menu item option set item
     *
     * @param  int $menu_id Menu identifier (required)
     * @param  int $menu_section_id Menu section identifier (required)
     * @param  int $menu_section_item_id Menu section item identifier (required)
     * @param  int $option_set_id Option set identifier (required)
     * @param  \Flipdish\Client\Models\MenuItemOptionSetItemBase $menu_item_option_set_item Option set item (required)
     *
     * @throws \Flipdish\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function addMenuItemOptionSetItemWithHttpInfo($menu_id, $menu_section_id, $menu_section_item_id, $option_set_id, $menu_item_option_set_item)
    {
        $returnType = 'object';
        $request = $this->addMenuItemOptionSetItemRequest($menu_id, $menu_section_id, $menu_section_item_id, $option_set_id, $menu_item_option_set_item);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Flipdish\Client\Models\RestApiResultMenuItemOptionSetItem',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Flipdish\Client\Models\RestApiErrorResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Flipdish\Client\Models\RestApiUnauthorizedResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Flipdish\Client\Models\RestApiForbiddenResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation addMenuItemOptionSetItemAsync
     *
     * Create menu item option set item
     *
     * @param  int $menu_id Menu identifier (required)
     * @param  int $menu_section_id Menu section identifier (required)
     * @param  int $menu_section_item_id Menu section item identifier (required)
     * @param  int $option_set_id Option set identifier (required)
     * @param  \Flipdish\Client\Models\MenuItemOptionSetItemBase $menu_item_option_set_item Option set item (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addMenuItemOptionSetItemAsync($menu_id, $menu_section_id, $menu_section_item_id, $option_set_id, $menu_item_option_set_item)
    {
        return $this->addMenuItemOptionSetItemAsyncWithHttpInfo($menu_id, $menu_section_id, $menu_section_item_id, $option_set_id, $menu_item_option_set_item)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation addMenuItemOptionSetItemAsyncWithHttpInfo
     *
     * Create menu item option set item
     *
     * @param  int $menu_id Menu identifier (required)
     * @param  int $menu_section_id Menu section identifier (required)
     * @param  int $menu_section_item_id Menu section item identifier (required)
     * @param  int $option_set_id Option set identifier (required)
     * @param  \Flipdish\Client\Models\MenuItemOptionSetItemBase $menu_item_option_set_item Option set item (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addMenuItemOptionSetItemAsyncWithHttpInfo($menu_id, $menu_section_id, $menu_section_item_id, $option_set_id, $menu_item_option_set_item)
    {
        $returnType = 'object';
        $request = $this->addMenuItemOptionSetItemRequest($menu_id, $menu_section_id, $menu_section_item_id, $option_set_id, $menu_item_option_set_item);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'addMenuItemOptionSetItem'
     *
     * @param  int $menu_id Menu identifier (required)
     * @param  int $menu_section_id Menu section identifier (required)
     * @param  int $menu_section_item_id Menu section item identifier (required)
     * @param  int $option_set_id Option set identifier (required)
     * @param  \Flipdish\Client\Models\MenuItemOptionSetItemBase $menu_item_option_set_item Option set item (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function addMenuItemOptionSetItemRequest($menu_id, $menu_section_id, $menu_section_item_id, $option_set_id, $menu_item_option_set_item)
    {
        // verify the required parameter 'menu_id' is set
        if ($menu_id === null || (is_array($menu_id) && count($menu_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $menu_id when calling addMenuItemOptionSetItem'
            );
        }
        // verify the required parameter 'menu_section_id' is set
        if ($menu_section_id === null || (is_array($menu_section_id) && count($menu_section_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $menu_section_id when calling addMenuItemOptionSetItem'
            );
        }
        // verify the required parameter 'menu_section_item_id' is set
        if ($menu_section_item_id === null || (is_array($menu_section_item_id) && count($menu_section_item_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $menu_section_item_id when calling addMenuItemOptionSetItem'
            );
        }
        // verify the required parameter 'option_set_id' is set
        if ($option_set_id === null || (is_array($option_set_id) && count($option_set_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $option_set_id when calling addMenuItemOptionSetItem'
            );
        }
        // verify the required parameter 'menu_item_option_set_item' is set
        if ($menu_item_option_set_item === null || (is_array($menu_item_option_set_item) && count($menu_item_option_set_item) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $menu_item_option_set_item when calling addMenuItemOptionSetItem'
            );
        }

        $resourcePath = '/api/v1.0/menus/{menuId}/sections/{menuSectionId}/sectionitems/{menuSectionItemId}/optionsets/{optionSetId}/optionsetitems';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($menu_id !== null) {
            $resourcePath = str_replace(
                '{' . 'menuId' . '}',
                ObjectSerializer::toPathValue($menu_id),
                $resourcePath
            );
        }
        // path params
        if ($menu_section_id !== null) {
            $resourcePath = str_replace(
                '{' . 'menuSectionId' . '}',
                ObjectSerializer::toPathValue($menu_section_id),
                $resourcePath
            );
        }
        // path params
        if ($menu_section_item_id !== null) {
            $resourcePath = str_replace(
                '{' . 'menuSectionItemId' . '}',
                ObjectSerializer::toPathValue($menu_section_item_id),
                $resourcePath
            );
        }
        // path params
        if ($option_set_id !== null) {
            $resourcePath = str_replace(
                '{' . 'optionSetId' . '}',
                ObjectSerializer::toPathValue($option_set_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($menu_item_option_set_item)) {
            $_tempBody = $menu_item_option_set_item;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml'],
                ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteOptionSetItemImage
     *
     * Delete menu item option set item image
     *
     * @param  int $menu_id Menu identifier (required)
     * @param  int $menu_section_id Menu section identifier (required)
     * @param  int $menu_section_item_id Menu section item identifier (required)
     * @param  int $option_set_id Option set identifier (required)
     * @param  int $menu_item_option_set_item_id Option set item identifier (required)
     *
     * @throws \Flipdish\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteOptionSetItemImage($menu_id, $menu_section_id, $menu_section_item_id, $option_set_id, $menu_item_option_set_item_id)
    {
        $this->deleteOptionSetItemImageWithHttpInfo($menu_id, $menu_section_id, $menu_section_item_id, $option_set_id, $menu_item_option_set_item_id);
    }

    /**
     * Operation deleteOptionSetItemImageWithHttpInfo
     *
     * Delete menu item option set item image
     *
     * @param  int $menu_id Menu identifier (required)
     * @param  int $menu_section_id Menu section identifier (required)
     * @param  int $menu_section_item_id Menu section item identifier (required)
     * @param  int $option_set_id Option set identifier (required)
     * @param  int $menu_item_option_set_item_id Option set item identifier (required)
     *
     * @throws \Flipdish\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteOptionSetItemImageWithHttpInfo($menu_id, $menu_section_id, $menu_section_item_id, $option_set_id, $menu_item_option_set_item_id)
    {
        $returnType = '';
        $request = $this->deleteOptionSetItemImageRequest($menu_id, $menu_section_id, $menu_section_item_id, $option_set_id, $menu_item_option_set_item_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Flipdish\Client\Models\RestApiErrorResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Flipdish\Client\Models\RestApiUnauthorizedResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Flipdish\Client\Models\RestApiForbiddenResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteOptionSetItemImageAsync
     *
     * Delete menu item option set item image
     *
     * @param  int $menu_id Menu identifier (required)
     * @param  int $menu_section_id Menu section identifier (required)
     * @param  int $menu_section_item_id Menu section item identifier (required)
     * @param  int $option_set_id Option set identifier (required)
     * @param  int $menu_item_option_set_item_id Option set item identifier (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteOptionSetItemImageAsync($menu_id, $menu_section_id, $menu_section_item_id, $option_set_id, $menu_item_option_set_item_id)
    {
        return $this->deleteOptionSetItemImageAsyncWithHttpInfo($menu_id, $menu_section_id, $menu_section_item_id, $option_set_id, $menu_item_option_set_item_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteOptionSetItemImageAsyncWithHttpInfo
     *
     * Delete menu item option set item image
     *
     * @param  int $menu_id Menu identifier (required)
     * @param  int $menu_section_id Menu section identifier (required)
     * @param  int $menu_section_item_id Menu section item identifier (required)
     * @param  int $option_set_id Option set identifier (required)
     * @param  int $menu_item_option_set_item_id Option set item identifier (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteOptionSetItemImageAsyncWithHttpInfo($menu_id, $menu_section_id, $menu_section_item_id, $option_set_id, $menu_item_option_set_item_id)
    {
        $returnType = '';
        $request = $this->deleteOptionSetItemImageRequest($menu_id, $menu_section_id, $menu_section_item_id, $option_set_id, $menu_item_option_set_item_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteOptionSetItemImage'
     *
     * @param  int $menu_id Menu identifier (required)
     * @param  int $menu_section_id Menu section identifier (required)
     * @param  int $menu_section_item_id Menu section item identifier (required)
     * @param  int $option_set_id Option set identifier (required)
     * @param  int $menu_item_option_set_item_id Option set item identifier (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteOptionSetItemImageRequest($menu_id, $menu_section_id, $menu_section_item_id, $option_set_id, $menu_item_option_set_item_id)
    {
        // verify the required parameter 'menu_id' is set
        if ($menu_id === null || (is_array($menu_id) && count($menu_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $menu_id when calling deleteOptionSetItemImage'
            );
        }
        // verify the required parameter 'menu_section_id' is set
        if ($menu_section_id === null || (is_array($menu_section_id) && count($menu_section_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $menu_section_id when calling deleteOptionSetItemImage'
            );
        }
        // verify the required parameter 'menu_section_item_id' is set
        if ($menu_section_item_id === null || (is_array($menu_section_item_id) && count($menu_section_item_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $menu_section_item_id when calling deleteOptionSetItemImage'
            );
        }
        // verify the required parameter 'option_set_id' is set
        if ($option_set_id === null || (is_array($option_set_id) && count($option_set_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $option_set_id when calling deleteOptionSetItemImage'
            );
        }
        // verify the required parameter 'menu_item_option_set_item_id' is set
        if ($menu_item_option_set_item_id === null || (is_array($menu_item_option_set_item_id) && count($menu_item_option_set_item_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $menu_item_option_set_item_id when calling deleteOptionSetItemImage'
            );
        }

        $resourcePath = '/api/v1.0/menus/{menuId}/sections/{menuSectionId}/sectionitems/{menuSectionItemId}/optionsets/{optionSetId}/optionsetitems/{menuItemOptionSetItemId}/image';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($menu_id !== null) {
            $resourcePath = str_replace(
                '{' . 'menuId' . '}',
                ObjectSerializer::toPathValue($menu_id),
                $resourcePath
            );
        }
        // path params
        if ($menu_section_id !== null) {
            $resourcePath = str_replace(
                '{' . 'menuSectionId' . '}',
                ObjectSerializer::toPathValue($menu_section_id),
                $resourcePath
            );
        }
        // path params
        if ($menu_section_item_id !== null) {
            $resourcePath = str_replace(
                '{' . 'menuSectionItemId' . '}',
                ObjectSerializer::toPathValue($menu_section_item_id),
                $resourcePath
            );
        }
        // path params
        if ($option_set_id !== null) {
            $resourcePath = str_replace(
                '{' . 'optionSetId' . '}',
                ObjectSerializer::toPathValue($option_set_id),
                $resourcePath
            );
        }
        // path params
        if ($menu_item_option_set_item_id !== null) {
            $resourcePath = str_replace(
                '{' . 'menuItemOptionSetItemId' . '}',
                ObjectSerializer::toPathValue($menu_item_option_set_item_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getMenuItemOptionSetItemById
     *
     * Get menu item option set item by identifier
     *
     * @param  int $menu_id Menu identifier (required)
     * @param  int $menu_section_id Menu section identifier (required)
     * @param  int $menu_section_item_id Menu section item identifier (required)
     * @param  int $option_set_id Option set identifier (required)
     * @param  int $menu_item_option_set_item_id Option set item identifier (required)
     *
     * @throws \Flipdish\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Flipdish\Client\Models\RestApiResultMenuItemOptionSetItem
     */
    public function getMenuItemOptionSetItemById($menu_id, $menu_section_id, $menu_section_item_id, $option_set_id, $menu_item_option_set_item_id)
    {
        list($response) = $this->getMenuItemOptionSetItemByIdWithHttpInfo($menu_id, $menu_section_id, $menu_section_item_id, $option_set_id, $menu_item_option_set_item_id);
        return $response;
    }

    /**
     * Operation getMenuItemOptionSetItemByIdWithHttpInfo
     *
     * Get menu item option set item by identifier
     *
     * @param  int $menu_id Menu identifier (required)
     * @param  int $menu_section_id Menu section identifier (required)
     * @param  int $menu_section_item_id Menu section item identifier (required)
     * @param  int $option_set_id Option set identifier (required)
     * @param  int $menu_item_option_set_item_id Option set item identifier (required)
     *
     * @throws \Flipdish\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Flipdish\Client\Models\RestApiResultMenuItemOptionSetItem, HTTP status code, HTTP response headers (array of strings)
     */
    public function getMenuItemOptionSetItemByIdWithHttpInfo($menu_id, $menu_section_id, $menu_section_item_id, $option_set_id, $menu_item_option_set_item_id)
    {
        $returnType = '\Flipdish\Client\Models\RestApiResultMenuItemOptionSetItem';
        $request = $this->getMenuItemOptionSetItemByIdRequest($menu_id, $menu_section_id, $menu_section_item_id, $option_set_id, $menu_item_option_set_item_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Flipdish\Client\Models\RestApiResultMenuItemOptionSetItem',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Flipdish\Client\Models\RestApiErrorResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Flipdish\Client\Models\RestApiUnauthorizedResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Flipdish\Client\Models\RestApiForbiddenResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getMenuItemOptionSetItemByIdAsync
     *
     * Get menu item option set item by identifier
     *
     * @param  int $menu_id Menu identifier (required)
     * @param  int $menu_section_id Menu section identifier (required)
     * @param  int $menu_section_item_id Menu section item identifier (required)
     * @param  int $option_set_id Option set identifier (required)
     * @param  int $menu_item_option_set_item_id Option set item identifier (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getMenuItemOptionSetItemByIdAsync($menu_id, $menu_section_id, $menu_section_item_id, $option_set_id, $menu_item_option_set_item_id)
    {
        return $this->getMenuItemOptionSetItemByIdAsyncWithHttpInfo($menu_id, $menu_section_id, $menu_section_item_id, $option_set_id, $menu_item_option_set_item_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getMenuItemOptionSetItemByIdAsyncWithHttpInfo
     *
     * Get menu item option set item by identifier
     *
     * @param  int $menu_id Menu identifier (required)
     * @param  int $menu_section_id Menu section identifier (required)
     * @param  int $menu_section_item_id Menu section item identifier (required)
     * @param  int $option_set_id Option set identifier (required)
     * @param  int $menu_item_option_set_item_id Option set item identifier (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getMenuItemOptionSetItemByIdAsyncWithHttpInfo($menu_id, $menu_section_id, $menu_section_item_id, $option_set_id, $menu_item_option_set_item_id)
    {
        $returnType = '\Flipdish\Client\Models\RestApiResultMenuItemOptionSetItem';
        $request = $this->getMenuItemOptionSetItemByIdRequest($menu_id, $menu_section_id, $menu_section_item_id, $option_set_id, $menu_item_option_set_item_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getMenuItemOptionSetItemById'
     *
     * @param  int $menu_id Menu identifier (required)
     * @param  int $menu_section_id Menu section identifier (required)
     * @param  int $menu_section_item_id Menu section item identifier (required)
     * @param  int $option_set_id Option set identifier (required)
     * @param  int $menu_item_option_set_item_id Option set item identifier (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getMenuItemOptionSetItemByIdRequest($menu_id, $menu_section_id, $menu_section_item_id, $option_set_id, $menu_item_option_set_item_id)
    {
        // verify the required parameter 'menu_id' is set
        if ($menu_id === null || (is_array($menu_id) && count($menu_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $menu_id when calling getMenuItemOptionSetItemById'
            );
        }
        // verify the required parameter 'menu_section_id' is set
        if ($menu_section_id === null || (is_array($menu_section_id) && count($menu_section_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $menu_section_id when calling getMenuItemOptionSetItemById'
            );
        }
        // verify the required parameter 'menu_section_item_id' is set
        if ($menu_section_item_id === null || (is_array($menu_section_item_id) && count($menu_section_item_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $menu_section_item_id when calling getMenuItemOptionSetItemById'
            );
        }
        // verify the required parameter 'option_set_id' is set
        if ($option_set_id === null || (is_array($option_set_id) && count($option_set_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $option_set_id when calling getMenuItemOptionSetItemById'
            );
        }
        // verify the required parameter 'menu_item_option_set_item_id' is set
        if ($menu_item_option_set_item_id === null || (is_array($menu_item_option_set_item_id) && count($menu_item_option_set_item_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $menu_item_option_set_item_id when calling getMenuItemOptionSetItemById'
            );
        }

        $resourcePath = '/api/v1.0/menus/{menuId}/sections/{menuSectionId}/sectionitems/{menuSectionItemId}/optionsets/{optionSetId}/optionsetitems/{menuItemOptionSetItemId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($menu_id !== null) {
            $resourcePath = str_replace(
                '{' . 'menuId' . '}',
                ObjectSerializer::toPathValue($menu_id),
                $resourcePath
            );
        }
        // path params
        if ($menu_section_id !== null) {
            $resourcePath = str_replace(
                '{' . 'menuSectionId' . '}',
                ObjectSerializer::toPathValue($menu_section_id),
                $resourcePath
            );
        }
        // path params
        if ($menu_section_item_id !== null) {
            $resourcePath = str_replace(
                '{' . 'menuSectionItemId' . '}',
                ObjectSerializer::toPathValue($menu_section_item_id),
                $resourcePath
            );
        }
        // path params
        if ($option_set_id !== null) {
            $resourcePath = str_replace(
                '{' . 'optionSetId' . '}',
                ObjectSerializer::toPathValue($option_set_id),
                $resourcePath
            );
        }
        // path params
        if ($menu_item_option_set_item_id !== null) {
            $resourcePath = str_replace(
                '{' . 'menuItemOptionSetItemId' . '}',
                ObjectSerializer::toPathValue($menu_item_option_set_item_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getMenuItemOptionSetItems
     *
     * Get menu item option set items
     *
     * @param  int $menu_id Menu identifier (required)
     * @param  int $menu_section_id Menu section identifier (required)
     * @param  int $menu_section_item_id Menu section item identifier (required)
     * @param  int $option_set_id Option set identifier (required)
     *
     * @throws \Flipdish\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Flipdish\Client\Models\RestApiArrayResultMenuItemOptionSetItem
     */
    public function getMenuItemOptionSetItems($menu_id, $menu_section_id, $menu_section_item_id, $option_set_id)
    {
        list($response) = $this->getMenuItemOptionSetItemsWithHttpInfo($menu_id, $menu_section_id, $menu_section_item_id, $option_set_id);
        return $response;
    }

    /**
     * Operation getMenuItemOptionSetItemsWithHttpInfo
     *
     * Get menu item option set items
     *
     * @param  int $menu_id Menu identifier (required)
     * @param  int $menu_section_id Menu section identifier (required)
     * @param  int $menu_section_item_id Menu section item identifier (required)
     * @param  int $option_set_id Option set identifier (required)
     *
     * @throws \Flipdish\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Flipdish\Client\Models\RestApiArrayResultMenuItemOptionSetItem, HTTP status code, HTTP response headers (array of strings)
     */
    public function getMenuItemOptionSetItemsWithHttpInfo($menu_id, $menu_section_id, $menu_section_item_id, $option_set_id)
    {
        $returnType = '\Flipdish\Client\Models\RestApiArrayResultMenuItemOptionSetItem';
        $request = $this->getMenuItemOptionSetItemsRequest($menu_id, $menu_section_id, $menu_section_item_id, $option_set_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Flipdish\Client\Models\RestApiArrayResultMenuItemOptionSetItem',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Flipdish\Client\Models\RestApiErrorResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Flipdish\Client\Models\RestApiUnauthorizedResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Flipdish\Client\Models\RestApiForbiddenResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getMenuItemOptionSetItemsAsync
     *
     * Get menu item option set items
     *
     * @param  int $menu_id Menu identifier (required)
     * @param  int $menu_section_id Menu section identifier (required)
     * @param  int $menu_section_item_id Menu section item identifier (required)
     * @param  int $option_set_id Option set identifier (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getMenuItemOptionSetItemsAsync($menu_id, $menu_section_id, $menu_section_item_id, $option_set_id)
    {
        return $this->getMenuItemOptionSetItemsAsyncWithHttpInfo($menu_id, $menu_section_id, $menu_section_item_id, $option_set_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getMenuItemOptionSetItemsAsyncWithHttpInfo
     *
     * Get menu item option set items
     *
     * @param  int $menu_id Menu identifier (required)
     * @param  int $menu_section_id Menu section identifier (required)
     * @param  int $menu_section_item_id Menu section item identifier (required)
     * @param  int $option_set_id Option set identifier (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getMenuItemOptionSetItemsAsyncWithHttpInfo($menu_id, $menu_section_id, $menu_section_item_id, $option_set_id)
    {
        $returnType = '\Flipdish\Client\Models\RestApiArrayResultMenuItemOptionSetItem';
        $request = $this->getMenuItemOptionSetItemsRequest($menu_id, $menu_section_id, $menu_section_item_id, $option_set_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getMenuItemOptionSetItems'
     *
     * @param  int $menu_id Menu identifier (required)
     * @param  int $menu_section_id Menu section identifier (required)
     * @param  int $menu_section_item_id Menu section item identifier (required)
     * @param  int $option_set_id Option set identifier (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getMenuItemOptionSetItemsRequest($menu_id, $menu_section_id, $menu_section_item_id, $option_set_id)
    {
        // verify the required parameter 'menu_id' is set
        if ($menu_id === null || (is_array($menu_id) && count($menu_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $menu_id when calling getMenuItemOptionSetItems'
            );
        }
        // verify the required parameter 'menu_section_id' is set
        if ($menu_section_id === null || (is_array($menu_section_id) && count($menu_section_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $menu_section_id when calling getMenuItemOptionSetItems'
            );
        }
        // verify the required parameter 'menu_section_item_id' is set
        if ($menu_section_item_id === null || (is_array($menu_section_item_id) && count($menu_section_item_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $menu_section_item_id when calling getMenuItemOptionSetItems'
            );
        }
        // verify the required parameter 'option_set_id' is set
        if ($option_set_id === null || (is_array($option_set_id) && count($option_set_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $option_set_id when calling getMenuItemOptionSetItems'
            );
        }

        $resourcePath = '/api/v1.0/menus/{menuId}/sections/{menuSectionId}/sectionitems/{menuSectionItemId}/optionsets/{optionSetId}/optionsetitems';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($menu_id !== null) {
            $resourcePath = str_replace(
                '{' . 'menuId' . '}',
                ObjectSerializer::toPathValue($menu_id),
                $resourcePath
            );
        }
        // path params
        if ($menu_section_id !== null) {
            $resourcePath = str_replace(
                '{' . 'menuSectionId' . '}',
                ObjectSerializer::toPathValue($menu_section_id),
                $resourcePath
            );
        }
        // path params
        if ($menu_section_item_id !== null) {
            $resourcePath = str_replace(
                '{' . 'menuSectionItemId' . '}',
                ObjectSerializer::toPathValue($menu_section_item_id),
                $resourcePath
            );
        }
        // path params
        if ($option_set_id !== null) {
            $resourcePath = str_replace(
                '{' . 'optionSetId' . '}',
                ObjectSerializer::toPathValue($option_set_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation removeMenuItemOptionSetItem
     *
     * Delete menu item option set item
     *
     * @param  int $menu_id Menu identifier (required)
     * @param  int $menu_section_id Menu section identifier (required)
     * @param  int $menu_section_item_id Menu section item identifier (required)
     * @param  int $option_set_id Option set identifier (required)
     * @param  int $menu_item_option_set_item_id Option set item identifier (required)
     *
     * @throws \Flipdish\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function removeMenuItemOptionSetItem($menu_id, $menu_section_id, $menu_section_item_id, $option_set_id, $menu_item_option_set_item_id)
    {
        $this->removeMenuItemOptionSetItemWithHttpInfo($menu_id, $menu_section_id, $menu_section_item_id, $option_set_id, $menu_item_option_set_item_id);
    }

    /**
     * Operation removeMenuItemOptionSetItemWithHttpInfo
     *
     * Delete menu item option set item
     *
     * @param  int $menu_id Menu identifier (required)
     * @param  int $menu_section_id Menu section identifier (required)
     * @param  int $menu_section_item_id Menu section item identifier (required)
     * @param  int $option_set_id Option set identifier (required)
     * @param  int $menu_item_option_set_item_id Option set item identifier (required)
     *
     * @throws \Flipdish\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function removeMenuItemOptionSetItemWithHttpInfo($menu_id, $menu_section_id, $menu_section_item_id, $option_set_id, $menu_item_option_set_item_id)
    {
        $returnType = '';
        $request = $this->removeMenuItemOptionSetItemRequest($menu_id, $menu_section_id, $menu_section_item_id, $option_set_id, $menu_item_option_set_item_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Flipdish\Client\Models\RestApiErrorResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Flipdish\Client\Models\RestApiUnauthorizedResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Flipdish\Client\Models\RestApiForbiddenResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation removeMenuItemOptionSetItemAsync
     *
     * Delete menu item option set item
     *
     * @param  int $menu_id Menu identifier (required)
     * @param  int $menu_section_id Menu section identifier (required)
     * @param  int $menu_section_item_id Menu section item identifier (required)
     * @param  int $option_set_id Option set identifier (required)
     * @param  int $menu_item_option_set_item_id Option set item identifier (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function removeMenuItemOptionSetItemAsync($menu_id, $menu_section_id, $menu_section_item_id, $option_set_id, $menu_item_option_set_item_id)
    {
        return $this->removeMenuItemOptionSetItemAsyncWithHttpInfo($menu_id, $menu_section_id, $menu_section_item_id, $option_set_id, $menu_item_option_set_item_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation removeMenuItemOptionSetItemAsyncWithHttpInfo
     *
     * Delete menu item option set item
     *
     * @param  int $menu_id Menu identifier (required)
     * @param  int $menu_section_id Menu section identifier (required)
     * @param  int $menu_section_item_id Menu section item identifier (required)
     * @param  int $option_set_id Option set identifier (required)
     * @param  int $menu_item_option_set_item_id Option set item identifier (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function removeMenuItemOptionSetItemAsyncWithHttpInfo($menu_id, $menu_section_id, $menu_section_item_id, $option_set_id, $menu_item_option_set_item_id)
    {
        $returnType = '';
        $request = $this->removeMenuItemOptionSetItemRequest($menu_id, $menu_section_id, $menu_section_item_id, $option_set_id, $menu_item_option_set_item_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'removeMenuItemOptionSetItem'
     *
     * @param  int $menu_id Menu identifier (required)
     * @param  int $menu_section_id Menu section identifier (required)
     * @param  int $menu_section_item_id Menu section item identifier (required)
     * @param  int $option_set_id Option set identifier (required)
     * @param  int $menu_item_option_set_item_id Option set item identifier (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function removeMenuItemOptionSetItemRequest($menu_id, $menu_section_id, $menu_section_item_id, $option_set_id, $menu_item_option_set_item_id)
    {
        // verify the required parameter 'menu_id' is set
        if ($menu_id === null || (is_array($menu_id) && count($menu_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $menu_id when calling removeMenuItemOptionSetItem'
            );
        }
        // verify the required parameter 'menu_section_id' is set
        if ($menu_section_id === null || (is_array($menu_section_id) && count($menu_section_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $menu_section_id when calling removeMenuItemOptionSetItem'
            );
        }
        // verify the required parameter 'menu_section_item_id' is set
        if ($menu_section_item_id === null || (is_array($menu_section_item_id) && count($menu_section_item_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $menu_section_item_id when calling removeMenuItemOptionSetItem'
            );
        }
        // verify the required parameter 'option_set_id' is set
        if ($option_set_id === null || (is_array($option_set_id) && count($option_set_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $option_set_id when calling removeMenuItemOptionSetItem'
            );
        }
        // verify the required parameter 'menu_item_option_set_item_id' is set
        if ($menu_item_option_set_item_id === null || (is_array($menu_item_option_set_item_id) && count($menu_item_option_set_item_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $menu_item_option_set_item_id when calling removeMenuItemOptionSetItem'
            );
        }

        $resourcePath = '/api/v1.0/menus/{menuId}/sections/{menuSectionId}/sectionitems/{menuSectionItemId}/optionsets/{optionSetId}/optionsetitems/{menuItemOptionSetItemId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($menu_id !== null) {
            $resourcePath = str_replace(
                '{' . 'menuId' . '}',
                ObjectSerializer::toPathValue($menu_id),
                $resourcePath
            );
        }
        // path params
        if ($menu_section_id !== null) {
            $resourcePath = str_replace(
                '{' . 'menuSectionId' . '}',
                ObjectSerializer::toPathValue($menu_section_id),
                $resourcePath
            );
        }
        // path params
        if ($menu_section_item_id !== null) {
            $resourcePath = str_replace(
                '{' . 'menuSectionItemId' . '}',
                ObjectSerializer::toPathValue($menu_section_item_id),
                $resourcePath
            );
        }
        // path params
        if ($option_set_id !== null) {
            $resourcePath = str_replace(
                '{' . 'optionSetId' . '}',
                ObjectSerializer::toPathValue($option_set_id),
                $resourcePath
            );
        }
        // path params
        if ($menu_item_option_set_item_id !== null) {
            $resourcePath = str_replace(
                '{' . 'menuItemOptionSetItemId' . '}',
                ObjectSerializer::toPathValue($menu_item_option_set_item_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateMenuItemOptionSetItem
     *
     * Update menu item option set item
     *
     * @param  int $menu_id Menu identifier (required)
     * @param  int $menu_section_id Menu section identifier (required)
     * @param  int $menu_section_item_id Menu section item identifier (required)
     * @param  int $option_set_id Option set identifier (required)
     * @param  int $menu_item_option_set_item_id Option set item identifier (required)
     * @param  \Flipdish\Client\Models\MenuItemOptionSetItemBase $menu_item_option_set_item Option set item (delta) (required)
     * @param  double $undo_after An optional time period, in hours, after which the hide-section operaton will be undone. (optional)
     *
     * @throws \Flipdish\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function updateMenuItemOptionSetItem($menu_id, $menu_section_id, $menu_section_item_id, $option_set_id, $menu_item_option_set_item_id, $menu_item_option_set_item, $undo_after = null)
    {
        $this->updateMenuItemOptionSetItemWithHttpInfo($menu_id, $menu_section_id, $menu_section_item_id, $option_set_id, $menu_item_option_set_item_id, $menu_item_option_set_item, $undo_after);
    }

    /**
     * Operation updateMenuItemOptionSetItemWithHttpInfo
     *
     * Update menu item option set item
     *
     * @param  int $menu_id Menu identifier (required)
     * @param  int $menu_section_id Menu section identifier (required)
     * @param  int $menu_section_item_id Menu section item identifier (required)
     * @param  int $option_set_id Option set identifier (required)
     * @param  int $menu_item_option_set_item_id Option set item identifier (required)
     * @param  \Flipdish\Client\Models\MenuItemOptionSetItemBase $menu_item_option_set_item Option set item (delta) (required)
     * @param  double $undo_after An optional time period, in hours, after which the hide-section operaton will be undone. (optional)
     *
     * @throws \Flipdish\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateMenuItemOptionSetItemWithHttpInfo($menu_id, $menu_section_id, $menu_section_item_id, $option_set_id, $menu_item_option_set_item_id, $menu_item_option_set_item, $undo_after = null)
    {
        $returnType = '';
        $request = $this->updateMenuItemOptionSetItemRequest($menu_id, $menu_section_id, $menu_section_item_id, $option_set_id, $menu_item_option_set_item_id, $menu_item_option_set_item, $undo_after);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Flipdish\Client\Models\RestApiErrorResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Flipdish\Client\Models\RestApiUnauthorizedResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Flipdish\Client\Models\RestApiForbiddenResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateMenuItemOptionSetItemAsync
     *
     * Update menu item option set item
     *
     * @param  int $menu_id Menu identifier (required)
     * @param  int $menu_section_id Menu section identifier (required)
     * @param  int $menu_section_item_id Menu section item identifier (required)
     * @param  int $option_set_id Option set identifier (required)
     * @param  int $menu_item_option_set_item_id Option set item identifier (required)
     * @param  \Flipdish\Client\Models\MenuItemOptionSetItemBase $menu_item_option_set_item Option set item (delta) (required)
     * @param  double $undo_after An optional time period, in hours, after which the hide-section operaton will be undone. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateMenuItemOptionSetItemAsync($menu_id, $menu_section_id, $menu_section_item_id, $option_set_id, $menu_item_option_set_item_id, $menu_item_option_set_item, $undo_after = null)
    {
        return $this->updateMenuItemOptionSetItemAsyncWithHttpInfo($menu_id, $menu_section_id, $menu_section_item_id, $option_set_id, $menu_item_option_set_item_id, $menu_item_option_set_item, $undo_after)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateMenuItemOptionSetItemAsyncWithHttpInfo
     *
     * Update menu item option set item
     *
     * @param  int $menu_id Menu identifier (required)
     * @param  int $menu_section_id Menu section identifier (required)
     * @param  int $menu_section_item_id Menu section item identifier (required)
     * @param  int $option_set_id Option set identifier (required)
     * @param  int $menu_item_option_set_item_id Option set item identifier (required)
     * @param  \Flipdish\Client\Models\MenuItemOptionSetItemBase $menu_item_option_set_item Option set item (delta) (required)
     * @param  double $undo_after An optional time period, in hours, after which the hide-section operaton will be undone. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateMenuItemOptionSetItemAsyncWithHttpInfo($menu_id, $menu_section_id, $menu_section_item_id, $option_set_id, $menu_item_option_set_item_id, $menu_item_option_set_item, $undo_after = null)
    {
        $returnType = '';
        $request = $this->updateMenuItemOptionSetItemRequest($menu_id, $menu_section_id, $menu_section_item_id, $option_set_id, $menu_item_option_set_item_id, $menu_item_option_set_item, $undo_after);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateMenuItemOptionSetItem'
     *
     * @param  int $menu_id Menu identifier (required)
     * @param  int $menu_section_id Menu section identifier (required)
     * @param  int $menu_section_item_id Menu section item identifier (required)
     * @param  int $option_set_id Option set identifier (required)
     * @param  int $menu_item_option_set_item_id Option set item identifier (required)
     * @param  \Flipdish\Client\Models\MenuItemOptionSetItemBase $menu_item_option_set_item Option set item (delta) (required)
     * @param  double $undo_after An optional time period, in hours, after which the hide-section operaton will be undone. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateMenuItemOptionSetItemRequest($menu_id, $menu_section_id, $menu_section_item_id, $option_set_id, $menu_item_option_set_item_id, $menu_item_option_set_item, $undo_after = null)
    {
        // verify the required parameter 'menu_id' is set
        if ($menu_id === null || (is_array($menu_id) && count($menu_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $menu_id when calling updateMenuItemOptionSetItem'
            );
        }
        // verify the required parameter 'menu_section_id' is set
        if ($menu_section_id === null || (is_array($menu_section_id) && count($menu_section_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $menu_section_id when calling updateMenuItemOptionSetItem'
            );
        }
        // verify the required parameter 'menu_section_item_id' is set
        if ($menu_section_item_id === null || (is_array($menu_section_item_id) && count($menu_section_item_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $menu_section_item_id when calling updateMenuItemOptionSetItem'
            );
        }
        // verify the required parameter 'option_set_id' is set
        if ($option_set_id === null || (is_array($option_set_id) && count($option_set_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $option_set_id when calling updateMenuItemOptionSetItem'
            );
        }
        // verify the required parameter 'menu_item_option_set_item_id' is set
        if ($menu_item_option_set_item_id === null || (is_array($menu_item_option_set_item_id) && count($menu_item_option_set_item_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $menu_item_option_set_item_id when calling updateMenuItemOptionSetItem'
            );
        }
        // verify the required parameter 'menu_item_option_set_item' is set
        if ($menu_item_option_set_item === null || (is_array($menu_item_option_set_item) && count($menu_item_option_set_item) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $menu_item_option_set_item when calling updateMenuItemOptionSetItem'
            );
        }

        $resourcePath = '/api/v1.0/menus/{menuId}/sections/{menuSectionId}/sectionitems/{menuSectionItemId}/optionsets/{optionSetId}/optionsetitems/{menuItemOptionSetItemId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($undo_after !== null) {
            $queryParams['undoAfter'] = ObjectSerializer::toQueryValue($undo_after);
        }

        // path params
        if ($menu_id !== null) {
            $resourcePath = str_replace(
                '{' . 'menuId' . '}',
                ObjectSerializer::toPathValue($menu_id),
                $resourcePath
            );
        }
        // path params
        if ($menu_section_id !== null) {
            $resourcePath = str_replace(
                '{' . 'menuSectionId' . '}',
                ObjectSerializer::toPathValue($menu_section_id),
                $resourcePath
            );
        }
        // path params
        if ($menu_section_item_id !== null) {
            $resourcePath = str_replace(
                '{' . 'menuSectionItemId' . '}',
                ObjectSerializer::toPathValue($menu_section_item_id),
                $resourcePath
            );
        }
        // path params
        if ($option_set_id !== null) {
            $resourcePath = str_replace(
                '{' . 'optionSetId' . '}',
                ObjectSerializer::toPathValue($option_set_id),
                $resourcePath
            );
        }
        // path params
        if ($menu_item_option_set_item_id !== null) {
            $resourcePath = str_replace(
                '{' . 'menuItemOptionSetItemId' . '}',
                ObjectSerializer::toPathValue($menu_item_option_set_item_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($menu_item_option_set_item)) {
            $_tempBody = $menu_item_option_set_item;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml'],
                ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation uploadOptionSetItemImage
     *
     * Upload menu item option set item image
     *
     * @param  int $menu_id Menu identifier (required)
     * @param  int $menu_section_id Menu section identifier (required)
     * @param  int $menu_section_item_id Menu section item identifier (required)
     * @param  int $option_set_id Option set identifier (required)
     * @param  int $menu_item_option_set_item_id Option set item identifier (required)
     * @param  \SplFileObject $image Option set item image (required)
     *
     * @throws \Flipdish\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Flipdish\Client\Models\RestApiStringResult
     */
    public function uploadOptionSetItemImage($menu_id, $menu_section_id, $menu_section_item_id, $option_set_id, $menu_item_option_set_item_id, $image)
    {
        list($response) = $this->uploadOptionSetItemImageWithHttpInfo($menu_id, $menu_section_id, $menu_section_item_id, $option_set_id, $menu_item_option_set_item_id, $image);
        return $response;
    }

    /**
     * Operation uploadOptionSetItemImageWithHttpInfo
     *
     * Upload menu item option set item image
     *
     * @param  int $menu_id Menu identifier (required)
     * @param  int $menu_section_id Menu section identifier (required)
     * @param  int $menu_section_item_id Menu section item identifier (required)
     * @param  int $option_set_id Option set identifier (required)
     * @param  int $menu_item_option_set_item_id Option set item identifier (required)
     * @param  \SplFileObject $image Option set item image (required)
     *
     * @throws \Flipdish\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Flipdish\Client\Models\RestApiStringResult, HTTP status code, HTTP response headers (array of strings)
     */
    public function uploadOptionSetItemImageWithHttpInfo($menu_id, $menu_section_id, $menu_section_item_id, $option_set_id, $menu_item_option_set_item_id, $image)
    {
        $returnType = '\Flipdish\Client\Models\RestApiStringResult';
        $request = $this->uploadOptionSetItemImageRequest($menu_id, $menu_section_id, $menu_section_item_id, $option_set_id, $menu_item_option_set_item_id, $image);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Flipdish\Client\Models\RestApiStringResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Flipdish\Client\Models\RestApiErrorResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Flipdish\Client\Models\RestApiUnauthorizedResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Flipdish\Client\Models\RestApiForbiddenResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation uploadOptionSetItemImageAsync
     *
     * Upload menu item option set item image
     *
     * @param  int $menu_id Menu identifier (required)
     * @param  int $menu_section_id Menu section identifier (required)
     * @param  int $menu_section_item_id Menu section item identifier (required)
     * @param  int $option_set_id Option set identifier (required)
     * @param  int $menu_item_option_set_item_id Option set item identifier (required)
     * @param  \SplFileObject $image Option set item image (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function uploadOptionSetItemImageAsync($menu_id, $menu_section_id, $menu_section_item_id, $option_set_id, $menu_item_option_set_item_id, $image)
    {
        return $this->uploadOptionSetItemImageAsyncWithHttpInfo($menu_id, $menu_section_id, $menu_section_item_id, $option_set_id, $menu_item_option_set_item_id, $image)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation uploadOptionSetItemImageAsyncWithHttpInfo
     *
     * Upload menu item option set item image
     *
     * @param  int $menu_id Menu identifier (required)
     * @param  int $menu_section_id Menu section identifier (required)
     * @param  int $menu_section_item_id Menu section item identifier (required)
     * @param  int $option_set_id Option set identifier (required)
     * @param  int $menu_item_option_set_item_id Option set item identifier (required)
     * @param  \SplFileObject $image Option set item image (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function uploadOptionSetItemImageAsyncWithHttpInfo($menu_id, $menu_section_id, $menu_section_item_id, $option_set_id, $menu_item_option_set_item_id, $image)
    {
        $returnType = '\Flipdish\Client\Models\RestApiStringResult';
        $request = $this->uploadOptionSetItemImageRequest($menu_id, $menu_section_id, $menu_section_item_id, $option_set_id, $menu_item_option_set_item_id, $image);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'uploadOptionSetItemImage'
     *
     * @param  int $menu_id Menu identifier (required)
     * @param  int $menu_section_id Menu section identifier (required)
     * @param  int $menu_section_item_id Menu section item identifier (required)
     * @param  int $option_set_id Option set identifier (required)
     * @param  int $menu_item_option_set_item_id Option set item identifier (required)
     * @param  \SplFileObject $image Option set item image (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function uploadOptionSetItemImageRequest($menu_id, $menu_section_id, $menu_section_item_id, $option_set_id, $menu_item_option_set_item_id, $image)
    {
        // verify the required parameter 'menu_id' is set
        if ($menu_id === null || (is_array($menu_id) && count($menu_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $menu_id when calling uploadOptionSetItemImage'
            );
        }
        // verify the required parameter 'menu_section_id' is set
        if ($menu_section_id === null || (is_array($menu_section_id) && count($menu_section_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $menu_section_id when calling uploadOptionSetItemImage'
            );
        }
        // verify the required parameter 'menu_section_item_id' is set
        if ($menu_section_item_id === null || (is_array($menu_section_item_id) && count($menu_section_item_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $menu_section_item_id when calling uploadOptionSetItemImage'
            );
        }
        // verify the required parameter 'option_set_id' is set
        if ($option_set_id === null || (is_array($option_set_id) && count($option_set_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $option_set_id when calling uploadOptionSetItemImage'
            );
        }
        // verify the required parameter 'menu_item_option_set_item_id' is set
        if ($menu_item_option_set_item_id === null || (is_array($menu_item_option_set_item_id) && count($menu_item_option_set_item_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $menu_item_option_set_item_id when calling uploadOptionSetItemImage'
            );
        }
        // verify the required parameter 'image' is set
        if ($image === null || (is_array($image) && count($image) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $image when calling uploadOptionSetItemImage'
            );
        }

        $resourcePath = '/api/v1.0/menus/{menuId}/sections/{menuSectionId}/sectionitems/{menuSectionItemId}/optionsets/{optionSetId}/optionsetitems/{menuItemOptionSetItemId}/image';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($menu_id !== null) {
            $resourcePath = str_replace(
                '{' . 'menuId' . '}',
                ObjectSerializer::toPathValue($menu_id),
                $resourcePath
            );
        }
        // path params
        if ($menu_section_id !== null) {
            $resourcePath = str_replace(
                '{' . 'menuSectionId' . '}',
                ObjectSerializer::toPathValue($menu_section_id),
                $resourcePath
            );
        }
        // path params
        if ($menu_section_item_id !== null) {
            $resourcePath = str_replace(
                '{' . 'menuSectionItemId' . '}',
                ObjectSerializer::toPathValue($menu_section_item_id),
                $resourcePath
            );
        }
        // path params
        if ($option_set_id !== null) {
            $resourcePath = str_replace(
                '{' . 'optionSetId' . '}',
                ObjectSerializer::toPathValue($option_set_id),
                $resourcePath
            );
        }
        // path params
        if ($menu_item_option_set_item_id !== null) {
            $resourcePath = str_replace(
                '{' . 'menuItemOptionSetItemId' . '}',
                ObjectSerializer::toPathValue($menu_item_option_set_item_id),
                $resourcePath
            );
        }

        // form params
        if ($image !== null) {
            $multipart = true;
            $formParams['Image'] = \GuzzleHttp\Psr7\try_fopen(ObjectSerializer::toFormValue($image), 'rb');
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml'],
                ['multipart/form-data']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
