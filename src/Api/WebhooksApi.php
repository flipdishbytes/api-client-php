<?php
/**
 * WebhooksApi
 * PHP version 5
 *
 * @category Class
 * @package  Flipdish\\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Flipdish Open API v1.0
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.19
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Flipdish\\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Flipdish\\Client\ApiException;
use Flipdish\\Client\Configuration;
use Flipdish\\Client\HeaderSelector;
use Flipdish\\Client\ObjectSerializer;

/**
 * WebhooksApi Class Doc Comment
 *
 * @category Class
 * @package  Flipdish\\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class WebhooksApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation craeteWebhookSubscription
     *
     * Create a webhook subscription for you Oauth App
     *
     * @param  string $oauth_app_id Oauth App identifier (required)
     * @param  \Flipdish\\Client\Models\WebhookSubscription $webhook_subscription Webhook subscription object (required)
     * @param  string $app_id app_id (required)
     *
     * @throws \Flipdish\\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Flipdish\\Client\Models\RestApiIntegerResult
     */
    public function craeteWebhookSubscription($oauth_app_id, $webhook_subscription, $app_id)
    {
        list($response) = $this->craeteWebhookSubscriptionWithHttpInfo($oauth_app_id, $webhook_subscription, $app_id);
        return $response;
    }

    /**
     * Operation craeteWebhookSubscriptionWithHttpInfo
     *
     * Create a webhook subscription for you Oauth App
     *
     * @param  string $oauth_app_id Oauth App identifier (required)
     * @param  \Flipdish\\Client\Models\WebhookSubscription $webhook_subscription Webhook subscription object (required)
     * @param  string $app_id (required)
     *
     * @throws \Flipdish\\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Flipdish\\Client\Models\RestApiIntegerResult, HTTP status code, HTTP response headers (array of strings)
     */
    public function craeteWebhookSubscriptionWithHttpInfo($oauth_app_id, $webhook_subscription, $app_id)
    {
        $returnType = '\Flipdish\\Client\Models\RestApiIntegerResult';
        $request = $this->craeteWebhookSubscriptionRequest($oauth_app_id, $webhook_subscription, $app_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Flipdish\\Client\Models\RestApiIntegerResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Flipdish\\Client\Models\RestApiErrorResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Flipdish\\Client\Models\RestApiUnauthorizedResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Flipdish\\Client\Models\RestApiForbiddenResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation craeteWebhookSubscriptionAsync
     *
     * Create a webhook subscription for you Oauth App
     *
     * @param  string $oauth_app_id Oauth App identifier (required)
     * @param  \Flipdish\\Client\Models\WebhookSubscription $webhook_subscription Webhook subscription object (required)
     * @param  string $app_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function craeteWebhookSubscriptionAsync($oauth_app_id, $webhook_subscription, $app_id)
    {
        return $this->craeteWebhookSubscriptionAsyncWithHttpInfo($oauth_app_id, $webhook_subscription, $app_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation craeteWebhookSubscriptionAsyncWithHttpInfo
     *
     * Create a webhook subscription for you Oauth App
     *
     * @param  string $oauth_app_id Oauth App identifier (required)
     * @param  \Flipdish\\Client\Models\WebhookSubscription $webhook_subscription Webhook subscription object (required)
     * @param  string $app_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function craeteWebhookSubscriptionAsyncWithHttpInfo($oauth_app_id, $webhook_subscription, $app_id)
    {
        $returnType = '\Flipdish\\Client\Models\RestApiIntegerResult';
        $request = $this->craeteWebhookSubscriptionRequest($oauth_app_id, $webhook_subscription, $app_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'craeteWebhookSubscription'
     *
     * @param  string $oauth_app_id Oauth App identifier (required)
     * @param  \Flipdish\\Client\Models\WebhookSubscription $webhook_subscription Webhook subscription object (required)
     * @param  string $app_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function craeteWebhookSubscriptionRequest($oauth_app_id, $webhook_subscription, $app_id)
    {
        // verify the required parameter 'oauth_app_id' is set
        if ($oauth_app_id === null || (is_array($oauth_app_id) && count($oauth_app_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $oauth_app_id when calling craeteWebhookSubscription'
            );
        }
        // verify the required parameter 'webhook_subscription' is set
        if ($webhook_subscription === null || (is_array($webhook_subscription) && count($webhook_subscription) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $webhook_subscription when calling craeteWebhookSubscription'
            );
        }
        // verify the required parameter 'app_id' is set
        if ($app_id === null || (is_array($app_id) && count($app_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $app_id when calling craeteWebhookSubscription'
            );
        }

        $resourcePath = '/api/v1.0/{appId}/webhooks/{oauthAppId}/subscriptions';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($oauth_app_id !== null) {
            $resourcePath = str_replace(
                '{' . 'oauthAppId' . '}',
                ObjectSerializer::toPathValue($oauth_app_id),
                $resourcePath
            );
        }
        // path params
        if ($app_id !== null) {
            $resourcePath = str_replace(
                '{' . 'appId' . '}',
                ObjectSerializer::toPathValue($app_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($webhook_subscription)) {
            $_tempBody = $webhook_subscription;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml'],
                ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createWebhookSubscriptionEventNames
     *
     * Add event name to your webhook subscription
     *
     * @param  string $oauth_app_id Oauth App identifier (required)
     * @param  int $webhook_subscription_id Webhook subscription identifier (required)
     * @param  string $event_name Webhook subscription event name (required)
     * @param  string $app_id app_id (required)
     *
     * @throws \Flipdish\\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function createWebhookSubscriptionEventNames($oauth_app_id, $webhook_subscription_id, $event_name, $app_id)
    {
        $this->createWebhookSubscriptionEventNamesWithHttpInfo($oauth_app_id, $webhook_subscription_id, $event_name, $app_id);
    }

    /**
     * Operation createWebhookSubscriptionEventNamesWithHttpInfo
     *
     * Add event name to your webhook subscription
     *
     * @param  string $oauth_app_id Oauth App identifier (required)
     * @param  int $webhook_subscription_id Webhook subscription identifier (required)
     * @param  string $event_name Webhook subscription event name (required)
     * @param  string $app_id (required)
     *
     * @throws \Flipdish\\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function createWebhookSubscriptionEventNamesWithHttpInfo($oauth_app_id, $webhook_subscription_id, $event_name, $app_id)
    {
        $returnType = '';
        $request = $this->createWebhookSubscriptionEventNamesRequest($oauth_app_id, $webhook_subscription_id, $event_name, $app_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Flipdish\\Client\Models\RestApiErrorResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Flipdish\\Client\Models\RestApiUnauthorizedResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Flipdish\\Client\Models\RestApiForbiddenResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Flipdish\\Client\Models\RestApiErrorResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createWebhookSubscriptionEventNamesAsync
     *
     * Add event name to your webhook subscription
     *
     * @param  string $oauth_app_id Oauth App identifier (required)
     * @param  int $webhook_subscription_id Webhook subscription identifier (required)
     * @param  string $event_name Webhook subscription event name (required)
     * @param  string $app_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createWebhookSubscriptionEventNamesAsync($oauth_app_id, $webhook_subscription_id, $event_name, $app_id)
    {
        return $this->createWebhookSubscriptionEventNamesAsyncWithHttpInfo($oauth_app_id, $webhook_subscription_id, $event_name, $app_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createWebhookSubscriptionEventNamesAsyncWithHttpInfo
     *
     * Add event name to your webhook subscription
     *
     * @param  string $oauth_app_id Oauth App identifier (required)
     * @param  int $webhook_subscription_id Webhook subscription identifier (required)
     * @param  string $event_name Webhook subscription event name (required)
     * @param  string $app_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createWebhookSubscriptionEventNamesAsyncWithHttpInfo($oauth_app_id, $webhook_subscription_id, $event_name, $app_id)
    {
        $returnType = '';
        $request = $this->createWebhookSubscriptionEventNamesRequest($oauth_app_id, $webhook_subscription_id, $event_name, $app_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createWebhookSubscriptionEventNames'
     *
     * @param  string $oauth_app_id Oauth App identifier (required)
     * @param  int $webhook_subscription_id Webhook subscription identifier (required)
     * @param  string $event_name Webhook subscription event name (required)
     * @param  string $app_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function createWebhookSubscriptionEventNamesRequest($oauth_app_id, $webhook_subscription_id, $event_name, $app_id)
    {
        // verify the required parameter 'oauth_app_id' is set
        if ($oauth_app_id === null || (is_array($oauth_app_id) && count($oauth_app_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $oauth_app_id when calling createWebhookSubscriptionEventNames'
            );
        }
        // verify the required parameter 'webhook_subscription_id' is set
        if ($webhook_subscription_id === null || (is_array($webhook_subscription_id) && count($webhook_subscription_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $webhook_subscription_id when calling createWebhookSubscriptionEventNames'
            );
        }
        // verify the required parameter 'event_name' is set
        if ($event_name === null || (is_array($event_name) && count($event_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $event_name when calling createWebhookSubscriptionEventNames'
            );
        }
        // verify the required parameter 'app_id' is set
        if ($app_id === null || (is_array($app_id) && count($app_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $app_id when calling createWebhookSubscriptionEventNames'
            );
        }

        $resourcePath = '/api/v1.0/{appId}/webhooks/{oauthAppId}/subscriptions/{webhookSubscriptionId}/events/{eventName}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($oauth_app_id !== null) {
            $resourcePath = str_replace(
                '{' . 'oauthAppId' . '}',
                ObjectSerializer::toPathValue($oauth_app_id),
                $resourcePath
            );
        }
        // path params
        if ($webhook_subscription_id !== null) {
            $resourcePath = str_replace(
                '{' . 'webhookSubscriptionId' . '}',
                ObjectSerializer::toPathValue($webhook_subscription_id),
                $resourcePath
            );
        }
        // path params
        if ($event_name !== null) {
            $resourcePath = str_replace(
                '{' . 'eventName' . '}',
                ObjectSerializer::toPathValue($event_name),
                $resourcePath
            );
        }
        // path params
        if ($app_id !== null) {
            $resourcePath = str_replace(
                '{' . 'appId' . '}',
                ObjectSerializer::toPathValue($app_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteWebhookSubscription
     *
     * Delete you webhook subscription
     *
     * @param  string $oauth_app_id Oauth App identifier (required)
     * @param  int $webhook_subscription_id Webhook subscription identifier (required)
     * @param  string $app_id app_id (required)
     *
     * @throws \Flipdish\\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteWebhookSubscription($oauth_app_id, $webhook_subscription_id, $app_id)
    {
        $this->deleteWebhookSubscriptionWithHttpInfo($oauth_app_id, $webhook_subscription_id, $app_id);
    }

    /**
     * Operation deleteWebhookSubscriptionWithHttpInfo
     *
     * Delete you webhook subscription
     *
     * @param  string $oauth_app_id Oauth App identifier (required)
     * @param  int $webhook_subscription_id Webhook subscription identifier (required)
     * @param  string $app_id (required)
     *
     * @throws \Flipdish\\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteWebhookSubscriptionWithHttpInfo($oauth_app_id, $webhook_subscription_id, $app_id)
    {
        $returnType = '';
        $request = $this->deleteWebhookSubscriptionRequest($oauth_app_id, $webhook_subscription_id, $app_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Flipdish\\Client\Models\RestApiErrorResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Flipdish\\Client\Models\RestApiUnauthorizedResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Flipdish\\Client\Models\RestApiForbiddenResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteWebhookSubscriptionAsync
     *
     * Delete you webhook subscription
     *
     * @param  string $oauth_app_id Oauth App identifier (required)
     * @param  int $webhook_subscription_id Webhook subscription identifier (required)
     * @param  string $app_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteWebhookSubscriptionAsync($oauth_app_id, $webhook_subscription_id, $app_id)
    {
        return $this->deleteWebhookSubscriptionAsyncWithHttpInfo($oauth_app_id, $webhook_subscription_id, $app_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteWebhookSubscriptionAsyncWithHttpInfo
     *
     * Delete you webhook subscription
     *
     * @param  string $oauth_app_id Oauth App identifier (required)
     * @param  int $webhook_subscription_id Webhook subscription identifier (required)
     * @param  string $app_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteWebhookSubscriptionAsyncWithHttpInfo($oauth_app_id, $webhook_subscription_id, $app_id)
    {
        $returnType = '';
        $request = $this->deleteWebhookSubscriptionRequest($oauth_app_id, $webhook_subscription_id, $app_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteWebhookSubscription'
     *
     * @param  string $oauth_app_id Oauth App identifier (required)
     * @param  int $webhook_subscription_id Webhook subscription identifier (required)
     * @param  string $app_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteWebhookSubscriptionRequest($oauth_app_id, $webhook_subscription_id, $app_id)
    {
        // verify the required parameter 'oauth_app_id' is set
        if ($oauth_app_id === null || (is_array($oauth_app_id) && count($oauth_app_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $oauth_app_id when calling deleteWebhookSubscription'
            );
        }
        // verify the required parameter 'webhook_subscription_id' is set
        if ($webhook_subscription_id === null || (is_array($webhook_subscription_id) && count($webhook_subscription_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $webhook_subscription_id when calling deleteWebhookSubscription'
            );
        }
        // verify the required parameter 'app_id' is set
        if ($app_id === null || (is_array($app_id) && count($app_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $app_id when calling deleteWebhookSubscription'
            );
        }

        $resourcePath = '/api/v1.0/{appId}/webhooks/{oauthAppId}/subscriptions/{webhookSubscriptionId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($oauth_app_id !== null) {
            $resourcePath = str_replace(
                '{' . 'oauthAppId' . '}',
                ObjectSerializer::toPathValue($oauth_app_id),
                $resourcePath
            );
        }
        // path params
        if ($webhook_subscription_id !== null) {
            $resourcePath = str_replace(
                '{' . 'webhookSubscriptionId' . '}',
                ObjectSerializer::toPathValue($webhook_subscription_id),
                $resourcePath
            );
        }
        // path params
        if ($app_id !== null) {
            $resourcePath = str_replace(
                '{' . 'appId' . '}',
                ObjectSerializer::toPathValue($app_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteWebhookSubscriptionEventName
     *
     * Remove event name to your webhook subscription
     *
     * @param  string $oauth_app_id Oauth App identifier (required)
     * @param  int $webhook_subscription_id Webhook subscription identifier (required)
     * @param  string $event_name Webhook subscription event name (required)
     * @param  string $app_id app_id (required)
     *
     * @throws \Flipdish\\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteWebhookSubscriptionEventName($oauth_app_id, $webhook_subscription_id, $event_name, $app_id)
    {
        $this->deleteWebhookSubscriptionEventNameWithHttpInfo($oauth_app_id, $webhook_subscription_id, $event_name, $app_id);
    }

    /**
     * Operation deleteWebhookSubscriptionEventNameWithHttpInfo
     *
     * Remove event name to your webhook subscription
     *
     * @param  string $oauth_app_id Oauth App identifier (required)
     * @param  int $webhook_subscription_id Webhook subscription identifier (required)
     * @param  string $event_name Webhook subscription event name (required)
     * @param  string $app_id (required)
     *
     * @throws \Flipdish\\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteWebhookSubscriptionEventNameWithHttpInfo($oauth_app_id, $webhook_subscription_id, $event_name, $app_id)
    {
        $returnType = '';
        $request = $this->deleteWebhookSubscriptionEventNameRequest($oauth_app_id, $webhook_subscription_id, $event_name, $app_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Flipdish\\Client\Models\RestApiErrorResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Flipdish\\Client\Models\RestApiUnauthorizedResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Flipdish\\Client\Models\RestApiForbiddenResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteWebhookSubscriptionEventNameAsync
     *
     * Remove event name to your webhook subscription
     *
     * @param  string $oauth_app_id Oauth App identifier (required)
     * @param  int $webhook_subscription_id Webhook subscription identifier (required)
     * @param  string $event_name Webhook subscription event name (required)
     * @param  string $app_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteWebhookSubscriptionEventNameAsync($oauth_app_id, $webhook_subscription_id, $event_name, $app_id)
    {
        return $this->deleteWebhookSubscriptionEventNameAsyncWithHttpInfo($oauth_app_id, $webhook_subscription_id, $event_name, $app_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteWebhookSubscriptionEventNameAsyncWithHttpInfo
     *
     * Remove event name to your webhook subscription
     *
     * @param  string $oauth_app_id Oauth App identifier (required)
     * @param  int $webhook_subscription_id Webhook subscription identifier (required)
     * @param  string $event_name Webhook subscription event name (required)
     * @param  string $app_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteWebhookSubscriptionEventNameAsyncWithHttpInfo($oauth_app_id, $webhook_subscription_id, $event_name, $app_id)
    {
        $returnType = '';
        $request = $this->deleteWebhookSubscriptionEventNameRequest($oauth_app_id, $webhook_subscription_id, $event_name, $app_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteWebhookSubscriptionEventName'
     *
     * @param  string $oauth_app_id Oauth App identifier (required)
     * @param  int $webhook_subscription_id Webhook subscription identifier (required)
     * @param  string $event_name Webhook subscription event name (required)
     * @param  string $app_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteWebhookSubscriptionEventNameRequest($oauth_app_id, $webhook_subscription_id, $event_name, $app_id)
    {
        // verify the required parameter 'oauth_app_id' is set
        if ($oauth_app_id === null || (is_array($oauth_app_id) && count($oauth_app_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $oauth_app_id when calling deleteWebhookSubscriptionEventName'
            );
        }
        // verify the required parameter 'webhook_subscription_id' is set
        if ($webhook_subscription_id === null || (is_array($webhook_subscription_id) && count($webhook_subscription_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $webhook_subscription_id when calling deleteWebhookSubscriptionEventName'
            );
        }
        // verify the required parameter 'event_name' is set
        if ($event_name === null || (is_array($event_name) && count($event_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $event_name when calling deleteWebhookSubscriptionEventName'
            );
        }
        // verify the required parameter 'app_id' is set
        if ($app_id === null || (is_array($app_id) && count($app_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $app_id when calling deleteWebhookSubscriptionEventName'
            );
        }

        $resourcePath = '/api/v1.0/{appId}/webhooks/{oauthAppId}/subscriptions/{webhookSubscriptionId}/events/{eventName}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($oauth_app_id !== null) {
            $resourcePath = str_replace(
                '{' . 'oauthAppId' . '}',
                ObjectSerializer::toPathValue($oauth_app_id),
                $resourcePath
            );
        }
        // path params
        if ($webhook_subscription_id !== null) {
            $resourcePath = str_replace(
                '{' . 'webhookSubscriptionId' . '}',
                ObjectSerializer::toPathValue($webhook_subscription_id),
                $resourcePath
            );
        }
        // path params
        if ($event_name !== null) {
            $resourcePath = str_replace(
                '{' . 'eventName' . '}',
                ObjectSerializer::toPathValue($event_name),
                $resourcePath
            );
        }
        // path params
        if ($app_id !== null) {
            $resourcePath = str_replace(
                '{' . 'appId' . '}',
                ObjectSerializer::toPathValue($app_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getWebhookEventNames
     *
     * Get all webhook subscription event names
     *
     * @param  string $app_id app_id (required)
     *
     * @throws \Flipdish\\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Flipdish\\Client\Models\RestApiStringArrayResult
     */
    public function getWebhookEventNames($app_id)
    {
        list($response) = $this->getWebhookEventNamesWithHttpInfo($app_id);
        return $response;
    }

    /**
     * Operation getWebhookEventNamesWithHttpInfo
     *
     * Get all webhook subscription event names
     *
     * @param  string $app_id (required)
     *
     * @throws \Flipdish\\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Flipdish\\Client\Models\RestApiStringArrayResult, HTTP status code, HTTP response headers (array of strings)
     */
    public function getWebhookEventNamesWithHttpInfo($app_id)
    {
        $returnType = '\Flipdish\\Client\Models\RestApiStringArrayResult';
        $request = $this->getWebhookEventNamesRequest($app_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Flipdish\\Client\Models\RestApiStringArrayResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Flipdish\\Client\Models\RestApiErrorResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Flipdish\\Client\Models\RestApiUnauthorizedResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Flipdish\\Client\Models\RestApiForbiddenResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getWebhookEventNamesAsync
     *
     * Get all webhook subscription event names
     *
     * @param  string $app_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getWebhookEventNamesAsync($app_id)
    {
        return $this->getWebhookEventNamesAsyncWithHttpInfo($app_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getWebhookEventNamesAsyncWithHttpInfo
     *
     * Get all webhook subscription event names
     *
     * @param  string $app_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getWebhookEventNamesAsyncWithHttpInfo($app_id)
    {
        $returnType = '\Flipdish\\Client\Models\RestApiStringArrayResult';
        $request = $this->getWebhookEventNamesRequest($app_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getWebhookEventNames'
     *
     * @param  string $app_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getWebhookEventNamesRequest($app_id)
    {
        // verify the required parameter 'app_id' is set
        if ($app_id === null || (is_array($app_id) && count($app_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $app_id when calling getWebhookEventNames'
            );
        }

        $resourcePath = '/api/v1.0/{appId}/webhooks/events';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($app_id !== null) {
            $resourcePath = str_replace(
                '{' . 'appId' . '}',
                ObjectSerializer::toPathValue($app_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getWebhookEventNamesBySubscriptionId
     *
     * Get your webhook subscriptions selected event names
     *
     * @param  string $oauth_app_id Oauth App identifier (required)
     * @param  int $webhook_subscription_id Webhook subscription identifier (required)
     * @param  string $app_id app_id (required)
     *
     * @throws \Flipdish\\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Flipdish\\Client\Models\RestApiStringArrayResult
     */
    public function getWebhookEventNamesBySubscriptionId($oauth_app_id, $webhook_subscription_id, $app_id)
    {
        list($response) = $this->getWebhookEventNamesBySubscriptionIdWithHttpInfo($oauth_app_id, $webhook_subscription_id, $app_id);
        return $response;
    }

    /**
     * Operation getWebhookEventNamesBySubscriptionIdWithHttpInfo
     *
     * Get your webhook subscriptions selected event names
     *
     * @param  string $oauth_app_id Oauth App identifier (required)
     * @param  int $webhook_subscription_id Webhook subscription identifier (required)
     * @param  string $app_id (required)
     *
     * @throws \Flipdish\\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Flipdish\\Client\Models\RestApiStringArrayResult, HTTP status code, HTTP response headers (array of strings)
     */
    public function getWebhookEventNamesBySubscriptionIdWithHttpInfo($oauth_app_id, $webhook_subscription_id, $app_id)
    {
        $returnType = '\Flipdish\\Client\Models\RestApiStringArrayResult';
        $request = $this->getWebhookEventNamesBySubscriptionIdRequest($oauth_app_id, $webhook_subscription_id, $app_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Flipdish\\Client\Models\RestApiStringArrayResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Flipdish\\Client\Models\RestApiErrorResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Flipdish\\Client\Models\RestApiUnauthorizedResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Flipdish\\Client\Models\RestApiForbiddenResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getWebhookEventNamesBySubscriptionIdAsync
     *
     * Get your webhook subscriptions selected event names
     *
     * @param  string $oauth_app_id Oauth App identifier (required)
     * @param  int $webhook_subscription_id Webhook subscription identifier (required)
     * @param  string $app_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getWebhookEventNamesBySubscriptionIdAsync($oauth_app_id, $webhook_subscription_id, $app_id)
    {
        return $this->getWebhookEventNamesBySubscriptionIdAsyncWithHttpInfo($oauth_app_id, $webhook_subscription_id, $app_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getWebhookEventNamesBySubscriptionIdAsyncWithHttpInfo
     *
     * Get your webhook subscriptions selected event names
     *
     * @param  string $oauth_app_id Oauth App identifier (required)
     * @param  int $webhook_subscription_id Webhook subscription identifier (required)
     * @param  string $app_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getWebhookEventNamesBySubscriptionIdAsyncWithHttpInfo($oauth_app_id, $webhook_subscription_id, $app_id)
    {
        $returnType = '\Flipdish\\Client\Models\RestApiStringArrayResult';
        $request = $this->getWebhookEventNamesBySubscriptionIdRequest($oauth_app_id, $webhook_subscription_id, $app_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getWebhookEventNamesBySubscriptionId'
     *
     * @param  string $oauth_app_id Oauth App identifier (required)
     * @param  int $webhook_subscription_id Webhook subscription identifier (required)
     * @param  string $app_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getWebhookEventNamesBySubscriptionIdRequest($oauth_app_id, $webhook_subscription_id, $app_id)
    {
        // verify the required parameter 'oauth_app_id' is set
        if ($oauth_app_id === null || (is_array($oauth_app_id) && count($oauth_app_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $oauth_app_id when calling getWebhookEventNamesBySubscriptionId'
            );
        }
        // verify the required parameter 'webhook_subscription_id' is set
        if ($webhook_subscription_id === null || (is_array($webhook_subscription_id) && count($webhook_subscription_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $webhook_subscription_id when calling getWebhookEventNamesBySubscriptionId'
            );
        }
        // verify the required parameter 'app_id' is set
        if ($app_id === null || (is_array($app_id) && count($app_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $app_id when calling getWebhookEventNamesBySubscriptionId'
            );
        }

        $resourcePath = '/api/v1.0/{appId}/webhooks/{oauthAppId}/subscriptions/{webhookSubscriptionId}/events';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($oauth_app_id !== null) {
            $resourcePath = str_replace(
                '{' . 'oauthAppId' . '}',
                ObjectSerializer::toPathValue($oauth_app_id),
                $resourcePath
            );
        }
        // path params
        if ($webhook_subscription_id !== null) {
            $resourcePath = str_replace(
                '{' . 'webhookSubscriptionId' . '}',
                ObjectSerializer::toPathValue($webhook_subscription_id),
                $resourcePath
            );
        }
        // path params
        if ($app_id !== null) {
            $resourcePath = str_replace(
                '{' . 'appId' . '}',
                ObjectSerializer::toPathValue($app_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getWebhookEventSample
     *
     * Get a sample event from a webhook subscription
     *
     * @param  string $event_name event_name (required)
     * @param  string $app_id app_id (required)
     * @param  string $oauth_app_id oauth_app_id (required)
     * @param  string $webhook_subscription_id webhook_subscription_id (required)
     * @param  string $version version (optional)
     *
     * @throws \Flipdish\\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Flipdish\\Client\Models\WebhookEventSample
     */
    public function getWebhookEventSample($event_name, $app_id, $oauth_app_id, $webhook_subscription_id, $version = null)
    {
        list($response) = $this->getWebhookEventSampleWithHttpInfo($event_name, $app_id, $oauth_app_id, $webhook_subscription_id, $version);
        return $response;
    }

    /**
     * Operation getWebhookEventSampleWithHttpInfo
     *
     * Get a sample event from a webhook subscription
     *
     * @param  string $event_name (required)
     * @param  string $app_id (required)
     * @param  string $oauth_app_id (required)
     * @param  string $webhook_subscription_id (required)
     * @param  string $version (optional)
     *
     * @throws \Flipdish\\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Flipdish\\Client\Models\WebhookEventSample, HTTP status code, HTTP response headers (array of strings)
     */
    public function getWebhookEventSampleWithHttpInfo($event_name, $app_id, $oauth_app_id, $webhook_subscription_id, $version = null)
    {
        $returnType = '\Flipdish\\Client\Models\WebhookEventSample';
        $request = $this->getWebhookEventSampleRequest($event_name, $app_id, $oauth_app_id, $webhook_subscription_id, $version);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Flipdish\\Client\Models\WebhookEventSample',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Flipdish\\Client\Models\RestApiErrorResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Flipdish\\Client\Models\RestApiUnauthorizedResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Flipdish\\Client\Models\RestApiForbiddenResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getWebhookEventSampleAsync
     *
     * Get a sample event from a webhook subscription
     *
     * @param  string $event_name (required)
     * @param  string $app_id (required)
     * @param  string $oauth_app_id (required)
     * @param  string $webhook_subscription_id (required)
     * @param  string $version (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getWebhookEventSampleAsync($event_name, $app_id, $oauth_app_id, $webhook_subscription_id, $version = null)
    {
        return $this->getWebhookEventSampleAsyncWithHttpInfo($event_name, $app_id, $oauth_app_id, $webhook_subscription_id, $version)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getWebhookEventSampleAsyncWithHttpInfo
     *
     * Get a sample event from a webhook subscription
     *
     * @param  string $event_name (required)
     * @param  string $app_id (required)
     * @param  string $oauth_app_id (required)
     * @param  string $webhook_subscription_id (required)
     * @param  string $version (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getWebhookEventSampleAsyncWithHttpInfo($event_name, $app_id, $oauth_app_id, $webhook_subscription_id, $version = null)
    {
        $returnType = '\Flipdish\\Client\Models\WebhookEventSample';
        $request = $this->getWebhookEventSampleRequest($event_name, $app_id, $oauth_app_id, $webhook_subscription_id, $version);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getWebhookEventSample'
     *
     * @param  string $event_name (required)
     * @param  string $app_id (required)
     * @param  string $oauth_app_id (required)
     * @param  string $webhook_subscription_id (required)
     * @param  string $version (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getWebhookEventSampleRequest($event_name, $app_id, $oauth_app_id, $webhook_subscription_id, $version = null)
    {
        // verify the required parameter 'event_name' is set
        if ($event_name === null || (is_array($event_name) && count($event_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $event_name when calling getWebhookEventSample'
            );
        }
        // verify the required parameter 'app_id' is set
        if ($app_id === null || (is_array($app_id) && count($app_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $app_id when calling getWebhookEventSample'
            );
        }
        // verify the required parameter 'oauth_app_id' is set
        if ($oauth_app_id === null || (is_array($oauth_app_id) && count($oauth_app_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $oauth_app_id when calling getWebhookEventSample'
            );
        }
        // verify the required parameter 'webhook_subscription_id' is set
        if ($webhook_subscription_id === null || (is_array($webhook_subscription_id) && count($webhook_subscription_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $webhook_subscription_id when calling getWebhookEventSample'
            );
        }

        $resourcePath = '/api/v1.0/{appId}/webhooks/{oauthAppId}/subscriptions/{webhookSubscriptionId}/events/{eventName}/test';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($version !== null) {
            $queryParams['version'] = ObjectSerializer::toQueryValue($version);
        }

        // path params
        if ($event_name !== null) {
            $resourcePath = str_replace(
                '{' . 'eventName' . '}',
                ObjectSerializer::toPathValue($event_name),
                $resourcePath
            );
        }
        // path params
        if ($app_id !== null) {
            $resourcePath = str_replace(
                '{' . 'appId' . '}',
                ObjectSerializer::toPathValue($app_id),
                $resourcePath
            );
        }
        // path params
        if ($oauth_app_id !== null) {
            $resourcePath = str_replace(
                '{' . 'oauthAppId' . '}',
                ObjectSerializer::toPathValue($oauth_app_id),
                $resourcePath
            );
        }
        // path params
        if ($webhook_subscription_id !== null) {
            $resourcePath = str_replace(
                '{' . 'webhookSubscriptionId' . '}',
                ObjectSerializer::toPathValue($webhook_subscription_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getWebhookLogs
     *
     * Get logs for your webhook subscription
     *
     * @param  string $oauth_app_id Oauth App identifier (required)
     * @param  int $webhook_subscription_id Webhook subscription identifier (required)
     * @param  \DateTime $start Start time (required)
     * @param  \DateTime $end End time (required)
     * @param  string $app_id app_id (required)
     * @param  int $page Page number (optional)
     * @param  int $limit Page size (optional)
     *
     * @throws \Flipdish\\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Flipdish\\Client\Models\RestApiPaginationResultWebhookLog
     */
    public function getWebhookLogs($oauth_app_id, $webhook_subscription_id, $start, $end, $app_id, $page = null, $limit = null)
    {
        list($response) = $this->getWebhookLogsWithHttpInfo($oauth_app_id, $webhook_subscription_id, $start, $end, $app_id, $page, $limit);
        return $response;
    }

    /**
     * Operation getWebhookLogsWithHttpInfo
     *
     * Get logs for your webhook subscription
     *
     * @param  string $oauth_app_id Oauth App identifier (required)
     * @param  int $webhook_subscription_id Webhook subscription identifier (required)
     * @param  \DateTime $start Start time (required)
     * @param  \DateTime $end End time (required)
     * @param  string $app_id (required)
     * @param  int $page Page number (optional)
     * @param  int $limit Page size (optional)
     *
     * @throws \Flipdish\\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Flipdish\\Client\Models\RestApiPaginationResultWebhookLog, HTTP status code, HTTP response headers (array of strings)
     */
    public function getWebhookLogsWithHttpInfo($oauth_app_id, $webhook_subscription_id, $start, $end, $app_id, $page = null, $limit = null)
    {
        $returnType = '\Flipdish\\Client\Models\RestApiPaginationResultWebhookLog';
        $request = $this->getWebhookLogsRequest($oauth_app_id, $webhook_subscription_id, $start, $end, $app_id, $page, $limit);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Flipdish\\Client\Models\RestApiPaginationResultWebhookLog',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Flipdish\\Client\Models\RestApiErrorResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Flipdish\\Client\Models\RestApiUnauthorizedResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Flipdish\\Client\Models\RestApiForbiddenResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getWebhookLogsAsync
     *
     * Get logs for your webhook subscription
     *
     * @param  string $oauth_app_id Oauth App identifier (required)
     * @param  int $webhook_subscription_id Webhook subscription identifier (required)
     * @param  \DateTime $start Start time (required)
     * @param  \DateTime $end End time (required)
     * @param  string $app_id (required)
     * @param  int $page Page number (optional)
     * @param  int $limit Page size (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getWebhookLogsAsync($oauth_app_id, $webhook_subscription_id, $start, $end, $app_id, $page = null, $limit = null)
    {
        return $this->getWebhookLogsAsyncWithHttpInfo($oauth_app_id, $webhook_subscription_id, $start, $end, $app_id, $page, $limit)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getWebhookLogsAsyncWithHttpInfo
     *
     * Get logs for your webhook subscription
     *
     * @param  string $oauth_app_id Oauth App identifier (required)
     * @param  int $webhook_subscription_id Webhook subscription identifier (required)
     * @param  \DateTime $start Start time (required)
     * @param  \DateTime $end End time (required)
     * @param  string $app_id (required)
     * @param  int $page Page number (optional)
     * @param  int $limit Page size (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getWebhookLogsAsyncWithHttpInfo($oauth_app_id, $webhook_subscription_id, $start, $end, $app_id, $page = null, $limit = null)
    {
        $returnType = '\Flipdish\\Client\Models\RestApiPaginationResultWebhookLog';
        $request = $this->getWebhookLogsRequest($oauth_app_id, $webhook_subscription_id, $start, $end, $app_id, $page, $limit);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getWebhookLogs'
     *
     * @param  string $oauth_app_id Oauth App identifier (required)
     * @param  int $webhook_subscription_id Webhook subscription identifier (required)
     * @param  \DateTime $start Start time (required)
     * @param  \DateTime $end End time (required)
     * @param  string $app_id (required)
     * @param  int $page Page number (optional)
     * @param  int $limit Page size (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getWebhookLogsRequest($oauth_app_id, $webhook_subscription_id, $start, $end, $app_id, $page = null, $limit = null)
    {
        // verify the required parameter 'oauth_app_id' is set
        if ($oauth_app_id === null || (is_array($oauth_app_id) && count($oauth_app_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $oauth_app_id when calling getWebhookLogs'
            );
        }
        // verify the required parameter 'webhook_subscription_id' is set
        if ($webhook_subscription_id === null || (is_array($webhook_subscription_id) && count($webhook_subscription_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $webhook_subscription_id when calling getWebhookLogs'
            );
        }
        // verify the required parameter 'start' is set
        if ($start === null || (is_array($start) && count($start) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $start when calling getWebhookLogs'
            );
        }
        // verify the required parameter 'end' is set
        if ($end === null || (is_array($end) && count($end) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $end when calling getWebhookLogs'
            );
        }
        // verify the required parameter 'app_id' is set
        if ($app_id === null || (is_array($app_id) && count($app_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $app_id when calling getWebhookLogs'
            );
        }

        $resourcePath = '/api/v1.0/{appId}/webhooks/{oauthAppId}/subscriptions/{webhookSubscriptionId}/logs';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($start !== null) {
            $queryParams['start'] = ObjectSerializer::toQueryValue($start);
        }
        // query params
        if ($end !== null) {
            $queryParams['end'] = ObjectSerializer::toQueryValue($end);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = ObjectSerializer::toQueryValue($page);
        }
        // query params
        if ($limit !== null) {
            $queryParams['limit'] = ObjectSerializer::toQueryValue($limit);
        }

        // path params
        if ($oauth_app_id !== null) {
            $resourcePath = str_replace(
                '{' . 'oauthAppId' . '}',
                ObjectSerializer::toPathValue($oauth_app_id),
                $resourcePath
            );
        }
        // path params
        if ($webhook_subscription_id !== null) {
            $resourcePath = str_replace(
                '{' . 'webhookSubscriptionId' . '}',
                ObjectSerializer::toPathValue($webhook_subscription_id),
                $resourcePath
            );
        }
        // path params
        if ($app_id !== null) {
            $resourcePath = str_replace(
                '{' . 'appId' . '}',
                ObjectSerializer::toPathValue($app_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getWebhookSubscriptions
     *
     * Get all webhook subscriptions by your Oauth App id
     *
     * @param  string $oauth_app_id Oauth App identifier (required)
     * @param  string $app_id app_id (required)
     * @param  int $page  (optional)
     * @param  int $limit  (optional)
     *
     * @throws \Flipdish\\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Flipdish\\Client\Models\RestApiPaginationResultWebhookSubscription
     */
    public function getWebhookSubscriptions($oauth_app_id, $app_id, $page = null, $limit = null)
    {
        list($response) = $this->getWebhookSubscriptionsWithHttpInfo($oauth_app_id, $app_id, $page, $limit);
        return $response;
    }

    /**
     * Operation getWebhookSubscriptionsWithHttpInfo
     *
     * Get all webhook subscriptions by your Oauth App id
     *
     * @param  string $oauth_app_id Oauth App identifier (required)
     * @param  string $app_id (required)
     * @param  int $page  (optional)
     * @param  int $limit  (optional)
     *
     * @throws \Flipdish\\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Flipdish\\Client\Models\RestApiPaginationResultWebhookSubscription, HTTP status code, HTTP response headers (array of strings)
     */
    public function getWebhookSubscriptionsWithHttpInfo($oauth_app_id, $app_id, $page = null, $limit = null)
    {
        $returnType = '\Flipdish\\Client\Models\RestApiPaginationResultWebhookSubscription';
        $request = $this->getWebhookSubscriptionsRequest($oauth_app_id, $app_id, $page, $limit);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Flipdish\\Client\Models\RestApiPaginationResultWebhookSubscription',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Flipdish\\Client\Models\RestApiErrorResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Flipdish\\Client\Models\RestApiUnauthorizedResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Flipdish\\Client\Models\RestApiForbiddenResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getWebhookSubscriptionsAsync
     *
     * Get all webhook subscriptions by your Oauth App id
     *
     * @param  string $oauth_app_id Oauth App identifier (required)
     * @param  string $app_id (required)
     * @param  int $page  (optional)
     * @param  int $limit  (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getWebhookSubscriptionsAsync($oauth_app_id, $app_id, $page = null, $limit = null)
    {
        return $this->getWebhookSubscriptionsAsyncWithHttpInfo($oauth_app_id, $app_id, $page, $limit)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getWebhookSubscriptionsAsyncWithHttpInfo
     *
     * Get all webhook subscriptions by your Oauth App id
     *
     * @param  string $oauth_app_id Oauth App identifier (required)
     * @param  string $app_id (required)
     * @param  int $page  (optional)
     * @param  int $limit  (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getWebhookSubscriptionsAsyncWithHttpInfo($oauth_app_id, $app_id, $page = null, $limit = null)
    {
        $returnType = '\Flipdish\\Client\Models\RestApiPaginationResultWebhookSubscription';
        $request = $this->getWebhookSubscriptionsRequest($oauth_app_id, $app_id, $page, $limit);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getWebhookSubscriptions'
     *
     * @param  string $oauth_app_id Oauth App identifier (required)
     * @param  string $app_id (required)
     * @param  int $page  (optional)
     * @param  int $limit  (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getWebhookSubscriptionsRequest($oauth_app_id, $app_id, $page = null, $limit = null)
    {
        // verify the required parameter 'oauth_app_id' is set
        if ($oauth_app_id === null || (is_array($oauth_app_id) && count($oauth_app_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $oauth_app_id when calling getWebhookSubscriptions'
            );
        }
        // verify the required parameter 'app_id' is set
        if ($app_id === null || (is_array($app_id) && count($app_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $app_id when calling getWebhookSubscriptions'
            );
        }

        $resourcePath = '/api/v1.0/{appId}/webhooks/{oauthAppId}/subscriptions';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($page !== null) {
            $queryParams['page'] = ObjectSerializer::toQueryValue($page);
        }
        // query params
        if ($limit !== null) {
            $queryParams['limit'] = ObjectSerializer::toQueryValue($limit);
        }

        // path params
        if ($oauth_app_id !== null) {
            $resourcePath = str_replace(
                '{' . 'oauthAppId' . '}',
                ObjectSerializer::toPathValue($oauth_app_id),
                $resourcePath
            );
        }
        // path params
        if ($app_id !== null) {
            $resourcePath = str_replace(
                '{' . 'appId' . '}',
                ObjectSerializer::toPathValue($app_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateWebhookSubscription
     *
     * Update a webhook subscription object
     *
     * @param  string $oauth_app_id Oauth App identifier (required)
     * @param  int $webhook_subscription_id Webhook subscription identifier (required)
     * @param  \Flipdish\\Client\Models\WebhookSubscription $webhook_subscription Webhook subscription object (required)
     * @param  string $app_id app_id (required)
     *
     * @throws \Flipdish\\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function updateWebhookSubscription($oauth_app_id, $webhook_subscription_id, $webhook_subscription, $app_id)
    {
        $this->updateWebhookSubscriptionWithHttpInfo($oauth_app_id, $webhook_subscription_id, $webhook_subscription, $app_id);
    }

    /**
     * Operation updateWebhookSubscriptionWithHttpInfo
     *
     * Update a webhook subscription object
     *
     * @param  string $oauth_app_id Oauth App identifier (required)
     * @param  int $webhook_subscription_id Webhook subscription identifier (required)
     * @param  \Flipdish\\Client\Models\WebhookSubscription $webhook_subscription Webhook subscription object (required)
     * @param  string $app_id (required)
     *
     * @throws \Flipdish\\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateWebhookSubscriptionWithHttpInfo($oauth_app_id, $webhook_subscription_id, $webhook_subscription, $app_id)
    {
        $returnType = '';
        $request = $this->updateWebhookSubscriptionRequest($oauth_app_id, $webhook_subscription_id, $webhook_subscription, $app_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Flipdish\\Client\Models\RestApiErrorResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Flipdish\\Client\Models\RestApiUnauthorizedResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Flipdish\\Client\Models\RestApiForbiddenResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateWebhookSubscriptionAsync
     *
     * Update a webhook subscription object
     *
     * @param  string $oauth_app_id Oauth App identifier (required)
     * @param  int $webhook_subscription_id Webhook subscription identifier (required)
     * @param  \Flipdish\\Client\Models\WebhookSubscription $webhook_subscription Webhook subscription object (required)
     * @param  string $app_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateWebhookSubscriptionAsync($oauth_app_id, $webhook_subscription_id, $webhook_subscription, $app_id)
    {
        return $this->updateWebhookSubscriptionAsyncWithHttpInfo($oauth_app_id, $webhook_subscription_id, $webhook_subscription, $app_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateWebhookSubscriptionAsyncWithHttpInfo
     *
     * Update a webhook subscription object
     *
     * @param  string $oauth_app_id Oauth App identifier (required)
     * @param  int $webhook_subscription_id Webhook subscription identifier (required)
     * @param  \Flipdish\\Client\Models\WebhookSubscription $webhook_subscription Webhook subscription object (required)
     * @param  string $app_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateWebhookSubscriptionAsyncWithHttpInfo($oauth_app_id, $webhook_subscription_id, $webhook_subscription, $app_id)
    {
        $returnType = '';
        $request = $this->updateWebhookSubscriptionRequest($oauth_app_id, $webhook_subscription_id, $webhook_subscription, $app_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateWebhookSubscription'
     *
     * @param  string $oauth_app_id Oauth App identifier (required)
     * @param  int $webhook_subscription_id Webhook subscription identifier (required)
     * @param  \Flipdish\\Client\Models\WebhookSubscription $webhook_subscription Webhook subscription object (required)
     * @param  string $app_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateWebhookSubscriptionRequest($oauth_app_id, $webhook_subscription_id, $webhook_subscription, $app_id)
    {
        // verify the required parameter 'oauth_app_id' is set
        if ($oauth_app_id === null || (is_array($oauth_app_id) && count($oauth_app_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $oauth_app_id when calling updateWebhookSubscription'
            );
        }
        // verify the required parameter 'webhook_subscription_id' is set
        if ($webhook_subscription_id === null || (is_array($webhook_subscription_id) && count($webhook_subscription_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $webhook_subscription_id when calling updateWebhookSubscription'
            );
        }
        // verify the required parameter 'webhook_subscription' is set
        if ($webhook_subscription === null || (is_array($webhook_subscription) && count($webhook_subscription) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $webhook_subscription when calling updateWebhookSubscription'
            );
        }
        // verify the required parameter 'app_id' is set
        if ($app_id === null || (is_array($app_id) && count($app_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $app_id when calling updateWebhookSubscription'
            );
        }

        $resourcePath = '/api/v1.0/{appId}/webhooks/{oauthAppId}/subscriptions/{webhookSubscriptionId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($oauth_app_id !== null) {
            $resourcePath = str_replace(
                '{' . 'oauthAppId' . '}',
                ObjectSerializer::toPathValue($oauth_app_id),
                $resourcePath
            );
        }
        // path params
        if ($webhook_subscription_id !== null) {
            $resourcePath = str_replace(
                '{' . 'webhookSubscriptionId' . '}',
                ObjectSerializer::toPathValue($webhook_subscription_id),
                $resourcePath
            );
        }
        // path params
        if ($app_id !== null) {
            $resourcePath = str_replace(
                '{' . 'appId' . '}',
                ObjectSerializer::toPathValue($app_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($webhook_subscription)) {
            $_tempBody = $webhook_subscription;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml'],
                ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
