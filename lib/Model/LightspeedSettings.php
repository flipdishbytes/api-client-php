<?php
/**
 * LightspeedSettings
 *
 * PHP version 5
 *
 * @category Class
 * @package  Flipdish\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Flipdish Open API v1.0
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.2
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Flipdish\Client\Model;

use \ArrayAccess;
use \Flipdish\Client\ObjectSerializer;

/**
 * LightspeedSettings Class Doc Comment
 *
 * @category Class
 * @description Ligthspeed store settings
 * @package  Flipdish\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class LightspeedSettings implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'LightspeedSettings';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'company_id' => 'string',
        'enabled' => 'bool',
        'estimated_minutes_for_delivery' => 'int',
        'estimated_minutes_for_collection' => 'int',
        'geographic_location' => 'string',
        'establishment' => 'bool',
        'voucher_id' => 'string',
        'delivery_fee_id' => 'string',
        'processing_fee_id' => 'string',
        'price_type' => 'string',
        'menu_id' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'company_id' => null,
        'enabled' => null,
        'estimated_minutes_for_delivery' => 'int32',
        'estimated_minutes_for_collection' => 'int32',
        'geographic_location' => null,
        'establishment' => null,
        'voucher_id' => null,
        'delivery_fee_id' => null,
        'processing_fee_id' => null,
        'price_type' => null,
        'menu_id' => 'int32'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'company_id' => 'CompanyId',
        'enabled' => 'Enabled',
        'estimated_minutes_for_delivery' => 'EstimatedMinutesForDelivery',
        'estimated_minutes_for_collection' => 'EstimatedMinutesForCollection',
        'geographic_location' => 'GeographicLocation',
        'establishment' => 'Establishment',
        'voucher_id' => 'VoucherId',
        'delivery_fee_id' => 'DeliveryFeeId',
        'processing_fee_id' => 'ProcessingFeeId',
        'price_type' => 'PriceType',
        'menu_id' => 'MenuId'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'company_id' => 'setCompanyId',
        'enabled' => 'setEnabled',
        'estimated_minutes_for_delivery' => 'setEstimatedMinutesForDelivery',
        'estimated_minutes_for_collection' => 'setEstimatedMinutesForCollection',
        'geographic_location' => 'setGeographicLocation',
        'establishment' => 'setEstablishment',
        'voucher_id' => 'setVoucherId',
        'delivery_fee_id' => 'setDeliveryFeeId',
        'processing_fee_id' => 'setProcessingFeeId',
        'price_type' => 'setPriceType',
        'menu_id' => 'setMenuId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'company_id' => 'getCompanyId',
        'enabled' => 'getEnabled',
        'estimated_minutes_for_delivery' => 'getEstimatedMinutesForDelivery',
        'estimated_minutes_for_collection' => 'getEstimatedMinutesForCollection',
        'geographic_location' => 'getGeographicLocation',
        'establishment' => 'getEstablishment',
        'voucher_id' => 'getVoucherId',
        'delivery_fee_id' => 'getDeliveryFeeId',
        'processing_fee_id' => 'getProcessingFeeId',
        'price_type' => 'getPriceType',
        'menu_id' => 'getMenuId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const PRICE_TYPE__DEFAULT = 'Default';
    const PRICE_TYPE_TAKEAWAY = 'Takeaway';
    const PRICE_TYPE_DELIVERY = 'Delivery';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPriceTypeAllowableValues()
    {
        return [
            self::PRICE_TYPE__DEFAULT,
            self::PRICE_TYPE_TAKEAWAY,
            self::PRICE_TYPE_DELIVERY,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['company_id'] = isset($data['company_id']) ? $data['company_id'] : null;
        $this->container['enabled'] = isset($data['enabled']) ? $data['enabled'] : null;
        $this->container['estimated_minutes_for_delivery'] = isset($data['estimated_minutes_for_delivery']) ? $data['estimated_minutes_for_delivery'] : null;
        $this->container['estimated_minutes_for_collection'] = isset($data['estimated_minutes_for_collection']) ? $data['estimated_minutes_for_collection'] : null;
        $this->container['geographic_location'] = isset($data['geographic_location']) ? $data['geographic_location'] : null;
        $this->container['establishment'] = isset($data['establishment']) ? $data['establishment'] : null;
        $this->container['voucher_id'] = isset($data['voucher_id']) ? $data['voucher_id'] : null;
        $this->container['delivery_fee_id'] = isset($data['delivery_fee_id']) ? $data['delivery_fee_id'] : null;
        $this->container['processing_fee_id'] = isset($data['processing_fee_id']) ? $data['processing_fee_id'] : null;
        $this->container['price_type'] = isset($data['price_type']) ? $data['price_type'] : null;
        $this->container['menu_id'] = isset($data['menu_id']) ? $data['menu_id'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getPriceTypeAllowableValues();
        if (!is_null($this->container['price_type']) && !in_array($this->container['price_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'price_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets company_id
     *
     * @return string
     */
    public function getCompanyId()
    {
        return $this->container['company_id'];
    }

    /**
     * Sets company_id
     *
     * @param string $company_id Company Id
     *
     * @return $this
     */
    public function setCompanyId($company_id)
    {
        $this->container['company_id'] = $company_id;

        return $this;
    }

    /**
     * Gets enabled
     *
     * @return bool
     */
    public function getEnabled()
    {
        return $this->container['enabled'];
    }

    /**
     * Sets enabled
     *
     * @param bool $enabled Enabled
     *
     * @return $this
     */
    public function setEnabled($enabled)
    {
        $this->container['enabled'] = $enabled;

        return $this;
    }

    /**
     * Gets estimated_minutes_for_delivery
     *
     * @return int
     */
    public function getEstimatedMinutesForDelivery()
    {
        return $this->container['estimated_minutes_for_delivery'];
    }

    /**
     * Sets estimated_minutes_for_delivery
     *
     * @param int $estimated_minutes_for_delivery Estimated minutes for delivery
     *
     * @return $this
     */
    public function setEstimatedMinutesForDelivery($estimated_minutes_for_delivery)
    {
        $this->container['estimated_minutes_for_delivery'] = $estimated_minutes_for_delivery;

        return $this;
    }

    /**
     * Gets estimated_minutes_for_collection
     *
     * @return int
     */
    public function getEstimatedMinutesForCollection()
    {
        return $this->container['estimated_minutes_for_collection'];
    }

    /**
     * Sets estimated_minutes_for_collection
     *
     * @param int $estimated_minutes_for_collection Estimated minutes for collection
     *
     * @return $this
     */
    public function setEstimatedMinutesForCollection($estimated_minutes_for_collection)
    {
        $this->container['estimated_minutes_for_collection'] = $estimated_minutes_for_collection;

        return $this;
    }

    /**
     * Gets geographic_location
     *
     * @return string
     */
    public function getGeographicLocation()
    {
        return $this->container['geographic_location'];
    }

    /**
     * Sets geographic_location
     *
     * @param string $geographic_location Geographic location (euc1, nae1, euw2, ....))
     *
     * @return $this
     */
    public function setGeographicLocation($geographic_location)
    {
        $this->container['geographic_location'] = $geographic_location;

        return $this;
    }

    /**
     * Gets establishment
     *
     * @return bool
     */
    public function getEstablishment()
    {
        return $this->container['establishment'];
    }

    /**
     * Sets establishment
     *
     * @param bool $establishment Is the CompanyId an establishment (kind of the store of a group of store)
     *
     * @return $this
     */
    public function setEstablishment($establishment)
    {
        $this->container['establishment'] = $establishment;

        return $this;
    }

    /**
     * Gets voucher_id
     *
     * @return string
     */
    public function getVoucherId()
    {
        return $this->container['voucher_id'];
    }

    /**
     * Sets voucher_id
     *
     * @param string $voucher_id The Lightspeed voucher identifier to map with our
     *
     * @return $this
     */
    public function setVoucherId($voucher_id)
    {
        $this->container['voucher_id'] = $voucher_id;

        return $this;
    }

    /**
     * Gets delivery_fee_id
     *
     * @return string
     */
    public function getDeliveryFeeId()
    {
        return $this->container['delivery_fee_id'];
    }

    /**
     * Sets delivery_fee_id
     *
     * @param string $delivery_fee_id The Lightspeed delivery fee identifier to map with our
     *
     * @return $this
     */
    public function setDeliveryFeeId($delivery_fee_id)
    {
        $this->container['delivery_fee_id'] = $delivery_fee_id;

        return $this;
    }

    /**
     * Gets processing_fee_id
     *
     * @return string
     */
    public function getProcessingFeeId()
    {
        return $this->container['processing_fee_id'];
    }

    /**
     * Sets processing_fee_id
     *
     * @param string $processing_fee_id The Lightspeed processing fee identifier to map with our
     *
     * @return $this
     */
    public function setProcessingFeeId($processing_fee_id)
    {
        $this->container['processing_fee_id'] = $processing_fee_id;

        return $this;
    }

    /**
     * Gets price_type
     *
     * @return string
     */
    public function getPriceType()
    {
        return $this->container['price_type'];
    }

    /**
     * Sets price_type
     *
     * @param string $price_type Which price to choose from Lightspeed menu
     *
     * @return $this
     */
    public function setPriceType($price_type)
    {
        $allowedValues = $this->getPriceTypeAllowableValues();
        if (!is_null($price_type) && !in_array($price_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'price_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['price_type'] = $price_type;

        return $this;
    }

    /**
     * Gets menu_id
     *
     * @return int
     */
    public function getMenuId()
    {
        return $this->container['menu_id'];
    }

    /**
     * Sets menu_id
     *
     * @param int $menu_id The menu id of the store
     *
     * @return $this
     */
    public function setMenuId($menu_id)
    {
        $this->container['menu_id'] = $menu_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


