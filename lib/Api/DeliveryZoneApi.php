<?php
/**
 * DeliveryZoneApi
 * PHP version 5
 *
 * @category Class
 * @package  Flipdish\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Flipdish Open API v1.0
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.2
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Flipdish\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Flipdish\Client\ApiException;
use Flipdish\Client\Configuration;
use Flipdish\Client\HeaderSelector;
use Flipdish\Client\ObjectSerializer;

/**
 * DeliveryZoneApi Class Doc Comment
 *
 * @category Class
 * @package  Flipdish\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class DeliveryZoneApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation addDeliveryZone
     *
     * Adds a delivery zone to the store id
     *
     * @param  int $store_id Store Id to which the delivery zone will be added (required)
     * @param  \Flipdish\Client\Model\DeliveryZoneBase $delivery_zone_base Optional delivery zone, if not supplied will create a default zone (required)
     *
     * @throws \Flipdish\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Flipdish\Client\Model\RestApiResultDeliveryZone
     */
    public function addDeliveryZone($store_id, $delivery_zone_base)
    {
        list($response) = $this->addDeliveryZoneWithHttpInfo($store_id, $delivery_zone_base);
        return $response;
    }

    /**
     * Operation addDeliveryZoneWithHttpInfo
     *
     * Adds a delivery zone to the store id
     *
     * @param  int $store_id Store Id to which the delivery zone will be added (required)
     * @param  \Flipdish\Client\Model\DeliveryZoneBase $delivery_zone_base Optional delivery zone, if not supplied will create a default zone (required)
     *
     * @throws \Flipdish\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Flipdish\Client\Model\RestApiResultDeliveryZone, HTTP status code, HTTP response headers (array of strings)
     */
    public function addDeliveryZoneWithHttpInfo($store_id, $delivery_zone_base)
    {
        $returnType = '\Flipdish\Client\Model\RestApiResultDeliveryZone';
        $request = $this->addDeliveryZoneRequest($store_id, $delivery_zone_base);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Flipdish\Client\Model\RestApiResultDeliveryZone',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Flipdish\Client\Model\RestApiErrorResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Flipdish\Client\Model\RestApiUnauthorizedResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Flipdish\Client\Model\RestApiForbiddenResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation addDeliveryZoneAsync
     *
     * Adds a delivery zone to the store id
     *
     * @param  int $store_id Store Id to which the delivery zone will be added (required)
     * @param  \Flipdish\Client\Model\DeliveryZoneBase $delivery_zone_base Optional delivery zone, if not supplied will create a default zone (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addDeliveryZoneAsync($store_id, $delivery_zone_base)
    {
        return $this->addDeliveryZoneAsyncWithHttpInfo($store_id, $delivery_zone_base)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation addDeliveryZoneAsyncWithHttpInfo
     *
     * Adds a delivery zone to the store id
     *
     * @param  int $store_id Store Id to which the delivery zone will be added (required)
     * @param  \Flipdish\Client\Model\DeliveryZoneBase $delivery_zone_base Optional delivery zone, if not supplied will create a default zone (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addDeliveryZoneAsyncWithHttpInfo($store_id, $delivery_zone_base)
    {
        $returnType = '\Flipdish\Client\Model\RestApiResultDeliveryZone';
        $request = $this->addDeliveryZoneRequest($store_id, $delivery_zone_base);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'addDeliveryZone'
     *
     * @param  int $store_id Store Id to which the delivery zone will be added (required)
     * @param  \Flipdish\Client\Model\DeliveryZoneBase $delivery_zone_base Optional delivery zone, if not supplied will create a default zone (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function addDeliveryZoneRequest($store_id, $delivery_zone_base)
    {
        // verify the required parameter 'store_id' is set
        if ($store_id === null || (is_array($store_id) && count($store_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $store_id when calling addDeliveryZone'
            );
        }
        // verify the required parameter 'delivery_zone_base' is set
        if ($delivery_zone_base === null || (is_array($delivery_zone_base) && count($delivery_zone_base) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $delivery_zone_base when calling addDeliveryZone'
            );
        }

        $resourcePath = '/api/v1.0/stores/{storeId}/deliveryzones';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($store_id !== null) {
            $resourcePath = str_replace(
                '{' . 'storeId' . '}',
                ObjectSerializer::toPathValue($store_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($delivery_zone_base)) {
            $_tempBody = $delivery_zone_base;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml'],
                ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getDeliveryZones
     *
     * Get all the delivery zones associated with a store
     *
     * @param  int $store_id Store Id to which the delivery zones are associated (required)
     *
     * @throws \Flipdish\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Flipdish\Client\Model\RestApiArrayResultDeliveryZone
     */
    public function getDeliveryZones($store_id)
    {
        list($response) = $this->getDeliveryZonesWithHttpInfo($store_id);
        return $response;
    }

    /**
     * Operation getDeliveryZonesWithHttpInfo
     *
     * Get all the delivery zones associated with a store
     *
     * @param  int $store_id Store Id to which the delivery zones are associated (required)
     *
     * @throws \Flipdish\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Flipdish\Client\Model\RestApiArrayResultDeliveryZone, HTTP status code, HTTP response headers (array of strings)
     */
    public function getDeliveryZonesWithHttpInfo($store_id)
    {
        $returnType = '\Flipdish\Client\Model\RestApiArrayResultDeliveryZone';
        $request = $this->getDeliveryZonesRequest($store_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Flipdish\Client\Model\RestApiArrayResultDeliveryZone',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Flipdish\Client\Model\RestApiErrorResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Flipdish\Client\Model\RestApiUnauthorizedResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Flipdish\Client\Model\RestApiForbiddenResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getDeliveryZonesAsync
     *
     * Get all the delivery zones associated with a store
     *
     * @param  int $store_id Store Id to which the delivery zones are associated (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getDeliveryZonesAsync($store_id)
    {
        return $this->getDeliveryZonesAsyncWithHttpInfo($store_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getDeliveryZonesAsyncWithHttpInfo
     *
     * Get all the delivery zones associated with a store
     *
     * @param  int $store_id Store Id to which the delivery zones are associated (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getDeliveryZonesAsyncWithHttpInfo($store_id)
    {
        $returnType = '\Flipdish\Client\Model\RestApiArrayResultDeliveryZone';
        $request = $this->getDeliveryZonesRequest($store_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getDeliveryZones'
     *
     * @param  int $store_id Store Id to which the delivery zones are associated (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getDeliveryZonesRequest($store_id)
    {
        // verify the required parameter 'store_id' is set
        if ($store_id === null || (is_array($store_id) && count($store_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $store_id when calling getDeliveryZones'
            );
        }

        $resourcePath = '/api/v1.0/stores/{storeId}/deliveryzones';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($store_id !== null) {
            $resourcePath = str_replace(
                '{' . 'storeId' . '}',
                ObjectSerializer::toPathValue($store_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation removeDeliveryZone
     *
     * Removes the existing delivery zone
     *
     * @param  int $store_id Store Id to which the delivery zone belongs (required)
     * @param  int $delivery_zone_id Delivery zone id to be removed (required)
     *
     * @throws \Flipdish\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function removeDeliveryZone($store_id, $delivery_zone_id)
    {
        $this->removeDeliveryZoneWithHttpInfo($store_id, $delivery_zone_id);
    }

    /**
     * Operation removeDeliveryZoneWithHttpInfo
     *
     * Removes the existing delivery zone
     *
     * @param  int $store_id Store Id to which the delivery zone belongs (required)
     * @param  int $delivery_zone_id Delivery zone id to be removed (required)
     *
     * @throws \Flipdish\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function removeDeliveryZoneWithHttpInfo($store_id, $delivery_zone_id)
    {
        $returnType = '';
        $request = $this->removeDeliveryZoneRequest($store_id, $delivery_zone_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Flipdish\Client\Model\RestApiErrorResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Flipdish\Client\Model\RestApiUnauthorizedResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Flipdish\Client\Model\RestApiForbiddenResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation removeDeliveryZoneAsync
     *
     * Removes the existing delivery zone
     *
     * @param  int $store_id Store Id to which the delivery zone belongs (required)
     * @param  int $delivery_zone_id Delivery zone id to be removed (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function removeDeliveryZoneAsync($store_id, $delivery_zone_id)
    {
        return $this->removeDeliveryZoneAsyncWithHttpInfo($store_id, $delivery_zone_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation removeDeliveryZoneAsyncWithHttpInfo
     *
     * Removes the existing delivery zone
     *
     * @param  int $store_id Store Id to which the delivery zone belongs (required)
     * @param  int $delivery_zone_id Delivery zone id to be removed (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function removeDeliveryZoneAsyncWithHttpInfo($store_id, $delivery_zone_id)
    {
        $returnType = '';
        $request = $this->removeDeliveryZoneRequest($store_id, $delivery_zone_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'removeDeliveryZone'
     *
     * @param  int $store_id Store Id to which the delivery zone belongs (required)
     * @param  int $delivery_zone_id Delivery zone id to be removed (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function removeDeliveryZoneRequest($store_id, $delivery_zone_id)
    {
        // verify the required parameter 'store_id' is set
        if ($store_id === null || (is_array($store_id) && count($store_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $store_id when calling removeDeliveryZone'
            );
        }
        // verify the required parameter 'delivery_zone_id' is set
        if ($delivery_zone_id === null || (is_array($delivery_zone_id) && count($delivery_zone_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $delivery_zone_id when calling removeDeliveryZone'
            );
        }

        $resourcePath = '/api/v1.0/stores/{storeId}/deliveryzones/{deliveryZoneId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($store_id !== null) {
            $resourcePath = str_replace(
                '{' . 'storeId' . '}',
                ObjectSerializer::toPathValue($store_id),
                $resourcePath
            );
        }
        // path params
        if ($delivery_zone_id !== null) {
            $resourcePath = str_replace(
                '{' . 'deliveryZoneId' . '}',
                ObjectSerializer::toPathValue($delivery_zone_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateDeliveryZone
     *
     * Updates the existing delivery zone
     *
     * @param  int $store_id Store Id to which the delivery zone belongs (required)
     * @param  int $delivery_zone_id Delivery zone id to be updated (required)
     * @param  \Flipdish\Client\Model\DeliveryZoneBase $delivery_zone Delta of delivery zone parameters that need to be changed (required)
     *
     * @throws \Flipdish\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Flipdish\Client\Model\RestApiResultDeliveryZone
     */
    public function updateDeliveryZone($store_id, $delivery_zone_id, $delivery_zone)
    {
        list($response) = $this->updateDeliveryZoneWithHttpInfo($store_id, $delivery_zone_id, $delivery_zone);
        return $response;
    }

    /**
     * Operation updateDeliveryZoneWithHttpInfo
     *
     * Updates the existing delivery zone
     *
     * @param  int $store_id Store Id to which the delivery zone belongs (required)
     * @param  int $delivery_zone_id Delivery zone id to be updated (required)
     * @param  \Flipdish\Client\Model\DeliveryZoneBase $delivery_zone Delta of delivery zone parameters that need to be changed (required)
     *
     * @throws \Flipdish\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Flipdish\Client\Model\RestApiResultDeliveryZone, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateDeliveryZoneWithHttpInfo($store_id, $delivery_zone_id, $delivery_zone)
    {
        $returnType = '\Flipdish\Client\Model\RestApiResultDeliveryZone';
        $request = $this->updateDeliveryZoneRequest($store_id, $delivery_zone_id, $delivery_zone);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Flipdish\Client\Model\RestApiResultDeliveryZone',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Flipdish\Client\Model\RestApiErrorResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Flipdish\Client\Model\RestApiUnauthorizedResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Flipdish\Client\Model\RestApiForbiddenResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateDeliveryZoneAsync
     *
     * Updates the existing delivery zone
     *
     * @param  int $store_id Store Id to which the delivery zone belongs (required)
     * @param  int $delivery_zone_id Delivery zone id to be updated (required)
     * @param  \Flipdish\Client\Model\DeliveryZoneBase $delivery_zone Delta of delivery zone parameters that need to be changed (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateDeliveryZoneAsync($store_id, $delivery_zone_id, $delivery_zone)
    {
        return $this->updateDeliveryZoneAsyncWithHttpInfo($store_id, $delivery_zone_id, $delivery_zone)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateDeliveryZoneAsyncWithHttpInfo
     *
     * Updates the existing delivery zone
     *
     * @param  int $store_id Store Id to which the delivery zone belongs (required)
     * @param  int $delivery_zone_id Delivery zone id to be updated (required)
     * @param  \Flipdish\Client\Model\DeliveryZoneBase $delivery_zone Delta of delivery zone parameters that need to be changed (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateDeliveryZoneAsyncWithHttpInfo($store_id, $delivery_zone_id, $delivery_zone)
    {
        $returnType = '\Flipdish\Client\Model\RestApiResultDeliveryZone';
        $request = $this->updateDeliveryZoneRequest($store_id, $delivery_zone_id, $delivery_zone);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateDeliveryZone'
     *
     * @param  int $store_id Store Id to which the delivery zone belongs (required)
     * @param  int $delivery_zone_id Delivery zone id to be updated (required)
     * @param  \Flipdish\Client\Model\DeliveryZoneBase $delivery_zone Delta of delivery zone parameters that need to be changed (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateDeliveryZoneRequest($store_id, $delivery_zone_id, $delivery_zone)
    {
        // verify the required parameter 'store_id' is set
        if ($store_id === null || (is_array($store_id) && count($store_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $store_id when calling updateDeliveryZone'
            );
        }
        // verify the required parameter 'delivery_zone_id' is set
        if ($delivery_zone_id === null || (is_array($delivery_zone_id) && count($delivery_zone_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $delivery_zone_id when calling updateDeliveryZone'
            );
        }
        // verify the required parameter 'delivery_zone' is set
        if ($delivery_zone === null || (is_array($delivery_zone) && count($delivery_zone) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $delivery_zone when calling updateDeliveryZone'
            );
        }

        $resourcePath = '/api/v1.0/stores/{storeId}/deliveryzones/{deliveryZoneId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($store_id !== null) {
            $resourcePath = str_replace(
                '{' . 'storeId' . '}',
                ObjectSerializer::toPathValue($store_id),
                $resourcePath
            );
        }
        // path params
        if ($delivery_zone_id !== null) {
            $resourcePath = str_replace(
                '{' . 'deliveryZoneId' . '}',
                ObjectSerializer::toPathValue($delivery_zone_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($delivery_zone)) {
            $_tempBody = $delivery_zone;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml'],
                ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
